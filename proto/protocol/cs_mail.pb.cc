// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* mail_del_all_type_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_del_all_type_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_del_all_type_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_del_all_type_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_set_multi_mail_status_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_set_multi_mail_status_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_set_multi_mail_status_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_set_multi_mail_status_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_private_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_private_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_private_mail_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_private_mail_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_all_type_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_all_type_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_del_all_type_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_del_all_type_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_global_mail_debug_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_global_mail_debug_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_private_mail_debug_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_private_mail_debug_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_private_mail_debug_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_private_mail_debug_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_global_mail_debug_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_global_mail_debug_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_group_mail_debug_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_group_mail_debug_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_group_mail_debug_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_group_mail_debug_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_family_mail_debug_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_family_mail_debug_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* mail_send_family_mail_debug_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mail_send_family_mail_debug_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_cs_mul_mails_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_cs_mul_mails_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_cs_mul_mails_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_cs_mul_mails_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* del_cs_mails_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  del_cs_mails_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_cs_mul_mails_state_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_cs_mul_mails_state_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_cs_mul_mails_state_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_cs_mul_mails_state_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_all_mail_cs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_all_mail_cs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_all_mail_cs_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_all_mail_cs_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_all_mail_cs_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_all_mail_cs_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_cs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_cs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* send_mail_cs_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  send_mail_cs_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fmail_2eproto() {
  protobuf_AddDesc_cs_5fmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_mail.proto");
  GOOGLE_CHECK(file != NULL);
  mail_del_all_type_req_descriptor_ = file->message_type(0);
  static const int mail_del_all_type_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_req, mail_uuids_),
  };
  mail_del_all_type_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_del_all_type_req_descriptor_,
      mail_del_all_type_req::default_instance_,
      mail_del_all_type_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_del_all_type_req));
  mail_del_all_type_ack_descriptor_ = file->message_type(1);
  static const int mail_del_all_type_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ack, mail_uuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ack, fail_mail_uuids_),
  };
  mail_del_all_type_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_del_all_type_ack_descriptor_,
      mail_del_all_type_ack::default_instance_,
      mail_del_all_type_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_del_all_type_ack));
  mail_set_multi_mail_status_req_descriptor_ = file->message_type(2);
  static const int mail_set_multi_mail_status_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_req, mail_uuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_req, to_set_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_req, to_set_attach_getted_),
  };
  mail_set_multi_mail_status_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_set_multi_mail_status_req_descriptor_,
      mail_set_multi_mail_status_req::default_instance_,
      mail_set_multi_mail_status_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_set_multi_mail_status_req));
  mail_set_multi_mail_status_ack_descriptor_ = file->message_type(3);
  static const int mail_set_multi_mail_status_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, mail_uuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, to_set_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, to_set_attach_getted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, fail_mail_uuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, rec_codes_),
  };
  mail_set_multi_mail_status_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_set_multi_mail_status_ack_descriptor_,
      mail_set_multi_mail_status_ack::default_instance_,
      mail_set_multi_mail_status_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_set_multi_mail_status_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_set_multi_mail_status_ack));
  mail_send_private_mail_req_descriptor_ = file->message_type(4);
  static const int mail_send_private_mail_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, to_role_name_),
  };
  mail_send_private_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_private_mail_req_descriptor_,
      mail_send_private_mail_req::default_instance_,
      mail_send_private_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_private_mail_req));
  mail_send_private_mail_ack_descriptor_ = file->message_type(5);
  static const int mail_send_private_mail_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_ack, rec_code_),
  };
  mail_send_private_mail_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_private_mail_ack_descriptor_,
      mail_send_private_mail_ack::default_instance_,
      mail_send_private_mail_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_private_mail_ack));
  mail_all_type_ntf_descriptor_ = file->message_type(6);
  static const int mail_all_type_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_all_type_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_all_type_ntf, mails_),
  };
  mail_all_type_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_all_type_ntf_descriptor_,
      mail_all_type_ntf::default_instance_,
      mail_all_type_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_all_type_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_all_type_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_all_type_ntf));
  mail_del_all_type_ntf_descriptor_ = file->message_type(7);
  static const int mail_del_all_type_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ntf, mail_uuids_),
  };
  mail_del_all_type_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_del_all_type_ntf_descriptor_,
      mail_del_all_type_ntf::default_instance_,
      mail_del_all_type_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_del_all_type_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_del_all_type_ntf));
  mail_send_global_mail_debug_req_descriptor_ = file->message_type(8);
  static const int mail_send_global_mail_debug_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_req, global_mail_config_id_),
  };
  mail_send_global_mail_debug_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_global_mail_debug_req_descriptor_,
      mail_send_global_mail_debug_req::default_instance_,
      mail_send_global_mail_debug_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_global_mail_debug_req));
  mail_send_private_mail_debug_req_descriptor_ = file->message_type(9);
  static const int mail_send_private_mail_debug_req_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, is_send_private_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, is_send_system_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, item_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, is_public_server_test_),
  };
  mail_send_private_mail_debug_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_private_mail_debug_req_descriptor_,
      mail_send_private_mail_debug_req::default_instance_,
      mail_send_private_mail_debug_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_private_mail_debug_req));
  mail_send_private_mail_debug_ack_descriptor_ = file->message_type(10);
  static const int mail_send_private_mail_debug_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_ack, rec_code_),
  };
  mail_send_private_mail_debug_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_private_mail_debug_ack_descriptor_,
      mail_send_private_mail_debug_ack::default_instance_,
      mail_send_private_mail_debug_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_private_mail_debug_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_private_mail_debug_ack));
  mail_send_global_mail_debug_ack_descriptor_ = file->message_type(11);
  static const int mail_send_global_mail_debug_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_ack, rec_code_),
  };
  mail_send_global_mail_debug_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_global_mail_debug_ack_descriptor_,
      mail_send_global_mail_debug_ack::default_instance_,
      mail_send_global_mail_debug_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_global_mail_debug_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_global_mail_debug_ack));
  mail_send_group_mail_debug_req_descriptor_ = file->message_type(12);
  static const int mail_send_group_mail_debug_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_req, group_mail_to_role_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_req, group_mail_config_id_),
  };
  mail_send_group_mail_debug_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_group_mail_debug_req_descriptor_,
      mail_send_group_mail_debug_req::default_instance_,
      mail_send_group_mail_debug_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_group_mail_debug_req));
  mail_send_group_mail_debug_ack_descriptor_ = file->message_type(13);
  static const int mail_send_group_mail_debug_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_ack, rec_code_),
  };
  mail_send_group_mail_debug_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_group_mail_debug_ack_descriptor_,
      mail_send_group_mail_debug_ack::default_instance_,
      mail_send_group_mail_debug_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_group_mail_debug_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_group_mail_debug_ack));
  mail_send_family_mail_debug_req_descriptor_ = file->message_type(14);
  static const int mail_send_family_mail_debug_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_req, family_mail_family_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_req, family_mail_config_id_),
  };
  mail_send_family_mail_debug_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_family_mail_debug_req_descriptor_,
      mail_send_family_mail_debug_req::default_instance_,
      mail_send_family_mail_debug_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_family_mail_debug_req));
  mail_send_family_mail_debug_ack_descriptor_ = file->message_type(15);
  static const int mail_send_family_mail_debug_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_ack, rec_code_),
  };
  mail_send_family_mail_debug_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mail_send_family_mail_debug_ack_descriptor_,
      mail_send_family_mail_debug_ack::default_instance_,
      mail_send_family_mail_debug_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mail_send_family_mail_debug_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mail_send_family_mail_debug_ack));
  del_cs_mul_mails_req_descriptor_ = file->message_type(16);
  static const int del_cs_mul_mails_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_req, mail_id_s_),
  };
  del_cs_mul_mails_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_cs_mul_mails_req_descriptor_,
      del_cs_mul_mails_req::default_instance_,
      del_cs_mul_mails_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_cs_mul_mails_req));
  del_cs_mul_mails_ack_descriptor_ = file->message_type(17);
  static const int del_cs_mul_mails_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_ack, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_ack, error_),
  };
  del_cs_mul_mails_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_cs_mul_mails_ack_descriptor_,
      del_cs_mul_mails_ack::default_instance_,
      del_cs_mul_mails_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mul_mails_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_cs_mul_mails_ack));
  del_cs_mails_ntf_descriptor_ = file->message_type(18);
  static const int del_cs_mails_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mails_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mails_ntf, mail_id_s_),
  };
  del_cs_mails_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      del_cs_mails_ntf_descriptor_,
      del_cs_mails_ntf::default_instance_,
      del_cs_mails_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mails_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(del_cs_mails_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(del_cs_mails_ntf));
  sync_cs_mul_mails_state_req_descriptor_ = file->message_type(19);
  static const int sync_cs_mul_mails_state_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_req, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_req, read_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_req, get_attach_state_),
  };
  sync_cs_mul_mails_state_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_cs_mul_mails_state_req_descriptor_,
      sync_cs_mul_mails_state_req::default_instance_,
      sync_cs_mul_mails_state_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_cs_mul_mails_state_req));
  sync_cs_mul_mails_state_ack_descriptor_ = file->message_type(20);
  static const int sync_cs_mul_mails_state_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, mail_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, read_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, get_attach_state_),
  };
  sync_cs_mul_mails_state_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_cs_mul_mails_state_ack_descriptor_,
      sync_cs_mul_mails_state_ack::default_instance_,
      sync_cs_mul_mails_state_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_cs_mul_mails_state_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_cs_mul_mails_state_ack));
  get_all_mail_cs_req_descriptor_ = file->message_type(21);
  static const int get_all_mail_cs_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_req, protoid_),
  };
  get_all_mail_cs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_all_mail_cs_req_descriptor_,
      get_all_mail_cs_req::default_instance_,
      get_all_mail_cs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_all_mail_cs_req));
  get_all_mail_cs_ack_descriptor_ = file->message_type(22);
  static const int get_all_mail_cs_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ack, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ack, error_),
  };
  get_all_mail_cs_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_all_mail_cs_ack_descriptor_,
      get_all_mail_cs_ack::default_instance_,
      get_all_mail_cs_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_all_mail_cs_ack));
  get_all_mail_cs_ntf_descriptor_ = file->message_type(23);
  static const int get_all_mail_cs_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ntf, mails_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ntf, del_mail_ids_),
  };
  get_all_mail_cs_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_all_mail_cs_ntf_descriptor_,
      get_all_mail_cs_ntf::default_instance_,
      get_all_mail_cs_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_mail_cs_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_all_mail_cs_ntf));
  send_mail_cs_req_descriptor_ = file->message_type(24);
  static const int send_mail_cs_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, to_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, type_),
  };
  send_mail_cs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_cs_req_descriptor_,
      send_mail_cs_req::default_instance_,
      send_mail_cs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_cs_req));
  send_mail_cs_ack_descriptor_ = file->message_type(25);
  static const int send_mail_cs_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_ack, mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_ack, error_),
  };
  send_mail_cs_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      send_mail_cs_ack_descriptor_,
      send_mail_cs_ack::default_instance_,
      send_mail_cs_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(send_mail_cs_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(send_mail_cs_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_del_all_type_req_descriptor_, &mail_del_all_type_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_del_all_type_ack_descriptor_, &mail_del_all_type_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_set_multi_mail_status_req_descriptor_, &mail_set_multi_mail_status_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_set_multi_mail_status_ack_descriptor_, &mail_set_multi_mail_status_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_private_mail_req_descriptor_, &mail_send_private_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_private_mail_ack_descriptor_, &mail_send_private_mail_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_all_type_ntf_descriptor_, &mail_all_type_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_del_all_type_ntf_descriptor_, &mail_del_all_type_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_global_mail_debug_req_descriptor_, &mail_send_global_mail_debug_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_private_mail_debug_req_descriptor_, &mail_send_private_mail_debug_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_private_mail_debug_ack_descriptor_, &mail_send_private_mail_debug_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_global_mail_debug_ack_descriptor_, &mail_send_global_mail_debug_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_group_mail_debug_req_descriptor_, &mail_send_group_mail_debug_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_group_mail_debug_ack_descriptor_, &mail_send_group_mail_debug_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_family_mail_debug_req_descriptor_, &mail_send_family_mail_debug_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mail_send_family_mail_debug_ack_descriptor_, &mail_send_family_mail_debug_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_cs_mul_mails_req_descriptor_, &del_cs_mul_mails_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_cs_mul_mails_ack_descriptor_, &del_cs_mul_mails_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    del_cs_mails_ntf_descriptor_, &del_cs_mails_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_cs_mul_mails_state_req_descriptor_, &sync_cs_mul_mails_state_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_cs_mul_mails_state_ack_descriptor_, &sync_cs_mul_mails_state_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_all_mail_cs_req_descriptor_, &get_all_mail_cs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_all_mail_cs_ack_descriptor_, &get_all_mail_cs_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_all_mail_cs_ntf_descriptor_, &get_all_mail_cs_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_cs_req_descriptor_, &send_mail_cs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    send_mail_cs_ack_descriptor_, &send_mail_cs_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fmail_2eproto() {
  delete mail_del_all_type_req::default_instance_;
  delete mail_del_all_type_req_reflection_;
  delete mail_del_all_type_ack::default_instance_;
  delete mail_del_all_type_ack_reflection_;
  delete mail_set_multi_mail_status_req::default_instance_;
  delete mail_set_multi_mail_status_req_reflection_;
  delete mail_set_multi_mail_status_ack::default_instance_;
  delete mail_set_multi_mail_status_ack_reflection_;
  delete mail_send_private_mail_req::default_instance_;
  delete mail_send_private_mail_req_reflection_;
  delete mail_send_private_mail_ack::default_instance_;
  delete mail_send_private_mail_ack_reflection_;
  delete mail_all_type_ntf::default_instance_;
  delete mail_all_type_ntf_reflection_;
  delete mail_del_all_type_ntf::default_instance_;
  delete mail_del_all_type_ntf_reflection_;
  delete mail_send_global_mail_debug_req::default_instance_;
  delete mail_send_global_mail_debug_req_reflection_;
  delete mail_send_private_mail_debug_req::default_instance_;
  delete mail_send_private_mail_debug_req_reflection_;
  delete mail_send_private_mail_debug_ack::default_instance_;
  delete mail_send_private_mail_debug_ack_reflection_;
  delete mail_send_global_mail_debug_ack::default_instance_;
  delete mail_send_global_mail_debug_ack_reflection_;
  delete mail_send_group_mail_debug_req::default_instance_;
  delete mail_send_group_mail_debug_req_reflection_;
  delete mail_send_group_mail_debug_ack::default_instance_;
  delete mail_send_group_mail_debug_ack_reflection_;
  delete mail_send_family_mail_debug_req::default_instance_;
  delete mail_send_family_mail_debug_req_reflection_;
  delete mail_send_family_mail_debug_ack::default_instance_;
  delete mail_send_family_mail_debug_ack_reflection_;
  delete del_cs_mul_mails_req::default_instance_;
  delete del_cs_mul_mails_req_reflection_;
  delete del_cs_mul_mails_ack::default_instance_;
  delete del_cs_mul_mails_ack_reflection_;
  delete del_cs_mails_ntf::default_instance_;
  delete del_cs_mails_ntf_reflection_;
  delete sync_cs_mul_mails_state_req::default_instance_;
  delete sync_cs_mul_mails_state_req_reflection_;
  delete sync_cs_mul_mails_state_ack::default_instance_;
  delete sync_cs_mul_mails_state_ack_reflection_;
  delete get_all_mail_cs_req::default_instance_;
  delete get_all_mail_cs_req_reflection_;
  delete get_all_mail_cs_ack::default_instance_;
  delete get_all_mail_cs_ack_reflection_;
  delete get_all_mail_cs_ntf::default_instance_;
  delete get_all_mail_cs_ntf_reflection_;
  delete send_mail_cs_req::default_instance_;
  delete send_mail_cs_req_reflection_;
  delete send_mail_cs_ack::default_instance_;
  delete send_mail_cs_ack_reflection_;
}

void protobuf_AddDesc_cs_5fmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5factivitytype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcs_mail.proto\022\013SProtoSpace\032\021cm_roletyp"
    "e.proto\032\023cm_battletype.proto\032\025cm_activit"
    "ytype.proto\032\023cm_socialtype.proto\032\020cs_pro"
    "toid.proto\032\022cs_errorcode.proto\"o\n\025mail_d"
    "el_all_type_req\022B\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\030mail_del_all_type_req"
    "_id\022\022\n\nmail_uuids\030\002 \003(\004\"\210\001\n\025mail_del_all"
    "_type_ack\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\030mail_del_all_type_ack_id\022\022\n"
    "\nmail_uuids\030\002 \003(\004\022\027\n\017fail_mail_uuids\030\003 \003"
    "(\004\"\264\001\n\036mail_set_multi_mail_status_req\022K\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "!mail_set_multi_mail_status_req_id\022\022\n\nma"
    "il_uuids\030\002 \003(\004\022\023\n\013to_set_read\030\003 \001(\010\022\034\n\024t"
    "o_set_attach_getted\030\004 \001(\010\"\373\001\n\036mail_set_m"
    "ulti_mail_status_ack\022K\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:!mail_set_multi_m"
    "ail_status_ack_id\022\022\n\nmail_uuids\030\002 \003(\004\022\023\n"
    "\013to_set_read\030\003 \001(\010\022\034\n\024to_set_attach_gett"
    "ed\030\004 \001(\010\022\027\n\017fail_mail_uuids\030\005 \003(\004\022,\n\trec"
    "_codes\030\006 \001(\0162\031.SProtoSpace.MsgErrorType\""
    "\331\001\n\032mail_send_private_mail_req\022G\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\035mail_s"
    "end_private_mail_req_id\022(\n\004mail\030\002 \001(\0132\032."
    "SProtoSpace.mail_instance\022\r\n\005title\030\003 \001(\t"
    "\022\017\n\007content\030\004 \001(\t\022\022\n\nto_role_id\030\005 \001(\004\022\024\n"
    "\014to_role_name\030\006 \001(\t\"\222\001\n\032mail_send_privat"
    "e_mail_ack\022G\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\035mail_send_private_mail_ack"
    "_id\022+\n\010rec_code\030\002 \001(\0162\031.SProtoSpace.MsgE"
    "rrorType\"~\n\021mail_all_type_ntf\022>\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\024mail_al"
    "l_type_ntf_id\022)\n\005mails\030\002 \003(\0132\032.SProtoSpa"
    "ce.mail_instance\"o\n\025mail_del_all_type_nt"
    "f\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\030mail_del_all_type_ntf_id\022\022\n\nmail_uu"
    "ids\030\002 \003(\004\"\216\001\n\037mail_send_global_mail_debu"
    "g_req\022L\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\"mail_send_global_mail_debug_req"
    "_id\022\035\n\025global_mail_config_id\030\002 \001(\005\"\317\002\n m"
    "ail_send_private_mail_debug_req\022M\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:#mail_"
    "send_private_mail_debug_req_id\022\034\n\024is_sen"
    "d_private_mail\030\003 \001(\005\022\033\n\023is_send_system_m"
    "ail\030\004 \001(\005\022\024\n\014to_role_name\030\005 \001(\t\022\022\n\nto_ro"
    "le_id\030\006 \001(\004\022\020\n\010item_ids\030\007 \003(\005\022\023\n\013item_co"
    "unts\030\010 \003(\005\022\r\n\005title\030\t \001(\t\022\017\n\007content\030\n \001"
    "(\t\022\021\n\tconfig_id\030\013 \001(\005\022\035\n\025is_public_serve"
    "r_test\030\014 \001(\005\"\203\001\n mail_send_private_mail_"
    "debug_ack\022M\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:#mail_send_private_mail_debu"
    "g_ack_id\022\020\n\010rec_code\030\002 \001(\021\"\201\001\n\037mail_send"
    "_global_mail_debug_ack\022L\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\"mail_send_glob"
    "al_mail_debug_ack_id\022\020\n\010rec_code\030\002 \001(\021\"\253"
    "\001\n\036mail_send_group_mail_debug_req\022K\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:!mai"
    "l_send_group_mail_debug_req_id\022\036\n\026group_"
    "mail_to_role_ids\030\002 \003(\004\022\034\n\024group_mail_con"
    "fig_id\030\003 \001(\005\"\177\n\036mail_send_group_mail_deb"
    "ug_ack\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:!mail_send_group_mail_debug_ack"
    "_id\022\020\n\010rec_code\030\002 \001(\021\"\255\001\n\037mail_send_fami"
    "ly_mail_debug_req\022L\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\"mail_send_family_ma"
    "il_debug_req_id\022\035\n\025family_mail_family_id"
    "\030\002 \001(\004\022\035\n\025family_mail_config_id\030\003 \001(\005\"\201\001"
    "\n\037mail_send_family_mail_debug_ack\022L\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\"mai"
    "l_send_family_mail_debug_ack_id\022\020\n\010rec_c"
    "ode\030\002 \001(\021\"l\n\024del_cs_mul_mails_req\022A\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027del"
    "_cs_mul_mails_req_id\022\021\n\tmail_id_s\030\002 \003(\004\""
    "\226\001\n\024del_cs_mul_mails_ack\022A\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\027del_cs_mul_m"
    "ails_ack_id\022\021\n\tmail_id_s\030\002 \003(\004\022(\n\005error\030"
    "\003 \001(\0162\031.SProtoSpace.MsgErrorType\"d\n\020del_"
    "cs_mails_ntf\022=\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\023del_cs_mails_ntf_id\022\021\n\tm"
    "ail_id_s\030\002 \003(\004\"\250\001\n\033sync_cs_mul_mails_sta"
    "te_req\022H\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\036sync_cs_mul_mails_state_req_id"
    "\022\021\n\tmail_id_s\030\002 \003(\004\022\022\n\nread_state\030\003 \001(\010\022"
    "\030\n\020get_attach_state\030\004 \001(\010\"\322\001\n\033sync_cs_mu"
    "l_mails_state_ack\022H\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\036sync_cs_mul_mails_s"
    "tate_ack_id\022\021\n\tmail_id_s\030\002 \003(\004\022(\n\005error\030"
    "\003 \001(\0162\031.SProtoSpace.MsgErrorType\022\022\n\nread"
    "_state\030\004 \001(\010\022\030\n\020get_attach_state\030\005 \001(\010\"W"
    "\n\023get_all_mail_cs_req\022@\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\026get_all_mail_cs"
    "_req_id\"\243\001\n\023get_all_mail_cs_ack\022@\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026get_a"
    "ll_mail_cs_ack_id\022 \n\005mails\030\002 \003(\0132\021.SProt"
    "oSpace.mail\022(\n\005error\030\003 \001(\0162\031.SProtoSpace"
    ".MsgErrorType\"\217\001\n\023get_all_mail_cs_ntf\022@\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\026get_all_mail_cs_ntf_id\022 \n\005mails\030\002 \003(\0132\021"
    ".SProtoSpace.mail\022\024\n\014del_mail_ids\030\003 \003(\004\""
    "\305\001\n\020send_mail_cs_req\022=\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\023send_mail_cs_req"
    "_id\022\022\n\nto_role_id\030\002 \001(\004\022\024\n\014to_role_name\030"
    "\003 \001(\t\022\r\n\005title\030\004 \001(\t\022\017\n\007content\030\005 \001(\t\022(\n"
    "\004type\030\006 \001(\0162\032.SProtoSpace.eSendMailType\""
    "\234\001\n\020send_mail_cs_ack\022=\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\023send_mail_cs_ack"
    "_id\022\037\n\004mail\030\002 \001(\0132\021.SProtoSpace.mail\022(\n\005"
    "error\030\003 \001(\0162\031.SProtoSpace.MsgErrorType", 4318);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_mail.proto", &protobuf_RegisterTypes);
  mail_del_all_type_req::default_instance_ = new mail_del_all_type_req();
  mail_del_all_type_ack::default_instance_ = new mail_del_all_type_ack();
  mail_set_multi_mail_status_req::default_instance_ = new mail_set_multi_mail_status_req();
  mail_set_multi_mail_status_ack::default_instance_ = new mail_set_multi_mail_status_ack();
  mail_send_private_mail_req::default_instance_ = new mail_send_private_mail_req();
  mail_send_private_mail_ack::default_instance_ = new mail_send_private_mail_ack();
  mail_all_type_ntf::default_instance_ = new mail_all_type_ntf();
  mail_del_all_type_ntf::default_instance_ = new mail_del_all_type_ntf();
  mail_send_global_mail_debug_req::default_instance_ = new mail_send_global_mail_debug_req();
  mail_send_private_mail_debug_req::default_instance_ = new mail_send_private_mail_debug_req();
  mail_send_private_mail_debug_ack::default_instance_ = new mail_send_private_mail_debug_ack();
  mail_send_global_mail_debug_ack::default_instance_ = new mail_send_global_mail_debug_ack();
  mail_send_group_mail_debug_req::default_instance_ = new mail_send_group_mail_debug_req();
  mail_send_group_mail_debug_ack::default_instance_ = new mail_send_group_mail_debug_ack();
  mail_send_family_mail_debug_req::default_instance_ = new mail_send_family_mail_debug_req();
  mail_send_family_mail_debug_ack::default_instance_ = new mail_send_family_mail_debug_ack();
  del_cs_mul_mails_req::default_instance_ = new del_cs_mul_mails_req();
  del_cs_mul_mails_ack::default_instance_ = new del_cs_mul_mails_ack();
  del_cs_mails_ntf::default_instance_ = new del_cs_mails_ntf();
  sync_cs_mul_mails_state_req::default_instance_ = new sync_cs_mul_mails_state_req();
  sync_cs_mul_mails_state_ack::default_instance_ = new sync_cs_mul_mails_state_ack();
  get_all_mail_cs_req::default_instance_ = new get_all_mail_cs_req();
  get_all_mail_cs_ack::default_instance_ = new get_all_mail_cs_ack();
  get_all_mail_cs_ntf::default_instance_ = new get_all_mail_cs_ntf();
  send_mail_cs_req::default_instance_ = new send_mail_cs_req();
  send_mail_cs_ack::default_instance_ = new send_mail_cs_ack();
  mail_del_all_type_req::default_instance_->InitAsDefaultInstance();
  mail_del_all_type_ack::default_instance_->InitAsDefaultInstance();
  mail_set_multi_mail_status_req::default_instance_->InitAsDefaultInstance();
  mail_set_multi_mail_status_ack::default_instance_->InitAsDefaultInstance();
  mail_send_private_mail_req::default_instance_->InitAsDefaultInstance();
  mail_send_private_mail_ack::default_instance_->InitAsDefaultInstance();
  mail_all_type_ntf::default_instance_->InitAsDefaultInstance();
  mail_del_all_type_ntf::default_instance_->InitAsDefaultInstance();
  mail_send_global_mail_debug_req::default_instance_->InitAsDefaultInstance();
  mail_send_private_mail_debug_req::default_instance_->InitAsDefaultInstance();
  mail_send_private_mail_debug_ack::default_instance_->InitAsDefaultInstance();
  mail_send_global_mail_debug_ack::default_instance_->InitAsDefaultInstance();
  mail_send_group_mail_debug_req::default_instance_->InitAsDefaultInstance();
  mail_send_group_mail_debug_ack::default_instance_->InitAsDefaultInstance();
  mail_send_family_mail_debug_req::default_instance_->InitAsDefaultInstance();
  mail_send_family_mail_debug_ack::default_instance_->InitAsDefaultInstance();
  del_cs_mul_mails_req::default_instance_->InitAsDefaultInstance();
  del_cs_mul_mails_ack::default_instance_->InitAsDefaultInstance();
  del_cs_mails_ntf::default_instance_->InitAsDefaultInstance();
  sync_cs_mul_mails_state_req::default_instance_->InitAsDefaultInstance();
  sync_cs_mul_mails_state_ack::default_instance_->InitAsDefaultInstance();
  get_all_mail_cs_req::default_instance_->InitAsDefaultInstance();
  get_all_mail_cs_ack::default_instance_->InitAsDefaultInstance();
  get_all_mail_cs_ntf::default_instance_->InitAsDefaultInstance();
  send_mail_cs_req::default_instance_->InitAsDefaultInstance();
  send_mail_cs_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fmail_2eproto {
  StaticDescriptorInitializer_cs_5fmail_2eproto() {
    protobuf_AddDesc_cs_5fmail_2eproto();
  }
} static_descriptor_initializer_cs_5fmail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mail_del_all_type_req::kProtoidFieldNumber;
const int mail_del_all_type_req::kMailUuidsFieldNumber;
#endif  // !_MSC_VER

mail_del_all_type_req::mail_del_all_type_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_del_all_type_req::InitAsDefaultInstance() {
}

mail_del_all_type_req::mail_del_all_type_req(const mail_del_all_type_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_del_all_type_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5973;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_del_all_type_req::~mail_del_all_type_req() {
  SharedDtor();
}

void mail_del_all_type_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_del_all_type_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_del_all_type_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_del_all_type_req_descriptor_;
}

const mail_del_all_type_req& mail_del_all_type_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_del_all_type_req* mail_del_all_type_req::default_instance_ = NULL;

mail_del_all_type_req* mail_del_all_type_req::New() const {
  return new mail_del_all_type_req;
}

void mail_del_all_type_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5973;
  }
  mail_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_del_all_type_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        break;
      }

      // repeated uint64 mail_uuids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_del_all_type_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_del_all_type_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_del_all_type_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 mail_uuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_uuids(i));
    }
    total_size += 1 * this->mail_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_del_all_type_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_del_all_type_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_del_all_type_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_del_all_type_req::MergeFrom(const mail_del_all_type_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_uuids_.MergeFrom(from.mail_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_del_all_type_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_del_all_type_req::CopyFrom(const mail_del_all_type_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_del_all_type_req::IsInitialized() const {

  return true;
}

void mail_del_all_type_req::Swap(mail_del_all_type_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_uuids_.Swap(&other->mail_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_del_all_type_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_del_all_type_req_descriptor_;
  metadata.reflection = mail_del_all_type_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_del_all_type_ack::kProtoidFieldNumber;
const int mail_del_all_type_ack::kMailUuidsFieldNumber;
const int mail_del_all_type_ack::kFailMailUuidsFieldNumber;
#endif  // !_MSC_VER

mail_del_all_type_ack::mail_del_all_type_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_del_all_type_ack::InitAsDefaultInstance() {
}

mail_del_all_type_ack::mail_del_all_type_ack(const mail_del_all_type_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_del_all_type_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5974;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_del_all_type_ack::~mail_del_all_type_ack() {
  SharedDtor();
}

void mail_del_all_type_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_del_all_type_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_del_all_type_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_del_all_type_ack_descriptor_;
}

const mail_del_all_type_ack& mail_del_all_type_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_del_all_type_ack* mail_del_all_type_ack::default_instance_ = NULL;

mail_del_all_type_ack* mail_del_all_type_ack::New() const {
  return new mail_del_all_type_ack;
}

void mail_del_all_type_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5974;
  }
  mail_uuids_.Clear();
  fail_mail_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_del_all_type_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        break;
      }

      // repeated uint64 mail_uuids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        if (input->ExpectTag(24)) goto parse_fail_mail_uuids;
        break;
      }

      // repeated uint64 fail_mail_uuids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fail_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_fail_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fail_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fail_mail_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_del_all_type_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_uuids(i), output);
  }

  // repeated uint64 fail_mail_uuids = 3;
  for (int i = 0; i < this->fail_mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->fail_mail_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_del_all_type_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_uuids(i), target);
  }

  // repeated uint64 fail_mail_uuids = 3;
  for (int i = 0; i < this->fail_mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->fail_mail_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_del_all_type_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 mail_uuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_uuids(i));
    }
    total_size += 1 * this->mail_uuids_size() + data_size;
  }

  // repeated uint64 fail_mail_uuids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->fail_mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fail_mail_uuids(i));
    }
    total_size += 1 * this->fail_mail_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_del_all_type_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_del_all_type_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_del_all_type_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_del_all_type_ack::MergeFrom(const mail_del_all_type_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_uuids_.MergeFrom(from.mail_uuids_);
  fail_mail_uuids_.MergeFrom(from.fail_mail_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_del_all_type_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_del_all_type_ack::CopyFrom(const mail_del_all_type_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_del_all_type_ack::IsInitialized() const {

  return true;
}

void mail_del_all_type_ack::Swap(mail_del_all_type_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_uuids_.Swap(&other->mail_uuids_);
    fail_mail_uuids_.Swap(&other->fail_mail_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_del_all_type_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_del_all_type_ack_descriptor_;
  metadata.reflection = mail_del_all_type_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_set_multi_mail_status_req::kProtoidFieldNumber;
const int mail_set_multi_mail_status_req::kMailUuidsFieldNumber;
const int mail_set_multi_mail_status_req::kToSetReadFieldNumber;
const int mail_set_multi_mail_status_req::kToSetAttachGettedFieldNumber;
#endif  // !_MSC_VER

mail_set_multi_mail_status_req::mail_set_multi_mail_status_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_set_multi_mail_status_req::InitAsDefaultInstance() {
}

mail_set_multi_mail_status_req::mail_set_multi_mail_status_req(const mail_set_multi_mail_status_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_set_multi_mail_status_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5962;
  to_set_read_ = false;
  to_set_attach_getted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_set_multi_mail_status_req::~mail_set_multi_mail_status_req() {
  SharedDtor();
}

void mail_set_multi_mail_status_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_set_multi_mail_status_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_set_multi_mail_status_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_set_multi_mail_status_req_descriptor_;
}

const mail_set_multi_mail_status_req& mail_set_multi_mail_status_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_set_multi_mail_status_req* mail_set_multi_mail_status_req::default_instance_ = NULL;

mail_set_multi_mail_status_req* mail_set_multi_mail_status_req::New() const {
  return new mail_set_multi_mail_status_req;
}

void mail_set_multi_mail_status_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5962;
    to_set_read_ = false;
    to_set_attach_getted_ = false;
  }
  mail_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_set_multi_mail_status_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        break;
      }

      // repeated uint64 mail_uuids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        if (input->ExpectTag(24)) goto parse_to_set_read;
        break;
      }

      // optional bool to_set_read = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_set_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_set_read_)));
          set_has_to_set_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_set_attach_getted;
        break;
      }

      // optional bool to_set_attach_getted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_set_attach_getted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_set_attach_getted_)));
          set_has_to_set_attach_getted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_set_multi_mail_status_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_uuids(i), output);
  }

  // optional bool to_set_read = 3;
  if (has_to_set_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->to_set_read(), output);
  }

  // optional bool to_set_attach_getted = 4;
  if (has_to_set_attach_getted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_set_attach_getted(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_set_multi_mail_status_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_uuids(i), target);
  }

  // optional bool to_set_read = 3;
  if (has_to_set_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->to_set_read(), target);
  }

  // optional bool to_set_attach_getted = 4;
  if (has_to_set_attach_getted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_set_attach_getted(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_set_multi_mail_status_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool to_set_read = 3;
    if (has_to_set_read()) {
      total_size += 1 + 1;
    }

    // optional bool to_set_attach_getted = 4;
    if (has_to_set_attach_getted()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_uuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_uuids(i));
    }
    total_size += 1 * this->mail_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_set_multi_mail_status_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_set_multi_mail_status_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_set_multi_mail_status_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_set_multi_mail_status_req::MergeFrom(const mail_set_multi_mail_status_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_uuids_.MergeFrom(from.mail_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_set_read()) {
      set_to_set_read(from.to_set_read());
    }
    if (from.has_to_set_attach_getted()) {
      set_to_set_attach_getted(from.to_set_attach_getted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_set_multi_mail_status_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_set_multi_mail_status_req::CopyFrom(const mail_set_multi_mail_status_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_set_multi_mail_status_req::IsInitialized() const {

  return true;
}

void mail_set_multi_mail_status_req::Swap(mail_set_multi_mail_status_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_uuids_.Swap(&other->mail_uuids_);
    std::swap(to_set_read_, other->to_set_read_);
    std::swap(to_set_attach_getted_, other->to_set_attach_getted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_set_multi_mail_status_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_set_multi_mail_status_req_descriptor_;
  metadata.reflection = mail_set_multi_mail_status_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_set_multi_mail_status_ack::kProtoidFieldNumber;
const int mail_set_multi_mail_status_ack::kMailUuidsFieldNumber;
const int mail_set_multi_mail_status_ack::kToSetReadFieldNumber;
const int mail_set_multi_mail_status_ack::kToSetAttachGettedFieldNumber;
const int mail_set_multi_mail_status_ack::kFailMailUuidsFieldNumber;
const int mail_set_multi_mail_status_ack::kRecCodesFieldNumber;
#endif  // !_MSC_VER

mail_set_multi_mail_status_ack::mail_set_multi_mail_status_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_set_multi_mail_status_ack::InitAsDefaultInstance() {
}

mail_set_multi_mail_status_ack::mail_set_multi_mail_status_ack(const mail_set_multi_mail_status_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_set_multi_mail_status_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5963;
  to_set_read_ = false;
  to_set_attach_getted_ = false;
  rec_codes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_set_multi_mail_status_ack::~mail_set_multi_mail_status_ack() {
  SharedDtor();
}

void mail_set_multi_mail_status_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_set_multi_mail_status_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_set_multi_mail_status_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_set_multi_mail_status_ack_descriptor_;
}

const mail_set_multi_mail_status_ack& mail_set_multi_mail_status_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_set_multi_mail_status_ack* mail_set_multi_mail_status_ack::default_instance_ = NULL;

mail_set_multi_mail_status_ack* mail_set_multi_mail_status_ack::New() const {
  return new mail_set_multi_mail_status_ack;
}

void mail_set_multi_mail_status_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5963;
    to_set_read_ = false;
    to_set_attach_getted_ = false;
    rec_codes_ = 0;
  }
  mail_uuids_.Clear();
  fail_mail_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_set_multi_mail_status_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        break;
      }

      // repeated uint64 mail_uuids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        if (input->ExpectTag(24)) goto parse_to_set_read;
        break;
      }

      // optional bool to_set_read = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_set_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_set_read_)));
          set_has_to_set_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_set_attach_getted;
        break;
      }

      // optional bool to_set_attach_getted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_set_attach_getted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_set_attach_getted_)));
          set_has_to_set_attach_getted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fail_mail_uuids;
        break;
      }

      // repeated uint64 fail_mail_uuids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fail_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_fail_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fail_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fail_mail_uuids;
        if (input->ExpectTag(48)) goto parse_rec_codes;
        break;
      }

      // optional .SProtoSpace.MsgErrorType rec_codes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_codes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_rec_codes(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_set_multi_mail_status_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_uuids(i), output);
  }

  // optional bool to_set_read = 3;
  if (has_to_set_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->to_set_read(), output);
  }

  // optional bool to_set_attach_getted = 4;
  if (has_to_set_attach_getted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_set_attach_getted(), output);
  }

  // repeated uint64 fail_mail_uuids = 5;
  for (int i = 0; i < this->fail_mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->fail_mail_uuids(i), output);
  }

  // optional .SProtoSpace.MsgErrorType rec_codes = 6;
  if (has_rec_codes()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rec_codes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_set_multi_mail_status_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_uuids(i), target);
  }

  // optional bool to_set_read = 3;
  if (has_to_set_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->to_set_read(), target);
  }

  // optional bool to_set_attach_getted = 4;
  if (has_to_set_attach_getted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_set_attach_getted(), target);
  }

  // repeated uint64 fail_mail_uuids = 5;
  for (int i = 0; i < this->fail_mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->fail_mail_uuids(i), target);
  }

  // optional .SProtoSpace.MsgErrorType rec_codes = 6;
  if (has_rec_codes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rec_codes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_set_multi_mail_status_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_set_multi_mail_status_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool to_set_read = 3;
    if (has_to_set_read()) {
      total_size += 1 + 1;
    }

    // optional bool to_set_attach_getted = 4;
    if (has_to_set_attach_getted()) {
      total_size += 1 + 1;
    }

    // optional .SProtoSpace.MsgErrorType rec_codes = 6;
    if (has_rec_codes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rec_codes());
    }

  }
  // repeated uint64 mail_uuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_uuids(i));
    }
    total_size += 1 * this->mail_uuids_size() + data_size;
  }

  // repeated uint64 fail_mail_uuids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->fail_mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fail_mail_uuids(i));
    }
    total_size += 1 * this->fail_mail_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_set_multi_mail_status_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_set_multi_mail_status_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_set_multi_mail_status_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_set_multi_mail_status_ack::MergeFrom(const mail_set_multi_mail_status_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_uuids_.MergeFrom(from.mail_uuids_);
  fail_mail_uuids_.MergeFrom(from.fail_mail_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_set_read()) {
      set_to_set_read(from.to_set_read());
    }
    if (from.has_to_set_attach_getted()) {
      set_to_set_attach_getted(from.to_set_attach_getted());
    }
    if (from.has_rec_codes()) {
      set_rec_codes(from.rec_codes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_set_multi_mail_status_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_set_multi_mail_status_ack::CopyFrom(const mail_set_multi_mail_status_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_set_multi_mail_status_ack::IsInitialized() const {

  return true;
}

void mail_set_multi_mail_status_ack::Swap(mail_set_multi_mail_status_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_uuids_.Swap(&other->mail_uuids_);
    std::swap(to_set_read_, other->to_set_read_);
    std::swap(to_set_attach_getted_, other->to_set_attach_getted_);
    fail_mail_uuids_.Swap(&other->fail_mail_uuids_);
    std::swap(rec_codes_, other->rec_codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_set_multi_mail_status_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_set_multi_mail_status_ack_descriptor_;
  metadata.reflection = mail_set_multi_mail_status_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_private_mail_req::kProtoidFieldNumber;
const int mail_send_private_mail_req::kMailFieldNumber;
const int mail_send_private_mail_req::kTitleFieldNumber;
const int mail_send_private_mail_req::kContentFieldNumber;
const int mail_send_private_mail_req::kToRoleIdFieldNumber;
const int mail_send_private_mail_req::kToRoleNameFieldNumber;
#endif  // !_MSC_VER

mail_send_private_mail_req::mail_send_private_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_private_mail_req::InitAsDefaultInstance() {
  mail_ = const_cast< ::SProtoSpace::mail_instance*>(&::SProtoSpace::mail_instance::default_instance());
}

mail_send_private_mail_req::mail_send_private_mail_req(const mail_send_private_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_private_mail_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5964;
  mail_ = NULL;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_role_id_ = GOOGLE_ULONGLONG(0);
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_private_mail_req::~mail_send_private_mail_req() {
  SharedDtor();
}

void mail_send_private_mail_req::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (this != default_instance_) {
    delete mail_;
  }
}

void mail_send_private_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_private_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_private_mail_req_descriptor_;
}

const mail_send_private_mail_req& mail_send_private_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_private_mail_req* mail_send_private_mail_req::default_instance_ = NULL;

mail_send_private_mail_req* mail_send_private_mail_req::New() const {
  return new mail_send_private_mail_req;
}

void mail_send_private_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5964;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::SProtoSpace::mail_instance::Clear();
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_private_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .SProtoSpace.mail_instance mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_private_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.mail_instance mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional uint64 to_role_id = 5;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->to_role_id(), output);
  }

  // optional string to_role_name = 6;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->to_role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_private_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.mail_instance mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint64 to_role_id = 5;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->to_role_id(), target);
  }

  // optional string to_role_name = 6;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->to_role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_private_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.mail_instance mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 to_role_id = 5;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string to_role_name = 6;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_private_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_private_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_private_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_private_mail_req::MergeFrom(const mail_send_private_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail()) {
      mutable_mail()->::SProtoSpace::mail_instance::MergeFrom(from.mail());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_private_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_private_mail_req::CopyFrom(const mail_send_private_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_private_mail_req::IsInitialized() const {

  return true;
}

void mail_send_private_mail_req::Swap(mail_send_private_mail_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_, other->mail_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_private_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_private_mail_req_descriptor_;
  metadata.reflection = mail_send_private_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_private_mail_ack::kProtoidFieldNumber;
const int mail_send_private_mail_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

mail_send_private_mail_ack::mail_send_private_mail_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_private_mail_ack::InitAsDefaultInstance() {
}

mail_send_private_mail_ack::mail_send_private_mail_ack(const mail_send_private_mail_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_private_mail_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5965;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_private_mail_ack::~mail_send_private_mail_ack() {
  SharedDtor();
}

void mail_send_private_mail_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_private_mail_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_private_mail_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_private_mail_ack_descriptor_;
}

const mail_send_private_mail_ack& mail_send_private_mail_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_private_mail_ack* mail_send_private_mail_ack::default_instance_ = NULL;

mail_send_private_mail_ack* mail_send_private_mail_ack::New() const {
  return new mail_send_private_mail_ack;
}

void mail_send_private_mail_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5965;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_private_mail_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_rec_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_private_mail_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.MsgErrorType rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_private_mail_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.MsgErrorType rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_private_mail_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_private_mail_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_private_mail_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_private_mail_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_private_mail_ack::MergeFrom(const mail_send_private_mail_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_private_mail_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_private_mail_ack::CopyFrom(const mail_send_private_mail_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_private_mail_ack::IsInitialized() const {

  return true;
}

void mail_send_private_mail_ack::Swap(mail_send_private_mail_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_private_mail_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_private_mail_ack_descriptor_;
  metadata.reflection = mail_send_private_mail_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_all_type_ntf::kProtoidFieldNumber;
const int mail_all_type_ntf::kMailsFieldNumber;
#endif  // !_MSC_VER

mail_all_type_ntf::mail_all_type_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_all_type_ntf::InitAsDefaultInstance() {
}

mail_all_type_ntf::mail_all_type_ntf(const mail_all_type_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_all_type_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5972;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_all_type_ntf::~mail_all_type_ntf() {
  SharedDtor();
}

void mail_all_type_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_all_type_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_all_type_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_all_type_ntf_descriptor_;
}

const mail_all_type_ntf& mail_all_type_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_all_type_ntf* mail_all_type_ntf::default_instance_ = NULL;

mail_all_type_ntf* mail_all_type_ntf::New() const {
  return new mail_all_type_ntf;
}

void mail_all_type_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5972;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_all_type_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_all_type_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .SProtoSpace.mail_instance mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_all_type_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_all_type_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.mail_instance mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_all_type_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_all_type_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.mail_instance mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_all_type_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_all_type_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.mail_instance mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_all_type_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_all_type_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_all_type_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_all_type_ntf::MergeFrom(const mail_all_type_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_all_type_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_all_type_ntf::CopyFrom(const mail_all_type_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_all_type_ntf::IsInitialized() const {

  return true;
}

void mail_all_type_ntf::Swap(mail_all_type_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mails_.Swap(&other->mails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_all_type_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_all_type_ntf_descriptor_;
  metadata.reflection = mail_all_type_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_del_all_type_ntf::kProtoidFieldNumber;
const int mail_del_all_type_ntf::kMailUuidsFieldNumber;
#endif  // !_MSC_VER

mail_del_all_type_ntf::mail_del_all_type_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_del_all_type_ntf::InitAsDefaultInstance() {
}

mail_del_all_type_ntf::mail_del_all_type_ntf(const mail_del_all_type_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_del_all_type_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5975;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_del_all_type_ntf::~mail_del_all_type_ntf() {
  SharedDtor();
}

void mail_del_all_type_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_del_all_type_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_del_all_type_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_del_all_type_ntf_descriptor_;
}

const mail_del_all_type_ntf& mail_del_all_type_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_del_all_type_ntf* mail_del_all_type_ntf::default_instance_ = NULL;

mail_del_all_type_ntf* mail_del_all_type_ntf::New() const {
  return new mail_del_all_type_ntf;
}

void mail_del_all_type_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5975;
  }
  mail_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_del_all_type_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        break;
      }

      // repeated uint64 mail_uuids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_del_all_type_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_del_all_type_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_uuids = 2;
  for (int i = 0; i < this->mail_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_del_all_type_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_del_all_type_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 mail_uuids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_uuids(i));
    }
    total_size += 1 * this->mail_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_del_all_type_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_del_all_type_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_del_all_type_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_del_all_type_ntf::MergeFrom(const mail_del_all_type_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_uuids_.MergeFrom(from.mail_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_del_all_type_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_del_all_type_ntf::CopyFrom(const mail_del_all_type_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_del_all_type_ntf::IsInitialized() const {

  return true;
}

void mail_del_all_type_ntf::Swap(mail_del_all_type_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_uuids_.Swap(&other->mail_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_del_all_type_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_del_all_type_ntf_descriptor_;
  metadata.reflection = mail_del_all_type_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_global_mail_debug_req::kProtoidFieldNumber;
const int mail_send_global_mail_debug_req::kGlobalMailConfigIdFieldNumber;
#endif  // !_MSC_VER

mail_send_global_mail_debug_req::mail_send_global_mail_debug_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_global_mail_debug_req::InitAsDefaultInstance() {
}

mail_send_global_mail_debug_req::mail_send_global_mail_debug_req(const mail_send_global_mail_debug_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_global_mail_debug_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5966;
  global_mail_config_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_global_mail_debug_req::~mail_send_global_mail_debug_req() {
  SharedDtor();
}

void mail_send_global_mail_debug_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_global_mail_debug_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_global_mail_debug_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_global_mail_debug_req_descriptor_;
}

const mail_send_global_mail_debug_req& mail_send_global_mail_debug_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_global_mail_debug_req* mail_send_global_mail_debug_req::default_instance_ = NULL;

mail_send_global_mail_debug_req* mail_send_global_mail_debug_req::New() const {
  return new mail_send_global_mail_debug_req;
}

void mail_send_global_mail_debug_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5966;
    global_mail_config_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_global_mail_debug_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_global_mail_config_id;
        break;
      }

      // optional int32 global_mail_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_global_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &global_mail_config_id_)));
          set_has_global_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_global_mail_debug_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 global_mail_config_id = 2;
  if (has_global_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->global_mail_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_global_mail_debug_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 global_mail_config_id = 2;
  if (has_global_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->global_mail_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_global_mail_debug_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 global_mail_config_id = 2;
    if (has_global_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->global_mail_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_global_mail_debug_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_global_mail_debug_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_global_mail_debug_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_global_mail_debug_req::MergeFrom(const mail_send_global_mail_debug_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_global_mail_config_id()) {
      set_global_mail_config_id(from.global_mail_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_global_mail_debug_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_global_mail_debug_req::CopyFrom(const mail_send_global_mail_debug_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_global_mail_debug_req::IsInitialized() const {

  return true;
}

void mail_send_global_mail_debug_req::Swap(mail_send_global_mail_debug_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(global_mail_config_id_, other->global_mail_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_global_mail_debug_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_global_mail_debug_req_descriptor_;
  metadata.reflection = mail_send_global_mail_debug_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_private_mail_debug_req::kProtoidFieldNumber;
const int mail_send_private_mail_debug_req::kIsSendPrivateMailFieldNumber;
const int mail_send_private_mail_debug_req::kIsSendSystemMailFieldNumber;
const int mail_send_private_mail_debug_req::kToRoleNameFieldNumber;
const int mail_send_private_mail_debug_req::kToRoleIdFieldNumber;
const int mail_send_private_mail_debug_req::kItemIdsFieldNumber;
const int mail_send_private_mail_debug_req::kItemCountsFieldNumber;
const int mail_send_private_mail_debug_req::kTitleFieldNumber;
const int mail_send_private_mail_debug_req::kContentFieldNumber;
const int mail_send_private_mail_debug_req::kConfigIdFieldNumber;
const int mail_send_private_mail_debug_req::kIsPublicServerTestFieldNumber;
#endif  // !_MSC_VER

mail_send_private_mail_debug_req::mail_send_private_mail_debug_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_private_mail_debug_req::InitAsDefaultInstance() {
}

mail_send_private_mail_debug_req::mail_send_private_mail_debug_req(const mail_send_private_mail_debug_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_private_mail_debug_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5976;
  is_send_private_mail_ = 0;
  is_send_system_mail_ = 0;
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_role_id_ = GOOGLE_ULONGLONG(0);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  config_id_ = 0;
  is_public_server_test_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_private_mail_debug_req::~mail_send_private_mail_debug_req() {
  SharedDtor();
}

void mail_send_private_mail_debug_req::SharedDtor() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void mail_send_private_mail_debug_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_private_mail_debug_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_private_mail_debug_req_descriptor_;
}

const mail_send_private_mail_debug_req& mail_send_private_mail_debug_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_private_mail_debug_req* mail_send_private_mail_debug_req::default_instance_ = NULL;

mail_send_private_mail_debug_req* mail_send_private_mail_debug_req::New() const {
  return new mail_send_private_mail_debug_req;
}

void mail_send_private_mail_debug_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5976;
    is_send_private_mail_ = 0;
    is_send_system_mail_ = 0;
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    config_id_ = 0;
    is_public_server_test_ = 0;
  }
  item_ids_.Clear();
  item_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_private_mail_debug_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_send_private_mail;
        break;
      }

      // optional int32 is_send_private_mail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send_private_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_send_private_mail_)));
          set_has_is_send_private_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_send_system_mail;
        break;
      }

      // optional int32 is_send_system_mail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_send_system_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_send_system_mail_)));
          set_has_is_send_system_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_ids;
        break;
      }

      // repeated int32 item_ids = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_item_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item_ids;
        if (input->ExpectTag(64)) goto parse_item_counts;
        break;
      }

      // repeated int32 item_counts = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_item_counts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_counts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_item_counts;
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional string title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_content;
        break;
      }

      // optional string content = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_config_id;
        break;
      }

      // optional int32 config_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_public_server_test;
        break;
      }

      // optional int32 is_public_server_test = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_public_server_test:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_public_server_test_)));
          set_has_is_public_server_test();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_private_mail_debug_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 is_send_private_mail = 3;
  if (has_is_send_private_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_send_private_mail(), output);
  }

  // optional int32 is_send_system_mail = 4;
  if (has_is_send_system_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->is_send_system_mail(), output);
  }

  // optional string to_role_name = 5;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_role_name(), output);
  }

  // optional uint64 to_role_id = 6;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->to_role_id(), output);
  }

  // repeated int32 item_ids = 7;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->item_ids(i), output);
  }

  // repeated int32 item_counts = 8;
  for (int i = 0; i < this->item_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->item_counts(i), output);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->title(), output);
  }

  // optional string content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->content(), output);
  }

  // optional int32 config_id = 11;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->config_id(), output);
  }

  // optional int32 is_public_server_test = 12;
  if (has_is_public_server_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->is_public_server_test(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_private_mail_debug_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 is_send_private_mail = 3;
  if (has_is_send_private_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_send_private_mail(), target);
  }

  // optional int32 is_send_system_mail = 4;
  if (has_is_send_system_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->is_send_system_mail(), target);
  }

  // optional string to_role_name = 5;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_role_name(), target);
  }

  // optional uint64 to_role_id = 6;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->to_role_id(), target);
  }

  // repeated int32 item_ids = 7;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->item_ids(i), target);
  }

  // repeated int32 item_counts = 8;
  for (int i = 0; i < this->item_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->item_counts(i), target);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->title(), target);
  }

  // optional string content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->content(), target);
  }

  // optional int32 config_id = 11;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->config_id(), target);
  }

  // optional int32 is_public_server_test = 12;
  if (has_is_public_server_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->is_public_server_test(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_private_mail_debug_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 is_send_private_mail = 3;
    if (has_is_send_private_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_send_private_mail());
    }

    // optional int32 is_send_system_mail = 4;
    if (has_is_send_system_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_send_system_mail());
    }

    // optional string to_role_name = 5;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

    // optional uint64 to_role_id = 6;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string content = 10;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int32 config_id = 11;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional int32 is_public_server_test = 12;
    if (has_is_public_server_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_public_server_test());
    }

  }
  // repeated int32 item_ids = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_ids(i));
    }
    total_size += 1 * this->item_ids_size() + data_size;
  }

  // repeated int32 item_counts = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_counts(i));
    }
    total_size += 1 * this->item_counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_private_mail_debug_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_private_mail_debug_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_private_mail_debug_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_private_mail_debug_req::MergeFrom(const mail_send_private_mail_debug_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  item_counts_.MergeFrom(from.item_counts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_is_send_private_mail()) {
      set_is_send_private_mail(from.is_send_private_mail());
    }
    if (from.has_is_send_system_mail()) {
      set_is_send_system_mail(from.is_send_system_mail());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_is_public_server_test()) {
      set_is_public_server_test(from.is_public_server_test());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_private_mail_debug_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_private_mail_debug_req::CopyFrom(const mail_send_private_mail_debug_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_private_mail_debug_req::IsInitialized() const {

  return true;
}

void mail_send_private_mail_debug_req::Swap(mail_send_private_mail_debug_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(is_send_private_mail_, other->is_send_private_mail_);
    std::swap(is_send_system_mail_, other->is_send_system_mail_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(to_role_id_, other->to_role_id_);
    item_ids_.Swap(&other->item_ids_);
    item_counts_.Swap(&other->item_counts_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(config_id_, other->config_id_);
    std::swap(is_public_server_test_, other->is_public_server_test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_private_mail_debug_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_private_mail_debug_req_descriptor_;
  metadata.reflection = mail_send_private_mail_debug_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_private_mail_debug_ack::kProtoidFieldNumber;
const int mail_send_private_mail_debug_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

mail_send_private_mail_debug_ack::mail_send_private_mail_debug_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_private_mail_debug_ack::InitAsDefaultInstance() {
}

mail_send_private_mail_debug_ack::mail_send_private_mail_debug_ack(const mail_send_private_mail_debug_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_private_mail_debug_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5977;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_private_mail_debug_ack::~mail_send_private_mail_debug_ack() {
  SharedDtor();
}

void mail_send_private_mail_debug_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_private_mail_debug_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_private_mail_debug_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_private_mail_debug_ack_descriptor_;
}

const mail_send_private_mail_debug_ack& mail_send_private_mail_debug_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_private_mail_debug_ack* mail_send_private_mail_debug_ack::default_instance_ = NULL;

mail_send_private_mail_debug_ack* mail_send_private_mail_debug_ack::New() const {
  return new mail_send_private_mail_debug_ack;
}

void mail_send_private_mail_debug_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5977;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_private_mail_debug_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional sint32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_private_mail_debug_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_private_mail_debug_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_private_mail_debug_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_private_mail_debug_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional sint32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_private_mail_debug_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_private_mail_debug_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_private_mail_debug_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_private_mail_debug_ack::MergeFrom(const mail_send_private_mail_debug_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_private_mail_debug_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_private_mail_debug_ack::CopyFrom(const mail_send_private_mail_debug_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_private_mail_debug_ack::IsInitialized() const {

  return true;
}

void mail_send_private_mail_debug_ack::Swap(mail_send_private_mail_debug_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_private_mail_debug_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_private_mail_debug_ack_descriptor_;
  metadata.reflection = mail_send_private_mail_debug_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_global_mail_debug_ack::kProtoidFieldNumber;
const int mail_send_global_mail_debug_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

mail_send_global_mail_debug_ack::mail_send_global_mail_debug_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_global_mail_debug_ack::InitAsDefaultInstance() {
}

mail_send_global_mail_debug_ack::mail_send_global_mail_debug_ack(const mail_send_global_mail_debug_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_global_mail_debug_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5967;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_global_mail_debug_ack::~mail_send_global_mail_debug_ack() {
  SharedDtor();
}

void mail_send_global_mail_debug_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_global_mail_debug_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_global_mail_debug_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_global_mail_debug_ack_descriptor_;
}

const mail_send_global_mail_debug_ack& mail_send_global_mail_debug_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_global_mail_debug_ack* mail_send_global_mail_debug_ack::default_instance_ = NULL;

mail_send_global_mail_debug_ack* mail_send_global_mail_debug_ack::New() const {
  return new mail_send_global_mail_debug_ack;
}

void mail_send_global_mail_debug_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5967;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_global_mail_debug_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional sint32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_global_mail_debug_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_global_mail_debug_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_global_mail_debug_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_global_mail_debug_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional sint32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_global_mail_debug_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_global_mail_debug_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_global_mail_debug_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_global_mail_debug_ack::MergeFrom(const mail_send_global_mail_debug_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_global_mail_debug_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_global_mail_debug_ack::CopyFrom(const mail_send_global_mail_debug_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_global_mail_debug_ack::IsInitialized() const {

  return true;
}

void mail_send_global_mail_debug_ack::Swap(mail_send_global_mail_debug_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_global_mail_debug_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_global_mail_debug_ack_descriptor_;
  metadata.reflection = mail_send_global_mail_debug_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_group_mail_debug_req::kProtoidFieldNumber;
const int mail_send_group_mail_debug_req::kGroupMailToRoleIdsFieldNumber;
const int mail_send_group_mail_debug_req::kGroupMailConfigIdFieldNumber;
#endif  // !_MSC_VER

mail_send_group_mail_debug_req::mail_send_group_mail_debug_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_group_mail_debug_req::InitAsDefaultInstance() {
}

mail_send_group_mail_debug_req::mail_send_group_mail_debug_req(const mail_send_group_mail_debug_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_group_mail_debug_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5968;
  group_mail_config_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_group_mail_debug_req::~mail_send_group_mail_debug_req() {
  SharedDtor();
}

void mail_send_group_mail_debug_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_group_mail_debug_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_group_mail_debug_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_group_mail_debug_req_descriptor_;
}

const mail_send_group_mail_debug_req& mail_send_group_mail_debug_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_group_mail_debug_req* mail_send_group_mail_debug_req::default_instance_ = NULL;

mail_send_group_mail_debug_req* mail_send_group_mail_debug_req::New() const {
  return new mail_send_group_mail_debug_req;
}

void mail_send_group_mail_debug_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5968;
    group_mail_config_id_ = 0;
  }
  group_mail_to_role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_group_mail_debug_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_mail_to_role_ids;
        break;
      }

      // repeated uint64 group_mail_to_role_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_mail_to_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_group_mail_to_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_group_mail_to_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_mail_to_role_ids;
        if (input->ExpectTag(24)) goto parse_group_mail_config_id;
        break;
      }

      // optional int32 group_mail_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_mail_config_id_)));
          set_has_group_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_group_mail_debug_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 group_mail_to_role_ids = 2;
  for (int i = 0; i < this->group_mail_to_role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->group_mail_to_role_ids(i), output);
  }

  // optional int32 group_mail_config_id = 3;
  if (has_group_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->group_mail_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_group_mail_debug_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 group_mail_to_role_ids = 2;
  for (int i = 0; i < this->group_mail_to_role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->group_mail_to_role_ids(i), target);
  }

  // optional int32 group_mail_config_id = 3;
  if (has_group_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->group_mail_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_group_mail_debug_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 group_mail_config_id = 3;
    if (has_group_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_mail_config_id());
    }

  }
  // repeated uint64 group_mail_to_role_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->group_mail_to_role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->group_mail_to_role_ids(i));
    }
    total_size += 1 * this->group_mail_to_role_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_group_mail_debug_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_group_mail_debug_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_group_mail_debug_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_group_mail_debug_req::MergeFrom(const mail_send_group_mail_debug_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_mail_to_role_ids_.MergeFrom(from.group_mail_to_role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_group_mail_config_id()) {
      set_group_mail_config_id(from.group_mail_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_group_mail_debug_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_group_mail_debug_req::CopyFrom(const mail_send_group_mail_debug_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_group_mail_debug_req::IsInitialized() const {

  return true;
}

void mail_send_group_mail_debug_req::Swap(mail_send_group_mail_debug_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    group_mail_to_role_ids_.Swap(&other->group_mail_to_role_ids_);
    std::swap(group_mail_config_id_, other->group_mail_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_group_mail_debug_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_group_mail_debug_req_descriptor_;
  metadata.reflection = mail_send_group_mail_debug_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_group_mail_debug_ack::kProtoidFieldNumber;
const int mail_send_group_mail_debug_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

mail_send_group_mail_debug_ack::mail_send_group_mail_debug_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_group_mail_debug_ack::InitAsDefaultInstance() {
}

mail_send_group_mail_debug_ack::mail_send_group_mail_debug_ack(const mail_send_group_mail_debug_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_group_mail_debug_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5969;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_group_mail_debug_ack::~mail_send_group_mail_debug_ack() {
  SharedDtor();
}

void mail_send_group_mail_debug_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_group_mail_debug_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_group_mail_debug_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_group_mail_debug_ack_descriptor_;
}

const mail_send_group_mail_debug_ack& mail_send_group_mail_debug_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_group_mail_debug_ack* mail_send_group_mail_debug_ack::default_instance_ = NULL;

mail_send_group_mail_debug_ack* mail_send_group_mail_debug_ack::New() const {
  return new mail_send_group_mail_debug_ack;
}

void mail_send_group_mail_debug_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5969;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_group_mail_debug_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional sint32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_group_mail_debug_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_group_mail_debug_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_group_mail_debug_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_group_mail_debug_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional sint32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_group_mail_debug_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_group_mail_debug_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_group_mail_debug_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_group_mail_debug_ack::MergeFrom(const mail_send_group_mail_debug_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_group_mail_debug_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_group_mail_debug_ack::CopyFrom(const mail_send_group_mail_debug_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_group_mail_debug_ack::IsInitialized() const {

  return true;
}

void mail_send_group_mail_debug_ack::Swap(mail_send_group_mail_debug_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_group_mail_debug_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_group_mail_debug_ack_descriptor_;
  metadata.reflection = mail_send_group_mail_debug_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_family_mail_debug_req::kProtoidFieldNumber;
const int mail_send_family_mail_debug_req::kFamilyMailFamilyIdFieldNumber;
const int mail_send_family_mail_debug_req::kFamilyMailConfigIdFieldNumber;
#endif  // !_MSC_VER

mail_send_family_mail_debug_req::mail_send_family_mail_debug_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_family_mail_debug_req::InitAsDefaultInstance() {
}

mail_send_family_mail_debug_req::mail_send_family_mail_debug_req(const mail_send_family_mail_debug_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_family_mail_debug_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5970;
  family_mail_family_id_ = GOOGLE_ULONGLONG(0);
  family_mail_config_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_family_mail_debug_req::~mail_send_family_mail_debug_req() {
  SharedDtor();
}

void mail_send_family_mail_debug_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_family_mail_debug_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_family_mail_debug_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_family_mail_debug_req_descriptor_;
}

const mail_send_family_mail_debug_req& mail_send_family_mail_debug_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_family_mail_debug_req* mail_send_family_mail_debug_req::default_instance_ = NULL;

mail_send_family_mail_debug_req* mail_send_family_mail_debug_req::New() const {
  return new mail_send_family_mail_debug_req;
}

void mail_send_family_mail_debug_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5970;
    family_mail_family_id_ = GOOGLE_ULONGLONG(0);
    family_mail_config_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_family_mail_debug_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_family_mail_family_id;
        break;
      }

      // optional uint64 family_mail_family_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_mail_family_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &family_mail_family_id_)));
          set_has_family_mail_family_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_family_mail_config_id;
        break;
      }

      // optional int32 family_mail_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_family_mail_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &family_mail_config_id_)));
          set_has_family_mail_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_family_mail_debug_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 family_mail_family_id = 2;
  if (has_family_mail_family_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->family_mail_family_id(), output);
  }

  // optional int32 family_mail_config_id = 3;
  if (has_family_mail_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->family_mail_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_family_mail_debug_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 family_mail_family_id = 2;
  if (has_family_mail_family_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->family_mail_family_id(), target);
  }

  // optional int32 family_mail_config_id = 3;
  if (has_family_mail_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->family_mail_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_family_mail_debug_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 family_mail_family_id = 2;
    if (has_family_mail_family_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->family_mail_family_id());
    }

    // optional int32 family_mail_config_id = 3;
    if (has_family_mail_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->family_mail_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_family_mail_debug_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_family_mail_debug_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_family_mail_debug_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_family_mail_debug_req::MergeFrom(const mail_send_family_mail_debug_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_family_mail_family_id()) {
      set_family_mail_family_id(from.family_mail_family_id());
    }
    if (from.has_family_mail_config_id()) {
      set_family_mail_config_id(from.family_mail_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_family_mail_debug_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_family_mail_debug_req::CopyFrom(const mail_send_family_mail_debug_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_family_mail_debug_req::IsInitialized() const {

  return true;
}

void mail_send_family_mail_debug_req::Swap(mail_send_family_mail_debug_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(family_mail_family_id_, other->family_mail_family_id_);
    std::swap(family_mail_config_id_, other->family_mail_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_family_mail_debug_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_family_mail_debug_req_descriptor_;
  metadata.reflection = mail_send_family_mail_debug_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mail_send_family_mail_debug_ack::kProtoidFieldNumber;
const int mail_send_family_mail_debug_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

mail_send_family_mail_debug_ack::mail_send_family_mail_debug_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void mail_send_family_mail_debug_ack::InitAsDefaultInstance() {
}

mail_send_family_mail_debug_ack::mail_send_family_mail_debug_ack(const mail_send_family_mail_debug_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void mail_send_family_mail_debug_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5971;
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mail_send_family_mail_debug_ack::~mail_send_family_mail_debug_ack() {
  SharedDtor();
}

void mail_send_family_mail_debug_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mail_send_family_mail_debug_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mail_send_family_mail_debug_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mail_send_family_mail_debug_ack_descriptor_;
}

const mail_send_family_mail_debug_ack& mail_send_family_mail_debug_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

mail_send_family_mail_debug_ack* mail_send_family_mail_debug_ack::default_instance_ = NULL;

mail_send_family_mail_debug_ack* mail_send_family_mail_debug_ack::New() const {
  return new mail_send_family_mail_debug_ack;
}

void mail_send_family_mail_debug_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5971;
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mail_send_family_mail_debug_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional sint32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void mail_send_family_mail_debug_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* mail_send_family_mail_debug_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional sint32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int mail_send_family_mail_debug_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = mail_send_family_mail_debug_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional sint32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mail_send_family_mail_debug_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mail_send_family_mail_debug_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mail_send_family_mail_debug_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mail_send_family_mail_debug_ack::MergeFrom(const mail_send_family_mail_debug_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mail_send_family_mail_debug_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mail_send_family_mail_debug_ack::CopyFrom(const mail_send_family_mail_debug_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mail_send_family_mail_debug_ack::IsInitialized() const {

  return true;
}

void mail_send_family_mail_debug_ack::Swap(mail_send_family_mail_debug_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mail_send_family_mail_debug_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mail_send_family_mail_debug_ack_descriptor_;
  metadata.reflection = mail_send_family_mail_debug_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_cs_mul_mails_req::kProtoidFieldNumber;
const int del_cs_mul_mails_req::kMailIdSFieldNumber;
#endif  // !_MSC_VER

del_cs_mul_mails_req::del_cs_mul_mails_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_cs_mul_mails_req::InitAsDefaultInstance() {
}

del_cs_mul_mails_req::del_cs_mul_mails_req(const del_cs_mul_mails_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_cs_mul_mails_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5980;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_cs_mul_mails_req::~del_cs_mul_mails_req() {
  SharedDtor();
}

void del_cs_mul_mails_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_cs_mul_mails_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_cs_mul_mails_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_cs_mul_mails_req_descriptor_;
}

const del_cs_mul_mails_req& del_cs_mul_mails_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

del_cs_mul_mails_req* del_cs_mul_mails_req::default_instance_ = NULL;

del_cs_mul_mails_req* del_cs_mul_mails_req::New() const {
  return new del_cs_mul_mails_req;
}

void del_cs_mul_mails_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5980;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_cs_mul_mails_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_cs_mul_mails_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_cs_mul_mails_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_cs_mul_mails_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_cs_mul_mails_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_cs_mul_mails_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_cs_mul_mails_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_cs_mul_mails_req::MergeFrom(const del_cs_mul_mails_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_cs_mul_mails_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_cs_mul_mails_req::CopyFrom(const del_cs_mul_mails_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_cs_mul_mails_req::IsInitialized() const {

  return true;
}

void del_cs_mul_mails_req::Swap(del_cs_mul_mails_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_cs_mul_mails_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_cs_mul_mails_req_descriptor_;
  metadata.reflection = del_cs_mul_mails_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_cs_mul_mails_ack::kProtoidFieldNumber;
const int del_cs_mul_mails_ack::kMailIdSFieldNumber;
const int del_cs_mul_mails_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

del_cs_mul_mails_ack::del_cs_mul_mails_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_cs_mul_mails_ack::InitAsDefaultInstance() {
}

del_cs_mul_mails_ack::del_cs_mul_mails_ack(const del_cs_mul_mails_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_cs_mul_mails_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5981;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_cs_mul_mails_ack::~del_cs_mul_mails_ack() {
  SharedDtor();
}

void del_cs_mul_mails_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_cs_mul_mails_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_cs_mul_mails_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_cs_mul_mails_ack_descriptor_;
}

const del_cs_mul_mails_ack& del_cs_mul_mails_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

del_cs_mul_mails_ack* del_cs_mul_mails_ack::default_instance_ = NULL;

del_cs_mul_mails_ack* del_cs_mul_mails_ack::New() const {
  return new del_cs_mul_mails_ack;
}

void del_cs_mul_mails_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5981;
    error_ = 0;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_cs_mul_mails_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_cs_mul_mails_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_cs_mul_mails_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_cs_mul_mails_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mul_mails_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_cs_mul_mails_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_cs_mul_mails_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_cs_mul_mails_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_cs_mul_mails_ack::MergeFrom(const del_cs_mul_mails_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_cs_mul_mails_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_cs_mul_mails_ack::CopyFrom(const del_cs_mul_mails_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_cs_mul_mails_ack::IsInitialized() const {

  return true;
}

void del_cs_mul_mails_ack::Swap(del_cs_mul_mails_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_cs_mul_mails_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_cs_mul_mails_ack_descriptor_;
  metadata.reflection = del_cs_mul_mails_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int del_cs_mails_ntf::kProtoidFieldNumber;
const int del_cs_mails_ntf::kMailIdSFieldNumber;
#endif  // !_MSC_VER

del_cs_mails_ntf::del_cs_mails_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void del_cs_mails_ntf::InitAsDefaultInstance() {
}

del_cs_mails_ntf::del_cs_mails_ntf(const del_cs_mails_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void del_cs_mails_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5989;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

del_cs_mails_ntf::~del_cs_mails_ntf() {
  SharedDtor();
}

void del_cs_mails_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void del_cs_mails_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* del_cs_mails_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return del_cs_mails_ntf_descriptor_;
}

const del_cs_mails_ntf& del_cs_mails_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

del_cs_mails_ntf* del_cs_mails_ntf::default_instance_ = NULL;

del_cs_mails_ntf* del_cs_mails_ntf::New() const {
  return new del_cs_mails_ntf;
}

void del_cs_mails_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5989;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool del_cs_mails_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mails_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void del_cs_mails_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mails_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* del_cs_mails_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mails_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int del_cs_mails_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = del_cs_mails_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void del_cs_mails_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const del_cs_mails_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const del_cs_mails_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void del_cs_mails_ntf::MergeFrom(const del_cs_mails_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void del_cs_mails_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void del_cs_mails_ntf::CopyFrom(const del_cs_mails_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool del_cs_mails_ntf::IsInitialized() const {

  return true;
}

void del_cs_mails_ntf::Swap(del_cs_mails_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata del_cs_mails_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = del_cs_mails_ntf_descriptor_;
  metadata.reflection = del_cs_mails_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_cs_mul_mails_state_req::kProtoidFieldNumber;
const int sync_cs_mul_mails_state_req::kMailIdSFieldNumber;
const int sync_cs_mul_mails_state_req::kReadStateFieldNumber;
const int sync_cs_mul_mails_state_req::kGetAttachStateFieldNumber;
#endif  // !_MSC_VER

sync_cs_mul_mails_state_req::sync_cs_mul_mails_state_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_cs_mul_mails_state_req::InitAsDefaultInstance() {
}

sync_cs_mul_mails_state_req::sync_cs_mul_mails_state_req(const sync_cs_mul_mails_state_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_cs_mul_mails_state_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5982;
  read_state_ = false;
  get_attach_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_cs_mul_mails_state_req::~sync_cs_mul_mails_state_req() {
  SharedDtor();
}

void sync_cs_mul_mails_state_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_cs_mul_mails_state_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_cs_mul_mails_state_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_cs_mul_mails_state_req_descriptor_;
}

const sync_cs_mul_mails_state_req& sync_cs_mul_mails_state_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

sync_cs_mul_mails_state_req* sync_cs_mul_mails_state_req::default_instance_ = NULL;

sync_cs_mul_mails_state_req* sync_cs_mul_mails_state_req::New() const {
  return new sync_cs_mul_mails_state_req;
}

void sync_cs_mul_mails_state_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5982;
    read_state_ = false;
    get_attach_state_ = false;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_cs_mul_mails_state_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_read_state;
        break;
      }

      // optional bool read_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_state_)));
          set_has_read_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_get_attach_state;
        break;
      }

      // optional bool get_attach_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_attach_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_attach_state_)));
          set_has_get_attach_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_cs_mul_mails_state_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional bool read_state = 3;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->read_state(), output);
  }

  // optional bool get_attach_state = 4;
  if (has_get_attach_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->get_attach_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_cs_mul_mails_state_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional bool read_state = 3;
  if (has_read_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->read_state(), target);
  }

  // optional bool get_attach_state = 4;
  if (has_get_attach_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->get_attach_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_cs_mul_mails_state_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool read_state = 3;
    if (has_read_state()) {
      total_size += 1 + 1;
    }

    // optional bool get_attach_state = 4;
    if (has_get_attach_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_cs_mul_mails_state_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_cs_mul_mails_state_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_cs_mul_mails_state_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_cs_mul_mails_state_req::MergeFrom(const sync_cs_mul_mails_state_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
    if (from.has_get_attach_state()) {
      set_get_attach_state(from.get_attach_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_cs_mul_mails_state_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_cs_mul_mails_state_req::CopyFrom(const sync_cs_mul_mails_state_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_cs_mul_mails_state_req::IsInitialized() const {

  return true;
}

void sync_cs_mul_mails_state_req::Swap(sync_cs_mul_mails_state_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(read_state_, other->read_state_);
    std::swap(get_attach_state_, other->get_attach_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_cs_mul_mails_state_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_cs_mul_mails_state_req_descriptor_;
  metadata.reflection = sync_cs_mul_mails_state_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_cs_mul_mails_state_ack::kProtoidFieldNumber;
const int sync_cs_mul_mails_state_ack::kMailIdSFieldNumber;
const int sync_cs_mul_mails_state_ack::kErrorFieldNumber;
const int sync_cs_mul_mails_state_ack::kReadStateFieldNumber;
const int sync_cs_mul_mails_state_ack::kGetAttachStateFieldNumber;
#endif  // !_MSC_VER

sync_cs_mul_mails_state_ack::sync_cs_mul_mails_state_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_cs_mul_mails_state_ack::InitAsDefaultInstance() {
}

sync_cs_mul_mails_state_ack::sync_cs_mul_mails_state_ack(const sync_cs_mul_mails_state_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_cs_mul_mails_state_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5983;
  error_ = 0;
  read_state_ = false;
  get_attach_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_cs_mul_mails_state_ack::~sync_cs_mul_mails_state_ack() {
  SharedDtor();
}

void sync_cs_mul_mails_state_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_cs_mul_mails_state_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_cs_mul_mails_state_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_cs_mul_mails_state_ack_descriptor_;
}

const sync_cs_mul_mails_state_ack& sync_cs_mul_mails_state_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

sync_cs_mul_mails_state_ack* sync_cs_mul_mails_state_ack::default_instance_ = NULL;

sync_cs_mul_mails_state_ack* sync_cs_mul_mails_state_ack::New() const {
  return new sync_cs_mul_mails_state_ack;
}

void sync_cs_mul_mails_state_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5983;
    error_ = 0;
    read_state_ = false;
    get_attach_state_ = false;
  }
  mail_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_cs_mul_mails_state_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        break;
      }

      // repeated uint64 mail_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_mail_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mail_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id_s;
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_read_state;
        break;
      }

      // optional bool read_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_state_)));
          set_has_read_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_get_attach_state;
        break;
      }

      // optional bool get_attach_state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_attach_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_attach_state_)));
          set_has_get_attach_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_cs_mul_mails_state_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->mail_id_s(i), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  // optional bool read_state = 4;
  if (has_read_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->read_state(), output);
  }

  // optional bool get_attach_state = 5;
  if (has_get_attach_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->get_attach_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_cs_mul_mails_state_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 mail_id_s = 2;
  for (int i = 0; i < this->mail_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->mail_id_s(i), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  // optional bool read_state = 4;
  if (has_read_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->read_state(), target);
  }

  // optional bool get_attach_state = 5;
  if (has_get_attach_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->get_attach_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_cs_mul_mails_state_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_cs_mul_mails_state_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional bool read_state = 4;
    if (has_read_state()) {
      total_size += 1 + 1;
    }

    // optional bool get_attach_state = 5;
    if (has_get_attach_state()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 mail_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mail_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mail_id_s(i));
    }
    total_size += 1 * this->mail_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_cs_mul_mails_state_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_cs_mul_mails_state_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_cs_mul_mails_state_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_cs_mul_mails_state_ack::MergeFrom(const sync_cs_mul_mails_state_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mail_id_s_.MergeFrom(from.mail_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_read_state()) {
      set_read_state(from.read_state());
    }
    if (from.has_get_attach_state()) {
      set_get_attach_state(from.get_attach_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_cs_mul_mails_state_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_cs_mul_mails_state_ack::CopyFrom(const sync_cs_mul_mails_state_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_cs_mul_mails_state_ack::IsInitialized() const {

  return true;
}

void sync_cs_mul_mails_state_ack::Swap(sync_cs_mul_mails_state_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mail_id_s_.Swap(&other->mail_id_s_);
    std::swap(error_, other->error_);
    std::swap(read_state_, other->read_state_);
    std::swap(get_attach_state_, other->get_attach_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_cs_mul_mails_state_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_cs_mul_mails_state_ack_descriptor_;
  metadata.reflection = sync_cs_mul_mails_state_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_all_mail_cs_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

get_all_mail_cs_req::get_all_mail_cs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_all_mail_cs_req::InitAsDefaultInstance() {
}

get_all_mail_cs_req::get_all_mail_cs_req(const get_all_mail_cs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_all_mail_cs_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5984;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_all_mail_cs_req::~get_all_mail_cs_req() {
  SharedDtor();
}

void get_all_mail_cs_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_all_mail_cs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_all_mail_cs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_all_mail_cs_req_descriptor_;
}

const get_all_mail_cs_req& get_all_mail_cs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

get_all_mail_cs_req* get_all_mail_cs_req::default_instance_ = NULL;

get_all_mail_cs_req* get_all_mail_cs_req::New() const {
  return new get_all_mail_cs_req;
}

void get_all_mail_cs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5984;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_all_mail_cs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_all_mail_cs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_all_mail_cs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_all_mail_cs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_all_mail_cs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_all_mail_cs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_all_mail_cs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_all_mail_cs_req::MergeFrom(const get_all_mail_cs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_all_mail_cs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_mail_cs_req::CopyFrom(const get_all_mail_cs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_mail_cs_req::IsInitialized() const {

  return true;
}

void get_all_mail_cs_req::Swap(get_all_mail_cs_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_all_mail_cs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_all_mail_cs_req_descriptor_;
  metadata.reflection = get_all_mail_cs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_all_mail_cs_ack::kProtoidFieldNumber;
const int get_all_mail_cs_ack::kMailsFieldNumber;
const int get_all_mail_cs_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

get_all_mail_cs_ack::get_all_mail_cs_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_all_mail_cs_ack::InitAsDefaultInstance() {
}

get_all_mail_cs_ack::get_all_mail_cs_ack(const get_all_mail_cs_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_all_mail_cs_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5985;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_all_mail_cs_ack::~get_all_mail_cs_ack() {
  SharedDtor();
}

void get_all_mail_cs_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_all_mail_cs_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_all_mail_cs_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_all_mail_cs_ack_descriptor_;
}

const get_all_mail_cs_ack& get_all_mail_cs_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

get_all_mail_cs_ack* get_all_mail_cs_ack::default_instance_ = NULL;

get_all_mail_cs_ack* get_all_mail_cs_ack::New() const {
  return new get_all_mail_cs_ack;
}

void get_all_mail_cs_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5985;
    error_ = 0;
  }
  mails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_all_mail_cs_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .SProtoSpace.mail mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_all_mail_cs_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_all_mail_cs_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_all_mail_cs_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated .SProtoSpace.mail mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_all_mail_cs_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_all_mail_cs_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_all_mail_cs_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_all_mail_cs_ack::MergeFrom(const get_all_mail_cs_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_all_mail_cs_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_mail_cs_ack::CopyFrom(const get_all_mail_cs_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_mail_cs_ack::IsInitialized() const {

  return true;
}

void get_all_mail_cs_ack::Swap(get_all_mail_cs_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mails_.Swap(&other->mails_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_all_mail_cs_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_all_mail_cs_ack_descriptor_;
  metadata.reflection = get_all_mail_cs_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_all_mail_cs_ntf::kProtoidFieldNumber;
const int get_all_mail_cs_ntf::kMailsFieldNumber;
const int get_all_mail_cs_ntf::kDelMailIdsFieldNumber;
#endif  // !_MSC_VER

get_all_mail_cs_ntf::get_all_mail_cs_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_all_mail_cs_ntf::InitAsDefaultInstance() {
}

get_all_mail_cs_ntf::get_all_mail_cs_ntf(const get_all_mail_cs_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_all_mail_cs_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5986;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_all_mail_cs_ntf::~get_all_mail_cs_ntf() {
  SharedDtor();
}

void get_all_mail_cs_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_all_mail_cs_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_all_mail_cs_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_all_mail_cs_ntf_descriptor_;
}

const get_all_mail_cs_ntf& get_all_mail_cs_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

get_all_mail_cs_ntf* get_all_mail_cs_ntf::default_instance_ = NULL;

get_all_mail_cs_ntf* get_all_mail_cs_ntf::New() const {
  return new get_all_mail_cs_ntf;
}

void get_all_mail_cs_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5986;
  }
  mails_.Clear();
  del_mail_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_all_mail_cs_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        break;
      }

      // repeated .SProtoSpace.mail mails = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mails;
        if (input->ExpectTag(24)) goto parse_del_mail_ids;
        break;
      }

      // repeated uint64 del_mail_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_mail_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_del_mail_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_mail_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_del_mail_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_all_mail_cs_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mails(i), output);
  }

  // repeated uint64 del_mail_ids = 3;
  for (int i = 0; i < this->del_mail_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->del_mail_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_all_mail_cs_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.mail mails = 2;
  for (int i = 0; i < this->mails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mails(i), target);
  }

  // repeated uint64 del_mail_ids = 3;
  for (int i = 0; i < this->del_mail_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->del_mail_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_all_mail_cs_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_mail_cs_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.mail mails = 2;
  total_size += 1 * this->mails_size();
  for (int i = 0; i < this->mails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mails(i));
  }

  // repeated uint64 del_mail_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_mail_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_mail_ids(i));
    }
    total_size += 1 * this->del_mail_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_all_mail_cs_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_all_mail_cs_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_all_mail_cs_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_all_mail_cs_ntf::MergeFrom(const get_all_mail_cs_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  mails_.MergeFrom(from.mails_);
  del_mail_ids_.MergeFrom(from.del_mail_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_all_mail_cs_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_mail_cs_ntf::CopyFrom(const get_all_mail_cs_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_mail_cs_ntf::IsInitialized() const {

  return true;
}

void get_all_mail_cs_ntf::Swap(get_all_mail_cs_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    mails_.Swap(&other->mails_);
    del_mail_ids_.Swap(&other->del_mail_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_all_mail_cs_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_all_mail_cs_ntf_descriptor_;
  metadata.reflection = get_all_mail_cs_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_cs_req::kProtoidFieldNumber;
const int send_mail_cs_req::kToRoleIdFieldNumber;
const int send_mail_cs_req::kToRoleNameFieldNumber;
const int send_mail_cs_req::kTitleFieldNumber;
const int send_mail_cs_req::kContentFieldNumber;
const int send_mail_cs_req::kTypeFieldNumber;
#endif  // !_MSC_VER

send_mail_cs_req::send_mail_cs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_cs_req::InitAsDefaultInstance() {
}

send_mail_cs_req::send_mail_cs_req(const send_mail_cs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_cs_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5987;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  to_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_cs_req::~send_mail_cs_req() {
  SharedDtor();
}

void send_mail_cs_req::SharedDtor() {
  if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_role_name_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void send_mail_cs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_cs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_cs_req_descriptor_;
}

const send_mail_cs_req& send_mail_cs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

send_mail_cs_req* send_mail_cs_req::default_instance_ = NULL;

send_mail_cs_req* send_mail_cs_req::New() const {
  return new send_mail_cs_req;
}

void send_mail_cs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5987;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_role_name()) {
      if (to_role_name_ != &::google::protobuf::internal::kEmptyString) {
        to_role_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_cs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_to_role_name;
        break;
      }

      // optional string to_role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_role_name().data(), this->to_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional string title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.eSendMailType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eSendMailType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::eSendMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_cs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional string to_role_name = 3;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->to_role_name(), output);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->title(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->content(), output);
  }

  // optional .SProtoSpace.eSendMailType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_cs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional string to_role_name = 3;
  if (has_to_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_role_name().data(), this->to_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->to_role_name(), target);
  }

  // optional string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional .SProtoSpace.eSendMailType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_cs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional string to_role_name = 3;
    if (has_to_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_role_name());
    }

    // optional string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .SProtoSpace.eSendMailType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_cs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_cs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_cs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_cs_req::MergeFrom(const send_mail_cs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_to_role_name()) {
      set_to_role_name(from.to_role_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_cs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_cs_req::CopyFrom(const send_mail_cs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_cs_req::IsInitialized() const {

  return true;
}

void send_mail_cs_req::Swap(send_mail_cs_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(to_role_name_, other->to_role_name_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_cs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_cs_req_descriptor_;
  metadata.reflection = send_mail_cs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int send_mail_cs_ack::kProtoidFieldNumber;
const int send_mail_cs_ack::kMailFieldNumber;
const int send_mail_cs_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

send_mail_cs_ack::send_mail_cs_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void send_mail_cs_ack::InitAsDefaultInstance() {
  mail_ = const_cast< ::SProtoSpace::mail*>(&::SProtoSpace::mail::default_instance());
}

send_mail_cs_ack::send_mail_cs_ack(const send_mail_cs_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void send_mail_cs_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5988;
  mail_ = NULL;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

send_mail_cs_ack::~send_mail_cs_ack() {
  SharedDtor();
}

void send_mail_cs_ack::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void send_mail_cs_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* send_mail_cs_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return send_mail_cs_ack_descriptor_;
}

const send_mail_cs_ack& send_mail_cs_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fmail_2eproto();
  return *default_instance_;
}

send_mail_cs_ack* send_mail_cs_ack::default_instance_ = NULL;

send_mail_cs_ack* send_mail_cs_ack::New() const {
  return new send_mail_cs_ack;
}

void send_mail_cs_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5988;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::SProtoSpace::mail::Clear();
    }
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool send_mail_cs_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .SProtoSpace.mail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void send_mail_cs_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* send_mail_cs_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.mail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int send_mail_cs_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = send_mail_cs_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.mail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void send_mail_cs_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const send_mail_cs_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const send_mail_cs_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void send_mail_cs_ack::MergeFrom(const send_mail_cs_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mail()) {
      mutable_mail()->::SProtoSpace::mail::MergeFrom(from.mail());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void send_mail_cs_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void send_mail_cs_ack::CopyFrom(const send_mail_cs_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_mail_cs_ack::IsInitialized() const {

  return true;
}

void send_mail_cs_ack::Swap(send_mail_cs_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mail_, other->mail_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata send_mail_cs_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = send_mail_cs_ack_descriptor_;
  metadata.reflection = send_mail_cs_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
