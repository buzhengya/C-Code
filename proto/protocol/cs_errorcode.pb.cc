// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_errorcode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_errorcode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* game_error_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_error_ntf_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgErrorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5ferrorcode_2eproto() {
  protobuf_AddDesc_cs_5ferrorcode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_errorcode.proto");
  GOOGLE_CHECK(file != NULL);
  game_error_ntf_descriptor_ = file->message_type(0);
  static const int game_error_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_error_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_error_ntf, error_num_),
  };
  game_error_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_error_ntf_descriptor_,
      game_error_ntf::default_instance_,
      game_error_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_error_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_error_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_error_ntf));
  MsgErrorType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5ferrorcode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_error_ntf_descriptor_, &game_error_ntf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5ferrorcode_2eproto() {
  delete game_error_ntf::default_instance_;
  delete game_error_ntf_reflection_;
}

void protobuf_AddDesc_cs_5ferrorcode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022cs_errorcode.proto\022\013SProtoSpace\032\020cs_pr"
    "otoid.proto\"`\n\016game_error_ntf\022;\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021game_er"
    "ror_ntf_id\022\021\n\terror_num\030\002 \001(\005*\212M\n\014MsgErr"
    "orType\022\022\n\016RES_ERROR_None\020\000\022\r\n\tError_PWD\020"
    "\001\022\016\n\nError_Jade\020\002\022\020\n\014Error_Summon\020\003\022\016\n\nE"
    "rror_Gold\020\004\022\017\n\013Error_Power\020\005\022\017\n\013Error_Le"
    "vel\020\006\022\034\n\030Error_Template_Not_Exist\020\007\022%\n!E"
    "rror_Hero_Level_Config_Not_Exist\020\010\022\022\n\016ER"
    "ROR_GM_ERROR\020\t\022\033\n\027ERROR_OBJ_CREATE_FAILE"
    "D\020\n\022\030\n\024ERROR_ROLE_NOT_EXIST\020\013\022\030\n\024Error_H"
    "ero_Not_Exist\020\r\022\030\n\024Error_Hero_Up_Lv_Max\020"
    "\016\022\024\n\020Error_Data_Error\020\017\022\025\n\021Error_Hero_Lo"
    "cked\020\020\022\032\n\026Error_Create_Hero_Fail\020\021\022\020\n\014Er"
    "ror_Config\020\022\022\027\n\023Error_Hero_Star_Max\020\023\022\027\n"
    "\023Error_Material_Star\020\024\022\032\n\026Error_Up_Star_"
    "Material\020\025\022\035\n\031Error_Hero_Can_Not_Awaken\020"
    "\026\022\027\n\023Error_Hero_Awakened\020\027\022\035\n\031Error_Awak"
    "en_Material_Num\020\030\022\025\n\021Error_Bag_OP_Fail\020\031"
    "\022 \n\034Error_Hero_Item_Insufficient\020\032\022\030\n\024Er"
    "ror_Hero_No_Choice\020\033\022\025\n\021Error_Hero_Lv_Ma"
    "x\020\034\022\030\n\024Error_Hero_Lv_Max_Up\020\035\022\033\n\027Error_H"
    "ero_Skill_Lv_Max\020\036\022\032\n\026Error_Hero_Lv_Max_"
    "Lvup\020\037\022\030\n\024Error_Player_Replace\020 \022\027\n\023Erro"
    "r_Player_Locked\020!\022\035\n\031Error_Player_Change"
    "_NowIs\020\"\022\033\n\027Error_Player_Skin_Dress\020#\022\033\n"
    "\027Error_Player_Not_Active\020$\022\026\n\022Error_Skin"
    "id_Error\020%\022\033\n\027Error_Skin_Active_Error\020&\022"
    "\035\n\031Error_Skin_Already_Active\020\'\022\025\n\021Error_"
    "Skill_Level\020(\022\023\n\017Error_Hero_Lock\020)\022\034\n\030Er"
    "ror_Hero_Lock_Reminder\020*\022\"\n\036Error_Hero_D"
    "eblocking_Reminder\020+\022\031\n\025Error_Name_Repet"
    "ition\020,\022\031\n\025Error_Name_Illegality\020-\022\024\n\020Er"
    "ror_Param_Miss\020.\022\027\n\023Error_Param_Invalid\020"
    "/\022\033\n\027Error_Discovery_NotOpen\0200\022#\n\037Error_"
    "Discovery_Enter_Not_Exist\0201\022!\n\035Error_Dis"
    "covery_Monster_Death\0202\022%\n!Error_Discover"
    "y_Monster_Not_Exist\0203\022 \n\034Error_Discovery"
    "_Monster_Hide\0204\022*\n&Error_Discovery_Monst"
    "er_Not_Challenged\0205\022\035\n\031Error_Discovery_B"
    "oss_Hide\0206\022\017\n\013Error_Cheat\0207\022\023\n\017Error_Sou"
    "l_Bind\0208\022\025\n\021Error_Soul_Unbind\0209\022\024\n\020Error"
    "_Soul_Raise\020:\022\025\n\021Error_Soul_UnLock\020;\022\023\n\017"
    "Error_Soul_Sell\020<\022\030\n\024Error_Soul_MAX_LIMI"
    "T\020=\022\025\n\021Error_Soul_Status\020>\022\026\n\022Error_Hero"
    "_Star_Lv\020\?\022\030\n\024ERROR_HERO_MAX_LIMIT\020@\022\032\n\026"
    "ERROR_HERO_NAME_LENGTH\020A\022\022\n\016ERROR_PARM_R"
    "EQ\020B\022\026\n\022ERROR_HERO_QUALITY\020C\022\032\n\026ERROR_HE"
    "RO_QUALITY_MAX\020D\022\030\n\024ERROR_SHOW_LIKE_SELF"
    "\020G\022\033\n\027ERROR_SHOW_LIKE_ALREADY\020H\022 \n\034ERROR"
    "_POSITION_STRING_LENGTH\020I\022\032\n\026ERROR_SIGNA"
    "TURE_LENGTH\020J\022\032\n\026ERROR_BORDER_NOT_FOUND\020"
    "K\022\037\n\033ERROR_COMMENT_STRING_LENGTH\020L\022\027\n\023ER"
    "ROR_PLOT_NOT_OPEN\020N\022\031\n\025ERROR_BRANCHE_CHO"
    "OSED\020O\022\035\n\031ERROR_AGE_EXCESS_MAX_LIMT\020P\022\033\n"
    "\027ERROR_AGE_LESS_MIN_LIMT\020Q\022\026\n\022ERROR_MONT"
    "H_FROMAT\020R\022\034\n\030ERROR_STARSIGN_NOT_EXIST\020T"
    "\022\024\n\020ERROR_DAY_FROMAT\020U\022\031\n\025ERROR_LABEL_NO"
    "T_EXIST\020V\022\030\n\024ERROR_EMOTION_FAILED\020W\022\035\n\031E"
    "RROR_EMOTION_LIKE_FAILED\020X\022 \n\034ERROR_EMOT"
    "ION_COMMENT_FAILED\020Y\022#\n\037ERROR_EMOTION_DA"
    "TA_FORMAT_ERROR\020Z\022!\n\035ERROR_GET_EMOTION_D"
    "ATA_FAILED\020[\022\037\n\033ERROR_EMOTION_REMOVE_FAI"
    "LED\020\\\022$\n ERROR_EMOTION_CANCEL_LIKE_FAILE"
    "D\020]\022\"\n\036ERROR_EMOTION_CANCEL_LIKE_SUCC\020^\022"
    "\'\n#ERROR_EMOTION_REMOVE_COMMENT_FAILED\020_"
    "\022\035\n\031ERROR_NOT_REACH_CONDITION\020`\022\033\n\027ERROR"
    "_REPEATED_FIN_STEP\020a\022\030\n\024ERROR_MAIL_NOT_E"
    "XIST\020d\022\030\n\024ERROR_MAIL_HAVE_READ\020e\022\031\n\025ERRO"
    "R_CHEST_NOT_EXIST\020x\022\036\n\031ERROR_TEAM_CREATE"
    "D_FAILED\020\226\001\022\031\n\024ERROR_TEAM_NOT_EXIST\020\227\001\022\031"
    "\n\024ERROR_TEAM_NOT_MATCH\020\230\001\022\027\n\022ERROR_TEAM_"
    "IS_FULL\020\231\001\022!\n\034ERROR_TEAM_WAIT_OLDER_MEMB"
    "ER\020\232\001\022\032\n\025ERROR_TEAM_SIZE_ERROR\020\233\001\022\025\n\020ERR"
    "OR_TEAM_EMPTY\020\234\001\022\026\n\021ERROR_NOT_IN_TEAM\020\235\001"
    "\022$\n\037ERROR_TEAM_INVITE_MORE_THAN_MAX\020\236\001\022!"
    "\n\034ERROR_TEAM_INVITE_NOT_FRIEND\020\237\001\022 \n\033ERR"
    "OR_TEAM_STATUS_NOT_READY\020\240\001\022 \n\033ERROR_TEA"
    "M_WAIT_TM_TOO_LONG\020\241\001\022\036\n\031ERROR_NOT_IN_IN"
    "VITED_LIST\020\242\001\022\036\n\031ERROR_TEAM_TYPE_NOT_EXI"
    "ST\020\243\001\022*\n%ERROR_TEAM_WAIT_OLDER_MEMBER_TI"
    "ME_OUT\020\244\001\022\031\n\024ERROR_NOT_EXIST_RANK\020\310\001\022\032\n\025"
    "ERROR_NOT_EXIST_ARENA\020\311\001\022\035\n\030ERROR_UPDATE"
    "_ARENA_ERROR\020\312\001\022\034\n\027ERROR_UPDATE_RANK_ERR"
    "OR\020\313\001\022\027\n\022ERROR_OFFICE_ERROR\020\314\001\022 \n\033ERROR_"
    "OFFICE_ROLE_NOT_EXIST\020\315\001\022%\n ERROR_OFFICE"
    "_FORMATION_NOT_EXIST\020\316\001\022!\n\034ERROR_OFFICE_"
    "FORMATION_ERROR\020\317\001\022\'\n\"ERROR_OFFICE_DAILY"
    "_CHALLENGE_LIMIT\020\320\001\022 \n\033ERROR_OFFICE_CHAL"
    "LENGE_LOCK\020\321\001\022\037\n\032ERROR_DAILY_SALARY_REPE"
    "ATE\020\322\001\022\035\n\030ERROR_UPGRADE_OFFICE_NPC\020\323\001\022\020\n"
    "\013ERROR_MERIT\020\324\001\022 \n\033ERROR_OFFICAL_APPLY_R"
    "EPEATE\020\325\001\022\'\n\"ERROR_FRONT_OFFICAL_BATTLE_"
    "REPEATE\020\326\001\022$\n\037ERROR_FRONT_OFFICAL_APPLY_"
    "LIMIT\020\327\001\022\037\n\032ERROR_OFFICAL_SHARE_FAILED\020\330"
    "\001\022 \n\033ERROR_OFFICAL_SHARE_INVALID\020\331\001\022\036\n\031E"
    "RROR_OFFICAL_SHARE_LIMIT\020\332\001\022%\n ERROR_OFF"
    "ICAL_FIRST_AWARD_FINISH\020\333\001\022$\n\037ERROR_NOT_"
    "EXIST_IN_OFFICAL_RANK\020\334\001\022\026\n\021ERROR_APPLY_"
    "EXIST\020\335\001\022\036\n\031ERROR_GET_RANK_SHOW_EQUIP\020\336\001"
    "\022+\n&ERROR_OFFICE_DAILY_CHALLENGE_BUY_LIM"
    "IT\020\337\001\022 \n\033ERROR_OFFICAL_NOT_LOAD_DATA\020\340\001\022"
    "\035\n\030ERROR_OFFICAL_LIMIT_COND\020\341\001\022\035\n\030OFFICE"
    "R_APPLY_TIME_ERROR\020\342\001\022\036\n\031OFFICER_APPLY_G"
    "RADE_RANGE\020\343\001\022\031\n\024ERROR_SHOP_NOT_EXIST\020\373\001"
    "\022\030\n\023ERROR_SHOP_NOT_OPEN\020\374\001\022\036\n\031ERROR_SHOP"
    "_ITEM_NOT_EXIST\020\375\001\022\035\n\030ERROR_SHOP_BUY_MAX"
    "_LIMIT\020\376\001\022\027\n\022ERROR_SHOP_BUY_NUM\020\377\001\022\035\n\030ER"
    "ROR_SHOP_REFRESH_LIMIT\020\200\002\022\034\n\027ERROR_SHOP_"
    "NEED_REFRESH\020\201\002\022\034\n\027ERROR_SHOP_REFRESH_TI"
    "ME\020\202\002\022\033\n\026ERROR_MONEY_NOT_ENOUGH\020\204\002\022\033\n\026ER"
    "ROR_BUY_CONDI_ENOUGH\020\205\002\022\026\n\021ERROR_SHOP_CL"
    "OSED\020\206\002\022\027\n\022ERROR_ITEM_OUTDATE\020\207\002\022\023\n\016ERRO"
    "R_BAG_OKAY\020\231\002\022\"\n\035ERROR_BAG_NOT_ENOUGH_CA"
    "PACITY\020\232\002\022\031\n\024ERROR_ITEM_SOLD_OKAY\020\233\002\022\032\n\025"
    "ERROR_ITEM_NOT_ENOUGH\020\234\002\022\031\n\024ERROR_ITEM_N"
    "OT_EXIST\020\235\002\022\030\n\023ERROR_ITEM_LVL_LACK\020\236\002\022\031\n"
    "\024ERROR_ITEM_COUNT_MAX\020\237\002\022\032\n\025ERROR_BAG_EX"
    "PAND_OKAY\020\240\002\022\033\n\026ERROR_BAG_EXPAND_ERROR\020\241"
    "\002\022!\n\034ERROR_BAG_CAPACITY_REACH_MAX\020\242\002\022*\n%"
    "ERROR_BAG_CAPACITY_REACH_MAX_AND_MAIL\020\243\002"
    "\022\030\n\023ERROR_REWARD_FAILED\020\244\002\022\032\n\025ERROR_EQUI"
    "P_NOT_EXIST\020\254\002\022\025\n\020ERROR_EQUIP_SLOT\020\255\002\022\032\n"
    "\025ERROR_EQUIP_LEVEL_MAX\020\256\002\022!\n\034ERROR_EQUIP"
    "_ALLREADY_EQUIPED\020\257\002\022\025\n\020ERROR_TYPE_ERROR"
    "\020\260\002\022\034\n\027ERROR_PRIVATE_MAIL_SEND\020\266\002\022$\n\037ERR"
    "OR_PRIAVET_MAIL_NO_SUCH_ROLE\020\267\002\022#\n\036ERROR"
    "_PRIAVET_MAIL_REACH_LIMIT\020\270\002\022%\n ERROR_PR"
    "IAVET_MAIL_SEND_TO_OFTEN\020\271\002\022*\n%ERROR_REA"
    "CH_FRIEND_RECIEVE_MAIL_LIMIT\020\272\002\022)\n$ERROR"
    "_MAIL_ATTACHEMENTS_BUT_BAG_FULL\020\273\002\022\"\n\035ER"
    "ROR_ACHIEVEMENT_ALREADY_GET\020\312\002\022\035\n\030ERROR_"
    "ACHIEVEMENT_LOCKED\020\313\002\022\"\n\035ERROR_ACHIEVEME"
    "NT_IN_PROGRESS\020\314\002\022$\n\037ERROR_ACHIEVEMENT_I"
    "TEM_BAG_FULL\020\315\002\022\027\n\022ERROR_QUEST_STATUS\020\336\002"
    "\022\036\n\031ERROR_ACITVITY_NOT_ENOUGH\020\337\002\022\027\n\022ERRO"
    "R_QUEST_LOCKED\020\340\002\022\033\n\026ERROR_QUEST_NOT_FIN"
    "ISH\020\341\002\022\027\n\022ERROR_QUEST_FINISH\020\342\002\022\035\n\030ERROR"
    "_HAVE_TASK_ACTIVITY\020\343\002\022\032\n\025ERROR_NOT_EXIS"
    "T_ROYAL\020\221\003\022\031\n\024ERROR_NOT_EXIST_GIFT\020\222\003\022\032\n"
    "\025ERROR_ROYAL_GIFT_ZERO\020\223\003\022\"\n\035ERROR_ROYAL"
    "_REWARD_HAS_REWARD\020\224\003\022$\n\037ERROR_ROYAL_LES"
    "S_INTIMACY_VALUE\020\225\003\022\033\n\026ERROR_ROYAL_NOT_E"
    "NOUGH\020\226\003\022\037\n\032ERROR_NOT_EXIST_ROYAL_TASK\020\227"
    "\003\022&\n!ERROR_NOT_EXIST_ROYAL_THIRD_SCENE\020\230"
    "\003\022$\n\037ERROR_ROYAL_REFREASH_EXCEED_MAX\020\231\003\022"
    "!\n\034ERROR_ROYAL_VISIT_EXCEED_MAX\020\232\003\022 \n\033ER"
    "ROR_ROYAL_NOT_EXIST_EVENT\020\233\003\022\034\n\027ERROR_FL"
    "OWER_NOT_ENOUGH\020\365\003\022)\n$ERROR_FLOWER_NOT_E"
    "XIST_TARGET_PLAYER\020\366\003\022%\n ERROR_AS_DRAW_C"
    "ARD_FREE_TIME_OUT\020\223\004\022(\n#ERROR_AS_DRAW_CA"
    "RD_ITEMS_NOT_ENOUGH\020\224\004\022\032\n\025ERROR_NOT_EXIS"
    "T_EVENT\020\225\004\022\'\n\"ERROR_AS_DRAW_REACH_BUY_TI"
    "ME_LIMIT\020\226\004\022 \n\033ERROR_REACH_BUY_POWER_LIM"
    "IT\020\227\004\022!\n\034ERROR_DRAW_CARD_NO_FREE_TIME\020\230\004"
    "\022%\n ERROR_DRAW_CARD_REACH_TIME_LIMIT\020\231\004\022"
    "\032\n\025ERROR_DRAW_CARD_PARAM\020\232\004\022\033\n\026ERROR_DRA"
    "W_CARD_CONFIG\020\233\004\022\035\n\030ERROR_DRAW_CARD_BAG_"
    "FULL\020\234\004\022\035\n\030ERROR_DRAW_CARD_INTERNAL\020\235\004\022\'"
    "\n\"ERROR_DRAW_CARD_CONSUME_NOT_ENOUGH\020\236\004\022"
    "\027\n\022ERROR_TALENT_ERROR\020\304\004\022\027\n\022ERROR_TALENT"
    "_GRADE\020\305\004\022\030\n\023ERROR_TALENT_ACTIVE\020\306\004\022\033\n\026E"
    "RROR_TALENT_NOT_EXIST\020\307\004\022\037\n\032ERROR_TALENT"
    "_NOT_CANACTIVE\020\310\004\022!\n\034ERROR_PLAYER_SKILL_"
    "NOT_EXIST\020\316\004\022\"\n\035ERROR_PLAYER_SKILL_NOT_A"
    "CTIVE\020\317\004\022\036\n\031ERROR_PLAYER_SKILL_SELECT\020\320\004"
    "\022\034\n\027VERIFY_CFG_VERSION_SUCC\020\330\004\022\034\n\027VERIFY"
    "_CFG_VERSION_FAIL\020\331\004\022\026\n\021ERROR_PROTO_PARS"
    "E\020\350\007\022\030\n\023ERROR_SERVER_UNKNOW\020\351\007\022\020\n\013ERROR_"
    "PARAM\020\352\007\022\036\n\031ERROR_CLIENT_NEED_RELOGIN\020\353\007"
    "\022\037\n\032MOPPING_DISCOVERY_NOT_PASS\020\362\007\022\034\n\027MOP"
    "PING_LEVEL_NOT_REACH\020\363\007\022\033\n\026MOPPING_STAR_"
    "NOT_REACH\020\364\007\022(\n#MOPPING_CONSECUTIVE_LEVE"
    "L_NOT_REACH\020\365\007\022\034\n\027MOPPING_REWARD_BAG_FUL"
    "L\020\366\007\022 \n\033MOPPING_COMSUMES_NOT_ENOUGH\020\371\007\022\035"
    "\n\030MOPPING_REACH_TIME_LIMIT\020\367\007\022\032\n\025MOPPING"
    "_PARAM_INVALID\020\370\007\022\031\n\024MOPPING_CONFIG_ERRO"
    "R\020\372\007\022\034\n\027MOPPING_BUY_PARAM_ERROR\020\373\007\022&\n!MO"
    "PPING_BUY_ITEM_NOT_ENOUGH_ERROR\020\374\007\022\037\n\032HE"
    "RO_FORMATION_PARAM_ERROR\020\207\010\022 \n\033HERO_FORM"
    "ATION_CONFIG_ERROR\020\210\010\022\036\n\031HERO_FORMATION_"
    "BASE_ERROR\020\211\010\022\'\n\"HERO_FORMATION_ROLE_POS"
    "ITION_ERROR\020\212\010\022!\n\034HERO_FORMATION_REPEATE"
    "D_HERO\020\213\010\022\036\n\031HERO_FORMATION_SIZE_ERROR\020\214"
    "\010\022\"\n\035HERO_FORMATION_HERO_NOT_EXIST\020\215\010\022\"\n"
    "\035ERROR_SKILL_LV_MORE_THAN_HERO\020\216\010\022!\n\034ERR"
    "OR_SKILL_POINT_NOT_ENOUGH\020\217\010\022\032\n\025ERROR_SK"
    "ILL_IS_MAX_LV\020\220\010\022\030\n\023ERROR_SKILL_IS_LOCK\020"
    "\221\010\022\035\n\030ERROR_SLOT_HAVE_TALISMAN\020\223\010\022 \n\033ERR"
    "OR_SLOT_NO_HAVE_TALISMAN\020\224\010\022\035\n\030ERROR_TAL"
    "ISMAN_NOT_EXIST\020\225\010\022\030\n\023ERROR_TALISMAN_TYP"
    "E\020\226\010\022\030\n\023ERROR_TALISMAN_RARE\020\227\010\022\030\n\023ERROR_"
    "TALISMAN_DEST\020\230\010\022#\n\036ERROR_TALISMAN_NOT_A"
    "LLOW_BREAK\020\231\010\022\036\n\031ERROR_STARBOX_PARAM_ERR"
    "OR\020\232\010\022\037\n\032ERROR_STARBOX_CONFIG_ERROR\020\233\010\022\036"
    "\n\031ERROR_STARBOX_ALREADY_GET\020\234\010\022#\n\036ERROR_"
    "STARBOX_STAR_NOT_ENGOUGH\020\235\010\022\033\n\026ERROR_STA"
    "RBOX_BAG_FULL\020\236\010\022\033\n\026ERROR_STARBOX_BAG_SW"
    "AP\020\237\010\022\035\n\030ERROR_BATTLE_TIMES_LIMIT\020\244\010\022\026\n\021"
    "ERROR_SYSTEM_LOCK\020\245\010\022\031\n\024ERROR_GET_FLOOR_"
    "DATA\020\246\010\022\025\n\020ERROR_FLOOR_LOCK\020\247\010\022\030\n\023ERROR_"
    "FLOOR_UNVALID\020\250\010\022\035\n\030ERROR_QUESTIONID_UNV"
    "ALID\020\251\010\022\031\n\024ERROR_ANSWER_UNVALID\020\252\010\022\031\n\024ER"
    "ROR_QUESTION_EXIST\020\253\010\022\025\n\020ERROR_FLOOR_TYP"
    "E\020\254\010\022\033\n\026ERROR_RESET_NOT_ENOUGH\020\255\010\022\023\n\016ERR"
    "OR_WINE_CUP\020\256\010\022\031\n\024ERROR_QUESTION_DEBUG\020\257"
    "\010\022\017\n\nERROR_WINE\020\260\010\022\023\n\016ERROR_ADV_CITY\020\261\010\022"
    "\030\n\023ERROR_CITY_NOT_OPEN\020\262\010\022\034\n\027ERROR_ENERG"
    "Y_NOT_ENOUGH\020\263\010\022\032\n\025ERROR_NOT_FOUND_EVENT"
    "\020\264\010\022\025\n\020ERROR_NOT_IN_ADV\020\265\010\022\032\n\025ERROR_QUES"
    "TION_SYSTEM\020\266\010\022\036\n\031ERROR_FLOOR_MORE_MAXFL"
    "OOR\020\267\010\022\032\n\025ERROR_FLOOR_STEP_LOCK\020\270\010\022\036\n\031ER"
    "ROR_FLOOR_STEP_NOT_PASS\020\271\010\022\030\n\023ERROR_CHAT"
    "_ROOM_POS\020\314\010\022#\n\036ERROR_CHAT_ROOM_ROLE_NOT"
    "_EXIST\020\315\010\022\036\n\031ERROR_CHAT_ROOM_NOT_EXIST\020\316"
    "\010\022\032\n\025ERROR_CHAT_ROOM_EXIST\020\317\010\022\"\n\035ERROR_R"
    "OLE_EXIST_IN_CHAT_ROOM\020\320\010\022\030\n\023ERROR_SCENE"
    "_EXPIRED\020\321\010\022\032\n\025ERROR_SCENE_NOT_EXIST\020\322\010\022"
    "\025\n\020ERROR_SCENE_PULL\020\323\010\022\027\n\022ERROR_SCENE_SW"
    "ITCH\020\324\010\022&\n!ERROR_GET_CHAT_ROOM_LIST_TOO_"
    "MUCH\020\325\010\022!\n\034ERROR_CHAT_ROOM_TIMER_FAILED\020"
    "\326\010\022\036\n\031ERROR_CHAT_ROOM_NOT_OWNER\020\327\010\022&\n!ER"
    "ROR_CHAT_ROOM_OWNER_GRADE_ERROR\020\330\010\022 \n\033ER"
    "ROR_CHAT_ROOM_TOKEN_ERROR\020\331\010\022\037\n\032ERROR_CH"
    "AT_ROOM_NAME_EMPTY\020\332\010\022\"\n\035ERROR_CHAT_ROOM"
    "_CREATE_FORBIT\020\333\010\022$\n\037ERROR_CHAT_ROOM_EXC"
    "EED_MAX_SIZE\020\334\010\022\031\n\024ERROR_FASHION_CONFIG\020"
    "\364\010\022\030\n\023ERROR_FASHION_PARAM\020\365\010\022\033\n\026ERROR_FA"
    "SHION_INTERNAL\020\366\010\022\037\n\032ERROR_FASHION_NO_SU"
    "CH_UUID\020\367\010\022\037\n\032ERROR_FASHION_NO_SUCH_ROLE"
    "\020\370\010\022$\n\037ERROR_SESSION_ILLEGAL_OPERATION\020\200"
    "\t\022\034\n\027ERROR_MAIL_NO_SUCH_MAIL\020\210\t\022!\n\034ERROR"
    "_MAIL_STATE_SET_INVALID\020\211\t\022\034\n\027ERROR_MAIL"
    "_SEND_TIMEOUT\020\212\t\022 \n\033ERROR_MAIL_LAST_OPT_"
    "RUNNING\020\213\t\022\037\n\032ERROR_MAIL_LEVEL_NOT_REACH"
    "\020\214\t\022\036\n\031ERROR_MAIL_BAG_NOT_ENOUGH\020\215\t\022!\n\034E"
    "RROR_MAIL_FRIEND_MAIL_ERROR\020\216\t\022\035\n\030ERROR_"
    "PLOT_LITTLE_CONFIG\020\234\t\022\027\n\022ERROR_PET_NOT_F"
    "IND\020\246\t\022\025\n\020ERROR_PET_NO_CFG\020\247\t\022\035\n\030ERROR_P"
    "ET_BAG_NOT_ENOUGH\020\250\t\022\032\n\025ERROR_PET_NOT_AT"
    "_HOME\020\251\t\022\032\n\025ERROR_PET_OUT_DAY_MAX\020\252\t\022\030\n\023"
    "ERROR_PET_OUT_IN_CD\020\253\t\022$\n\037ERROR_PET_OUT_"
    "NO_SUITABLE_STORY\020\254\t\022\035\n\030ERROR_PET_INTERN"
    "AL_ERROR\020\255\t\022!\n\034ERROR_PET_OUT_AWARD_NOT_D"
    "RAW\020\256\t\022\033\n\026ERROR_PET_NO_OUT_AWARD\020\257\t\022\033\n\026E"
    "RROR_PET_SYS_NOT_OPEN\020\260\t\022\035\n\030ERROR_PET_ST"
    "ATE_OVERFLOW\020\261\t\022 \n\033ERROR_PET_ACTION_TYPE"
    "_ERROR\020\262\t\022\035\n\030ERROR_PET_ITEM_CFG_ERROR\020\263\t"
    "\022\036\n\031ERROR_PET_ITEM_NOT_ENOUGH\020\264\t\022\032\n\025ERRO"
    "R_PET_OUT_NUM_MAX\020\265\t\022$\n\037ERROR_PET_OUT_ON"
    "E_PLACE_NUM_MAX\020\266\t", 10018);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_errorcode.proto", &protobuf_RegisterTypes);
  game_error_ntf::default_instance_ = new game_error_ntf();
  game_error_ntf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5ferrorcode_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5ferrorcode_2eproto {
  StaticDescriptorInitializer_cs_5ferrorcode_2eproto() {
    protobuf_AddDesc_cs_5ferrorcode_2eproto();
  }
} static_descriptor_initializer_cs_5ferrorcode_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgErrorType_descriptor_;
}
bool MsgErrorType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 120:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 260:
    case 261:
    case 262:
    case 263:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 310:
    case 311:
    case 312:
    case 313:
    case 314:
    case 315:
    case 330:
    case 331:
    case 332:
    case 333:
    case 350:
    case 351:
    case 352:
    case 353:
    case 354:
    case 355:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 409:
    case 410:
    case 411:
    case 501:
    case 502:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 590:
    case 591:
    case 592:
    case 600:
    case 601:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1072:
    case 1073:
    case 1074:
    case 1075:
    case 1076:
    case 1077:
    case 1078:
    case 1079:
    case 1080:
    case 1081:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1140:
    case 1141:
    case 1142:
    case 1143:
    case 1144:
    case 1152:
    case 1160:
    case 1161:
    case 1162:
    case 1163:
    case 1164:
    case 1165:
    case 1166:
    case 1180:
    case 1190:
    case 1191:
    case 1192:
    case 1193:
    case 1194:
    case 1195:
    case 1196:
    case 1197:
    case 1198:
    case 1199:
    case 1200:
    case 1201:
    case 1202:
    case 1203:
    case 1204:
    case 1205:
    case 1206:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int game_error_ntf::kProtoidFieldNumber;
const int game_error_ntf::kErrorNumFieldNumber;
#endif  // !_MSC_VER

game_error_ntf::game_error_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_error_ntf::InitAsDefaultInstance() {
}

game_error_ntf::game_error_ntf(const game_error_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_error_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5019;
  error_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_error_ntf::~game_error_ntf() {
  SharedDtor();
}

void game_error_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_error_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_error_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_error_ntf_descriptor_;
}

const game_error_ntf& game_error_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5ferrorcode_2eproto();
  return *default_instance_;
}

game_error_ntf* game_error_ntf::default_instance_ = NULL;

game_error_ntf* game_error_ntf::New() const {
  return new game_error_ntf;
}

void game_error_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5019;
    error_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_error_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_error_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_num;
        break;
      }

      // optional int32 error_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_num_)));
          set_has_error_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_error_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_error_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 error_num = 2;
  if (has_error_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_error_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_error_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 error_num = 2;
  if (has_error_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_error_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = game_error_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 error_num = 2;
    if (has_error_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_error_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_error_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_error_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_error_ntf::MergeFrom(const game_error_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error_num()) {
      set_error_num(from.error_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_error_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_error_ntf::CopyFrom(const game_error_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_error_ntf::IsInitialized() const {

  return true;
}

void game_error_ntf::Swap(game_error_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(error_num_, other->error_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_error_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_error_ntf_descriptor_;
  metadata.reflection = game_error_ntf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
