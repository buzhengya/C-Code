// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* gm2l_heartbeat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2l_heartbeat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* l2gm_heartbeat_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  l2gm_heartbeat_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm2l_close_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm2l_close_req_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5flogin_2eproto() {
  protobuf_AddDesc_ss_5flogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_login.proto");
  GOOGLE_CHECK(file != NULL);
  gm2l_heartbeat_req_descriptor_ = file->message_type(0);
  static const int gm2l_heartbeat_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2l_heartbeat_req, protoid_),
  };
  gm2l_heartbeat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2l_heartbeat_req_descriptor_,
      gm2l_heartbeat_req::default_instance_,
      gm2l_heartbeat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2l_heartbeat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2l_heartbeat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2l_heartbeat_req));
  l2gm_heartbeat_ack_descriptor_ = file->message_type(1);
  static const int l2gm_heartbeat_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2gm_heartbeat_ack, protoid_),
  };
  l2gm_heartbeat_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      l2gm_heartbeat_ack_descriptor_,
      l2gm_heartbeat_ack::default_instance_,
      l2gm_heartbeat_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2gm_heartbeat_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(l2gm_heartbeat_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(l2gm_heartbeat_ack));
  gm2l_close_req_descriptor_ = file->message_type(2);
  static const int gm2l_close_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2l_close_req, protoid_),
  };
  gm2l_close_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm2l_close_req_descriptor_,
      gm2l_close_req::default_instance_,
      gm2l_close_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2l_close_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm2l_close_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm2l_close_req));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5flogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2l_heartbeat_req_descriptor_, &gm2l_heartbeat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    l2gm_heartbeat_ack_descriptor_, &l2gm_heartbeat_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm2l_close_req_descriptor_, &gm2l_close_req::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5flogin_2eproto() {
  delete gm2l_heartbeat_req::default_instance_;
  delete gm2l_heartbeat_req_reflection_;
  delete l2gm_heartbeat_ack::default_instance_;
  delete l2gm_heartbeat_ack_reflection_;
  delete gm2l_close_req::default_instance_;
  delete gm2l_close_req_reflection_;
}

void protobuf_AddDesc_ss_5flogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016ss_login.proto\022\013SProtoSpace\032\020ss_protoi"
    "d.proto\"U\n\022gm2l_heartbeat_req\022\?\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025gm2l_he"
    "artbeat_req_id\"U\n\022l2gm_heartbeat_ack\022\?\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025"
    "l2gm_heartbeat_ack_id\"M\n\016gm2l_close_req\022"
    ";\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\021gm2l_close_req_id", 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_login.proto", &protobuf_RegisterTypes);
  gm2l_heartbeat_req::default_instance_ = new gm2l_heartbeat_req();
  l2gm_heartbeat_ack::default_instance_ = new l2gm_heartbeat_ack();
  gm2l_close_req::default_instance_ = new gm2l_close_req();
  gm2l_heartbeat_req::default_instance_->InitAsDefaultInstance();
  l2gm_heartbeat_ack::default_instance_->InitAsDefaultInstance();
  gm2l_close_req::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5flogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5flogin_2eproto {
  StaticDescriptorInitializer_ss_5flogin_2eproto() {
    protobuf_AddDesc_ss_5flogin_2eproto();
  }
} static_descriptor_initializer_ss_5flogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int gm2l_heartbeat_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

gm2l_heartbeat_req::gm2l_heartbeat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2l_heartbeat_req::InitAsDefaultInstance() {
}

gm2l_heartbeat_req::gm2l_heartbeat_req(const gm2l_heartbeat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2l_heartbeat_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 70;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2l_heartbeat_req::~gm2l_heartbeat_req() {
  SharedDtor();
}

void gm2l_heartbeat_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2l_heartbeat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2l_heartbeat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2l_heartbeat_req_descriptor_;
}

const gm2l_heartbeat_req& gm2l_heartbeat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5flogin_2eproto();
  return *default_instance_;
}

gm2l_heartbeat_req* gm2l_heartbeat_req::default_instance_ = NULL;

gm2l_heartbeat_req* gm2l_heartbeat_req::New() const {
  return new gm2l_heartbeat_req;
}

void gm2l_heartbeat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 70;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2l_heartbeat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_heartbeat_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2l_heartbeat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_heartbeat_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2l_heartbeat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_heartbeat_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2l_heartbeat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_heartbeat_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2l_heartbeat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2l_heartbeat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2l_heartbeat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2l_heartbeat_req::MergeFrom(const gm2l_heartbeat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2l_heartbeat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2l_heartbeat_req::CopyFrom(const gm2l_heartbeat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2l_heartbeat_req::IsInitialized() const {

  return true;
}

void gm2l_heartbeat_req::Swap(gm2l_heartbeat_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2l_heartbeat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2l_heartbeat_req_descriptor_;
  metadata.reflection = gm2l_heartbeat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int l2gm_heartbeat_ack::kProtoidFieldNumber;
#endif  // !_MSC_VER

l2gm_heartbeat_ack::l2gm_heartbeat_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void l2gm_heartbeat_ack::InitAsDefaultInstance() {
}

l2gm_heartbeat_ack::l2gm_heartbeat_ack(const l2gm_heartbeat_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void l2gm_heartbeat_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 71;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

l2gm_heartbeat_ack::~l2gm_heartbeat_ack() {
  SharedDtor();
}

void l2gm_heartbeat_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void l2gm_heartbeat_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* l2gm_heartbeat_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return l2gm_heartbeat_ack_descriptor_;
}

const l2gm_heartbeat_ack& l2gm_heartbeat_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5flogin_2eproto();
  return *default_instance_;
}

l2gm_heartbeat_ack* l2gm_heartbeat_ack::default_instance_ = NULL;

l2gm_heartbeat_ack* l2gm_heartbeat_ack::New() const {
  return new l2gm_heartbeat_ack;
}

void l2gm_heartbeat_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 71;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool l2gm_heartbeat_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = l2gm_heartbeat_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void l2gm_heartbeat_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = l2gm_heartbeat_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* l2gm_heartbeat_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = l2gm_heartbeat_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int l2gm_heartbeat_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = l2gm_heartbeat_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void l2gm_heartbeat_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const l2gm_heartbeat_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const l2gm_heartbeat_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void l2gm_heartbeat_ack::MergeFrom(const l2gm_heartbeat_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void l2gm_heartbeat_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void l2gm_heartbeat_ack::CopyFrom(const l2gm_heartbeat_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool l2gm_heartbeat_ack::IsInitialized() const {

  return true;
}

void l2gm_heartbeat_ack::Swap(l2gm_heartbeat_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata l2gm_heartbeat_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = l2gm_heartbeat_ack_descriptor_;
  metadata.reflection = l2gm_heartbeat_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm2l_close_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

gm2l_close_req::gm2l_close_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm2l_close_req::InitAsDefaultInstance() {
}

gm2l_close_req::gm2l_close_req(const gm2l_close_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm2l_close_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 72;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm2l_close_req::~gm2l_close_req() {
  SharedDtor();
}

void gm2l_close_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gm2l_close_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm2l_close_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm2l_close_req_descriptor_;
}

const gm2l_close_req& gm2l_close_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5flogin_2eproto();
  return *default_instance_;
}

gm2l_close_req* gm2l_close_req::default_instance_ = NULL;

gm2l_close_req* gm2l_close_req::New() const {
  return new gm2l_close_req;
}

void gm2l_close_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 72;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm2l_close_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_close_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm2l_close_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_close_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm2l_close_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_close_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm2l_close_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gm2l_close_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm2l_close_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm2l_close_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm2l_close_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm2l_close_req::MergeFrom(const gm2l_close_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm2l_close_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm2l_close_req::CopyFrom(const gm2l_close_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm2l_close_req::IsInitialized() const {

  return true;
}

void gm2l_close_req::Swap(gm2l_close_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm2l_close_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm2l_close_req_descriptor_;
  metadata.reflection = gm2l_close_req_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
