// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_public.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_public.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* pub_harem_compete_qingan_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_harem_compete_qingan_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_harem_compete_slap_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_harem_compete_slap_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_role_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_role_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_role_info_cache_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_role_info_cache_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_result_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_result_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* officer_reduce_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  officer_reduce_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_db_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_db_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_db_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_db_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_redis_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_redis_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* rank_refresh_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rank_refresh_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_role_login_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_role_login_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_role_login_batch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_role_login_batch_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_role_logout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_role_logout_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_role_info_sync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_role_info_sync_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_create_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_create_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_create_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_create_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_update_team_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_update_team_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_enter_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_enter_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_enter_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_enter_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_exit_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_exit_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_exit_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_exit_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_ready_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_ready_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_ready_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_ready_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_update_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_update_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_update_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_update_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_get_teams_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_get_teams_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_get_teams_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_get_teams_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_invite_enter_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_invite_enter_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_invite_enter_team_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_invite_enter_team_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_get_offical_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_get_offical_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_get_offical_rank_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_get_offical_rank_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_global_offical_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_global_offical_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_global_offical_rank_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_global_offical_rank_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_get_offical_rank_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_get_offical_rank_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_get_offical_rank_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_get_offical_rank_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_add_robot_to_offical_arena_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_add_robot_to_offical_arena_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_add_robot_to_offical_arena_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_add_robot_to_offical_arena_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_challenge_offical_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_challenge_offical_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_challenge_offical_rank_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_challenge_offical_rank_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_update_challenge_result_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_update_challenge_result_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_update_challenge_result_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_update_challenge_result_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_examine_battle_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_examine_battle_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_examine_battle_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_examine_battle_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_offical_apply_battle_result_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_offical_apply_battle_result_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_offical_apply_battle_result_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_offical_apply_battle_result_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_test_offical_battle_result_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_test_offical_battle_result_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_test_start_offical_battle_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_test_start_offical_battle_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ps_test_offical_sign_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ps_test_offical_sign_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_friend_opt_forward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_friend_opt_forward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_friend_opt_forward_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_friend_opt_forward_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_harem_compete_friends_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_harem_compete_friends_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_harem_compete_friends_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_harem_compete_friends_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_search_role_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_search_role_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_search_role_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_search_role_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_officer_apply_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_officer_apply_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_officer_apply_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_officer_apply_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_heros_formation_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_heros_formation_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_officer_result_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_officer_result_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_offical_reduce_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_offical_reduce_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_load_offical_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_load_offical_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_load_offical_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_load_offical_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_officer_applicants_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_officer_applicants_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_officer_applicants_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_officer_applicants_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_update_offical_lv_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_update_offical_lv_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_cancel_offical_apply_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_cancel_offical_apply_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_cancel_offical_apply_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_cancel_offical_apply_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_challenge_roles_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_challenge_roles_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_challenge_roles_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_challenge_roles_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_send_flower_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_send_flower_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_send_flower_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_send_flower_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_flower_to_receive_nty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_flower_to_receive_nty_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_flower_to_receive_nty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_flower_to_receive_nty_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_forward_add_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_forward_add_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_forward_add_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_forward_add_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* message_packing_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  message_packing_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_msg_packing_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_msg_packing_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_msg_packing_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_msg_packing_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_role_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_role_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_role_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_role_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_friends_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_friends_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_complete_role_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_complete_role_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_complete_role_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_complete_role_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_friend_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_friend_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_friend_refresh_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_friend_refresh_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_get_all_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_get_all_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_get_all_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_get_all_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_get_id_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_get_id_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_get_id_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_get_id_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_delete_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_delete_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_delete_type_msgs_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_delete_type_msgs_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_read_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_read_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_insert_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_insert_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_game_insert_event_msg_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_game_insert_event_msg_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_get_rank_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_get_rank_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_pub_get_rank_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_pub_get_rank_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_rank_data_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_rank_data_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_battle_replay_save_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_battle_replay_save_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_battle_replay_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_battle_replay_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_battle_replay_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_battle_replay_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_query_scene_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_query_scene_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_query_scene_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_query_scene_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_destory_scene_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_destory_scene_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_scene_role_change_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_scene_role_change_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_update_3d_scene_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_update_3d_scene_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_switch_game_id_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_switch_game_id_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_officer_daily_salary_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_officer_daily_salary_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_officer_daily_salary_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_officer_daily_salary_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_offical_battle_report_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_offical_battle_report_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_offical_battle_report_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_offical_battle_report_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_formation_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_formation_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_formation_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_formation_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_gm_upgrade_office_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_gm_upgrade_office_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_robot_gen_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_robot_gen_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_robot_gen_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_robot_gen_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_minimum_chat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_minimum_chat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_minimum_chat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_minimum_chat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_chat_room_list_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_chat_room_list_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_chat_room_list_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_chat_room_list_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_create_3dchat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_create_3dchat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_create_3dchat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_create_3dchat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_top_3dchat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_top_3dchat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_top_3dchat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_top_3dchat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_cancel_top_3dchat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_cancel_top_3dchat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_cancel_top_3dchat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_cancel_top_3dchat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_change_name_3dchat_room_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_change_name_3dchat_room_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_change_name_3dchat_room_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_change_name_3dchat_room_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_role_gs_id_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_role_gs_id_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_role_gs_id_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_role_gs_id_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_members_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_members_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_members_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_members_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_gm_start_match_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_gm_start_match_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_gm_start_match_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_gm_start_match_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_gm_send_office_mail_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_gm_send_office_mail_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pub_get_offical_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pub_get_offical_data_ack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGetRoleDoType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fpublic_2eproto() {
  protobuf_AddDesc_ss_5fpublic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_public.proto");
  GOOGLE_CHECK(file != NULL);
  pub_harem_compete_qingan_req_descriptor_ = file->message_type(0);
  static const int pub_harem_compete_qingan_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, self_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, event_uuid_),
  };
  pub_harem_compete_qingan_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_harem_compete_qingan_req_descriptor_,
      pub_harem_compete_qingan_req::default_instance_,
      pub_harem_compete_qingan_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_qingan_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_harem_compete_qingan_req));
  pub_harem_compete_slap_req_descriptor_ = file->message_type(1);
  static const int pub_harem_compete_slap_req_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, self_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, role_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, take_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, slap_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, event_uuid_),
  };
  pub_harem_compete_slap_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_harem_compete_slap_req_descriptor_,
      pub_harem_compete_slap_req::default_instance_,
      pub_harem_compete_slap_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_slap_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_harem_compete_slap_req));
  pub_role_info_descriptor_ = file->message_type(2);
  static const int pub_role_info_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, battle_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, paixi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, border_),
  };
  pub_role_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_role_info_descriptor_,
      pub_role_info::default_instance_,
      pub_role_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_role_info));
  pub_role_info_cache_descriptor_ = file->message_type(3);
  static const int pub_role_info_cache_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_cache, role_info_list_),
  };
  pub_role_info_cache_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_role_info_cache_descriptor_,
      pub_role_info_cache::default_instance_,
      pub_role_info_cache_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_cache, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_cache, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_role_info_cache));
  officer_result_data_descriptor_ = file->message_type(4);
  static const int officer_result_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_data, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_data, ret_),
  };
  officer_result_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_result_data_descriptor_,
      officer_result_data::default_instance_,
      officer_result_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_result_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_result_data));
  officer_reduce_data_descriptor_ = file->message_type(5);
  static const int officer_reduce_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_reduce_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_reduce_data, old_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_reduce_data, new_grade_),
  };
  officer_reduce_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      officer_reduce_data_descriptor_,
      officer_reduce_data::default_instance_,
      officer_reduce_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_reduce_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(officer_reduce_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(officer_reduce_data));
  rank_db_item_descriptor_ = file->message_type(6);
  static const int rank_db_item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_item, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_item, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_item, order_),
  };
  rank_db_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_db_item_descriptor_,
      rank_db_item::default_instance_,
      rank_db_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_db_item));
  rank_db_data_descriptor_ = file->message_type(7);
  static const int rank_db_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_data, rank_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_data, items_),
  };
  rank_db_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_db_data_descriptor_,
      rank_db_data::default_instance_,
      rank_db_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_db_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_db_data));
  rank_redis_data_descriptor_ = file->message_type(8);
  static const int rank_redis_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_redis_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_redis_data, value_),
  };
  rank_redis_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_redis_data_descriptor_,
      rank_redis_data::default_instance_,
      rank_redis_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_redis_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_redis_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_redis_data));
  rank_refresh_data_descriptor_ = file->message_type(9);
  static const int rank_refresh_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_refresh_data, min_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_refresh_data, cur_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_refresh_data, members_),
  };
  rank_refresh_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rank_refresh_data_descriptor_,
      rank_refresh_data::default_instance_,
      rank_refresh_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_refresh_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rank_refresh_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rank_refresh_data));
  pub_role_login_descriptor_ = file->message_type(10);
  static const int pub_role_login_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, game_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, gate_session_id_),
  };
  pub_role_login_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_role_login_descriptor_,
      pub_role_login::default_instance_,
      pub_role_login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_role_login));
  pub_role_login_batch_descriptor_ = file->message_type(11);
  static const int pub_role_login_batch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login_batch, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login_batch, role_logins_),
  };
  pub_role_login_batch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_role_login_batch_descriptor_,
      pub_role_login_batch::default_instance_,
      pub_role_login_batch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login_batch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_login_batch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_role_login_batch));
  pub_role_logout_descriptor_ = file->message_type(12);
  static const int pub_role_logout_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_logout, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_logout, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_logout, role_name_),
  };
  pub_role_logout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_role_logout_descriptor_,
      pub_role_logout::default_instance_,
      pub_role_logout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_logout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_logout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_role_logout));
  pub_role_info_sync_descriptor_ = file->message_type(13);
  static const int pub_role_info_sync_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, game_session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, gate_session_id_),
  };
  pub_role_info_sync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_role_info_sync_descriptor_,
      pub_role_info_sync::default_instance_,
      pub_role_info_sync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_role_info_sync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_role_info_sync));
  ps_create_team_req_descriptor_ = file->message_type(14);
  static const int ps_create_team_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, heros_),
  };
  ps_create_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_create_team_req_descriptor_,
      ps_create_team_req::default_instance_,
      ps_create_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_create_team_req));
  ps_create_team_ack_descriptor_ = file->message_type(15);
  static const int ps_create_team_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, ret_),
  };
  ps_create_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_create_team_ack_descriptor_,
      ps_create_team_ack::default_instance_,
      ps_create_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_create_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_create_team_ack));
  ps_update_team_ntf_descriptor_ = file->message_type(16);
  static const int ps_update_team_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ntf, team_),
  };
  ps_update_team_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_update_team_ntf_descriptor_,
      ps_update_team_ntf::default_instance_,
      ps_update_team_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_update_team_ntf));
  ps_enter_team_req_descriptor_ = file->message_type(17);
  static const int ps_enter_team_req_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, gs_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, heros_),
  };
  ps_enter_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_enter_team_req_descriptor_,
      ps_enter_team_req::default_instance_,
      ps_enter_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_enter_team_req));
  ps_enter_team_ack_descriptor_ = file->message_type(18);
  static const int ps_enter_team_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_ack, ret_),
  };
  ps_enter_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_enter_team_ack_descriptor_,
      ps_enter_team_ack::default_instance_,
      ps_enter_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_enter_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_enter_team_ack));
  ps_exit_team_req_descriptor_ = file->message_type(19);
  static const int ps_exit_team_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_req, role_id_),
  };
  ps_exit_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_exit_team_req_descriptor_,
      ps_exit_team_req::default_instance_,
      ps_exit_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_exit_team_req));
  ps_exit_team_ack_descriptor_ = file->message_type(20);
  static const int ps_exit_team_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_ack, ret_),
  };
  ps_exit_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_exit_team_ack_descriptor_,
      ps_exit_team_ack::default_instance_,
      ps_exit_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_exit_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_exit_team_ack));
  ps_ready_team_req_descriptor_ = file->message_type(21);
  static const int ps_ready_team_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_req, role_id_),
  };
  ps_ready_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_ready_team_req_descriptor_,
      ps_ready_team_req::default_instance_,
      ps_ready_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_ready_team_req));
  ps_ready_team_ack_descriptor_ = file->message_type(22);
  static const int ps_ready_team_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_ack, ret_),
  };
  ps_ready_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_ready_team_ack_descriptor_,
      ps_ready_team_ack::default_instance_,
      ps_ready_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_ready_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_ready_team_ack));
  ps_update_team_req_descriptor_ = file->message_type(23);
  static const int ps_update_team_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, heros_),
  };
  ps_update_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_update_team_req_descriptor_,
      ps_update_team_req::default_instance_,
      ps_update_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_update_team_req));
  ps_update_team_ack_descriptor_ = file->message_type(24);
  static const int ps_update_team_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, ret_),
  };
  ps_update_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_update_team_ack_descriptor_,
      ps_update_team_ack::default_instance_,
      ps_update_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_update_team_ack));
  ps_get_teams_req_descriptor_ = file->message_type(25);
  static const int ps_get_teams_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, parms_),
  };
  ps_get_teams_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_get_teams_req_descriptor_,
      ps_get_teams_req::default_instance_,
      ps_get_teams_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_get_teams_req));
  ps_get_teams_ack_descriptor_ = file->message_type(26);
  static const int ps_get_teams_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_ack, teams_),
  };
  ps_get_teams_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_get_teams_ack_descriptor_,
      ps_get_teams_ack::default_instance_,
      ps_get_teams_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_teams_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_get_teams_ack));
  ps_invite_enter_team_req_descriptor_ = file->message_type(27);
  static const int ps_invite_enter_team_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, sour_role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, roleids_),
  };
  ps_invite_enter_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_invite_enter_team_req_descriptor_,
      ps_invite_enter_team_req::default_instance_,
      ps_invite_enter_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_invite_enter_team_req));
  ps_invite_enter_team_ntf_descriptor_ = file->message_type(28);
  static const int ps_invite_enter_team_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, sour_role_name_),
  };
  ps_invite_enter_team_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_invite_enter_team_ntf_descriptor_,
      ps_invite_enter_team_ntf::default_instance_,
      ps_invite_enter_team_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_invite_enter_team_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_invite_enter_team_ntf));
  ps_get_offical_rank_req_descriptor_ = file->message_type(29);
  static const int ps_get_offical_rank_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, end_),
  };
  ps_get_offical_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_get_offical_rank_req_descriptor_,
      ps_get_offical_rank_req::default_instance_,
      ps_get_offical_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_get_offical_rank_req));
  ps_get_offical_rank_ack_descriptor_ = file->message_type(30);
  static const int ps_get_offical_rank_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_ack, rank_items_),
  };
  ps_get_offical_rank_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_get_offical_rank_ack_descriptor_,
      ps_get_offical_rank_ack::default_instance_,
      ps_get_offical_rank_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_get_offical_rank_ack));
  ps_global_offical_rank_req_descriptor_ = file->message_type(31);
  static const int ps_global_offical_rank_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_req, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_req, end_),
  };
  ps_global_offical_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_global_offical_rank_req_descriptor_,
      ps_global_offical_rank_req::default_instance_,
      ps_global_offical_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_global_offical_rank_req));
  ps_global_offical_rank_ack_descriptor_ = file->message_type(32);
  static const int ps_global_offical_rank_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_ack, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_ack, my_data_),
  };
  ps_global_offical_rank_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_global_offical_rank_ack_descriptor_,
      ps_global_offical_rank_ack::default_instance_,
      ps_global_offical_rank_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_global_offical_rank_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_global_offical_rank_ack));
  ps_get_offical_rank_info_req_descriptor_ = file->message_type(33);
  static const int ps_get_offical_rank_info_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, show_),
  };
  ps_get_offical_rank_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_get_offical_rank_info_req_descriptor_,
      ps_get_offical_rank_info_req::default_instance_,
      ps_get_offical_rank_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_get_offical_rank_info_req));
  ps_get_offical_rank_info_ack_descriptor_ = file->message_type(34);
  static const int ps_get_offical_rank_info_ack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, offical_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, offical_challenge_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, my_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, rank_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, count_),
  };
  ps_get_offical_rank_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_get_offical_rank_info_ack_descriptor_,
      ps_get_offical_rank_info_ack::default_instance_,
      ps_get_offical_rank_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_get_offical_rank_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_get_offical_rank_info_ack));
  ps_add_robot_to_offical_arena_req_descriptor_ = file->message_type(35);
  static const int ps_add_robot_to_offical_arena_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_req, item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_req, office_lv_),
  };
  ps_add_robot_to_offical_arena_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_add_robot_to_offical_arena_req_descriptor_,
      ps_add_robot_to_offical_arena_req::default_instance_,
      ps_add_robot_to_offical_arena_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_add_robot_to_offical_arena_req));
  ps_add_robot_to_offical_arena_ack_descriptor_ = file->message_type(36);
  static const int ps_add_robot_to_offical_arena_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_ack, ret_),
  };
  ps_add_robot_to_offical_arena_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_add_robot_to_offical_arena_ack_descriptor_,
      ps_add_robot_to_offical_arena_ack::default_instance_,
      ps_add_robot_to_offical_arena_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_add_robot_to_offical_arena_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_add_robot_to_offical_arena_ack));
  ps_challenge_offical_rank_req_descriptor_ = file->message_type(37);
  static const int ps_challenge_offical_rank_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_req, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_req, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_req, office_lv_),
  };
  ps_challenge_offical_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_challenge_offical_rank_req_descriptor_,
      ps_challenge_offical_rank_req::default_instance_,
      ps_challenge_offical_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_challenge_offical_rank_req));
  ps_challenge_offical_rank_ack_descriptor_ = file->message_type(38);
  static const int ps_challenge_offical_rank_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, sour_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, dest_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, ret_),
  };
  ps_challenge_offical_rank_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_challenge_offical_rank_ack_descriptor_,
      ps_challenge_offical_rank_ack::default_instance_,
      ps_challenge_offical_rank_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_challenge_offical_rank_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_challenge_offical_rank_ack));
  ps_update_challenge_result_req_descriptor_ = file->message_type(39);
  static const int ps_update_challenge_result_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, battle_id_),
  };
  ps_update_challenge_result_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_update_challenge_result_req_descriptor_,
      ps_update_challenge_result_req::default_instance_,
      ps_update_challenge_result_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_update_challenge_result_req));
  ps_update_challenge_result_ack_descriptor_ = file->message_type(40);
  static const int ps_update_challenge_result_ack_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, dest_older_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, dest_new_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, sour_older_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, sour_new_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, win_),
  };
  ps_update_challenge_result_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_update_challenge_result_ack_descriptor_,
      ps_update_challenge_result_ack::default_instance_,
      ps_update_challenge_result_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_update_challenge_result_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_update_challenge_result_ack));
  offical_examine_battle_req_descriptor_ = file->message_type(41);
  static const int offical_examine_battle_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_req, sour_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_req, dest_data_),
  };
  offical_examine_battle_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_examine_battle_req_descriptor_,
      offical_examine_battle_req::default_instance_,
      offical_examine_battle_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_examine_battle_req));
  offical_examine_battle_ack_descriptor_ = file->message_type(42);
  static const int offical_examine_battle_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, sour_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, dest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, sour_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, dest_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, win_),
  };
  offical_examine_battle_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_examine_battle_ack_descriptor_,
      offical_examine_battle_ack::default_instance_,
      offical_examine_battle_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_examine_battle_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_examine_battle_ack));
  ps_offical_apply_battle_result_req_descriptor_ = file->message_type(43);
  static const int ps_offical_apply_battle_result_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_req, role_id_),
  };
  ps_offical_apply_battle_result_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_offical_apply_battle_result_req_descriptor_,
      ps_offical_apply_battle_result_req::default_instance_,
      ps_offical_apply_battle_result_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_offical_apply_battle_result_req));
  ps_offical_apply_battle_result_ack_descriptor_ = file->message_type(44);
  static const int ps_offical_apply_battle_result_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, my_place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, mydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, ret_),
  };
  ps_offical_apply_battle_result_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_offical_apply_battle_result_ack_descriptor_,
      ps_offical_apply_battle_result_ack::default_instance_,
      ps_offical_apply_battle_result_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_offical_apply_battle_result_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_offical_apply_battle_result_ack));
  ps_test_offical_battle_result_req_descriptor_ = file->message_type(45);
  static const int ps_test_offical_battle_result_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_offical_battle_result_req, proto_id_),
  };
  ps_test_offical_battle_result_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_test_offical_battle_result_req_descriptor_,
      ps_test_offical_battle_result_req::default_instance_,
      ps_test_offical_battle_result_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_offical_battle_result_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_offical_battle_result_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_test_offical_battle_result_req));
  ps_test_start_offical_battle_req_descriptor_ = file->message_type(46);
  static const int ps_test_start_offical_battle_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_start_offical_battle_req, proto_id_),
  };
  ps_test_start_offical_battle_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_test_start_offical_battle_req_descriptor_,
      ps_test_start_offical_battle_req::default_instance_,
      ps_test_start_offical_battle_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_start_offical_battle_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_start_offical_battle_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_test_start_offical_battle_req));
  ps_test_offical_sign_up_req_descriptor_ = file->message_type(47);
  static const int ps_test_offical_sign_up_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_offical_sign_up_req, proto_id_),
  };
  ps_test_offical_sign_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ps_test_offical_sign_up_req_descriptor_,
      ps_test_offical_sign_up_req::default_instance_,
      ps_test_offical_sign_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_offical_sign_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ps_test_offical_sign_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ps_test_offical_sign_up_req));
  pub_friend_opt_forward_req_descriptor_ = file->message_type(48);
  static const int pub_friend_opt_forward_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_req, onf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_req, apply_id_),
  };
  pub_friend_opt_forward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_friend_opt_forward_req_descriptor_,
      pub_friend_opt_forward_req::default_instance_,
      pub_friend_opt_forward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_friend_opt_forward_req));
  pub_friend_opt_forward_ack_descriptor_ = file->message_type(49);
  static const int pub_friend_opt_forward_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_ack, onf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_ack, apply_id_),
  };
  pub_friend_opt_forward_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_friend_opt_forward_ack_descriptor_,
      pub_friend_opt_forward_ack::default_instance_,
      pub_friend_opt_forward_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_opt_forward_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_friend_opt_forward_ack));
  pub_harem_compete_friends_req_descriptor_ = file->message_type(50);
  static const int pub_harem_compete_friends_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, gd_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, grade_),
  };
  pub_harem_compete_friends_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_harem_compete_friends_req_descriptor_,
      pub_harem_compete_friends_req::default_instance_,
      pub_harem_compete_friends_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_harem_compete_friends_req));
  pub_harem_compete_friends_ack_descriptor_ = file->message_type(51);
  static const int pub_harem_compete_friends_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_ack, friends_),
  };
  pub_harem_compete_friends_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_harem_compete_friends_ack_descriptor_,
      pub_harem_compete_friends_ack::default_instance_,
      pub_harem_compete_friends_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_harem_compete_friends_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_harem_compete_friends_ack));
  pub_search_role_req_descriptor_ = file->message_type(52);
  static const int pub_search_role_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_req, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_req, uuid_),
  };
  pub_search_role_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_search_role_req_descriptor_,
      pub_search_role_req::default_instance_,
      pub_search_role_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_search_role_req));
  pub_search_role_ack_descriptor_ = file->message_type(53);
  static const int pub_search_role_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_ack, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_ack, ret_),
  };
  pub_search_role_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_search_role_ack_descriptor_,
      pub_search_role_ack::default_instance_,
      pub_search_role_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_search_role_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_search_role_ack));
  pub_officer_apply_req_descriptor_ = file->message_type(54);
  static const int pub_officer_apply_req_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, battle_data_),
  };
  pub_officer_apply_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_officer_apply_req_descriptor_,
      pub_officer_apply_req::default_instance_,
      pub_officer_apply_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_officer_apply_req));
  pub_officer_apply_ack_descriptor_ = file->message_type(55);
  static const int pub_officer_apply_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_ack, ret_),
  };
  pub_officer_apply_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_officer_apply_ack_descriptor_,
      pub_officer_apply_ack::default_instance_,
      pub_officer_apply_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_apply_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_officer_apply_ack));
  update_heros_formation_ntf_descriptor_ = file->message_type(56);
  static const int update_heros_formation_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_heros_formation_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_heros_formation_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_heros_formation_ntf, apply_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_heros_formation_ntf, hero_infos_),
  };
  update_heros_formation_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_heros_formation_ntf_descriptor_,
      update_heros_formation_ntf::default_instance_,
      update_heros_formation_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_heros_formation_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_heros_formation_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_heros_formation_ntf));
  pub_officer_result_ntf_descriptor_ = file->message_type(57);
  static const int pub_officer_result_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_result_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_result_ntf, results_),
  };
  pub_officer_result_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_officer_result_ntf_descriptor_,
      pub_officer_result_ntf::default_instance_,
      pub_officer_result_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_result_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_result_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_officer_result_ntf));
  pub_offical_reduce_ntf_descriptor_ = file->message_type(58);
  static const int pub_offical_reduce_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_reduce_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_reduce_ntf, data_),
  };
  pub_offical_reduce_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_offical_reduce_ntf_descriptor_,
      pub_offical_reduce_ntf::default_instance_,
      pub_offical_reduce_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_reduce_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_reduce_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_offical_reduce_ntf));
  pub_load_offical_data_req_descriptor_ = file->message_type(59);
  static const int pub_load_offical_data_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_req, role_id_),
  };
  pub_load_offical_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_load_offical_data_req_descriptor_,
      pub_load_offical_data_req::default_instance_,
      pub_load_offical_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_load_offical_data_req));
  pub_load_offical_data_ack_descriptor_ = file->message_type(60);
  static const int pub_load_offical_data_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, apply_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, last_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, exist_),
  };
  pub_load_offical_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_load_offical_data_ack_descriptor_,
      pub_load_offical_data_ack::default_instance_,
      pub_load_offical_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_load_offical_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_load_offical_data_ack));
  pub_get_officer_applicants_req_descriptor_ = file->message_type(61);
  static const int pub_get_officer_applicants_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_req, role_id_),
  };
  pub_get_officer_applicants_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_officer_applicants_req_descriptor_,
      pub_get_officer_applicants_req::default_instance_,
      pub_get_officer_applicants_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_officer_applicants_req));
  pub_get_officer_applicants_ack_descriptor_ = file->message_type(62);
  static const int pub_get_officer_applicants_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, apply_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, posts_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, applys_),
  };
  pub_get_officer_applicants_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_officer_applicants_ack_descriptor_,
      pub_get_officer_applicants_ack::default_instance_,
      pub_get_officer_applicants_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_officer_applicants_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_officer_applicants_ack));
  pub_update_offical_lv_req_descriptor_ = file->message_type(63);
  static const int pub_update_offical_lv_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_offical_lv_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_offical_lv_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_offical_lv_req, role_id_),
  };
  pub_update_offical_lv_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_update_offical_lv_req_descriptor_,
      pub_update_offical_lv_req::default_instance_,
      pub_update_offical_lv_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_offical_lv_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_offical_lv_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_update_offical_lv_req));
  pub_cancel_offical_apply_req_descriptor_ = file->message_type(64);
  static const int pub_cancel_offical_apply_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_req, role_id_),
  };
  pub_cancel_offical_apply_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_cancel_offical_apply_req_descriptor_,
      pub_cancel_offical_apply_req::default_instance_,
      pub_cancel_offical_apply_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_cancel_offical_apply_req));
  pub_cancel_offical_apply_ack_descriptor_ = file->message_type(65);
  static const int pub_cancel_offical_apply_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_ack, ret_),
  };
  pub_cancel_offical_apply_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_cancel_offical_apply_ack_descriptor_,
      pub_cancel_offical_apply_ack::default_instance_,
      pub_cancel_offical_apply_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_offical_apply_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_cancel_offical_apply_ack));
  pub_get_offical_challenge_roles_req_descriptor_ = file->message_type(66);
  static const int pub_get_offical_challenge_roles_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_req, role_id_),
  };
  pub_get_offical_challenge_roles_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_challenge_roles_req_descriptor_,
      pub_get_offical_challenge_roles_req::default_instance_,
      pub_get_offical_challenge_roles_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_challenge_roles_req));
  pub_get_offical_challenge_roles_ack_descriptor_ = file->message_type(67);
  static const int pub_get_offical_challenge_roles_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, items_),
  };
  pub_get_offical_challenge_roles_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_challenge_roles_ack_descriptor_,
      pub_get_offical_challenge_roles_ack::default_instance_,
      pub_get_offical_challenge_roles_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_challenge_roles_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_challenge_roles_ack));
  game_pub_send_flower_req_descriptor_ = file->message_type(68);
  static const int game_pub_send_flower_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_send_flower_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_send_flower_req, send_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_send_flower_req, send_info_),
  };
  game_pub_send_flower_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_send_flower_req_descriptor_,
      game_pub_send_flower_req::default_instance_,
      game_pub_send_flower_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_send_flower_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_send_flower_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_send_flower_req));
  pub_game_send_flower_ack_descriptor_ = file->message_type(69);
  static const int pub_game_send_flower_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_send_flower_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_send_flower_ack, send_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_send_flower_ack, send_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_send_flower_ack, to_role_info_),
  };
  pub_game_send_flower_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_send_flower_ack_descriptor_,
      pub_game_send_flower_ack::default_instance_,
      pub_game_send_flower_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_send_flower_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_send_flower_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_send_flower_ack));
  game_pub_flower_to_receive_nty_descriptor_ = file->message_type(70);
  static const int game_pub_flower_to_receive_nty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, add_popularity_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, send_info_),
  };
  game_pub_flower_to_receive_nty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_flower_to_receive_nty_descriptor_,
      game_pub_flower_to_receive_nty::default_instance_,
      game_pub_flower_to_receive_nty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_flower_to_receive_nty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_flower_to_receive_nty));
  pub_game_flower_to_receive_nty_descriptor_ = file->message_type(71);
  static const int pub_game_flower_to_receive_nty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, add_popularity_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, send_info_),
  };
  pub_game_flower_to_receive_nty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_flower_to_receive_nty_descriptor_,
      pub_game_flower_to_receive_nty::default_instance_,
      pub_game_flower_to_receive_nty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_flower_to_receive_nty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_flower_to_receive_nty));
  pub_forward_add_req_descriptor_ = file->message_type(72);
  static const int pub_forward_add_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_req, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_req, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_req, apply_info_),
  };
  pub_forward_add_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_forward_add_req_descriptor_,
      pub_forward_add_req::default_instance_,
      pub_forward_add_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_forward_add_req));
  pub_forward_add_ack_descriptor_ = file->message_type(73);
  static const int pub_forward_add_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_ack, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_ack, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_ack, apply_info_),
  };
  pub_forward_add_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_forward_add_ack_descriptor_,
      pub_forward_add_ack::default_instance_,
      pub_forward_add_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_forward_add_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_forward_add_ack));
  message_packing_info_descriptor_ = file->message_type(74);
  static const int message_packing_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packing_info, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packing_info, proto_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packing_info, proto_len_),
  };
  message_packing_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      message_packing_info_descriptor_,
      message_packing_info::default_instance_,
      message_packing_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packing_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(message_packing_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(message_packing_info));
  game_pub_msg_packing_ntf_descriptor_ = file->message_type(75);
  static const int game_pub_msg_packing_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_msg_packing_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_msg_packing_ntf, target_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_msg_packing_ntf, packing_),
  };
  game_pub_msg_packing_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_msg_packing_ntf_descriptor_,
      game_pub_msg_packing_ntf::default_instance_,
      game_pub_msg_packing_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_msg_packing_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_msg_packing_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_msg_packing_ntf));
  pub_game_msg_packing_ntf_descriptor_ = file->message_type(76);
  static const int pub_game_msg_packing_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_msg_packing_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_msg_packing_ntf, target_game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_msg_packing_ntf, packing_),
  };
  pub_game_msg_packing_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_msg_packing_ntf_descriptor_,
      pub_game_msg_packing_ntf::default_instance_,
      pub_game_msg_packing_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_msg_packing_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_msg_packing_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_msg_packing_ntf));
  pub_get_role_req_descriptor_ = file->message_type(77);
  static const int pub_get_role_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_req, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_req, target_id_),
  };
  pub_get_role_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_role_req_descriptor_,
      pub_get_role_req::default_instance_,
      pub_get_role_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_role_req));
  pub_get_role_ack_descriptor_ = file->message_type(78);
  static const int pub_get_role_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_ack, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_ack, info_),
  };
  pub_get_role_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_role_ack_descriptor_,
      pub_get_role_ack::default_instance_,
      pub_get_role_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_role_ack));
  pub_game_friends_ntf_descriptor_ = file->message_type(79);
  static const int pub_game_friends_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_friends_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_friends_ntf, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_friends_ntf, ntf_),
  };
  pub_game_friends_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_friends_ntf_descriptor_,
      pub_game_friends_ntf::default_instance_,
      pub_game_friends_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_friends_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_friends_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_friends_ntf));
  pub_complete_role_req_descriptor_ = file->message_type(80);
  static const int pub_complete_role_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_req, ack_info_),
  };
  pub_complete_role_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_complete_role_req_descriptor_,
      pub_complete_role_req::default_instance_,
      pub_complete_role_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_complete_role_req));
  pub_complete_role_ack_descriptor_ = file->message_type(81);
  static const int pub_complete_role_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_ack, ack_info_),
  };
  pub_complete_role_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_complete_role_ack_descriptor_,
      pub_complete_role_ack::default_instance_,
      pub_complete_role_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_complete_role_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_complete_role_ack));
  pub_friend_refresh_req_descriptor_ = file->message_type(82);
  static const int pub_friend_refresh_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, role_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, do_type_),
  };
  pub_friend_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_friend_refresh_req_descriptor_,
      pub_friend_refresh_req::default_instance_,
      pub_friend_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_friend_refresh_req));
  pub_friend_refresh_ack_descriptor_ = file->message_type(83);
  static const int pub_friend_refresh_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, do_type_),
  };
  pub_friend_refresh_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_friend_refresh_ack_descriptor_,
      pub_friend_refresh_ack::default_instance_,
      pub_friend_refresh_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_friend_refresh_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_friend_refresh_ack));
  game_pub_get_all_event_msg_ntf_descriptor_ = file->message_type(84);
  static const int game_pub_get_all_event_msg_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_all_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_all_event_msg_ntf, role_id_),
  };
  game_pub_get_all_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_get_all_event_msg_ntf_descriptor_,
      game_pub_get_all_event_msg_ntf::default_instance_,
      game_pub_get_all_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_all_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_all_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_get_all_event_msg_ntf));
  pub_game_get_all_event_msg_ntf_descriptor_ = file->message_type(85);
  static const int pub_game_get_all_event_msg_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_all_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_all_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_all_event_msg_ntf, event_msgs_),
  };
  pub_game_get_all_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_get_all_event_msg_ntf_descriptor_,
      pub_game_get_all_event_msg_ntf::default_instance_,
      pub_game_get_all_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_all_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_all_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_get_all_event_msg_ntf));
  game_pub_get_id_event_msg_ntf_descriptor_ = file->message_type(86);
  static const int game_pub_get_id_event_msg_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_id_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_id_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_id_event_msg_ntf, event_id_),
  };
  game_pub_get_id_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_get_id_event_msg_ntf_descriptor_,
      game_pub_get_id_event_msg_ntf::default_instance_,
      game_pub_get_id_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_id_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_id_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_get_id_event_msg_ntf));
  pub_game_get_id_event_msg_ntf_descriptor_ = file->message_type(87);
  static const int pub_game_get_id_event_msg_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_id_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_id_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_id_event_msg_ntf, event_msgs_),
  };
  pub_game_get_id_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_get_id_event_msg_ntf_descriptor_,
      pub_game_get_id_event_msg_ntf::default_instance_,
      pub_game_get_id_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_id_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_get_id_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_get_id_event_msg_ntf));
  game_pub_delete_event_msg_ntf_descriptor_ = file->message_type(88);
  static const int game_pub_delete_event_msg_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_event_msg_ntf, delete_id_),
  };
  game_pub_delete_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_delete_event_msg_ntf_descriptor_,
      game_pub_delete_event_msg_ntf::default_instance_,
      game_pub_delete_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_delete_event_msg_ntf));
  game_pub_delete_type_msgs_ntf_descriptor_ = file->message_type(89);
  static const int game_pub_delete_type_msgs_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_type_msgs_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_type_msgs_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_type_msgs_ntf, event_type_),
  };
  game_pub_delete_type_msgs_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_delete_type_msgs_ntf_descriptor_,
      game_pub_delete_type_msgs_ntf::default_instance_,
      game_pub_delete_type_msgs_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_type_msgs_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_delete_type_msgs_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_delete_type_msgs_ntf));
  game_pub_read_event_msg_ntf_descriptor_ = file->message_type(90);
  static const int game_pub_read_event_msg_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_read_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_read_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_read_event_msg_ntf, event_type_),
  };
  game_pub_read_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_read_event_msg_ntf_descriptor_,
      game_pub_read_event_msg_ntf::default_instance_,
      game_pub_read_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_read_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_read_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_read_event_msg_ntf));
  game_pub_insert_event_msg_ntf_descriptor_ = file->message_type(91);
  static const int game_pub_insert_event_msg_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_insert_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_insert_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_insert_event_msg_ntf, event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_insert_event_msg_ntf, is_nty_client_),
  };
  game_pub_insert_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_insert_event_msg_ntf_descriptor_,
      game_pub_insert_event_msg_ntf::default_instance_,
      game_pub_insert_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_insert_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_insert_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_insert_event_msg_ntf));
  pub_game_insert_event_msg_ntf_descriptor_ = file->message_type(92);
  static const int pub_game_insert_event_msg_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_insert_event_msg_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_insert_event_msg_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_insert_event_msg_ntf, event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_insert_event_msg_ntf, is_nty_client_),
  };
  pub_game_insert_event_msg_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_game_insert_event_msg_ntf_descriptor_,
      pub_game_insert_event_msg_ntf::default_instance_,
      pub_game_insert_event_msg_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_insert_event_msg_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_game_insert_event_msg_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_game_insert_event_msg_ntf));
  game_pub_get_rank_data_req_descriptor_ = file->message_type(93);
  static const int game_pub_get_rank_data_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, end_index_),
  };
  game_pub_get_rank_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_get_rank_data_req_descriptor_,
      game_pub_get_rank_data_req::default_instance_,
      game_pub_get_rank_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_get_rank_data_req));
  game_pub_get_rank_data_ack_descriptor_ = file->message_type(94);
  static const int game_pub_get_rank_data_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, my_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, items_),
  };
  game_pub_get_rank_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_pub_get_rank_data_ack_descriptor_,
      game_pub_get_rank_data_ack::default_instance_,
      game_pub_get_rank_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_pub_get_rank_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_pub_get_rank_data_ack));
  update_rank_data_ntf_descriptor_ = file->message_type(95);
  static const int update_rank_data_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_rank_data_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_rank_data_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_rank_data_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_rank_data_ntf, values_),
  };
  update_rank_data_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_rank_data_ntf_descriptor_,
      update_rank_data_ntf::default_instance_,
      update_rank_data_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_rank_data_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_rank_data_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_rank_data_ntf));
  pub_battle_replay_save_req_descriptor_ = file->message_type(96);
  static const int pub_battle_replay_save_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_save_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_save_req, replay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_save_req, data_),
  };
  pub_battle_replay_save_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_battle_replay_save_req_descriptor_,
      pub_battle_replay_save_req::default_instance_,
      pub_battle_replay_save_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_save_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_save_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_battle_replay_save_req));
  pub_battle_replay_req_descriptor_ = file->message_type(97);
  static const int pub_battle_replay_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_req, replay_id_),
  };
  pub_battle_replay_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_battle_replay_req_descriptor_,
      pub_battle_replay_req::default_instance_,
      pub_battle_replay_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_battle_replay_req));
  pub_battle_replay_ack_descriptor_ = file->message_type(98);
  static const int pub_battle_replay_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, replay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, data_),
  };
  pub_battle_replay_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_battle_replay_ack_descriptor_,
      pub_battle_replay_ack::default_instance_,
      pub_battle_replay_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_battle_replay_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_battle_replay_ack));
  pub_query_scene_req_descriptor_ = file->message_type(99);
  static const int pub_query_scene_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, query_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, last_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, last_scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, token_),
  };
  pub_query_scene_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_query_scene_req_descriptor_,
      pub_query_scene_req::default_instance_,
      pub_query_scene_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_query_scene_req));
  pub_query_scene_ack_descriptor_ = file->message_type(100);
  static const int pub_query_scene_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, query_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, token_),
  };
  pub_query_scene_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_query_scene_ack_descriptor_,
      pub_query_scene_ack::default_instance_,
      pub_query_scene_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_query_scene_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_query_scene_ack));
  pub_destory_scene_ntf_descriptor_ = file->message_type(101);
  static const int pub_destory_scene_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_destory_scene_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_destory_scene_ntf, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_destory_scene_ntf, scene_type_),
  };
  pub_destory_scene_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_destory_scene_ntf_descriptor_,
      pub_destory_scene_ntf::default_instance_,
      pub_destory_scene_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_destory_scene_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_destory_scene_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_destory_scene_ntf));
  pub_scene_role_change_ntf_descriptor_ = file->message_type(102);
  static const int pub_scene_role_change_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, add_roles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, del_roles_),
  };
  pub_scene_role_change_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_scene_role_change_ntf_descriptor_,
      pub_scene_role_change_ntf::default_instance_,
      pub_scene_role_change_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_scene_role_change_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_scene_role_change_ntf));
  pub_update_3d_scene_info_ntf_descriptor_ = file->message_type(103);
  static const int pub_update_3d_scene_info_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, scene_name_),
  };
  pub_update_3d_scene_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_update_3d_scene_info_ntf_descriptor_,
      pub_update_3d_scene_info_ntf::default_instance_,
      pub_update_3d_scene_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_update_3d_scene_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_update_3d_scene_info_ntf));
  pub_switch_game_id_ntf_descriptor_ = file->message_type(104);
  static const int pub_switch_game_id_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_switch_game_id_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_switch_game_id_ntf, gs_id_),
  };
  pub_switch_game_id_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_switch_game_id_ntf_descriptor_,
      pub_switch_game_id_ntf::default_instance_,
      pub_switch_game_id_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_switch_game_id_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_switch_game_id_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_switch_game_id_ntf));
  pub_officer_daily_salary_req_descriptor_ = file->message_type(105);
  static const int pub_officer_daily_salary_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_req, grade_),
  };
  pub_officer_daily_salary_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_officer_daily_salary_req_descriptor_,
      pub_officer_daily_salary_req::default_instance_,
      pub_officer_daily_salary_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_officer_daily_salary_req));
  pub_officer_daily_salary_ack_descriptor_ = file->message_type(106);
  static const int pub_officer_daily_salary_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, ret_),
  };
  pub_officer_daily_salary_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_officer_daily_salary_ack_descriptor_,
      pub_officer_daily_salary_ack::default_instance_,
      pub_officer_daily_salary_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_officer_daily_salary_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_officer_daily_salary_ack));
  pub_offical_battle_report_req_descriptor_ = file->message_type(107);
  static const int pub_offical_battle_report_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_req, role_id_),
  };
  pub_offical_battle_report_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_offical_battle_report_req_descriptor_,
      pub_offical_battle_report_req::default_instance_,
      pub_offical_battle_report_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_offical_battle_report_req));
  pub_offical_battle_report_ack_descriptor_ = file->message_type(108);
  static const int pub_offical_battle_report_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_ack, reports_),
  };
  pub_offical_battle_report_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_offical_battle_report_ack_descriptor_,
      pub_offical_battle_report_ack::default_instance_,
      pub_offical_battle_report_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_offical_battle_report_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_offical_battle_report_ack));
  pub_get_offical_formation_req_descriptor_ = file->message_type(109);
  static const int pub_get_offical_formation_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_req, my_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_req, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_req, office_lv_),
  };
  pub_get_offical_formation_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_formation_req_descriptor_,
      pub_get_offical_formation_req::default_instance_,
      pub_get_offical_formation_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_formation_req));
  pub_get_offical_formation_ack_descriptor_ = file->message_type(110);
  static const int pub_get_offical_formation_ack_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, my_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, bord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, heros_),
  };
  pub_get_offical_formation_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_formation_ack_descriptor_,
      pub_get_offical_formation_ack::default_instance_,
      pub_get_offical_formation_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_formation_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_formation_ack));
  pub_gm_upgrade_office_req_descriptor_ = file->message_type(111);
  static const int pub_gm_upgrade_office_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_upgrade_office_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_upgrade_office_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_upgrade_office_req, data_),
  };
  pub_gm_upgrade_office_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_gm_upgrade_office_req_descriptor_,
      pub_gm_upgrade_office_req::default_instance_,
      pub_gm_upgrade_office_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_upgrade_office_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_upgrade_office_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_gm_upgrade_office_req));
  offical_robot_gen_req_descriptor_ = file->message_type(112);
  static const int offical_robot_gen_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_robot_gen_req, proto_id_),
  };
  offical_robot_gen_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_robot_gen_req_descriptor_,
      offical_robot_gen_req::default_instance_,
      offical_robot_gen_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_robot_gen_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_robot_gen_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_robot_gen_req));
  offical_robot_gen_ack_descriptor_ = file->message_type(113);
  static const int offical_robot_gen_ack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_robot_gen_ack, proto_id_),
  };
  offical_robot_gen_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_robot_gen_ack_descriptor_,
      offical_robot_gen_ack::default_instance_,
      offical_robot_gen_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_robot_gen_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_robot_gen_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_robot_gen_ack));
  get_minimum_chat_room_req_descriptor_ = file->message_type(114);
  static const int get_minimum_chat_room_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_req, role_id_),
  };
  get_minimum_chat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_minimum_chat_room_req_descriptor_,
      get_minimum_chat_room_req::default_instance_,
      get_minimum_chat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_minimum_chat_room_req));
  get_minimum_chat_room_ack_descriptor_ = file->message_type(115);
  static const int get_minimum_chat_room_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, game_id_),
  };
  get_minimum_chat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_minimum_chat_room_ack_descriptor_,
      get_minimum_chat_room_ack::default_instance_,
      get_minimum_chat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_minimum_chat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_minimum_chat_room_ack));
  pub_get_chat_room_list_req_descriptor_ = file->message_type(116);
  static const int pub_get_chat_room_list_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_req, index_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_req, index_end_),
  };
  pub_get_chat_room_list_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_chat_room_list_req_descriptor_,
      pub_get_chat_room_list_req::default_instance_,
      pub_get_chat_room_list_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_chat_room_list_req));
  pub_get_chat_room_list_ack_descriptor_ = file->message_type(117);
  static const int pub_get_chat_room_list_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, index_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, index_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, rooms_),
  };
  pub_get_chat_room_list_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_chat_room_list_ack_descriptor_,
      pub_get_chat_room_list_ack::default_instance_,
      pub_get_chat_room_list_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_chat_room_list_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_chat_room_list_ack));
  pub_create_3dchat_room_req_descriptor_ = file->message_type(118);
  static const int pub_create_3dchat_room_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, room_conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, fee_),
  };
  pub_create_3dchat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_create_3dchat_room_req_descriptor_,
      pub_create_3dchat_room_req::default_instance_,
      pub_create_3dchat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_create_3dchat_room_req));
  pub_create_3dchat_room_ack_descriptor_ = file->message_type(119);
  static const int pub_create_3dchat_room_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, create_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, room_conf_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, room_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, token_),
  };
  pub_create_3dchat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_create_3dchat_room_ack_descriptor_,
      pub_create_3dchat_room_ack::default_instance_,
      pub_create_3dchat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_create_3dchat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_create_3dchat_room_ack));
  pub_top_3dchat_room_req_descriptor_ = file->message_type(120);
  static const int pub_top_3dchat_room_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_req, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_req, top_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_req, dur_),
  };
  pub_top_3dchat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_top_3dchat_room_req_descriptor_,
      pub_top_3dchat_room_req::default_instance_,
      pub_top_3dchat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_top_3dchat_room_req));
  pub_top_3dchat_room_ack_descriptor_ = file->message_type(121);
  static const int pub_top_3dchat_room_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, top_tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, dur_),
  };
  pub_top_3dchat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_top_3dchat_room_ack_descriptor_,
      pub_top_3dchat_room_ack::default_instance_,
      pub_top_3dchat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_top_3dchat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_top_3dchat_room_ack));
  pub_cancel_top_3dchat_room_req_descriptor_ = file->message_type(122);
  static const int pub_cancel_top_3dchat_room_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_req, room_id_),
  };
  pub_cancel_top_3dchat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_cancel_top_3dchat_room_req_descriptor_,
      pub_cancel_top_3dchat_room_req::default_instance_,
      pub_cancel_top_3dchat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_cancel_top_3dchat_room_req));
  pub_cancel_top_3dchat_room_ack_descriptor_ = file->message_type(123);
  static const int pub_cancel_top_3dchat_room_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_ack, room_id_),
  };
  pub_cancel_top_3dchat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_cancel_top_3dchat_room_ack_descriptor_,
      pub_cancel_top_3dchat_room_ack::default_instance_,
      pub_cancel_top_3dchat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_cancel_top_3dchat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_cancel_top_3dchat_room_ack));
  pub_change_name_3dchat_room_req_descriptor_ = file->message_type(124);
  static const int pub_change_name_3dchat_room_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_req, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_req, room_name_),
  };
  pub_change_name_3dchat_room_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_change_name_3dchat_room_req_descriptor_,
      pub_change_name_3dchat_room_req::default_instance_,
      pub_change_name_3dchat_room_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_change_name_3dchat_room_req));
  pub_change_name_3dchat_room_ack_descriptor_ = file->message_type(125);
  static const int pub_change_name_3dchat_room_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_ack, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_ack, room_name_),
  };
  pub_change_name_3dchat_room_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_change_name_3dchat_room_ack_descriptor_,
      pub_change_name_3dchat_room_ack::default_instance_,
      pub_change_name_3dchat_room_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_change_name_3dchat_room_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_change_name_3dchat_room_ack));
  pub_get_role_gs_id_req_descriptor_ = file->message_type(126);
  static const int pub_get_role_gs_id_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_req, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_req, dest_role_id_),
  };
  pub_get_role_gs_id_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_role_gs_id_req_descriptor_,
      pub_get_role_gs_id_req::default_instance_,
      pub_get_role_gs_id_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_role_gs_id_req));
  pub_get_role_gs_id_ack_descriptor_ = file->message_type(127);
  static const int pub_get_role_gs_id_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, dest_gs_id_),
  };
  pub_get_role_gs_id_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_role_gs_id_ack_descriptor_,
      pub_get_role_gs_id_ack::default_instance_,
      pub_get_role_gs_id_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_role_gs_id_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_role_gs_id_ack));
  pub_get_offical_members_req_descriptor_ = file->message_type(128);
  static const int pub_get_offical_members_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_req, end_index_),
  };
  pub_get_offical_members_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_members_req_descriptor_,
      pub_get_offical_members_req::default_instance_,
      pub_get_offical_members_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_members_req));
  pub_get_offical_members_ack_descriptor_ = file->message_type(129);
  static const int pub_get_offical_members_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_ack, members_),
  };
  pub_get_offical_members_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_members_ack_descriptor_,
      pub_get_offical_members_ack::default_instance_,
      pub_get_offical_members_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_members_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_members_ack));
  pub_gm_start_match_req_descriptor_ = file->message_type(130);
  static const int pub_gm_start_match_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_req, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_req, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_req, end_time_),
  };
  pub_gm_start_match_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_gm_start_match_req_descriptor_,
      pub_gm_start_match_req::default_instance_,
      pub_gm_start_match_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_gm_start_match_req));
  pub_gm_start_match_ack_descriptor_ = file->message_type(131);
  static const int pub_gm_start_match_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_ack, grade_),
  };
  pub_gm_start_match_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_gm_start_match_ack_descriptor_,
      pub_gm_start_match_ack::default_instance_,
      pub_gm_start_match_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_start_match_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_gm_start_match_ack));
  pub_gm_send_office_mail_req_descriptor_ = file->message_type(132);
  static const int pub_gm_send_office_mail_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_send_office_mail_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_send_office_mail_req, mail_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_send_office_mail_req, grade_),
  };
  pub_gm_send_office_mail_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_gm_send_office_mail_req_descriptor_,
      pub_gm_send_office_mail_req::default_instance_,
      pub_gm_send_office_mail_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_send_office_mail_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_gm_send_office_mail_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_gm_send_office_mail_req));
  pub_get_offical_data_req_descriptor_ = file->message_type(133);
  static const int pub_get_offical_data_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_req, grade_),
  };
  pub_get_offical_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_data_req_descriptor_,
      pub_get_offical_data_req::default_instance_,
      pub_get_offical_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_data_req));
  pub_get_offical_data_ack_descriptor_ = file->message_type(134);
  static const int pub_get_offical_data_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_ack, ranking_id_),
  };
  pub_get_offical_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pub_get_offical_data_ack_descriptor_,
      pub_get_offical_data_ack::default_instance_,
      pub_get_offical_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pub_get_offical_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pub_get_offical_data_ack));
  EGetRoleDoType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fpublic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_harem_compete_qingan_req_descriptor_, &pub_harem_compete_qingan_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_harem_compete_slap_req_descriptor_, &pub_harem_compete_slap_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_role_info_descriptor_, &pub_role_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_role_info_cache_descriptor_, &pub_role_info_cache::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_result_data_descriptor_, &officer_result_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    officer_reduce_data_descriptor_, &officer_reduce_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_db_item_descriptor_, &rank_db_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_db_data_descriptor_, &rank_db_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_redis_data_descriptor_, &rank_redis_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rank_refresh_data_descriptor_, &rank_refresh_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_role_login_descriptor_, &pub_role_login::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_role_login_batch_descriptor_, &pub_role_login_batch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_role_logout_descriptor_, &pub_role_logout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_role_info_sync_descriptor_, &pub_role_info_sync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_create_team_req_descriptor_, &ps_create_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_create_team_ack_descriptor_, &ps_create_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_update_team_ntf_descriptor_, &ps_update_team_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_enter_team_req_descriptor_, &ps_enter_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_enter_team_ack_descriptor_, &ps_enter_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_exit_team_req_descriptor_, &ps_exit_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_exit_team_ack_descriptor_, &ps_exit_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_ready_team_req_descriptor_, &ps_ready_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_ready_team_ack_descriptor_, &ps_ready_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_update_team_req_descriptor_, &ps_update_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_update_team_ack_descriptor_, &ps_update_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_get_teams_req_descriptor_, &ps_get_teams_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_get_teams_ack_descriptor_, &ps_get_teams_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_invite_enter_team_req_descriptor_, &ps_invite_enter_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_invite_enter_team_ntf_descriptor_, &ps_invite_enter_team_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_get_offical_rank_req_descriptor_, &ps_get_offical_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_get_offical_rank_ack_descriptor_, &ps_get_offical_rank_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_global_offical_rank_req_descriptor_, &ps_global_offical_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_global_offical_rank_ack_descriptor_, &ps_global_offical_rank_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_get_offical_rank_info_req_descriptor_, &ps_get_offical_rank_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_get_offical_rank_info_ack_descriptor_, &ps_get_offical_rank_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_add_robot_to_offical_arena_req_descriptor_, &ps_add_robot_to_offical_arena_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_add_robot_to_offical_arena_ack_descriptor_, &ps_add_robot_to_offical_arena_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_challenge_offical_rank_req_descriptor_, &ps_challenge_offical_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_challenge_offical_rank_ack_descriptor_, &ps_challenge_offical_rank_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_update_challenge_result_req_descriptor_, &ps_update_challenge_result_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_update_challenge_result_ack_descriptor_, &ps_update_challenge_result_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_examine_battle_req_descriptor_, &offical_examine_battle_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_examine_battle_ack_descriptor_, &offical_examine_battle_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_offical_apply_battle_result_req_descriptor_, &ps_offical_apply_battle_result_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_offical_apply_battle_result_ack_descriptor_, &ps_offical_apply_battle_result_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_test_offical_battle_result_req_descriptor_, &ps_test_offical_battle_result_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_test_start_offical_battle_req_descriptor_, &ps_test_start_offical_battle_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ps_test_offical_sign_up_req_descriptor_, &ps_test_offical_sign_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_friend_opt_forward_req_descriptor_, &pub_friend_opt_forward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_friend_opt_forward_ack_descriptor_, &pub_friend_opt_forward_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_harem_compete_friends_req_descriptor_, &pub_harem_compete_friends_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_harem_compete_friends_ack_descriptor_, &pub_harem_compete_friends_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_search_role_req_descriptor_, &pub_search_role_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_search_role_ack_descriptor_, &pub_search_role_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_officer_apply_req_descriptor_, &pub_officer_apply_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_officer_apply_ack_descriptor_, &pub_officer_apply_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_heros_formation_ntf_descriptor_, &update_heros_formation_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_officer_result_ntf_descriptor_, &pub_officer_result_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_offical_reduce_ntf_descriptor_, &pub_offical_reduce_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_load_offical_data_req_descriptor_, &pub_load_offical_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_load_offical_data_ack_descriptor_, &pub_load_offical_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_officer_applicants_req_descriptor_, &pub_get_officer_applicants_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_officer_applicants_ack_descriptor_, &pub_get_officer_applicants_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_update_offical_lv_req_descriptor_, &pub_update_offical_lv_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_cancel_offical_apply_req_descriptor_, &pub_cancel_offical_apply_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_cancel_offical_apply_ack_descriptor_, &pub_cancel_offical_apply_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_challenge_roles_req_descriptor_, &pub_get_offical_challenge_roles_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_challenge_roles_ack_descriptor_, &pub_get_offical_challenge_roles_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_send_flower_req_descriptor_, &game_pub_send_flower_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_send_flower_ack_descriptor_, &pub_game_send_flower_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_flower_to_receive_nty_descriptor_, &game_pub_flower_to_receive_nty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_flower_to_receive_nty_descriptor_, &pub_game_flower_to_receive_nty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_forward_add_req_descriptor_, &pub_forward_add_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_forward_add_ack_descriptor_, &pub_forward_add_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    message_packing_info_descriptor_, &message_packing_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_msg_packing_ntf_descriptor_, &game_pub_msg_packing_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_msg_packing_ntf_descriptor_, &pub_game_msg_packing_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_role_req_descriptor_, &pub_get_role_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_role_ack_descriptor_, &pub_get_role_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_friends_ntf_descriptor_, &pub_game_friends_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_complete_role_req_descriptor_, &pub_complete_role_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_complete_role_ack_descriptor_, &pub_complete_role_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_friend_refresh_req_descriptor_, &pub_friend_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_friend_refresh_ack_descriptor_, &pub_friend_refresh_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_get_all_event_msg_ntf_descriptor_, &game_pub_get_all_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_get_all_event_msg_ntf_descriptor_, &pub_game_get_all_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_get_id_event_msg_ntf_descriptor_, &game_pub_get_id_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_get_id_event_msg_ntf_descriptor_, &pub_game_get_id_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_delete_event_msg_ntf_descriptor_, &game_pub_delete_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_delete_type_msgs_ntf_descriptor_, &game_pub_delete_type_msgs_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_read_event_msg_ntf_descriptor_, &game_pub_read_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_insert_event_msg_ntf_descriptor_, &game_pub_insert_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_game_insert_event_msg_ntf_descriptor_, &pub_game_insert_event_msg_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_get_rank_data_req_descriptor_, &game_pub_get_rank_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_pub_get_rank_data_ack_descriptor_, &game_pub_get_rank_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_rank_data_ntf_descriptor_, &update_rank_data_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_battle_replay_save_req_descriptor_, &pub_battle_replay_save_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_battle_replay_req_descriptor_, &pub_battle_replay_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_battle_replay_ack_descriptor_, &pub_battle_replay_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_query_scene_req_descriptor_, &pub_query_scene_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_query_scene_ack_descriptor_, &pub_query_scene_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_destory_scene_ntf_descriptor_, &pub_destory_scene_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_scene_role_change_ntf_descriptor_, &pub_scene_role_change_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_update_3d_scene_info_ntf_descriptor_, &pub_update_3d_scene_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_switch_game_id_ntf_descriptor_, &pub_switch_game_id_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_officer_daily_salary_req_descriptor_, &pub_officer_daily_salary_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_officer_daily_salary_ack_descriptor_, &pub_officer_daily_salary_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_offical_battle_report_req_descriptor_, &pub_offical_battle_report_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_offical_battle_report_ack_descriptor_, &pub_offical_battle_report_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_formation_req_descriptor_, &pub_get_offical_formation_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_formation_ack_descriptor_, &pub_get_offical_formation_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_gm_upgrade_office_req_descriptor_, &pub_gm_upgrade_office_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_robot_gen_req_descriptor_, &offical_robot_gen_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_robot_gen_ack_descriptor_, &offical_robot_gen_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_minimum_chat_room_req_descriptor_, &get_minimum_chat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_minimum_chat_room_ack_descriptor_, &get_minimum_chat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_chat_room_list_req_descriptor_, &pub_get_chat_room_list_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_chat_room_list_ack_descriptor_, &pub_get_chat_room_list_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_create_3dchat_room_req_descriptor_, &pub_create_3dchat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_create_3dchat_room_ack_descriptor_, &pub_create_3dchat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_top_3dchat_room_req_descriptor_, &pub_top_3dchat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_top_3dchat_room_ack_descriptor_, &pub_top_3dchat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_cancel_top_3dchat_room_req_descriptor_, &pub_cancel_top_3dchat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_cancel_top_3dchat_room_ack_descriptor_, &pub_cancel_top_3dchat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_change_name_3dchat_room_req_descriptor_, &pub_change_name_3dchat_room_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_change_name_3dchat_room_ack_descriptor_, &pub_change_name_3dchat_room_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_role_gs_id_req_descriptor_, &pub_get_role_gs_id_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_role_gs_id_ack_descriptor_, &pub_get_role_gs_id_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_members_req_descriptor_, &pub_get_offical_members_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_members_ack_descriptor_, &pub_get_offical_members_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_gm_start_match_req_descriptor_, &pub_gm_start_match_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_gm_start_match_ack_descriptor_, &pub_gm_start_match_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_gm_send_office_mail_req_descriptor_, &pub_gm_send_office_mail_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_data_req_descriptor_, &pub_get_offical_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pub_get_offical_data_ack_descriptor_, &pub_get_offical_data_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fpublic_2eproto() {
  delete pub_harem_compete_qingan_req::default_instance_;
  delete pub_harem_compete_qingan_req_reflection_;
  delete pub_harem_compete_slap_req::default_instance_;
  delete pub_harem_compete_slap_req_reflection_;
  delete pub_role_info::default_instance_;
  delete pub_role_info_reflection_;
  delete pub_role_info_cache::default_instance_;
  delete pub_role_info_cache_reflection_;
  delete officer_result_data::default_instance_;
  delete officer_result_data_reflection_;
  delete officer_reduce_data::default_instance_;
  delete officer_reduce_data_reflection_;
  delete rank_db_item::default_instance_;
  delete rank_db_item_reflection_;
  delete rank_db_data::default_instance_;
  delete rank_db_data_reflection_;
  delete rank_redis_data::default_instance_;
  delete rank_redis_data_reflection_;
  delete rank_refresh_data::default_instance_;
  delete rank_refresh_data_reflection_;
  delete pub_role_login::default_instance_;
  delete pub_role_login_reflection_;
  delete pub_role_login_batch::default_instance_;
  delete pub_role_login_batch_reflection_;
  delete pub_role_logout::default_instance_;
  delete pub_role_logout_reflection_;
  delete pub_role_info_sync::default_instance_;
  delete pub_role_info_sync_reflection_;
  delete ps_create_team_req::default_instance_;
  delete ps_create_team_req_reflection_;
  delete ps_create_team_ack::default_instance_;
  delete ps_create_team_ack_reflection_;
  delete ps_update_team_ntf::default_instance_;
  delete ps_update_team_ntf_reflection_;
  delete ps_enter_team_req::default_instance_;
  delete ps_enter_team_req_reflection_;
  delete ps_enter_team_ack::default_instance_;
  delete ps_enter_team_ack_reflection_;
  delete ps_exit_team_req::default_instance_;
  delete ps_exit_team_req_reflection_;
  delete ps_exit_team_ack::default_instance_;
  delete ps_exit_team_ack_reflection_;
  delete ps_ready_team_req::default_instance_;
  delete ps_ready_team_req_reflection_;
  delete ps_ready_team_ack::default_instance_;
  delete ps_ready_team_ack_reflection_;
  delete ps_update_team_req::default_instance_;
  delete ps_update_team_req_reflection_;
  delete ps_update_team_ack::default_instance_;
  delete ps_update_team_ack_reflection_;
  delete ps_get_teams_req::default_instance_;
  delete ps_get_teams_req_reflection_;
  delete ps_get_teams_ack::default_instance_;
  delete ps_get_teams_ack_reflection_;
  delete ps_invite_enter_team_req::default_instance_;
  delete ps_invite_enter_team_req_reflection_;
  delete ps_invite_enter_team_ntf::default_instance_;
  delete ps_invite_enter_team_ntf_reflection_;
  delete ps_get_offical_rank_req::default_instance_;
  delete ps_get_offical_rank_req_reflection_;
  delete ps_get_offical_rank_ack::default_instance_;
  delete ps_get_offical_rank_ack_reflection_;
  delete ps_global_offical_rank_req::default_instance_;
  delete ps_global_offical_rank_req_reflection_;
  delete ps_global_offical_rank_ack::default_instance_;
  delete ps_global_offical_rank_ack_reflection_;
  delete ps_get_offical_rank_info_req::default_instance_;
  delete ps_get_offical_rank_info_req_reflection_;
  delete ps_get_offical_rank_info_ack::default_instance_;
  delete ps_get_offical_rank_info_ack_reflection_;
  delete ps_add_robot_to_offical_arena_req::default_instance_;
  delete ps_add_robot_to_offical_arena_req_reflection_;
  delete ps_add_robot_to_offical_arena_ack::default_instance_;
  delete ps_add_robot_to_offical_arena_ack_reflection_;
  delete ps_challenge_offical_rank_req::default_instance_;
  delete ps_challenge_offical_rank_req_reflection_;
  delete ps_challenge_offical_rank_ack::default_instance_;
  delete ps_challenge_offical_rank_ack_reflection_;
  delete ps_update_challenge_result_req::default_instance_;
  delete ps_update_challenge_result_req_reflection_;
  delete ps_update_challenge_result_ack::default_instance_;
  delete ps_update_challenge_result_ack_reflection_;
  delete offical_examine_battle_req::default_instance_;
  delete offical_examine_battle_req_reflection_;
  delete offical_examine_battle_ack::default_instance_;
  delete offical_examine_battle_ack_reflection_;
  delete ps_offical_apply_battle_result_req::default_instance_;
  delete ps_offical_apply_battle_result_req_reflection_;
  delete ps_offical_apply_battle_result_ack::default_instance_;
  delete ps_offical_apply_battle_result_ack_reflection_;
  delete ps_test_offical_battle_result_req::default_instance_;
  delete ps_test_offical_battle_result_req_reflection_;
  delete ps_test_start_offical_battle_req::default_instance_;
  delete ps_test_start_offical_battle_req_reflection_;
  delete ps_test_offical_sign_up_req::default_instance_;
  delete ps_test_offical_sign_up_req_reflection_;
  delete pub_friend_opt_forward_req::default_instance_;
  delete pub_friend_opt_forward_req_reflection_;
  delete pub_friend_opt_forward_ack::default_instance_;
  delete pub_friend_opt_forward_ack_reflection_;
  delete pub_harem_compete_friends_req::default_instance_;
  delete pub_harem_compete_friends_req_reflection_;
  delete pub_harem_compete_friends_ack::default_instance_;
  delete pub_harem_compete_friends_ack_reflection_;
  delete pub_search_role_req::default_instance_;
  delete pub_search_role_req_reflection_;
  delete pub_search_role_ack::default_instance_;
  delete pub_search_role_ack_reflection_;
  delete pub_officer_apply_req::default_instance_;
  delete pub_officer_apply_req_reflection_;
  delete pub_officer_apply_ack::default_instance_;
  delete pub_officer_apply_ack_reflection_;
  delete update_heros_formation_ntf::default_instance_;
  delete update_heros_formation_ntf_reflection_;
  delete pub_officer_result_ntf::default_instance_;
  delete pub_officer_result_ntf_reflection_;
  delete pub_offical_reduce_ntf::default_instance_;
  delete pub_offical_reduce_ntf_reflection_;
  delete pub_load_offical_data_req::default_instance_;
  delete pub_load_offical_data_req_reflection_;
  delete pub_load_offical_data_ack::default_instance_;
  delete pub_load_offical_data_ack_reflection_;
  delete pub_get_officer_applicants_req::default_instance_;
  delete pub_get_officer_applicants_req_reflection_;
  delete pub_get_officer_applicants_ack::default_instance_;
  delete pub_get_officer_applicants_ack_reflection_;
  delete pub_update_offical_lv_req::default_instance_;
  delete pub_update_offical_lv_req_reflection_;
  delete pub_cancel_offical_apply_req::default_instance_;
  delete pub_cancel_offical_apply_req_reflection_;
  delete pub_cancel_offical_apply_ack::default_instance_;
  delete pub_cancel_offical_apply_ack_reflection_;
  delete pub_get_offical_challenge_roles_req::default_instance_;
  delete pub_get_offical_challenge_roles_req_reflection_;
  delete pub_get_offical_challenge_roles_ack::default_instance_;
  delete pub_get_offical_challenge_roles_ack_reflection_;
  delete game_pub_send_flower_req::default_instance_;
  delete game_pub_send_flower_req_reflection_;
  delete pub_game_send_flower_ack::default_instance_;
  delete pub_game_send_flower_ack_reflection_;
  delete game_pub_flower_to_receive_nty::default_instance_;
  delete game_pub_flower_to_receive_nty_reflection_;
  delete pub_game_flower_to_receive_nty::default_instance_;
  delete pub_game_flower_to_receive_nty_reflection_;
  delete pub_forward_add_req::default_instance_;
  delete pub_forward_add_req_reflection_;
  delete pub_forward_add_ack::default_instance_;
  delete pub_forward_add_ack_reflection_;
  delete message_packing_info::default_instance_;
  delete message_packing_info_reflection_;
  delete game_pub_msg_packing_ntf::default_instance_;
  delete game_pub_msg_packing_ntf_reflection_;
  delete pub_game_msg_packing_ntf::default_instance_;
  delete pub_game_msg_packing_ntf_reflection_;
  delete pub_get_role_req::default_instance_;
  delete pub_get_role_req_reflection_;
  delete pub_get_role_ack::default_instance_;
  delete pub_get_role_ack_reflection_;
  delete pub_game_friends_ntf::default_instance_;
  delete pub_game_friends_ntf_reflection_;
  delete pub_complete_role_req::default_instance_;
  delete pub_complete_role_req_reflection_;
  delete pub_complete_role_ack::default_instance_;
  delete pub_complete_role_ack_reflection_;
  delete pub_friend_refresh_req::default_instance_;
  delete pub_friend_refresh_req_reflection_;
  delete pub_friend_refresh_ack::default_instance_;
  delete pub_friend_refresh_ack_reflection_;
  delete game_pub_get_all_event_msg_ntf::default_instance_;
  delete game_pub_get_all_event_msg_ntf_reflection_;
  delete pub_game_get_all_event_msg_ntf::default_instance_;
  delete pub_game_get_all_event_msg_ntf_reflection_;
  delete game_pub_get_id_event_msg_ntf::default_instance_;
  delete game_pub_get_id_event_msg_ntf_reflection_;
  delete pub_game_get_id_event_msg_ntf::default_instance_;
  delete pub_game_get_id_event_msg_ntf_reflection_;
  delete game_pub_delete_event_msg_ntf::default_instance_;
  delete game_pub_delete_event_msg_ntf_reflection_;
  delete game_pub_delete_type_msgs_ntf::default_instance_;
  delete game_pub_delete_type_msgs_ntf_reflection_;
  delete game_pub_read_event_msg_ntf::default_instance_;
  delete game_pub_read_event_msg_ntf_reflection_;
  delete game_pub_insert_event_msg_ntf::default_instance_;
  delete game_pub_insert_event_msg_ntf_reflection_;
  delete pub_game_insert_event_msg_ntf::default_instance_;
  delete pub_game_insert_event_msg_ntf_reflection_;
  delete game_pub_get_rank_data_req::default_instance_;
  delete game_pub_get_rank_data_req_reflection_;
  delete game_pub_get_rank_data_ack::default_instance_;
  delete game_pub_get_rank_data_ack_reflection_;
  delete update_rank_data_ntf::default_instance_;
  delete update_rank_data_ntf_reflection_;
  delete pub_battle_replay_save_req::default_instance_;
  delete pub_battle_replay_save_req_reflection_;
  delete pub_battle_replay_req::default_instance_;
  delete pub_battle_replay_req_reflection_;
  delete pub_battle_replay_ack::default_instance_;
  delete pub_battle_replay_ack_reflection_;
  delete pub_query_scene_req::default_instance_;
  delete pub_query_scene_req_reflection_;
  delete pub_query_scene_ack::default_instance_;
  delete pub_query_scene_ack_reflection_;
  delete pub_destory_scene_ntf::default_instance_;
  delete pub_destory_scene_ntf_reflection_;
  delete pub_scene_role_change_ntf::default_instance_;
  delete pub_scene_role_change_ntf_reflection_;
  delete pub_update_3d_scene_info_ntf::default_instance_;
  delete pub_update_3d_scene_info_ntf_reflection_;
  delete pub_switch_game_id_ntf::default_instance_;
  delete pub_switch_game_id_ntf_reflection_;
  delete pub_officer_daily_salary_req::default_instance_;
  delete pub_officer_daily_salary_req_reflection_;
  delete pub_officer_daily_salary_ack::default_instance_;
  delete pub_officer_daily_salary_ack_reflection_;
  delete pub_offical_battle_report_req::default_instance_;
  delete pub_offical_battle_report_req_reflection_;
  delete pub_offical_battle_report_ack::default_instance_;
  delete pub_offical_battle_report_ack_reflection_;
  delete pub_get_offical_formation_req::default_instance_;
  delete pub_get_offical_formation_req_reflection_;
  delete pub_get_offical_formation_ack::default_instance_;
  delete pub_get_offical_formation_ack_reflection_;
  delete pub_gm_upgrade_office_req::default_instance_;
  delete pub_gm_upgrade_office_req_reflection_;
  delete offical_robot_gen_req::default_instance_;
  delete offical_robot_gen_req_reflection_;
  delete offical_robot_gen_ack::default_instance_;
  delete offical_robot_gen_ack_reflection_;
  delete get_minimum_chat_room_req::default_instance_;
  delete get_minimum_chat_room_req_reflection_;
  delete get_minimum_chat_room_ack::default_instance_;
  delete get_minimum_chat_room_ack_reflection_;
  delete pub_get_chat_room_list_req::default_instance_;
  delete pub_get_chat_room_list_req_reflection_;
  delete pub_get_chat_room_list_ack::default_instance_;
  delete pub_get_chat_room_list_ack_reflection_;
  delete pub_create_3dchat_room_req::default_instance_;
  delete pub_create_3dchat_room_req_reflection_;
  delete pub_create_3dchat_room_ack::default_instance_;
  delete pub_create_3dchat_room_ack_reflection_;
  delete pub_top_3dchat_room_req::default_instance_;
  delete pub_top_3dchat_room_req_reflection_;
  delete pub_top_3dchat_room_ack::default_instance_;
  delete pub_top_3dchat_room_ack_reflection_;
  delete pub_cancel_top_3dchat_room_req::default_instance_;
  delete pub_cancel_top_3dchat_room_req_reflection_;
  delete pub_cancel_top_3dchat_room_ack::default_instance_;
  delete pub_cancel_top_3dchat_room_ack_reflection_;
  delete pub_change_name_3dchat_room_req::default_instance_;
  delete pub_change_name_3dchat_room_req_reflection_;
  delete pub_change_name_3dchat_room_ack::default_instance_;
  delete pub_change_name_3dchat_room_ack_reflection_;
  delete pub_get_role_gs_id_req::default_instance_;
  delete pub_get_role_gs_id_req_reflection_;
  delete pub_get_role_gs_id_ack::default_instance_;
  delete pub_get_role_gs_id_ack_reflection_;
  delete pub_get_offical_members_req::default_instance_;
  delete pub_get_offical_members_req_reflection_;
  delete pub_get_offical_members_ack::default_instance_;
  delete pub_get_offical_members_ack_reflection_;
  delete pub_gm_start_match_req::default_instance_;
  delete pub_gm_start_match_req_reflection_;
  delete pub_gm_start_match_ack::default_instance_;
  delete pub_gm_start_match_ack_reflection_;
  delete pub_gm_send_office_mail_req::default_instance_;
  delete pub_gm_send_office_mail_req_reflection_;
  delete pub_get_offical_data_req::default_instance_;
  delete pub_get_offical_data_req_reflection_;
  delete pub_get_offical_data_ack::default_instance_;
  delete pub_get_offical_data_ack_reflection_;
}

void protobuf_AddDesc_ss_5fpublic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5fsocial_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ss_public.proto\022\013SProtoSpace\032\020ss_proto"
    "id.proto\032\021cm_roletype.proto\032\023cm_battlety"
    "pe.proto\032\023cm_socialtype.proto\032\017cs_social"
    ".proto\"\330\001\n\034pub_harem_compete_qingan_req\022"
    "J\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\037pub_harem_compete_qingan_req_id\022\014\n\004u"
    "uid\030\002 \001(\004\022\021\n\tself_name\030\003 \001(\t\022\021\n\ttarget_i"
    "d\030\004 \001(\004\022\021\n\trole_name\030\005 \001(\t\022\021\n\trole_type\030"
    "\006 \001(\r\022\022\n\nevent_uuid\030\007 \001(\004\"\332\002\n\032pub_harem_"
    "compete_slap_req\022H\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\035pub_harem_compete_s"
    "lap_req_id\022\017\n\007self_id\030\002 \001(\004\022\021\n\tself_name"
    "\030\003 \001(\t\022\021\n\ttarget_id\030\004 \001(\004\022\023\n\013target_name"
    "\030\005 \001(\t\022\021\n\trole_type\030\006 \001(\r\022\021\n\ttake_time\030\007"
    " \001(\004\022\022\n\nslap_count\030\010 \001(\r\022,\n\010progress\030\t \001"
    "(\0162\032.SProtoSpace.ESLAPPROGRESS\022*\n\004info\030\n"
    " \003(\0132\034.SProtoSpace.slap_emoji_info\022\022\n\nev"
    "ent_uuid\030\013 \001(\004\"\376\001\n\rpub_role_info\022\n\n\002id\030\001"
    " \001(\004\022\014\n\004name\030\002 \001(\t\022\n\n\002lv\030\003 \001(\r\022\022\n\nlogin_"
    "time\030\004 \001(\004\022\023\n\013logout_time\030\005 \001(\004\022\020\n\010posit"
    "ion\030\006 \001(\t\022\013\n\003sex\030\007 \001(\r\022\r\n\005grade\030\010 \001(\r\022\016\n"
    "\006online\030\t \001(\010\022\016\n\006avatar\030\n \001(\t\022\031\n\021battle_"
    "session_id\030\r \001(\004\022\023\n\013fight_power\030\016 \001(\r\022\020\n"
    "\010paixi_id\030\017 \001(\r\022\016\n\006border\030\020 \001(\005\"I\n\023pub_r"
    "ole_info_cache\0222\n\016role_info_list\030\001 \003(\0132\032"
    ".SProtoSpace.pub_role_info\"T\n\023officer_re"
    "sult_data\022\017\n\007role_id\030\001 \001(\004\022\037\n\002lv\030\002 \001(\0162\023"
    ".SProtoSpace.EGrade\022\013\n\003ret\030\003 \001(\005\"L\n\023offi"
    "cer_reduce_data\022\017\n\007role_id\030\001 \001(\004\022\021\n\told_"
    "grade\030\002 \001(\005\022\021\n\tnew_grade\030\003 \001(\005\">\n\014rank_d"
    "b_item\022\017\n\007role_id\030\001 \001(\004\022\016\n\006values\030\002 \003(\r\022"
    "\r\n\005order\030\003 \001(\r\"r\n\014rank_db_data\022$\n\004type\030\001"
    " \001(\0162\026.SProtoSpace.RANK_TYPE\022\022\n\nrank_ord"
    "er\030\002 \001(\r\022(\n\005items\030\003 \003(\0132\031.SProtoSpace.ra"
    "nk_db_item\"1\n\017rank_redis_data\022\017\n\007role_id"
    "\030\001 \001(\004\022\r\n\005value\030\002 \001(\004\"g\n\021rank_refresh_da"
    "ta\022\021\n\tmin_value\030\001 \001(\004\022\020\n\010cur_size\030\002 \001(\005\022"
    "-\n\007members\030\003 \003(\0132\034.SProtoSpace.rank_redi"
    "s_data\"\272\001\n\016pub_role_login\022;\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\021pub_role_lo"
    "gin_id\022\017\n\007role_id\030\002 \001(\004\022(\n\004info\030\003 \001(\0132\032."
    "SProtoSpace.pub_role_info\022\027\n\017game_sessio"
    "n_id\030\004 \001(\004\022\027\n\017gate_session_id\030\005 \001(\004\"\213\001\n\024"
    "pub_role_login_batch\022A\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\027pub_role_login_b"
    "atch_id\0220\n\013role_logins\030\002 \003(\0132\033.SProtoSpa"
    "ce.pub_role_login\"s\n\017pub_role_logout\022<\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\022"
    "pub_role_logout_id\022\017\n\007role_id\030\002 \001(\004\022\021\n\tr"
    "ole_name\030\003 \001(\t\"\302\001\n\022pub_role_info_sync\022\?\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:"
    "\025pub_role_info_sync_id\022\017\n\007role_id\030\002 \001(\004\022"
    "(\n\004info\030\003 \001(\0132\032.SProtoSpace.pub_role_inf"
    "o\022\027\n\017game_session_id\030\004 \001(\004\022\027\n\017gate_sessi"
    "on_id\030\005 \001(\004\"\334\002\n\022ps_create_team_req\022\?\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025ps"
    "_create_team_req_id\022)\n\tteam_type\030\002 \001(\0162\026"
    ".SProtoSpace.eTeamType\022)\n\tteam_size\030\003 \001("
    "\0162\026.SProtoSpace.eTeamSize\022/\n\tteam_perm\030\004"
    " \001(\0162\034.SProtoSpace.eTeamPermission\022\021\n\tte"
    "am_name\030\005 \001(\t\022\r\n\005gs_id\030\006 \001(\004\022\017\n\007role_id\030"
    "\007 \001(\004\022\n\n\002lv\030\010 \001(\005\022\021\n\trole_name\030\t \001(\t\022,\n\005"
    "heros\030\n \003(\0132\035.SProtoSpace.battle_hero_in"
    "fo\"\215\002\n\022ps_create_team_ack\022\?\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\025ps_create_t"
    "eam_ack_id\022)\n\tteam_type\030\002 \001(\0162\026.SProtoSp"
    "ace.eTeamType\022)\n\tteam_size\030\003 \001(\0162\026.SProt"
    "oSpace.eTeamSize\022/\n\tteam_perm\030\004 \001(\0162\034.SP"
    "rotoSpace.eTeamPermission\022\021\n\tteam_name\030\005"
    " \001(\t\022\017\n\007role_id\030\006 \001(\004\022\013\n\003ret\030\007 \001(\005\"\214\001\n\022p"
    "s_update_team_ntf\022\?\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\025ps_update_team_ntf_"
    "id\022\017\n\007role_id\030\002 \001(\004\022$\n\004team\030\003 \001(\0132\026.SPro"
    "toSpace.team_data\"\321\001\n\021ps_enter_team_req\022"
    ">\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\024ps_enter_team_req_id\022\017\n\007team_id\030\002 \001(\004"
    "\022\017\n\007role_id\030\003 \001(\004\022\r\n\005gs_id\030\004 \001(\004\022\n\n\002lv\030\005"
    " \001(\005\022\021\n\trole_name\030\006 \001(\t\022,\n\005heros\030\007 \003(\0132\035"
    ".SProtoSpace.battle_hero_info\"\202\001\n\021ps_ent"
    "er_team_ack\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:\024ps_enter_team_ack_id\022\017\n\007t"
    "eam_id\030\002 \001(\004\022\017\n\007role_id\030\003 \001(\004\022\013\n\003ret\030\004 \001"
    "(\005\"s\n\020ps_exit_team_req\022=\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ESSProtoID:\023ps_exit_team_r"
    "eq_id\022\017\n\007team_id\030\002 \001(\004\022\017\n\007role_id\030\003 \001(\004\""
    "\200\001\n\020ps_exit_team_ack\022=\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\023ps_exit_team_ack"
    "_id\022\017\n\007team_id\030\002 \001(\004\022\017\n\007role_id\030\003 \001(\004\022\013\n"
    "\003ret\030\004 \001(\005\"u\n\021ps_ready_team_req\022>\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\024ps_re"
    "ady_team_req_id\022\017\n\007team_id\030\002 \001(\004\022\017\n\007role"
    "_id\030\003 \001(\004\"\202\001\n\021ps_ready_team_ack\022>\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\024ps_re"
    "ady_team_ack_id\022\017\n\007team_id\030\002 \001(\004\022\017\n\007role"
    "_id\030\003 \001(\004\022\013\n\003ret\030\004 \001(\005\"\266\001\n\022ps_update_tea"
    "m_req\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID:\025ps_update_team_req_id\022\017\n\007team_i"
    "d\030\002 \001(\004\022\017\n\007role_id\030\003 \001(\004\022\017\n\007slot_id\030\004 \001("
    "\r\022,\n\005heros\030\005 \001(\0132\035.SProtoSpace.battle_he"
    "ro_info\"\246\001\n\022ps_update_team_ack\022\?\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\025ps_upd"
    "ate_team_ack_id\022\017\n\007team_id\030\002 \001(\004\022\017\n\007role"
    "_id\030\003 \001(\004\022\017\n\007slot_id\030\004 \001(\r\022\017\n\007hero_id\030\005 "
    "\001(\004\022\013\n\003ret\030\006 \001(\005\"\347\001\n\020ps_get_teams_req\022=\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:"
    "\023ps_get_teams_req_id\022)\n\tteam_type\030\002 \001(\0162"
    "\026.SProtoSpace.eTeamType\022)\n\tteam_size\030\003 \001"
    "(\0162\026.SProtoSpace.eTeamSize\022/\n\tteam_perm\030"
    "\004 \001(\0162\034.SProtoSpace.eTeamPermission\022\r\n\005p"
    "arms\030\005 \003(\005\"\227\001\n\020ps_get_teams_ack\022=\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\023ps_ge"
    "t_teams_ack_id\022\017\n\007role_id\030\002 \001(\004\022\013\n\003ret\030\003"
    " \001(\005\022&\n\005teams\030\004 \003(\0132\027.SProtoSpace.team_b"
    "rief\"\261\001\n\030ps_invite_enter_team_req\022E\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033ps_"
    "invite_enter_team_req_id\022\024\n\014sour_role_id"
    "\030\002 \001(\004\022\026\n\016sour_role_name\030\003 \001(\t\022\017\n\007team_i"
    "d\030\004 \001(\004\022\017\n\007roleids\030\005 \003(\004\"\334\001\n\030ps_invite_e"
    "nter_team_ntf\022E\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\033ps_invite_enter_team_nt"
    "f_id\022\024\n\014dest_role_id\030\002 \001(\004\022\017\n\007team_id\030\003 "
    "\001(\004\022\021\n\tteam_name\030\004 \001(\t\022\021\n\tteam_type\030\005 \001("
    "\r\022\024\n\014sour_role_id\030\006 \001(\004\022\026\n\016sour_role_nam"
    "e\030\007 \001(\t\"\265\001\n\027ps_get_offical_rank_req\022E\n\010p"
    "roto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\032"
    "ps_get_offical_rank_req_id\022&\n\toffice_lv\030"
    "\002 \001(\0162\023.SProtoSpace.EGrade\022\017\n\007role_id\030\003 "
    "\001(\004\022\r\n\005start\030\004 \001(\r\022\013\n\003end\030\005 \001(\r\"\262\001\n\027ps_g"
    "et_offical_rank_ack\022E\n\010proto_id\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\032ps_get_offical_r"
    "ank_ack_id\022\017\n\007role_id\030\002 \001(\004\022\013\n\003ret\030\003 \001(\r"
    "\0222\n\nrank_items\030\004 \003(\0132\036.SProtoSpace.offic"
    "al_item_data\"\202\001\n\032ps_global_offical_rank_"
    "req\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:\035ps_global_offical_rank_req_id\022\r\n"
    "\005start\030\002 \001(\r\022\013\n\003end\030\003 \001(\r\"\331\001\n\032ps_global_"
    "offical_rank_ack\022H\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\035ps_global_offical_r"
    "ank_ack_id\022\013\n\003ret\030\002 \001(\r\0221\n\007members\030\003 \003(\013"
    "2 .SProtoSpace.offical_member_data\0221\n\007my"
    "_data\030\004 \001(\0132 .SProtoSpace.offical_member"
    "_data\"\315\001\n\034ps_get_offical_rank_info_req\022J"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\037ps_get_offical_rank_info_req_id\022&\n\tof"
    "fice_lv\030\002 \001(\0162\023.SProtoSpace.EGrade\022\017\n\007ro"
    "le_id\030\003 \001(\004\022\r\n\005start\030\004 \001(\005\022\013\n\003len\030\005 \001(\005\022"
    "\014\n\004show\030\006 \001(\010\"\360\002\n\034ps_get_offical_rank_in"
    "fo_ack\022J\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\037ps_get_offical_rank_info_ack_"
    "id\022\013\n\003ret\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\022\035\n\025offi"
    "cal_challenge_num\030\004 \001(\005\022\035\n\025offical_chall"
    "enge_max\030\005 \001(\005\022/\n\007my_item\030\006 \001(\0132\036.SProto"
    "Space.offical_item_data\0222\n\nrank_items\030\007 "
    "\003(\0132\036.SProtoSpace.offical_item_data\0224\n\006e"
    "quips\030\010 \003(\0132$.SProtoSpace.role_show_role"
    "_equipped\022\r\n\005count\030\t \001(\005\"\315\001\n!ps_add_robo"
    "t_to_offical_arena_req\022O\n\010proto_id\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:$ps_add_robot_"
    "to_offical_arena_req_id\022/\n\titem_data\030\002 \001"
    "(\0132\034.SProtoSpace.arena_item_data\022&\n\toffi"
    "ce_lv\030\003 \001(\0162\023.SProtoSpace.EGrade\"\222\001\n!ps_"
    "add_robot_to_offical_arena_ack\022O\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:$ps_ad"
    "d_robot_to_offical_arena_ack_id\022\017\n\007role_"
    "id\030\002 \001(\004\022\013\n\003ret\030\003 \001(\r\"\300\001\n\035ps_challenge_o"
    "ffical_rank_req\022K\n\010proto_id\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID: ps_challenge_offical"
    "_rank_req_id\022\024\n\014sour_role_id\030\002 \001(\004\022\024\n\014de"
    "st_role_id\030\003 \001(\004\022&\n\toffice_lv\030\004 \001(\0162\023.SP"
    "rotoSpace.EGrade\"\257\002\n\035ps_challenge_offica"
    "l_rank_ack\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID: ps_challenge_offical_rank"
    "_ack_id\022&\n\toffice_lv\030\002 \001(\0162\023.SProtoSpace"
    ".EGrade\022\024\n\014sour_role_id\030\003 \001(\004\022/\n\tsour_da"
    "ta\030\004 \001(\0132\034.SProtoSpace.arena_item_data\022\024"
    "\n\014dest_role_id\030\005 \001(\004\022/\n\tdest_data\030\006 \001(\0132"
    "\034.SProtoSpace.arena_item_data\022\013\n\003ret\030\007 \001"
    "(\r\"\342\001\n\036ps_update_challenge_result_req\022L\n"
    "\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":!ps_update_challenge_result_req_id\022&\n\to"
    "ffice_lv\030\002 \001(\0162\023.SProtoSpace.EGrade\022\024\n\014s"
    "our_role_id\030\003 \001(\004\022\024\n\014dest_role_id\030\004 \001(\004\022"
    "\013\n\003win\030\005 \001(\010\022\021\n\tbattle_id\030\006 \001(\004\"\343\002\n\036ps_u"
    "pdate_challenge_result_ack\022L\n\010proto_id\030\001"
    " \001(\0162\027.SProtoSpace.ESSProtoID:!ps_update"
    "_challenge_result_ack_id\022\013\n\003ret\030\002 \001(\r\022&\n"
    "\toffice_lv\030\003 \001(\0162\023.SProtoSpace.EGrade\022\024\n"
    "\014dest_role_id\030\004 \001(\004\022\034\n\024dest_older_rankin"
    "gid\030\005 \001(\005\022\032\n\022dest_new_rankingid\030\006 \001(\005\022\024\n"
    "\014sour_role_id\030\007 \001(\004\022\034\n\024sour_older_rankin"
    "gid\030\010 \001(\005\022\032\n\022sour_new_rankingid\030\t \001(\005\022\021\n"
    "\tbattle_id\030\n \001(\004\022\013\n\003win\030\013 \001(\010\"\362\001\n\032offica"
    "l_examine_battle_req\022H\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\035offical_examine"
    "_battle_req_id\022&\n\toffice_lv\030\002 \001(\0162\023.SPro"
    "toSpace.EGrade\0220\n\tsour_data\030\003 \001(\0132\035.SPro"
    "toSpace.battle_role_info\0220\n\tdest_data\030\004 "
    "\001(\0132\035.SProtoSpace.battle_role_info\"\345\001\n\032o"
    "ffical_examine_battle_ack\022H\n\010proto_id\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\035offical_ex"
    "amine_battle_ack_id\022&\n\toffice_lv\030\002 \001(\0162\023"
    ".SProtoSpace.EGrade\022\017\n\007sour_id\030\003 \001(\004\022\017\n\007"
    "dest_id\030\004 \001(\004\022\022\n\nsour_score\030\005 \001(\005\022\022\n\ndes"
    "t_score\030\006 \001(\005\022\013\n\003win\030\007 \001(\010\"\257\001\n\"ps_offica"
    "l_apply_battle_result_req\022P\n\010proto_id\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:%ps_offical"
    "_apply_battle_result_req_id\022&\n\toffice_lv"
    "\030\002 \001(\0162\023.SProtoSpace.EGrade\022\017\n\007role_id\030\003"
    " \001(\004\"\320\002\n\"ps_offical_apply_battle_result_"
    "ack\022P\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:%ps_offical_apply_battle_result_a"
    "ck_id\022&\n\toffice_lv\030\002 \001(\0162\023.SProtoSpace.E"
    "Grade\022\017\n\007role_id\030\003 \001(\004\022\014\n\004time\030\004 \001(\005\022\023\n\013"
    "my_place_id\030\005 \001(\005\0224\n\004data\030\006 \003(\0132&.SProto"
    "Space.offical_apply_battle_data\0229\n\006mydat"
    "a\030\007 \003(\0132).SProtoSpace.offical_apply_my_b"
    "attle_data\022\013\n\003ret\030\010 \001(\r\"t\n!ps_test_offic"
    "al_battle_result_req\022O\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:$ps_test_offical"
    "_battle_result_req_id\"r\n ps_test_start_o"
    "ffical_battle_req\022N\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID:#ps_test_start_offi"
    "cal_battle_req_id\"h\n\033ps_test_offical_sig"
    "n_up_req\022I\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\036ps_test_offical_sign_up_req"
    "_id\"\247\001\n\032pub_friend_opt_forward_req\022H\n\010pr"
    "oto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\035p"
    "ub_friend_opt_forward_req_id\022-\n\003onf\030\002 \001("
    "\0132 .SProtoSpace.game_friend_opt_ntf\022\020\n\010a"
    "pply_id\030\003 \001(\004\"\247\001\n\032pub_friend_opt_forward"
    "_ack\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID:\035pub_friend_opt_forward_ack_id\022-"
    "\n\003onf\030\002 \001(\0132 .SProtoSpace.game_friend_op"
    "t_ntf\022\020\n\010apply_id\030\003 \001(\004\"\267\001\n\035pub_harem_co"
    "mpete_friends_req\022K\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID: pub_harem_compete_"
    "friends_req_id\022\017\n\007gd_type\030\002 \001(\r\022\014\n\004type\030"
    "\003 \001(\r\022\r\n\005count\030\004 \001(\r\022\014\n\004uuid\030\005 \001(\004\022\r\n\005gr"
    "ade\030\006 \001(\r\"\252\001\n\035pub_harem_compete_friends_"
    "ack\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID: pub_harem_compete_friends_ack_id"
    "\022\014\n\004uuid\030\002 \001(\004\022.\n\007friends\030\003 \003(\0132\035.SProto"
    "Space.friend_base_info\"\205\001\n\023pub_search_ro"
    "le_req\022A\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\026pub_search_role_req_id\022\014\n\004typ"
    "e\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\022\014\n\004uuid\030\004 \001(\004\"\240"
    "\001\n\023pub_search_role_ack\022A\n\010proto_id\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\026pub_search_ro"
    "le_ack_id\022\014\n\004uuid\030\002 \001(\004\022+\n\004role\030\003 \001(\0132\035."
    "SProtoSpace.friend_base_info\022\013\n\003ret\030\004 \001("
    "\r\"\216\002\n\025pub_officer_apply_req\022C\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030pub_offi"
    "cer_apply_req_id\022\014\n\004uuid\030\002 \001(\004\022\r\n\005grade\030"
    "\003 \001(\r\022\021\n\tcur_grade\030\004 \001(\r\022\021\n\tmax_grade\030\005 "
    "\001(\r\022\013\n\003sex\030\006 \001(\r\022\n\n\002lv\030\007 \001(\r\022\014\n\004name\030\010 \001"
    "(\t\022\022\n\napply_time\030\t \001(\004\0222\n\013battle_data\030\n "
    "\001(\0132\035.SProtoSpace.battle_role_info\"\206\001\n\025p"
    "ub_officer_apply_ack\022C\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\030pub_officer_app"
    "ly_ack_id\022\014\n\004uuid\030\002 \001(\004\022\r\n\005grade\030\003 \001(\r\022\013"
    "\n\003ret\030\004 \001(\r\"\277\001\n\032update_heros_formation_n"
    "tf\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:\035update_heros_formation_ntf_id\022\017\n\007"
    "role_id\030\002 \001(\004\022\023\n\013apply_grade\030\003 \001(\005\0221\n\nhe"
    "ro_infos\030\004 \003(\0132\035.SProtoSpace.battle_hero"
    "_info\"\221\001\n\026pub_officer_result_ntf\022D\n\010prot"
    "o_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031pub"
    "_officer_result_ntf_id\0221\n\007results\030\002 \003(\0132"
    " .SProtoSpace.officer_result_data\"\216\001\n\026pu"
    "b_offical_reduce_ntf\022D\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ESSProtoID:\031pub_offical_red"
    "uce_ntf_id\022.\n\004data\030\002 \003(\0132 .SProtoSpace.o"
    "fficer_reduce_data\"u\n\031pub_load_offical_d"
    "ata_req\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\034pub_load_offical_data_req_id"
    "\022\017\n\007role_id\030\002 \001(\004\"\347\001\n\031pub_load_offical_d"
    "ata_ack\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpace."
    "ESSProtoID:\034pub_load_offical_data_ack_id"
    "\022\017\n\007role_id\030\002 \001(\004\022\021\n\tcur_grade\030\003 \001(\r\022\021\n\t"
    "max_grade\030\004 \001(\r\022\023\n\013apply_grade\030\005 \001(\r\022\022\n\n"
    "apply_time\030\006 \001(\r\022\022\n\nlast_grade\030\007 \001(\r\022\r\n\005"
    "exist\030\010 \001(\010\"\215\001\n\036pub_get_officer_applican"
    "ts_req\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:!pub_get_officer_applicants_req"
    "_id\022\r\n\005grade\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\"\361\001\n\036"
    "pub_get_officer_applicants_ack\022K\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:!pub_ge"
    "t_officer_applicants_ack_id\022\013\n\003ret\030\002 \001(\r"
    "\022\017\n\007role_id\030\003 \001(\004\022\r\n\005grade\030\004 \001(\r\022\021\n\tappl"
    "y_num\030\005 \001(\r\022\021\n\tposts_num\030\006 \001(\r\022/\n\006applys"
    "\030\007 \003(\0132\037.SProtoSpace.offical_apply_data\""
    "\203\001\n\031pub_update_offical_lv_req\022F\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\034pub_upd"
    "ate_offical_lv_req_id\022\r\n\005grade\030\002 \001(\r\022\017\n\007"
    "role_id\030\003 \001(\004\"\211\001\n\034pub_cancel_offical_app"
    "ly_req\022I\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\037pub_cancel_offical_apply_req_i"
    "d\022\r\n\005grade\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\"\226\001\n\034pu"
    "b_cancel_offical_apply_ack\022I\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\037pub_cancel"
    "_offical_apply_ack_id\022\r\n\005grade\030\002 \001(\r\022\017\n\007"
    "role_id\030\003 \001(\004\022\013\n\003ret\030\004 \001(\r\"\227\001\n#pub_get_o"
    "ffical_challenge_roles_req\022P\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:&pub_get_of"
    "fical_challenge_roles_req_id\022\r\n\005grade\030\002 "
    "\001(\r\022\017\n\007role_id\030\003 \001(\004\"\323\001\n#pub_get_offical"
    "_challenge_roles_ack\022P\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:&pub_get_offical_"
    "challenge_roles_ack_id\022\013\n\003ret\030\002 \001(\r\022\r\n\005g"
    "rade\030\003 \001(\r\022\017\n\007role_id\030\004 \001(\004\022-\n\005items\030\005 \003"
    "(\0132\036.SProtoSpace.offical_item_data\"\251\001\n\030g"
    "ame_pub_send_flower_req\022E\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\033game_pub_send"
    "_flower_req_id\022\024\n\014send_role_id\030\002 \001(\004\0220\n\t"
    "send_info\030\003 \001(\0132\035.SProtoSpace.flower_sen"
    "d_info\"\343\001\n\030pub_game_send_flower_ack\022E\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033p"
    "ub_game_send_flower_ack_id\022\024\n\014send_role_"
    "id\030\002 \001(\004\0220\n\tsend_info\030\003 \001(\0132\035.SProtoSpac"
    "e.flower_send_info\0228\n\014to_role_info\030\004 \001(\013"
    "2\".SProtoSpace.public_role_base_info\"\345\001\n"
    "\036game_pub_flower_to_receive_nty\022K\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:!game_"
    "pub_flower_to_receive_nty_id\022\022\n\nto_role_"
    "id\030\002 \001(\004\022\024\n\014from_role_id\030\003 \001(\004\022\032\n\022add_po"
    "pularity_num\030\004 \001(\r\0220\n\tsend_info\030\005 \001(\0132\035."
    "SProtoSpace.flower_send_info\"\345\001\n\036pub_gam"
    "e_flower_to_receive_nty\022K\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:!pub_game_flow"
    "er_to_receive_nty_id\022\022\n\nto_role_id\030\002 \001(\004"
    "\022\024\n\014from_role_id\030\003 \001(\004\022\032\n\022add_popularity"
    "_num\030\004 \001(\r\0220\n\tsend_info\030\005 \001(\0132\035.SProtoSp"
    "ace.flower_send_info\"\260\001\n\023pub_forward_add"
    "_req\022A\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID:\026pub_forward_add_req_id\022\021\n\ttarge"
    "t_id\030\002 \001(\004\022\017\n\007area_id\030\003 \001(\r\0222\n\napply_inf"
    "o\030\004 \001(\0132\036.SProtoSpace.friend_apply_info\""
    "\260\001\n\023pub_forward_add_ack\022A\n\010proto_id\030\001 \001("
    "\0162\027.SProtoSpace.ESSProtoID:\026pub_forward_"
    "add_ack_id\022\021\n\ttarget_id\030\002 \001(\004\022\017\n\007area_id"
    "\030\003 \001(\r\0222\n\napply_info\030\004 \001(\0132\036.SProtoSpace"
    ".friend_apply_info\"h\n\024message_packing_in"
    "fo\022(\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID\022\023\n\013proto_bytes\030\003 \001(\014\022\021\n\tproto_len\030\004"
    " \001(\r\"\255\001\n\030game_pub_msg_packing_ntf\022E\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\033gam"
    "e_pub_msg_packing_ntf_id\022\026\n\016target_game_"
    "id\030\002 \001(\004\0222\n\007packing\030\003 \001(\0132!.SProtoSpace."
    "message_packing_info\"\255\001\n\030pub_game_msg_pa"
    "cking_ntf\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\033pub_game_msg_packing_ntf_id"
    "\022\026\n\016target_game_id\030\002 \001(\004\0222\n\007packing\030\003 \001("
    "\0132!.SProtoSpace.message_packing_info\"\236\001\n"
    "\020pub_get_role_req\022>\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ESSProtoID:\023pub_get_role_req_i"
    "d\022)\n\004mode\030\002 \001(\0162\033.SProtoSpace.EGetRoleDo"
    "Type\022\014\n\004uuid\030\003 \001(\004\022\021\n\ttarget_id\030\004 \001(\004\"\270\001"
    "\n\020pub_get_role_ack\022>\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\023pub_get_role_ack_"
    "id\022)\n\004mode\030\002 \001(\0162\033.SProtoSpace.EGetRoleD"
    "oType\022\014\n\004uuid\030\003 \001(\004\022+\n\004info\030\004 \001(\0132\035.SPro"
    "toSpace.friend_base_info\"\224\001\n\024pub_game_fr"
    "iends_ntf\022B\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\027pub_game_friends_ntf_id\022\014\n"
    "\004uuid\030\002 \001(\004\022*\n\003ntf\030\003 \001(\0132\035.SProtoSpace.g"
    "ame_friends_ntf\"\245\001\n\025pub_complete_role_re"
    "q\022C\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\030pub_complete_role_req_id\022\014\n\004uuid\030\002"
    " \001(\004\0229\n\010ack_info\030\003 \001(\0132\'.SProtoSpace.gam"
    "e_onekey_apply_info_ack\"\245\001\n\025pub_complete"
    "_role_ack\022C\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\030pub_complete_role_ack_id\022\014"
    "\n\004uuid\030\002 \001(\004\0229\n\010ack_info\030\003 \001(\0132\'.SProtoS"
    "pace.game_onekey_apply_info_ack\"\235\001\n\026pub_"
    "friend_refresh_req\022D\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\031pub_friend_refres"
    "h_req_id\022\014\n\004uuid\030\002 \001(\004\022\020\n\010role_ids\030\003 \003(\004"
    "\022\014\n\004type\030\004 \001(\r\022\017\n\007do_type\030\005 \001(\r\"\271\001\n\026pub_"
    "friend_refresh_ack\022D\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\031pub_friend_refres"
    "h_ack_id\022,\n\005infos\030\002 \003(\0132\035.SProtoSpace.fr"
    "iend_base_info\022\014\n\004type\030\003 \001(\r\022\014\n\004uuid\030\004 \001"
    "(\004\022\017\n\007do_type\030\005 \001(\r\"\177\n\036game_pub_get_all_"
    "event_msg_ntf\022L\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ESSProtoID:!game_pub_get_all_event"
    "_msg_ntf_id\022\017\n\007role_id\030\002 \001(\004\"\263\001\n\036pub_gam"
    "e_get_all_event_msg_ntf\022L\n\010proto_id\030\001 \001("
    "\0162\027.SProtoSpace.ESSProtoID:!pub_game_get"
    "_all_event_msg_ntf_id\022\017\n\007role_id\030\002 \001(\004\0222"
    "\n\nevent_msgs\030\003 \003(\0132\036.SProtoSpace.db_even"
    "t_msg_info\"\217\001\n\035game_pub_get_id_event_msg"
    "_ntf\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESS"
    "ProtoID: game_pub_get_id_event_msg_ntf_i"
    "d\022\017\n\007role_id\030\002 \001(\004\022\020\n\010event_id\030\003 \001(\004\"\261\001\n"
    "\035pub_game_get_id_event_msg_ntf\022K\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID: pub_g"
    "ame_get_id_event_msg_ntf_id\022\017\n\007role_id\030\002"
    " \001(\004\0222\n\nevent_msgs\030\003 \001(\0132\036.SProtoSpace.d"
    "b_event_msg_info\"\220\001\n\035game_pub_delete_eve"
    "nt_msg_ntf\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID: game_pub_delete_event_msg"
    "_ntf_id\022\017\n\007role_id\030\002 \001(\004\022\021\n\tdelete_id\030\004 "
    "\001(\004\"\221\001\n\035game_pub_delete_type_msgs_ntf\022K\n"
    "\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ": game_pub_delete_type_msgs_ntf_id\022\017\n\007ro"
    "le_id\030\002 \001(\004\022\022\n\nevent_type\030\003 \001(\r\"\215\001\n\033game"
    "_pub_read_event_msg_ntf\022I\n\010proto_id\030\001 \001("
    "\0162\027.SProtoSpace.ESSProtoID:\036game_pub_rea"
    "d_event_msg_ntf_id\022\017\n\007role_id\030\002 \001(\004\022\022\n\ne"
    "vent_type\030\003 \001(\r\"\307\001\n\035game_pub_insert_even"
    "t_msg_ntf\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID: game_pub_insert_event_msg_"
    "ntf_id\022\017\n\007role_id\030\002 \001(\004\0221\n\tevent_msg\030\003 \001"
    "(\0132\036.SProtoSpace.db_event_msg_info\022\025\n\ris"
    "_nty_client\030\004 \001(\010\"\307\001\n\035pub_game_insert_ev"
    "ent_msg_ntf\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID: pub_game_insert_event_ms"
    "g_ntf_id\022\017\n\007role_id\030\002 \001(\004\0221\n\tevent_msg\030\003"
    " \001(\0132\036.SProtoSpace.db_event_msg_info\022\025\n\r"
    "is_nty_client\030\004 \001(\010\"\305\001\n\032game_pub_get_ran"
    "k_data_req\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:\035game_pub_get_rank_data_re"
    "q_id\022\017\n\007role_id\030\002 \001(\004\022$\n\004type\030\003 \001(\0162\026.SP"
    "rotoSpace.RANK_TYPE\022\023\n\013start_index\030\004 \001(\005"
    "\022\021\n\tend_index\030\005 \001(\005\"\260\002\n\032game_pub_get_ran"
    "k_data_ack\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ESSProtoID:\035game_pub_get_rank_data_ac"
    "k_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007role_id\030\003 \001(\004\022$\n\004ty"
    "pe\030\004 \001(\0162\026.SProtoSpace.RANK_TYPE\022\023\n\013star"
    "t_index\030\005 \001(\005\022\021\n\tend_index\030\006 \001(\005\022.\n\007my_i"
    "tem\030\007 \001(\0132\035.SProtoSpace.rank_common_item"
    "\022,\n\005items\030\010 \003(\0132\035.SProtoSpace.rank_commo"
    "n_item\"\241\001\n\024update_rank_data_ntf\022B\n\010proto"
    "_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\027upda"
    "te_rank_data_ntf_id\022$\n\004type\030\002 \001(\0162\026.SPro"
    "toSpace.RANK_TYPE\022\017\n\007role_id\030\003 \001(\004\022\016\n\006va"
    "lues\030\004 \003(\r\"\250\001\n\032pub_battle_replay_save_re"
    "q\022H\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\035pub_battle_replay_save_req_id\022\021\n\tr"
    "eplay_id\030\002 \001(\004\022-\n\004data\030\003 \001(\0132\037.SProtoSpa"
    "ce.battle_replay_info\"\177\n\025pub_battle_repl"
    "ay_req\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ES"
    "SProtoID:\030pub_battle_replay_req_id\022\017\n\007ro"
    "le_id\030\002 \001(\004\022\021\n\treplay_id\030\003 \001(\004\"\276\001\n\025pub_b"
    "attle_replay_ack\022B\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ESSProtoID:\030pub_battle_replay_ac"
    "k_id\022\017\n\007role_id\030\002 \001(\004\022\016\n\003ret\030\003 \001(\005:\0010\022\021\n"
    "\treplay_id\030\004 \001(\004\022-\n\004data\030\005 \001(\0132\037.SProtoS"
    "pace.battle_replay_info\"\341\001\n\023pub_query_sc"
    "ene_req\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\026pub_query_scene_req_id\022\022\n\nque"
    "ry_type\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\022\020\n\010scene_"
    "id\030\004 \001(\r\022\022\n\nscene_type\030\005 \001(\r\022\025\n\rlast_sce"
    "ne_id\030\006 \001(\r\022\027\n\017last_scene_type\030\007 \001(\r\022\r\n\005"
    "token\030\010 \001(\t\"\322\001\n\023pub_query_scene_ack\022@\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\026p"
    "ub_query_scene_ack_id\022\022\n\nquery_type\030\002 \001("
    "\r\022\017\n\007role_id\030\003 \001(\004\022\016\n\003ret\030\004 \001(\005:\0010\022\020\n\010sc"
    "ene_id\030\005 \001(\r\022\022\n\nscene_type\030\006 \001(\r\022\017\n\007game"
    "_id\030\007 \001(\004\022\r\n\005token\030\010 \001(\t\"\201\001\n\025pub_destory"
    "_scene_ntf\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\030pub_destory_scene_ntf_id\022\020"
    "\n\010scene_id\030\002 \001(\r\022\022\n\nscene_type\030\003 \001(\r\"\257\001\n"
    "\031pub_scene_role_change_ntf\022F\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ESSProtoID:\034pub_scene_"
    "role_change_ntf_id\022\020\n\010scene_id\030\002 \001(\r\022\022\n\n"
    "scene_type\030\003 \001(\r\022\021\n\tadd_roles\030\004 \003(\004\022\021\n\td"
    "el_roles\030\005 \003(\004\"\264\001\n\034pub_update_3d_scene_i"
    "nfo_ntf\022I\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\037pub_update_3d_scene_info_ntf_"
    "id\022\020\n\010scene_id\030\002 \001(\r\022\022\n\nscene_type\030\003 \001(\r"
    "\022\017\n\007conf_id\030\004 \001(\r\022\022\n\nscene_name\030\005 \001(\t\"l\n"
    "\026pub_switch_game_id_ntf\022C\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ESSProtoID:\031pub_switch_ga"
    "me_id_ntf_id\022\r\n\005gs_id\030\002 \001(\004\"\211\001\n\034pub_offi"
    "cer_daily_salary_req\022I\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\037pub_officer_dail"
    "y_salary_req_id\022\017\n\007role_id\030\002 \001(\004\022\r\n\005grad"
    "e\030\003 \001(\r\"\252\001\n\034pub_officer_daily_salary_ack"
    "\022I\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\037pub_officer_daily_salary_ack_id\022\017\n\007r"
    "ole_id\030\002 \001(\004\022\r\n\005grade\030\003 \001(\r\022\022\n\nranking_i"
    "d\030\004 \001(\r\022\013\n\003ret\030\005 \001(\005\"|\n\035pub_offical_batt"
    "le_report_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID: pub_offical_battle_repo"
    "rt_req_id\022\017\n\007role_id\030\002 \001(\004\"\303\001\n\035pub_offic"
    "al_battle_report_ack\022J\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID: pub_offical_batt"
    "le_report_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007role_id"
    "\030\003 \001(\004\0228\n\007reports\030\004 \003(\0132\'.SProtoSpace.of"
    "fical_battle_report_unit\"\276\001\n\035pub_get_off"
    "ical_formation_req\022K\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID: pub_get_offical_f"
    "ormation_req_id\022\022\n\nmy_role_id\030\002 \001(\004\022\024\n\014d"
    "est_role_id\030\003 \001(\004\022&\n\toffice_lv\030\004 \001(\0162\023.S"
    "ProtoSpace.EGrade\"\241\002\n\035pub_get_offical_fo"
    "rmation_ack\022K\n\010proto_id\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID: pub_get_offical_formatio"
    "n_ack_id\022\013\n\003ret\030\002 \001(\r\022\022\n\nmy_role_id\030\003 \001("
    "\004\022\024\n\014dest_role_id\030\004 \001(\004\022\014\n\004name\030\005 \001(\t\022\013\n"
    "\003sex\030\006 \001(\005\022\014\n\004head\030\007 \001(\t\022\014\n\004bord\030\010 \001(\005\022\r"
    "\n\005grade\030\t \001(\005\022\n\n\002lv\030\n \001(\005\022*\n\005heros\030\013 \003(\013"
    "2\033.SProtoSpace.hero_base_info\"\237\001\n\031pub_gm"
    "_upgrade_office_req\022G\n\010proto_id\030\001 \001(\0162\027."
    "SProtoSpace.ESSProtoID:\034pub_gm_upgrade_o"
    "ffice_req_id\022\r\n\005grade\030\002 \001(\005\022*\n\004data\030\004 \001("
    "\0132\034.SProtoSpace.arena_item_data\"\\\n\025offic"
    "al_robot_gen_req\022C\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\030offical_robot_gen_r"
    "eq_id\"\\\n\025offical_robot_gen_ack\022C\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\030offic"
    "al_robot_gen_ack_id\"u\n\031get_minimum_chat_"
    "room_req\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\034get_minimum_chat_room_req_i"
    "d\022\017\n\007role_id\030\002 \001(\004\"\244\001\n\031get_minimum_chat_"
    "room_ack\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ESSProtoID:\034get_minimum_chat_room_ack_i"
    "d\022\013\n\003ret\030\002 \001(\005\022\017\n\007role_id\030\003 \001(\004\022\017\n\007room_"
    "id\030\004 \001(\005\022\017\n\007game_id\030\005 \001(\004\"\237\001\n\032pub_get_ch"
    "at_room_list_req\022H\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ESSProtoID:\035pub_get_chat_room_l"
    "ist_req_id\022\017\n\007role_id\030\002 \001(\004\022\023\n\013index_sta"
    "rt\030\003 \001(\005\022\021\n\tindex_end\030\004 \001(\005\"\331\001\n\032pub_get_"
    "chat_room_list_ack\022H\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ESSProtoID:\035pub_get_chat_room"
    "_list_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007role_id\030\003 \001"
    "(\004\022\023\n\013index_start\030\004 \001(\005\022\021\n\tindex_end\030\005 \001"
    "(\005\022+\n\005rooms\030\006 \003(\0132\034.SProtoSpace.chat_roo"
    "m_state\"\253\001\n\032pub_create_3dchat_room_req\022H"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoI"
    "D:\035pub_create_3dchat_room_req_id\022\024\n\014room"
    "_conf_id\030\002 \001(\005\022\021\n\troom_name\030\003 \001(\t\022\r\n\005tok"
    "en\030\004 \001(\t\022\013\n\003fee\030\005 \001(\005\"\312\001\n\032pub_create_3dc"
    "hat_room_ack\022H\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:\035pub_create_3dchat_room_"
    "ack_id\022\013\n\003ret\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\021\n\tcreat"
    "e_tm\030\004 \001(\005\022\024\n\014room_conf_id\030\005 \001(\005\022\021\n\troom"
    "_name\030\006 \001(\t\022\r\n\005token\030\007 \001(\t\"\216\001\n\027pub_top_3"
    "dchat_room_req\022E\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\032pub_top_3dchat_room_r"
    "eq_id\022\017\n\007room_id\030\002 \001(\005\022\016\n\006top_tm\030\003 \001(\005\022\013"
    "\n\003dur\030\004 \001(\005\"\233\001\n\027pub_top_3dchat_room_ack\022"
    "E\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\032pub_top_3dchat_room_ack_id\022\013\n\003ret\030\002 "
    "\001(\005\022\017\n\007room_id\030\003 \001(\005\022\016\n\006top_tm\030\004 \001(\005\022\013\n\003"
    "dur\030\005 \001(\005\"\177\n\036pub_cancel_top_3dchat_room_"
    "req\022L\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSP"
    "rotoID:!pub_cancel_top_3dchat_room_req_i"
    "d\022\017\n\007room_id\030\002 \001(\005\"\177\n\036pub_cancel_top_3dc"
    "hat_room_ack\022L\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ESSProtoID:!pub_cancel_top_3dchat_r"
    "oom_ack_id\022\017\n\007room_id\030\002 \001(\005\"\224\001\n\037pub_chan"
    "ge_name_3dchat_room_req\022M\n\010proto_id\030\001 \001("
    "\0162\027.SProtoSpace.ESSProtoID:\"pub_change_n"
    "ame_3dchat_room_req_id\022\017\n\007room_id\030\002 \001(\005\022"
    "\021\n\troom_name\030\003 \001(\t\"\241\001\n\037pub_change_name_3"
    "dchat_room_ack\022M\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ESSProtoID:\"pub_change_name_3dcha"
    "t_room_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007room_id\030\003 "
    "\001(\005\022\021\n\troom_name\030\004 \001(\t\"\212\001\n\026pub_get_role_"
    "gs_id_req\022D\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\031pub_get_role_gs_id_req_id\022"
    "\024\n\014sour_role_id\030\002 \001(\004\022\024\n\014dest_role_id\030\003 "
    "\001(\004\"\253\001\n\026pub_get_role_gs_id_ack\022D\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031pub_g"
    "et_role_gs_id_ack_id\022\013\n\003ret\030\002 \001(\005\022\024\n\014sou"
    "r_role_id\030\003 \001(\004\022\024\n\014dest_role_id\030\004 \001(\004\022\022\n"
    "\ndest_gs_id\030\005 \001(\004\"\237\001\n\033pub_get_offical_me"
    "mbers_req\022I\n\010proto_id\030\001 \001(\0162\027.SProtoSpac"
    "e.ESSProtoID:\036pub_get_offical_members_re"
    "q_id\022\r\n\005grade\030\002 \001(\005\022\023\n\013start_index\030\003 \001(\005"
    "\022\021\n\tend_index\030\004 \001(\005\"\267\001\n\033pub_get_offical_"
    "members_ack\022I\n\010proto_id\030\001 \001(\0162\027.SProtoSp"
    "ace.ESSProtoID:\036pub_get_offical_members_"
    "ack_id\022\013\n\003ret\030\002 \001(\005\022\r\n\005grade\030\003 \001(\005\0221\n\007me"
    "mbers\030\004 \003(\0132 .SProtoSpace.offical_member"
    "_data\"\223\001\n\026pub_gm_start_match_req\022D\n\010prot"
    "o_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\031pub"
    "_gm_start_match_req_id\022\r\n\005grade\030\002 \001(\005\022\022\n"
    "\nstart_time\030\003 \001(\005\022\020\n\010end_time\030\004 \001(\005\"z\n\026p"
    "ub_gm_start_match_ack\022D\n\010proto_id\030\001 \001(\0162"
    "\027.SProtoSpace.ESSProtoID:\031pub_gm_start_m"
    "atch_ack_id\022\013\n\003ret\030\002 \001(\005\022\r\n\005grade\030\003 \001(\005\""
    "\210\001\n\033pub_gm_send_office_mail_req\022I\n\010proto"
    "_id\030\001 \001(\0162\027.SProtoSpace.ESSProtoID:\036pub_"
    "gm_send_office_mail_req_id\022\017\n\007mail_id\030\002 "
    "\001(\005\022\r\n\005grade\030\003 \001(\005\"q\n\030pub_get_offical_da"
    "ta_req\022F\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.E"
    "SSProtoID:\033pub_get_offical_data_req_id\022\r"
    "\n\005grade\030\002 \001(\005\"\222\001\n\030pub_get_offical_data_a"
    "ck\022F\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ESSPr"
    "otoID:\033pub_get_offical_data_ack_id\022\013\n\003re"
    "t\030\002 \001(\005\022\r\n\005grade\030\003 \001(\005\022\022\n\nranking_id\030\004 \001"
    "(\005*m\n\016EGetRoleDoType\022\035\n\031GET_ROLE_TP_ADD_"
    "BLACKLIST\020\001\022\032\n\026GET_ROLE_TP_ADD_FRIEND\020\002\022"
    " \n\034GET_ROLE_TP_APPLY_PROCESS_OK\020\003", 23833);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_public.proto", &protobuf_RegisterTypes);
  pub_harem_compete_qingan_req::default_instance_ = new pub_harem_compete_qingan_req();
  pub_harem_compete_slap_req::default_instance_ = new pub_harem_compete_slap_req();
  pub_role_info::default_instance_ = new pub_role_info();
  pub_role_info_cache::default_instance_ = new pub_role_info_cache();
  officer_result_data::default_instance_ = new officer_result_data();
  officer_reduce_data::default_instance_ = new officer_reduce_data();
  rank_db_item::default_instance_ = new rank_db_item();
  rank_db_data::default_instance_ = new rank_db_data();
  rank_redis_data::default_instance_ = new rank_redis_data();
  rank_refresh_data::default_instance_ = new rank_refresh_data();
  pub_role_login::default_instance_ = new pub_role_login();
  pub_role_login_batch::default_instance_ = new pub_role_login_batch();
  pub_role_logout::default_instance_ = new pub_role_logout();
  pub_role_info_sync::default_instance_ = new pub_role_info_sync();
  ps_create_team_req::default_instance_ = new ps_create_team_req();
  ps_create_team_ack::default_instance_ = new ps_create_team_ack();
  ps_update_team_ntf::default_instance_ = new ps_update_team_ntf();
  ps_enter_team_req::default_instance_ = new ps_enter_team_req();
  ps_enter_team_ack::default_instance_ = new ps_enter_team_ack();
  ps_exit_team_req::default_instance_ = new ps_exit_team_req();
  ps_exit_team_ack::default_instance_ = new ps_exit_team_ack();
  ps_ready_team_req::default_instance_ = new ps_ready_team_req();
  ps_ready_team_ack::default_instance_ = new ps_ready_team_ack();
  ps_update_team_req::default_instance_ = new ps_update_team_req();
  ps_update_team_ack::default_instance_ = new ps_update_team_ack();
  ps_get_teams_req::default_instance_ = new ps_get_teams_req();
  ps_get_teams_ack::default_instance_ = new ps_get_teams_ack();
  ps_invite_enter_team_req::default_instance_ = new ps_invite_enter_team_req();
  ps_invite_enter_team_ntf::default_instance_ = new ps_invite_enter_team_ntf();
  ps_get_offical_rank_req::default_instance_ = new ps_get_offical_rank_req();
  ps_get_offical_rank_ack::default_instance_ = new ps_get_offical_rank_ack();
  ps_global_offical_rank_req::default_instance_ = new ps_global_offical_rank_req();
  ps_global_offical_rank_ack::default_instance_ = new ps_global_offical_rank_ack();
  ps_get_offical_rank_info_req::default_instance_ = new ps_get_offical_rank_info_req();
  ps_get_offical_rank_info_ack::default_instance_ = new ps_get_offical_rank_info_ack();
  ps_add_robot_to_offical_arena_req::default_instance_ = new ps_add_robot_to_offical_arena_req();
  ps_add_robot_to_offical_arena_ack::default_instance_ = new ps_add_robot_to_offical_arena_ack();
  ps_challenge_offical_rank_req::default_instance_ = new ps_challenge_offical_rank_req();
  ps_challenge_offical_rank_ack::default_instance_ = new ps_challenge_offical_rank_ack();
  ps_update_challenge_result_req::default_instance_ = new ps_update_challenge_result_req();
  ps_update_challenge_result_ack::default_instance_ = new ps_update_challenge_result_ack();
  offical_examine_battle_req::default_instance_ = new offical_examine_battle_req();
  offical_examine_battle_ack::default_instance_ = new offical_examine_battle_ack();
  ps_offical_apply_battle_result_req::default_instance_ = new ps_offical_apply_battle_result_req();
  ps_offical_apply_battle_result_ack::default_instance_ = new ps_offical_apply_battle_result_ack();
  ps_test_offical_battle_result_req::default_instance_ = new ps_test_offical_battle_result_req();
  ps_test_start_offical_battle_req::default_instance_ = new ps_test_start_offical_battle_req();
  ps_test_offical_sign_up_req::default_instance_ = new ps_test_offical_sign_up_req();
  pub_friend_opt_forward_req::default_instance_ = new pub_friend_opt_forward_req();
  pub_friend_opt_forward_ack::default_instance_ = new pub_friend_opt_forward_ack();
  pub_harem_compete_friends_req::default_instance_ = new pub_harem_compete_friends_req();
  pub_harem_compete_friends_ack::default_instance_ = new pub_harem_compete_friends_ack();
  pub_search_role_req::default_instance_ = new pub_search_role_req();
  pub_search_role_ack::default_instance_ = new pub_search_role_ack();
  pub_officer_apply_req::default_instance_ = new pub_officer_apply_req();
  pub_officer_apply_ack::default_instance_ = new pub_officer_apply_ack();
  update_heros_formation_ntf::default_instance_ = new update_heros_formation_ntf();
  pub_officer_result_ntf::default_instance_ = new pub_officer_result_ntf();
  pub_offical_reduce_ntf::default_instance_ = new pub_offical_reduce_ntf();
  pub_load_offical_data_req::default_instance_ = new pub_load_offical_data_req();
  pub_load_offical_data_ack::default_instance_ = new pub_load_offical_data_ack();
  pub_get_officer_applicants_req::default_instance_ = new pub_get_officer_applicants_req();
  pub_get_officer_applicants_ack::default_instance_ = new pub_get_officer_applicants_ack();
  pub_update_offical_lv_req::default_instance_ = new pub_update_offical_lv_req();
  pub_cancel_offical_apply_req::default_instance_ = new pub_cancel_offical_apply_req();
  pub_cancel_offical_apply_ack::default_instance_ = new pub_cancel_offical_apply_ack();
  pub_get_offical_challenge_roles_req::default_instance_ = new pub_get_offical_challenge_roles_req();
  pub_get_offical_challenge_roles_ack::default_instance_ = new pub_get_offical_challenge_roles_ack();
  game_pub_send_flower_req::default_instance_ = new game_pub_send_flower_req();
  pub_game_send_flower_ack::default_instance_ = new pub_game_send_flower_ack();
  game_pub_flower_to_receive_nty::default_instance_ = new game_pub_flower_to_receive_nty();
  pub_game_flower_to_receive_nty::default_instance_ = new pub_game_flower_to_receive_nty();
  pub_forward_add_req::default_instance_ = new pub_forward_add_req();
  pub_forward_add_ack::default_instance_ = new pub_forward_add_ack();
  message_packing_info::default_instance_ = new message_packing_info();
  game_pub_msg_packing_ntf::default_instance_ = new game_pub_msg_packing_ntf();
  pub_game_msg_packing_ntf::default_instance_ = new pub_game_msg_packing_ntf();
  pub_get_role_req::default_instance_ = new pub_get_role_req();
  pub_get_role_ack::default_instance_ = new pub_get_role_ack();
  pub_game_friends_ntf::default_instance_ = new pub_game_friends_ntf();
  pub_complete_role_req::default_instance_ = new pub_complete_role_req();
  pub_complete_role_ack::default_instance_ = new pub_complete_role_ack();
  pub_friend_refresh_req::default_instance_ = new pub_friend_refresh_req();
  pub_friend_refresh_ack::default_instance_ = new pub_friend_refresh_ack();
  game_pub_get_all_event_msg_ntf::default_instance_ = new game_pub_get_all_event_msg_ntf();
  pub_game_get_all_event_msg_ntf::default_instance_ = new pub_game_get_all_event_msg_ntf();
  game_pub_get_id_event_msg_ntf::default_instance_ = new game_pub_get_id_event_msg_ntf();
  pub_game_get_id_event_msg_ntf::default_instance_ = new pub_game_get_id_event_msg_ntf();
  game_pub_delete_event_msg_ntf::default_instance_ = new game_pub_delete_event_msg_ntf();
  game_pub_delete_type_msgs_ntf::default_instance_ = new game_pub_delete_type_msgs_ntf();
  game_pub_read_event_msg_ntf::default_instance_ = new game_pub_read_event_msg_ntf();
  game_pub_insert_event_msg_ntf::default_instance_ = new game_pub_insert_event_msg_ntf();
  pub_game_insert_event_msg_ntf::default_instance_ = new pub_game_insert_event_msg_ntf();
  game_pub_get_rank_data_req::default_instance_ = new game_pub_get_rank_data_req();
  game_pub_get_rank_data_ack::default_instance_ = new game_pub_get_rank_data_ack();
  update_rank_data_ntf::default_instance_ = new update_rank_data_ntf();
  pub_battle_replay_save_req::default_instance_ = new pub_battle_replay_save_req();
  pub_battle_replay_req::default_instance_ = new pub_battle_replay_req();
  pub_battle_replay_ack::default_instance_ = new pub_battle_replay_ack();
  pub_query_scene_req::default_instance_ = new pub_query_scene_req();
  pub_query_scene_ack::default_instance_ = new pub_query_scene_ack();
  pub_destory_scene_ntf::default_instance_ = new pub_destory_scene_ntf();
  pub_scene_role_change_ntf::default_instance_ = new pub_scene_role_change_ntf();
  pub_update_3d_scene_info_ntf::default_instance_ = new pub_update_3d_scene_info_ntf();
  pub_switch_game_id_ntf::default_instance_ = new pub_switch_game_id_ntf();
  pub_officer_daily_salary_req::default_instance_ = new pub_officer_daily_salary_req();
  pub_officer_daily_salary_ack::default_instance_ = new pub_officer_daily_salary_ack();
  pub_offical_battle_report_req::default_instance_ = new pub_offical_battle_report_req();
  pub_offical_battle_report_ack::default_instance_ = new pub_offical_battle_report_ack();
  pub_get_offical_formation_req::default_instance_ = new pub_get_offical_formation_req();
  pub_get_offical_formation_ack::default_instance_ = new pub_get_offical_formation_ack();
  pub_gm_upgrade_office_req::default_instance_ = new pub_gm_upgrade_office_req();
  offical_robot_gen_req::default_instance_ = new offical_robot_gen_req();
  offical_robot_gen_ack::default_instance_ = new offical_robot_gen_ack();
  get_minimum_chat_room_req::default_instance_ = new get_minimum_chat_room_req();
  get_minimum_chat_room_ack::default_instance_ = new get_minimum_chat_room_ack();
  pub_get_chat_room_list_req::default_instance_ = new pub_get_chat_room_list_req();
  pub_get_chat_room_list_ack::default_instance_ = new pub_get_chat_room_list_ack();
  pub_create_3dchat_room_req::default_instance_ = new pub_create_3dchat_room_req();
  pub_create_3dchat_room_ack::default_instance_ = new pub_create_3dchat_room_ack();
  pub_top_3dchat_room_req::default_instance_ = new pub_top_3dchat_room_req();
  pub_top_3dchat_room_ack::default_instance_ = new pub_top_3dchat_room_ack();
  pub_cancel_top_3dchat_room_req::default_instance_ = new pub_cancel_top_3dchat_room_req();
  pub_cancel_top_3dchat_room_ack::default_instance_ = new pub_cancel_top_3dchat_room_ack();
  pub_change_name_3dchat_room_req::default_instance_ = new pub_change_name_3dchat_room_req();
  pub_change_name_3dchat_room_ack::default_instance_ = new pub_change_name_3dchat_room_ack();
  pub_get_role_gs_id_req::default_instance_ = new pub_get_role_gs_id_req();
  pub_get_role_gs_id_ack::default_instance_ = new pub_get_role_gs_id_ack();
  pub_get_offical_members_req::default_instance_ = new pub_get_offical_members_req();
  pub_get_offical_members_ack::default_instance_ = new pub_get_offical_members_ack();
  pub_gm_start_match_req::default_instance_ = new pub_gm_start_match_req();
  pub_gm_start_match_ack::default_instance_ = new pub_gm_start_match_ack();
  pub_gm_send_office_mail_req::default_instance_ = new pub_gm_send_office_mail_req();
  pub_get_offical_data_req::default_instance_ = new pub_get_offical_data_req();
  pub_get_offical_data_ack::default_instance_ = new pub_get_offical_data_ack();
  pub_harem_compete_qingan_req::default_instance_->InitAsDefaultInstance();
  pub_harem_compete_slap_req::default_instance_->InitAsDefaultInstance();
  pub_role_info::default_instance_->InitAsDefaultInstance();
  pub_role_info_cache::default_instance_->InitAsDefaultInstance();
  officer_result_data::default_instance_->InitAsDefaultInstance();
  officer_reduce_data::default_instance_->InitAsDefaultInstance();
  rank_db_item::default_instance_->InitAsDefaultInstance();
  rank_db_data::default_instance_->InitAsDefaultInstance();
  rank_redis_data::default_instance_->InitAsDefaultInstance();
  rank_refresh_data::default_instance_->InitAsDefaultInstance();
  pub_role_login::default_instance_->InitAsDefaultInstance();
  pub_role_login_batch::default_instance_->InitAsDefaultInstance();
  pub_role_logout::default_instance_->InitAsDefaultInstance();
  pub_role_info_sync::default_instance_->InitAsDefaultInstance();
  ps_create_team_req::default_instance_->InitAsDefaultInstance();
  ps_create_team_ack::default_instance_->InitAsDefaultInstance();
  ps_update_team_ntf::default_instance_->InitAsDefaultInstance();
  ps_enter_team_req::default_instance_->InitAsDefaultInstance();
  ps_enter_team_ack::default_instance_->InitAsDefaultInstance();
  ps_exit_team_req::default_instance_->InitAsDefaultInstance();
  ps_exit_team_ack::default_instance_->InitAsDefaultInstance();
  ps_ready_team_req::default_instance_->InitAsDefaultInstance();
  ps_ready_team_ack::default_instance_->InitAsDefaultInstance();
  ps_update_team_req::default_instance_->InitAsDefaultInstance();
  ps_update_team_ack::default_instance_->InitAsDefaultInstance();
  ps_get_teams_req::default_instance_->InitAsDefaultInstance();
  ps_get_teams_ack::default_instance_->InitAsDefaultInstance();
  ps_invite_enter_team_req::default_instance_->InitAsDefaultInstance();
  ps_invite_enter_team_ntf::default_instance_->InitAsDefaultInstance();
  ps_get_offical_rank_req::default_instance_->InitAsDefaultInstance();
  ps_get_offical_rank_ack::default_instance_->InitAsDefaultInstance();
  ps_global_offical_rank_req::default_instance_->InitAsDefaultInstance();
  ps_global_offical_rank_ack::default_instance_->InitAsDefaultInstance();
  ps_get_offical_rank_info_req::default_instance_->InitAsDefaultInstance();
  ps_get_offical_rank_info_ack::default_instance_->InitAsDefaultInstance();
  ps_add_robot_to_offical_arena_req::default_instance_->InitAsDefaultInstance();
  ps_add_robot_to_offical_arena_ack::default_instance_->InitAsDefaultInstance();
  ps_challenge_offical_rank_req::default_instance_->InitAsDefaultInstance();
  ps_challenge_offical_rank_ack::default_instance_->InitAsDefaultInstance();
  ps_update_challenge_result_req::default_instance_->InitAsDefaultInstance();
  ps_update_challenge_result_ack::default_instance_->InitAsDefaultInstance();
  offical_examine_battle_req::default_instance_->InitAsDefaultInstance();
  offical_examine_battle_ack::default_instance_->InitAsDefaultInstance();
  ps_offical_apply_battle_result_req::default_instance_->InitAsDefaultInstance();
  ps_offical_apply_battle_result_ack::default_instance_->InitAsDefaultInstance();
  ps_test_offical_battle_result_req::default_instance_->InitAsDefaultInstance();
  ps_test_start_offical_battle_req::default_instance_->InitAsDefaultInstance();
  ps_test_offical_sign_up_req::default_instance_->InitAsDefaultInstance();
  pub_friend_opt_forward_req::default_instance_->InitAsDefaultInstance();
  pub_friend_opt_forward_ack::default_instance_->InitAsDefaultInstance();
  pub_harem_compete_friends_req::default_instance_->InitAsDefaultInstance();
  pub_harem_compete_friends_ack::default_instance_->InitAsDefaultInstance();
  pub_search_role_req::default_instance_->InitAsDefaultInstance();
  pub_search_role_ack::default_instance_->InitAsDefaultInstance();
  pub_officer_apply_req::default_instance_->InitAsDefaultInstance();
  pub_officer_apply_ack::default_instance_->InitAsDefaultInstance();
  update_heros_formation_ntf::default_instance_->InitAsDefaultInstance();
  pub_officer_result_ntf::default_instance_->InitAsDefaultInstance();
  pub_offical_reduce_ntf::default_instance_->InitAsDefaultInstance();
  pub_load_offical_data_req::default_instance_->InitAsDefaultInstance();
  pub_load_offical_data_ack::default_instance_->InitAsDefaultInstance();
  pub_get_officer_applicants_req::default_instance_->InitAsDefaultInstance();
  pub_get_officer_applicants_ack::default_instance_->InitAsDefaultInstance();
  pub_update_offical_lv_req::default_instance_->InitAsDefaultInstance();
  pub_cancel_offical_apply_req::default_instance_->InitAsDefaultInstance();
  pub_cancel_offical_apply_ack::default_instance_->InitAsDefaultInstance();
  pub_get_offical_challenge_roles_req::default_instance_->InitAsDefaultInstance();
  pub_get_offical_challenge_roles_ack::default_instance_->InitAsDefaultInstance();
  game_pub_send_flower_req::default_instance_->InitAsDefaultInstance();
  pub_game_send_flower_ack::default_instance_->InitAsDefaultInstance();
  game_pub_flower_to_receive_nty::default_instance_->InitAsDefaultInstance();
  pub_game_flower_to_receive_nty::default_instance_->InitAsDefaultInstance();
  pub_forward_add_req::default_instance_->InitAsDefaultInstance();
  pub_forward_add_ack::default_instance_->InitAsDefaultInstance();
  message_packing_info::default_instance_->InitAsDefaultInstance();
  game_pub_msg_packing_ntf::default_instance_->InitAsDefaultInstance();
  pub_game_msg_packing_ntf::default_instance_->InitAsDefaultInstance();
  pub_get_role_req::default_instance_->InitAsDefaultInstance();
  pub_get_role_ack::default_instance_->InitAsDefaultInstance();
  pub_game_friends_ntf::default_instance_->InitAsDefaultInstance();
  pub_complete_role_req::default_instance_->InitAsDefaultInstance();
  pub_complete_role_ack::default_instance_->InitAsDefaultInstance();
  pub_friend_refresh_req::default_instance_->InitAsDefaultInstance();
  pub_friend_refresh_ack::default_instance_->InitAsDefaultInstance();
  game_pub_get_all_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  pub_game_get_all_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  game_pub_get_id_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  pub_game_get_id_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  game_pub_delete_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  game_pub_delete_type_msgs_ntf::default_instance_->InitAsDefaultInstance();
  game_pub_read_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  game_pub_insert_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  pub_game_insert_event_msg_ntf::default_instance_->InitAsDefaultInstance();
  game_pub_get_rank_data_req::default_instance_->InitAsDefaultInstance();
  game_pub_get_rank_data_ack::default_instance_->InitAsDefaultInstance();
  update_rank_data_ntf::default_instance_->InitAsDefaultInstance();
  pub_battle_replay_save_req::default_instance_->InitAsDefaultInstance();
  pub_battle_replay_req::default_instance_->InitAsDefaultInstance();
  pub_battle_replay_ack::default_instance_->InitAsDefaultInstance();
  pub_query_scene_req::default_instance_->InitAsDefaultInstance();
  pub_query_scene_ack::default_instance_->InitAsDefaultInstance();
  pub_destory_scene_ntf::default_instance_->InitAsDefaultInstance();
  pub_scene_role_change_ntf::default_instance_->InitAsDefaultInstance();
  pub_update_3d_scene_info_ntf::default_instance_->InitAsDefaultInstance();
  pub_switch_game_id_ntf::default_instance_->InitAsDefaultInstance();
  pub_officer_daily_salary_req::default_instance_->InitAsDefaultInstance();
  pub_officer_daily_salary_ack::default_instance_->InitAsDefaultInstance();
  pub_offical_battle_report_req::default_instance_->InitAsDefaultInstance();
  pub_offical_battle_report_ack::default_instance_->InitAsDefaultInstance();
  pub_get_offical_formation_req::default_instance_->InitAsDefaultInstance();
  pub_get_offical_formation_ack::default_instance_->InitAsDefaultInstance();
  pub_gm_upgrade_office_req::default_instance_->InitAsDefaultInstance();
  offical_robot_gen_req::default_instance_->InitAsDefaultInstance();
  offical_robot_gen_ack::default_instance_->InitAsDefaultInstance();
  get_minimum_chat_room_req::default_instance_->InitAsDefaultInstance();
  get_minimum_chat_room_ack::default_instance_->InitAsDefaultInstance();
  pub_get_chat_room_list_req::default_instance_->InitAsDefaultInstance();
  pub_get_chat_room_list_ack::default_instance_->InitAsDefaultInstance();
  pub_create_3dchat_room_req::default_instance_->InitAsDefaultInstance();
  pub_create_3dchat_room_ack::default_instance_->InitAsDefaultInstance();
  pub_top_3dchat_room_req::default_instance_->InitAsDefaultInstance();
  pub_top_3dchat_room_ack::default_instance_->InitAsDefaultInstance();
  pub_cancel_top_3dchat_room_req::default_instance_->InitAsDefaultInstance();
  pub_cancel_top_3dchat_room_ack::default_instance_->InitAsDefaultInstance();
  pub_change_name_3dchat_room_req::default_instance_->InitAsDefaultInstance();
  pub_change_name_3dchat_room_ack::default_instance_->InitAsDefaultInstance();
  pub_get_role_gs_id_req::default_instance_->InitAsDefaultInstance();
  pub_get_role_gs_id_ack::default_instance_->InitAsDefaultInstance();
  pub_get_offical_members_req::default_instance_->InitAsDefaultInstance();
  pub_get_offical_members_ack::default_instance_->InitAsDefaultInstance();
  pub_gm_start_match_req::default_instance_->InitAsDefaultInstance();
  pub_gm_start_match_ack::default_instance_->InitAsDefaultInstance();
  pub_gm_send_office_mail_req::default_instance_->InitAsDefaultInstance();
  pub_get_offical_data_req::default_instance_->InitAsDefaultInstance();
  pub_get_offical_data_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fpublic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fpublic_2eproto {
  StaticDescriptorInitializer_ss_5fpublic_2eproto() {
    protobuf_AddDesc_ss_5fpublic_2eproto();
  }
} static_descriptor_initializer_ss_5fpublic_2eproto_;
const ::google::protobuf::EnumDescriptor* EGetRoleDoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGetRoleDoType_descriptor_;
}
bool EGetRoleDoType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int pub_harem_compete_qingan_req::kProtoIdFieldNumber;
const int pub_harem_compete_qingan_req::kUuidFieldNumber;
const int pub_harem_compete_qingan_req::kSelfNameFieldNumber;
const int pub_harem_compete_qingan_req::kTargetIdFieldNumber;
const int pub_harem_compete_qingan_req::kRoleNameFieldNumber;
const int pub_harem_compete_qingan_req::kRoleTypeFieldNumber;
const int pub_harem_compete_qingan_req::kEventUuidFieldNumber;
#endif  // !_MSC_VER

pub_harem_compete_qingan_req::pub_harem_compete_qingan_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_harem_compete_qingan_req::InitAsDefaultInstance() {
}

pub_harem_compete_qingan_req::pub_harem_compete_qingan_req(const pub_harem_compete_qingan_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_harem_compete_qingan_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1503;
  uuid_ = GOOGLE_ULONGLONG(0);
  self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  event_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_harem_compete_qingan_req::~pub_harem_compete_qingan_req() {
  SharedDtor();
}

void pub_harem_compete_qingan_req::SharedDtor() {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void pub_harem_compete_qingan_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_harem_compete_qingan_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_harem_compete_qingan_req_descriptor_;
}

const pub_harem_compete_qingan_req& pub_harem_compete_qingan_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_harem_compete_qingan_req* pub_harem_compete_qingan_req::default_instance_ = NULL;

pub_harem_compete_qingan_req* pub_harem_compete_qingan_req::New() const {
  return new pub_harem_compete_qingan_req;
}

void pub_harem_compete_qingan_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1503;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_self_name()) {
      if (self_name_ != &::google::protobuf::internal::kEmptyString) {
        self_name_->clear();
      }
    }
    target_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_type_ = 0u;
    event_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_harem_compete_qingan_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_qingan_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_self_name;
        break;
      }

      // optional string self_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->self_name().data(), this->self_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_name;
        break;
      }

      // optional string role_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_event_uuid;
        break;
      }

      // optional uint64 event_uuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_uuid_)));
          set_has_event_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_harem_compete_qingan_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_qingan_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional string self_name = 3;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->self_name(), output);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_id(), output);
  }

  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->role_name(), output);
  }

  // optional uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }

  // optional uint64 event_uuid = 7;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->event_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_harem_compete_qingan_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_qingan_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional string self_name = 3;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->self_name(), target);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_id(), target);
  }

  // optional string role_name = 5;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->role_name(), target);
  }

  // optional uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }

  // optional uint64 event_uuid = 7;
  if (has_event_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->event_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_harem_compete_qingan_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_qingan_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional string self_name = 3;
    if (has_self_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->self_name());
    }

    // optional uint64 target_id = 4;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional string role_name = 5;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional uint64 event_uuid = 7;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_harem_compete_qingan_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_harem_compete_qingan_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_harem_compete_qingan_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_harem_compete_qingan_req::MergeFrom(const pub_harem_compete_qingan_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_self_name()) {
      set_self_name(from.self_name());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_event_uuid()) {
      set_event_uuid(from.event_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_harem_compete_qingan_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_harem_compete_qingan_req::CopyFrom(const pub_harem_compete_qingan_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_harem_compete_qingan_req::IsInitialized() const {

  return true;
}

void pub_harem_compete_qingan_req::Swap(pub_harem_compete_qingan_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(self_name_, other->self_name_);
    std::swap(target_id_, other->target_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_type_, other->role_type_);
    std::swap(event_uuid_, other->event_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_harem_compete_qingan_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_harem_compete_qingan_req_descriptor_;
  metadata.reflection = pub_harem_compete_qingan_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_harem_compete_slap_req::kProtoIdFieldNumber;
const int pub_harem_compete_slap_req::kSelfIdFieldNumber;
const int pub_harem_compete_slap_req::kSelfNameFieldNumber;
const int pub_harem_compete_slap_req::kTargetIdFieldNumber;
const int pub_harem_compete_slap_req::kTargetNameFieldNumber;
const int pub_harem_compete_slap_req::kRoleTypeFieldNumber;
const int pub_harem_compete_slap_req::kTakeTimeFieldNumber;
const int pub_harem_compete_slap_req::kSlapCountFieldNumber;
const int pub_harem_compete_slap_req::kProgressFieldNumber;
const int pub_harem_compete_slap_req::kInfoFieldNumber;
const int pub_harem_compete_slap_req::kEventUuidFieldNumber;
#endif  // !_MSC_VER

pub_harem_compete_slap_req::pub_harem_compete_slap_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_harem_compete_slap_req::InitAsDefaultInstance() {
}

pub_harem_compete_slap_req::pub_harem_compete_slap_req(const pub_harem_compete_slap_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_harem_compete_slap_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1504;
  self_id_ = GOOGLE_ULONGLONG(0);
  self_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_id_ = GOOGLE_ULONGLONG(0);
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_type_ = 0u;
  take_time_ = GOOGLE_ULONGLONG(0);
  slap_count_ = 0u;
  progress_ = 1;
  event_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_harem_compete_slap_req::~pub_harem_compete_slap_req() {
  SharedDtor();
}

void pub_harem_compete_slap_req::SharedDtor() {
  if (self_name_ != &::google::protobuf::internal::kEmptyString) {
    delete self_name_;
  }
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (this != default_instance_) {
  }
}

void pub_harem_compete_slap_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_harem_compete_slap_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_harem_compete_slap_req_descriptor_;
}

const pub_harem_compete_slap_req& pub_harem_compete_slap_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_harem_compete_slap_req* pub_harem_compete_slap_req::default_instance_ = NULL;

pub_harem_compete_slap_req* pub_harem_compete_slap_req::New() const {
  return new pub_harem_compete_slap_req;
}

void pub_harem_compete_slap_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1504;
    self_id_ = GOOGLE_ULONGLONG(0);
    if (has_self_name()) {
      if (self_name_ != &::google::protobuf::internal::kEmptyString) {
        self_name_->clear();
      }
    }
    target_id_ = GOOGLE_ULONGLONG(0);
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    role_type_ = 0u;
    take_time_ = GOOGLE_ULONGLONG(0);
    slap_count_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    progress_ = 1;
    event_uuid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_harem_compete_slap_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_slap_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_id;
        break;
      }

      // optional uint64 self_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &self_id_)));
          set_has_self_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_self_name;
        break;
      }

      // optional string self_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->self_name().data(), this->self_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_target_name;
        break;
      }

      // optional string target_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_type;
        break;
      }

      // optional uint32 role_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_take_time;
        break;
      }

      // optional uint64 take_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &take_time_)));
          set_has_take_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_slap_count;
        break;
      }

      // optional uint32 slap_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slap_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slap_count_)));
          set_has_slap_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_progress;
        break;
      }

      // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESLAPPROGRESS_IsValid(value)) {
            set_progress(static_cast< ::SProtoSpace::ESLAPPROGRESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_info;
        break;
      }

      // repeated .SProtoSpace.slap_emoji_info info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_info;
        if (input->ExpectTag(88)) goto parse_event_uuid;
        break;
      }

      // optional uint64 event_uuid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_uuid_)));
          set_has_event_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_harem_compete_slap_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_slap_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->self_id(), output);
  }

  // optional string self_name = 3;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->self_name(), output);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_id(), output);
  }

  // optional string target_name = 5;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->target_name(), output);
  }

  // optional uint32 role_type = 6;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->role_type(), output);
  }

  // optional uint64 take_time = 7;
  if (has_take_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->take_time(), output);
  }

  // optional uint32 slap_count = 8;
  if (has_slap_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->slap_count(), output);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->progress(), output);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 10;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->info(i), output);
  }

  // optional uint64 event_uuid = 11;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->event_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_harem_compete_slap_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_slap_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->self_id(), target);
  }

  // optional string self_name = 3;
  if (has_self_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->self_name().data(), this->self_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->self_name(), target);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_id(), target);
  }

  // optional string target_name = 5;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_name(), target);
  }

  // optional uint32 role_type = 6;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->role_type(), target);
  }

  // optional uint64 take_time = 7;
  if (has_take_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->take_time(), target);
  }

  // optional uint32 slap_count = 8;
  if (has_slap_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->slap_count(), target);
  }

  // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->progress(), target);
  }

  // repeated .SProtoSpace.slap_emoji_info info = 10;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->info(i), target);
  }

  // optional uint64 event_uuid = 11;
  if (has_event_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->event_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_harem_compete_slap_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_slap_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 self_id = 2;
    if (has_self_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->self_id());
    }

    // optional string self_name = 3;
    if (has_self_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->self_name());
    }

    // optional uint64 target_id = 4;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional string target_name = 5;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }

    // optional uint32 role_type = 6;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_type());
    }

    // optional uint64 take_time = 7;
    if (has_take_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->take_time());
    }

    // optional uint32 slap_count = 8;
    if (has_slap_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slap_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SProtoSpace.ESLAPPROGRESS progress = 9;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->progress());
    }

    // optional uint64 event_uuid = 11;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_uuid());
    }

  }
  // repeated .SProtoSpace.slap_emoji_info info = 10;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_harem_compete_slap_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_harem_compete_slap_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_harem_compete_slap_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_harem_compete_slap_req::MergeFrom(const pub_harem_compete_slap_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_self_id()) {
      set_self_id(from.self_id());
    }
    if (from.has_self_name()) {
      set_self_name(from.self_name());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
    if (from.has_take_time()) {
      set_take_time(from.take_time());
    }
    if (from.has_slap_count()) {
      set_slap_count(from.slap_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_event_uuid()) {
      set_event_uuid(from.event_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_harem_compete_slap_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_harem_compete_slap_req::CopyFrom(const pub_harem_compete_slap_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_harem_compete_slap_req::IsInitialized() const {

  return true;
}

void pub_harem_compete_slap_req::Swap(pub_harem_compete_slap_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(self_id_, other->self_id_);
    std::swap(self_name_, other->self_name_);
    std::swap(target_id_, other->target_id_);
    std::swap(target_name_, other->target_name_);
    std::swap(role_type_, other->role_type_);
    std::swap(take_time_, other->take_time_);
    std::swap(slap_count_, other->slap_count_);
    std::swap(progress_, other->progress_);
    info_.Swap(&other->info_);
    std::swap(event_uuid_, other->event_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_harem_compete_slap_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_harem_compete_slap_req_descriptor_;
  metadata.reflection = pub_harem_compete_slap_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_role_info::kIdFieldNumber;
const int pub_role_info::kNameFieldNumber;
const int pub_role_info::kLvFieldNumber;
const int pub_role_info::kLoginTimeFieldNumber;
const int pub_role_info::kLogoutTimeFieldNumber;
const int pub_role_info::kPositionFieldNumber;
const int pub_role_info::kSexFieldNumber;
const int pub_role_info::kGradeFieldNumber;
const int pub_role_info::kOnlineFieldNumber;
const int pub_role_info::kAvatarFieldNumber;
const int pub_role_info::kBattleSessionIdFieldNumber;
const int pub_role_info::kFightPowerFieldNumber;
const int pub_role_info::kPaixiIdFieldNumber;
const int pub_role_info::kBorderFieldNumber;
#endif  // !_MSC_VER

pub_role_info::pub_role_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_role_info::InitAsDefaultInstance() {
}

pub_role_info::pub_role_info(const pub_role_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_role_info::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0u;
  login_time_ = GOOGLE_ULONGLONG(0);
  logout_time_ = GOOGLE_ULONGLONG(0);
  position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  grade_ = 0u;
  online_ = false;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battle_session_id_ = GOOGLE_ULONGLONG(0);
  fight_power_ = 0u;
  paixi_id_ = 0u;
  border_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_role_info::~pub_role_info() {
  SharedDtor();
}

void pub_role_info::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (position_ != &::google::protobuf::internal::kEmptyString) {
    delete position_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void pub_role_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_role_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_role_info_descriptor_;
}

const pub_role_info& pub_role_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_role_info* pub_role_info::default_instance_ = NULL;

pub_role_info* pub_role_info::New() const {
  return new pub_role_info;
}

void pub_role_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0u;
    login_time_ = GOOGLE_ULONGLONG(0);
    logout_time_ = GOOGLE_ULONGLONG(0);
    if (has_position()) {
      if (position_ != &::google::protobuf::internal::kEmptyString) {
        position_->clear();
      }
    }
    sex_ = 0u;
    grade_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = false;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    battle_session_id_ = GOOGLE_ULONGLONG(0);
    fight_power_ = 0u;
    paixi_id_ = 0u;
    border_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_role_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_time;
        break;
      }

      // optional uint64 login_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_time_)));
          set_has_login_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_logout_time;
        break;
      }

      // optional uint64 logout_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logout_time_)));
          set_has_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_position;
        break;
      }

      // optional string position = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position().data(), this->position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online;
        break;
      }

      // optional bool online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_avatar;
        break;
      }

      // optional string avatar = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avatar().data(), this->avatar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_battle_session_id;
        break;
      }

      // optional uint64 battle_session_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_session_id_)));
          set_has_battle_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fight_power;
        break;
      }

      // optional uint32 fight_power = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_paixi_id;
        break;
      }

      // optional uint32 paixi_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paixi_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paixi_id_)));
          set_has_paixi_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_border;
        break;
      }

      // optional int32 border = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_role_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint64 login_time = 4;
  if (has_login_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->login_time(), output);
  }

  // optional uint64 logout_time = 5;
  if (has_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logout_time(), output);
  }

  // optional string position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->position(), output);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sex(), output);
  }

  // optional uint32 grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->grade(), output);
  }

  // optional bool online = 9;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->online(), output);
  }

  // optional string avatar = 10;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->avatar(), output);
  }

  // optional uint64 battle_session_id = 13;
  if (has_battle_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->battle_session_id(), output);
  }

  // optional uint32 fight_power = 14;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fight_power(), output);
  }

  // optional uint32 paixi_id = 15;
  if (has_paixi_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->paixi_id(), output);
  }

  // optional int32 border = 16;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->border(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_role_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional uint64 login_time = 4;
  if (has_login_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->login_time(), target);
  }

  // optional uint64 logout_time = 5;
  if (has_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logout_time(), target);
  }

  // optional string position = 6;
  if (has_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position().data(), this->position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->position(), target);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sex(), target);
  }

  // optional uint32 grade = 8;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->grade(), target);
  }

  // optional bool online = 9;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->online(), target);
  }

  // optional string avatar = 10;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avatar().data(), this->avatar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->avatar(), target);
  }

  // optional uint64 battle_session_id = 13;
  if (has_battle_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->battle_session_id(), target);
  }

  // optional uint32 fight_power = 14;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fight_power(), target);
  }

  // optional uint32 paixi_id = 15;
  if (has_paixi_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->paixi_id(), target);
  }

  // optional int32 border = 16;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->border(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_role_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint64 login_time = 4;
    if (has_login_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_time());
    }

    // optional uint64 logout_time = 5;
    if (has_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logout_time());
    }

    // optional string position = 6;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position());
    }

    // optional uint32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 grade = 8;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool online = 9;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional string avatar = 10;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional uint64 battle_session_id = 13;
    if (has_battle_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_session_id());
    }

    // optional uint32 fight_power = 14;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fight_power());
    }

    // optional uint32 paixi_id = 15;
    if (has_paixi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paixi_id());
    }

    // optional int32 border = 16;
    if (has_border()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_role_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_role_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_role_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_role_info::MergeFrom(const pub_role_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_login_time()) {
      set_login_time(from.login_time());
    }
    if (from.has_logout_time()) {
      set_logout_time(from.logout_time());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_battle_session_id()) {
      set_battle_session_id(from.battle_session_id());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_paixi_id()) {
      set_paixi_id(from.paixi_id());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_role_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_role_info::CopyFrom(const pub_role_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_role_info::IsInitialized() const {

  return true;
}

void pub_role_info::Swap(pub_role_info* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(login_time_, other->login_time_);
    std::swap(logout_time_, other->logout_time_);
    std::swap(position_, other->position_);
    std::swap(sex_, other->sex_);
    std::swap(grade_, other->grade_);
    std::swap(online_, other->online_);
    std::swap(avatar_, other->avatar_);
    std::swap(battle_session_id_, other->battle_session_id_);
    std::swap(fight_power_, other->fight_power_);
    std::swap(paixi_id_, other->paixi_id_);
    std::swap(border_, other->border_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_role_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_role_info_descriptor_;
  metadata.reflection = pub_role_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_role_info_cache::kRoleInfoListFieldNumber;
#endif  // !_MSC_VER

pub_role_info_cache::pub_role_info_cache()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_role_info_cache::InitAsDefaultInstance() {
}

pub_role_info_cache::pub_role_info_cache(const pub_role_info_cache& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_role_info_cache::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_role_info_cache::~pub_role_info_cache() {
  SharedDtor();
}

void pub_role_info_cache::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_role_info_cache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_role_info_cache::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_role_info_cache_descriptor_;
}

const pub_role_info_cache& pub_role_info_cache::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_role_info_cache* pub_role_info_cache::default_instance_ = NULL;

pub_role_info_cache* pub_role_info_cache::New() const {
  return new pub_role_info_cache;
}

void pub_role_info_cache::Clear() {
  role_info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_role_info_cache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SProtoSpace.pub_role_info role_info_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_role_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_role_info_cache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SProtoSpace.pub_role_info role_info_list = 1;
  for (int i = 0; i < this->role_info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->role_info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_role_info_cache::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SProtoSpace.pub_role_info role_info_list = 1;
  for (int i = 0; i < this->role_info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->role_info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_role_info_cache::ByteSize() const {
  int total_size = 0;

  // repeated .SProtoSpace.pub_role_info role_info_list = 1;
  total_size += 1 * this->role_info_list_size();
  for (int i = 0; i < this->role_info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_role_info_cache::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_role_info_cache* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_role_info_cache*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_role_info_cache::MergeFrom(const pub_role_info_cache& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_info_list_.MergeFrom(from.role_info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_role_info_cache::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_role_info_cache::CopyFrom(const pub_role_info_cache& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_role_info_cache::IsInitialized() const {

  return true;
}

void pub_role_info_cache::Swap(pub_role_info_cache* other) {
  if (other != this) {
    role_info_list_.Swap(&other->role_info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_role_info_cache::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_role_info_cache_descriptor_;
  metadata.reflection = pub_role_info_cache_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_result_data::kRoleIdFieldNumber;
const int officer_result_data::kLvFieldNumber;
const int officer_result_data::kRetFieldNumber;
#endif  // !_MSC_VER

officer_result_data::officer_result_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_result_data::InitAsDefaultInstance() {
}

officer_result_data::officer_result_data(const officer_result_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_result_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  lv_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_result_data::~officer_result_data() {
  SharedDtor();
}

void officer_result_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_result_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_result_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_result_data_descriptor_;
}

const officer_result_data& officer_result_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

officer_result_data* officer_result_data::default_instance_ = NULL;

officer_result_data* officer_result_data::New() const {
  return new officer_result_data;
}

void officer_result_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    lv_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_result_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional .SProtoSpace.EGrade lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_result_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional .SProtoSpace.EGrade lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->lv(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_result_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional .SProtoSpace.EGrade lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->lv(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_result_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.EGrade lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lv());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_result_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_result_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_result_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_result_data::MergeFrom(const officer_result_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_result_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_result_data::CopyFrom(const officer_result_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_result_data::IsInitialized() const {

  return true;
}

void officer_result_data::Swap(officer_result_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(lv_, other->lv_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_result_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_result_data_descriptor_;
  metadata.reflection = officer_result_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int officer_reduce_data::kRoleIdFieldNumber;
const int officer_reduce_data::kOldGradeFieldNumber;
const int officer_reduce_data::kNewGradeFieldNumber;
#endif  // !_MSC_VER

officer_reduce_data::officer_reduce_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void officer_reduce_data::InitAsDefaultInstance() {
}

officer_reduce_data::officer_reduce_data(const officer_reduce_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void officer_reduce_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  old_grade_ = 0;
  new_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

officer_reduce_data::~officer_reduce_data() {
  SharedDtor();
}

void officer_reduce_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void officer_reduce_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* officer_reduce_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return officer_reduce_data_descriptor_;
}

const officer_reduce_data& officer_reduce_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

officer_reduce_data* officer_reduce_data::default_instance_ = NULL;

officer_reduce_data* officer_reduce_data::New() const {
  return new officer_reduce_data;
}

void officer_reduce_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    old_grade_ = 0;
    new_grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool officer_reduce_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_old_grade;
        break;
      }

      // optional int32 old_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &old_grade_)));
          set_has_old_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_new_grade;
        break;
      }

      // optional int32 new_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_grade_)));
          set_has_new_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void officer_reduce_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional int32 old_grade = 2;
  if (has_old_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->old_grade(), output);
  }

  // optional int32 new_grade = 3;
  if (has_new_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->new_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* officer_reduce_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional int32 old_grade = 2;
  if (has_old_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->old_grade(), target);
  }

  // optional int32 new_grade = 3;
  if (has_new_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->new_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int officer_reduce_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 old_grade = 2;
    if (has_old_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->old_grade());
    }

    // optional int32 new_grade = 3;
    if (has_new_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void officer_reduce_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const officer_reduce_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const officer_reduce_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void officer_reduce_data::MergeFrom(const officer_reduce_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_old_grade()) {
      set_old_grade(from.old_grade());
    }
    if (from.has_new_grade()) {
      set_new_grade(from.new_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void officer_reduce_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void officer_reduce_data::CopyFrom(const officer_reduce_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool officer_reduce_data::IsInitialized() const {

  return true;
}

void officer_reduce_data::Swap(officer_reduce_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(old_grade_, other->old_grade_);
    std::swap(new_grade_, other->new_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata officer_reduce_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = officer_reduce_data_descriptor_;
  metadata.reflection = officer_reduce_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_db_item::kRoleIdFieldNumber;
const int rank_db_item::kValuesFieldNumber;
const int rank_db_item::kOrderFieldNumber;
#endif  // !_MSC_VER

rank_db_item::rank_db_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_db_item::InitAsDefaultInstance() {
}

rank_db_item::rank_db_item(const rank_db_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_db_item::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_db_item::~rank_db_item() {
  SharedDtor();
}

void rank_db_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_db_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_db_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_db_item_descriptor_;
}

const rank_db_item& rank_db_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

rank_db_item* rank_db_item::default_instance_ = NULL;

rank_db_item* rank_db_item::New() const {
  return new rank_db_item;
}

void rank_db_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    order_ = 0u;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_db_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        break;
      }

      // repeated uint32 values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_values;
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional uint32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_db_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // repeated uint32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->values(i), output);
  }

  // optional uint32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_db_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // repeated uint32 values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->values(i), target);
  }

  // optional uint32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_db_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order());
    }

  }
  // repeated uint32 values = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_db_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_db_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_db_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_db_item::MergeFrom(const rank_db_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_db_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_db_item::CopyFrom(const rank_db_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_db_item::IsInitialized() const {

  return true;
}

void rank_db_item::Swap(rank_db_item* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    values_.Swap(&other->values_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_db_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_db_item_descriptor_;
  metadata.reflection = rank_db_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_db_data::kTypeFieldNumber;
const int rank_db_data::kRankOrderFieldNumber;
const int rank_db_data::kItemsFieldNumber;
#endif  // !_MSC_VER

rank_db_data::rank_db_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_db_data::InitAsDefaultInstance() {
}

rank_db_data::rank_db_data(const rank_db_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_db_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1000;
  rank_order_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_db_data::~rank_db_data() {
  SharedDtor();
}

void rank_db_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_db_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_db_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_db_data_descriptor_;
}

const rank_db_data& rank_db_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

rank_db_data* rank_db_data::default_instance_ = NULL;

rank_db_data* rank_db_data::New() const {
  return new rank_db_data;
}

void rank_db_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1000;
    rank_order_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_db_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.RANK_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::RANK_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank_order;
        break;
      }

      // optional uint32 rank_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_order_)));
          set_has_rank_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.rank_db_item items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_db_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.RANK_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 rank_order = 2;
  if (has_rank_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank_order(), output);
  }

  // repeated .SProtoSpace.rank_db_item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_db_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.RANK_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 rank_order = 2;
  if (has_rank_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank_order(), target);
  }

  // repeated .SProtoSpace.rank_db_item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_db_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.RANK_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 rank_order = 2;
    if (has_rank_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_order());
    }

  }
  // repeated .SProtoSpace.rank_db_item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_db_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_db_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_db_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_db_data::MergeFrom(const rank_db_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_rank_order()) {
      set_rank_order(from.rank_order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_db_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_db_data::CopyFrom(const rank_db_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_db_data::IsInitialized() const {

  return true;
}

void rank_db_data::Swap(rank_db_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(rank_order_, other->rank_order_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_db_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_db_data_descriptor_;
  metadata.reflection = rank_db_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_redis_data::kRoleIdFieldNumber;
const int rank_redis_data::kValueFieldNumber;
#endif  // !_MSC_VER

rank_redis_data::rank_redis_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_redis_data::InitAsDefaultInstance() {
}

rank_redis_data::rank_redis_data(const rank_redis_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_redis_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_redis_data::~rank_redis_data() {
  SharedDtor();
}

void rank_redis_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_redis_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_redis_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_redis_data_descriptor_;
}

const rank_redis_data& rank_redis_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

rank_redis_data* rank_redis_data::default_instance_ = NULL;

rank_redis_data* rank_redis_data::New() const {
  return new rank_redis_data;
}

void rank_redis_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_redis_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_redis_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_redis_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_redis_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_redis_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_redis_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_redis_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_redis_data::MergeFrom(const rank_redis_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_redis_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_redis_data::CopyFrom(const rank_redis_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_redis_data::IsInitialized() const {

  return true;
}

void rank_redis_data::Swap(rank_redis_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_redis_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_redis_data_descriptor_;
  metadata.reflection = rank_redis_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rank_refresh_data::kMinValueFieldNumber;
const int rank_refresh_data::kCurSizeFieldNumber;
const int rank_refresh_data::kMembersFieldNumber;
#endif  // !_MSC_VER

rank_refresh_data::rank_refresh_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rank_refresh_data::InitAsDefaultInstance() {
}

rank_refresh_data::rank_refresh_data(const rank_refresh_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rank_refresh_data::SharedCtor() {
  _cached_size_ = 0;
  min_value_ = GOOGLE_ULONGLONG(0);
  cur_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rank_refresh_data::~rank_refresh_data() {
  SharedDtor();
}

void rank_refresh_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rank_refresh_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rank_refresh_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rank_refresh_data_descriptor_;
}

const rank_refresh_data& rank_refresh_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

rank_refresh_data* rank_refresh_data::default_instance_ = NULL;

rank_refresh_data* rank_refresh_data::New() const {
  return new rank_refresh_data;
}

void rank_refresh_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_value_ = GOOGLE_ULONGLONG(0);
    cur_size_ = 0;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rank_refresh_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 min_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_size;
        break;
      }

      // optional int32 cur_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_size_)));
          set_has_cur_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .SProtoSpace.rank_redis_data members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rank_refresh_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 min_value = 1;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->min_value(), output);
  }

  // optional int32 cur_size = 2;
  if (has_cur_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_size(), output);
  }

  // repeated .SProtoSpace.rank_redis_data members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rank_refresh_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 min_value = 1;
  if (has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->min_value(), target);
  }

  // optional int32 cur_size = 2;
  if (has_cur_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_size(), target);
  }

  // repeated .SProtoSpace.rank_redis_data members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rank_refresh_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 min_value = 1;
    if (has_min_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->min_value());
    }

    // optional int32 cur_size = 2;
    if (has_cur_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_size());
    }

  }
  // repeated .SProtoSpace.rank_redis_data members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rank_refresh_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rank_refresh_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rank_refresh_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rank_refresh_data::MergeFrom(const rank_refresh_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
    if (from.has_cur_size()) {
      set_cur_size(from.cur_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rank_refresh_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rank_refresh_data::CopyFrom(const rank_refresh_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rank_refresh_data::IsInitialized() const {

  return true;
}

void rank_refresh_data::Swap(rank_refresh_data* other) {
  if (other != this) {
    std::swap(min_value_, other->min_value_);
    std::swap(cur_size_, other->cur_size_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rank_refresh_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rank_refresh_data_descriptor_;
  metadata.reflection = rank_refresh_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_role_login::kProtoidFieldNumber;
const int pub_role_login::kRoleIdFieldNumber;
const int pub_role_login::kInfoFieldNumber;
const int pub_role_login::kGameSessionIdFieldNumber;
const int pub_role_login::kGateSessionIdFieldNumber;
#endif  // !_MSC_VER

pub_role_login::pub_role_login()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_role_login::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::pub_role_info*>(&::SProtoSpace::pub_role_info::default_instance());
}

pub_role_login::pub_role_login(const pub_role_login& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_role_login::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1501;
  role_id_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  game_session_id_ = GOOGLE_ULONGLONG(0);
  gate_session_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_role_login::~pub_role_login() {
  SharedDtor();
}

void pub_role_login::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void pub_role_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_role_login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_role_login_descriptor_;
}

const pub_role_login& pub_role_login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_role_login* pub_role_login::default_instance_ = NULL;

pub_role_login* pub_role_login::New() const {
  return new pub_role_login;
}

void pub_role_login::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1501;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::pub_role_info::Clear();
    }
    game_session_id_ = GOOGLE_ULONGLONG(0);
    gate_session_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_role_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.pub_role_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_session_id;
        break;
      }

      // optional uint64 game_session_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_session_id_)));
          set_has_game_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gate_session_id;
        break;
      }

      // optional uint64 gate_session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gate_session_id_)));
          set_has_gate_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_role_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.pub_role_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional uint64 game_session_id = 4;
  if (has_game_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_session_id(), output);
  }

  // optional uint64 gate_session_id = 5;
  if (has_gate_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gate_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_role_login::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.pub_role_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional uint64 game_session_id = 4;
  if (has_game_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_session_id(), target);
  }

  // optional uint64 gate_session_id = 5;
  if (has_gate_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gate_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_role_login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.pub_role_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint64 game_session_id = 4;
    if (has_game_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_session_id());
    }

    // optional uint64 gate_session_id = 5;
    if (has_gate_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gate_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_role_login::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_role_login* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_role_login*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_role_login::MergeFrom(const pub_role_login& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::pub_role_info::MergeFrom(from.info());
    }
    if (from.has_game_session_id()) {
      set_game_session_id(from.game_session_id());
    }
    if (from.has_gate_session_id()) {
      set_gate_session_id(from.gate_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_role_login::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_role_login::CopyFrom(const pub_role_login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_role_login::IsInitialized() const {

  return true;
}

void pub_role_login::Swap(pub_role_login* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(info_, other->info_);
    std::swap(game_session_id_, other->game_session_id_);
    std::swap(gate_session_id_, other->gate_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_role_login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_role_login_descriptor_;
  metadata.reflection = pub_role_login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_role_login_batch::kProtoidFieldNumber;
const int pub_role_login_batch::kRoleLoginsFieldNumber;
#endif  // !_MSC_VER

pub_role_login_batch::pub_role_login_batch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_role_login_batch::InitAsDefaultInstance() {
}

pub_role_login_batch::pub_role_login_batch(const pub_role_login_batch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_role_login_batch::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1500;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_role_login_batch::~pub_role_login_batch() {
  SharedDtor();
}

void pub_role_login_batch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_role_login_batch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_role_login_batch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_role_login_batch_descriptor_;
}

const pub_role_login_batch& pub_role_login_batch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_role_login_batch* pub_role_login_batch::default_instance_ = NULL;

pub_role_login_batch* pub_role_login_batch::New() const {
  return new pub_role_login_batch;
}

void pub_role_login_batch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1500;
  }
  role_logins_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_role_login_batch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_batch_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_logins;
        break;
      }

      // repeated .SProtoSpace.pub_role_login role_logins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_logins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_logins()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_logins;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_role_login_batch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_batch_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.pub_role_login role_logins = 2;
  for (int i = 0; i < this->role_logins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_logins(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_role_login_batch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_batch_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.pub_role_login role_logins = 2;
  for (int i = 0; i < this->role_logins_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_logins(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_role_login_batch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_login_batch_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.pub_role_login role_logins = 2;
  total_size += 1 * this->role_logins_size();
  for (int i = 0; i < this->role_logins_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_logins(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_role_login_batch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_role_login_batch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_role_login_batch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_role_login_batch::MergeFrom(const pub_role_login_batch& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_logins_.MergeFrom(from.role_logins_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_role_login_batch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_role_login_batch::CopyFrom(const pub_role_login_batch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_role_login_batch::IsInitialized() const {

  return true;
}

void pub_role_login_batch::Swap(pub_role_login_batch* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    role_logins_.Swap(&other->role_logins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_role_login_batch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_role_login_batch_descriptor_;
  metadata.reflection = pub_role_login_batch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_role_logout::kProtoidFieldNumber;
const int pub_role_logout::kRoleIdFieldNumber;
const int pub_role_logout::kRoleNameFieldNumber;
#endif  // !_MSC_VER

pub_role_logout::pub_role_logout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_role_logout::InitAsDefaultInstance() {
}

pub_role_logout::pub_role_logout(const pub_role_logout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_role_logout::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1502;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_role_logout::~pub_role_logout() {
  SharedDtor();
}

void pub_role_logout::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void pub_role_logout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_role_logout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_role_logout_descriptor_;
}

const pub_role_logout& pub_role_logout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_role_logout* pub_role_logout::default_instance_ = NULL;

pub_role_logout* pub_role_logout::New() const {
  return new pub_role_logout;
}

void pub_role_logout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1502;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_role_logout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_logout_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_role_logout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_logout_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_role_logout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_logout_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_role_logout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_logout_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_role_logout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_role_logout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_role_logout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_role_logout::MergeFrom(const pub_role_logout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_role_logout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_role_logout::CopyFrom(const pub_role_logout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_role_logout::IsInitialized() const {

  return true;
}

void pub_role_logout::Swap(pub_role_logout* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_role_logout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_role_logout_descriptor_;
  metadata.reflection = pub_role_logout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_role_info_sync::kProtoidFieldNumber;
const int pub_role_info_sync::kRoleIdFieldNumber;
const int pub_role_info_sync::kInfoFieldNumber;
const int pub_role_info_sync::kGameSessionIdFieldNumber;
const int pub_role_info_sync::kGateSessionIdFieldNumber;
#endif  // !_MSC_VER

pub_role_info_sync::pub_role_info_sync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_role_info_sync::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::pub_role_info*>(&::SProtoSpace::pub_role_info::default_instance());
}

pub_role_info_sync::pub_role_info_sync(const pub_role_info_sync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_role_info_sync::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1511;
  role_id_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  game_session_id_ = GOOGLE_ULONGLONG(0);
  gate_session_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_role_info_sync::~pub_role_info_sync() {
  SharedDtor();
}

void pub_role_info_sync::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void pub_role_info_sync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_role_info_sync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_role_info_sync_descriptor_;
}

const pub_role_info_sync& pub_role_info_sync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_role_info_sync* pub_role_info_sync::default_instance_ = NULL;

pub_role_info_sync* pub_role_info_sync::New() const {
  return new pub_role_info_sync;
}

void pub_role_info_sync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1511;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::pub_role_info::Clear();
    }
    game_session_id_ = GOOGLE_ULONGLONG(0);
    gate_session_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_role_info_sync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_info_sync_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.pub_role_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_session_id;
        break;
      }

      // optional uint64 game_session_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_session_id_)));
          set_has_game_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gate_session_id;
        break;
      }

      // optional uint64 gate_session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gate_session_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gate_session_id_)));
          set_has_gate_session_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_role_info_sync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_info_sync_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.pub_role_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional uint64 game_session_id = 4;
  if (has_game_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_session_id(), output);
  }

  // optional uint64 gate_session_id = 5;
  if (has_gate_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->gate_session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_role_info_sync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_info_sync_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.pub_role_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional uint64 game_session_id = 4;
  if (has_game_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_session_id(), target);
  }

  // optional uint64 gate_session_id = 5;
  if (has_gate_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->gate_session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_role_info_sync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_role_info_sync_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.pub_role_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint64 game_session_id = 4;
    if (has_game_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_session_id());
    }

    // optional uint64 gate_session_id = 5;
    if (has_gate_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gate_session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_role_info_sync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_role_info_sync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_role_info_sync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_role_info_sync::MergeFrom(const pub_role_info_sync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::pub_role_info::MergeFrom(from.info());
    }
    if (from.has_game_session_id()) {
      set_game_session_id(from.game_session_id());
    }
    if (from.has_gate_session_id()) {
      set_gate_session_id(from.gate_session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_role_info_sync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_role_info_sync::CopyFrom(const pub_role_info_sync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_role_info_sync::IsInitialized() const {

  return true;
}

void pub_role_info_sync::Swap(pub_role_info_sync* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(info_, other->info_);
    std::swap(game_session_id_, other->game_session_id_);
    std::swap(gate_session_id_, other->gate_session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_role_info_sync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_role_info_sync_descriptor_;
  metadata.reflection = pub_role_info_sync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_create_team_req::kProtoidFieldNumber;
const int ps_create_team_req::kTeamTypeFieldNumber;
const int ps_create_team_req::kTeamSizeFieldNumber;
const int ps_create_team_req::kTeamPermFieldNumber;
const int ps_create_team_req::kTeamNameFieldNumber;
const int ps_create_team_req::kGsIdFieldNumber;
const int ps_create_team_req::kRoleIdFieldNumber;
const int ps_create_team_req::kLvFieldNumber;
const int ps_create_team_req::kRoleNameFieldNumber;
const int ps_create_team_req::kHerosFieldNumber;
#endif  // !_MSC_VER

ps_create_team_req::ps_create_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_create_team_req::InitAsDefaultInstance() {
}

ps_create_team_req::ps_create_team_req(const ps_create_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_create_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1000;
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gs_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  lv_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_create_team_req::~ps_create_team_req() {
  SharedDtor();
}

void ps_create_team_req::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ps_create_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_create_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_create_team_req_descriptor_;
}

const ps_create_team_req& ps_create_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_create_team_req* ps_create_team_req::default_instance_ = NULL;

ps_create_team_req* ps_create_team_req::New() const {
  return new ps_create_team_req;
}

void ps_create_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1000;
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    gs_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    lv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_create_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_name;
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gs_id;
        break;
      }

      // optional uint64 gs_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // optional int32 lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_name;
        break;
      }

      // optional string role_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.battle_hero_info heros = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_create_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->team_name(), output);
  }

  // optional uint64 gs_id = 6;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gs_id(), output);
  }

  // optional uint64 role_id = 7;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->role_id(), output);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lv(), output);
  }

  // optional string role_name = 9;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->role_name(), output);
  }

  // repeated .SProtoSpace.battle_hero_info heros = 10;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_create_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // optional uint64 gs_id = 6;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gs_id(), target);
  }

  // optional uint64 role_id = 7;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->role_id(), target);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lv(), target);
  }

  // optional string role_name = 9;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->role_name(), target);
  }

  // repeated .SProtoSpace.battle_hero_info heros = 10;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_create_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

    // optional string team_name = 5;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 gs_id = 6;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs_id());
    }

    // optional uint64 role_id = 7;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 lv = 8;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string role_name = 9;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  // repeated .SProtoSpace.battle_hero_info heros = 10;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_create_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_create_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_create_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_create_team_req::MergeFrom(const ps_create_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_create_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_create_team_req::CopyFrom(const ps_create_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_create_team_req::IsInitialized() const {

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void ps_create_team_req::Swap(ps_create_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    std::swap(team_name_, other->team_name_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(lv_, other->lv_);
    std::swap(role_name_, other->role_name_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_create_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_create_team_req_descriptor_;
  metadata.reflection = ps_create_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_create_team_ack::kProtoidFieldNumber;
const int ps_create_team_ack::kTeamTypeFieldNumber;
const int ps_create_team_ack::kTeamSizeFieldNumber;
const int ps_create_team_ack::kTeamPermFieldNumber;
const int ps_create_team_ack::kTeamNameFieldNumber;
const int ps_create_team_ack::kRoleIdFieldNumber;
const int ps_create_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_create_team_ack::ps_create_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_create_team_ack::InitAsDefaultInstance() {
}

ps_create_team_ack::ps_create_team_ack(const ps_create_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_create_team_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1001;
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_create_team_ack::~ps_create_team_ack() {
  SharedDtor();
}

void ps_create_team_ack::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void ps_create_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_create_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_create_team_ack_descriptor_;
}

const ps_create_team_ack& ps_create_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_create_team_ack* ps_create_team_ack::default_instance_ = NULL;

ps_create_team_ack* ps_create_team_ack::New() const {
  return new ps_create_team_ack;
}

void ps_create_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1001;
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_create_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_name;
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional int32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_create_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->team_name(), output);
  }

  // optional uint64 role_id = 6;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->role_id(), output);
  }

  // optional int32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_create_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // optional uint64 role_id = 6;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->role_id(), target);
  }

  // optional int32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_create_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_create_team_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

    // optional string team_name = 5;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 role_id = 6;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_create_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_create_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_create_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_create_team_ack::MergeFrom(const ps_create_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_create_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_create_team_ack::CopyFrom(const ps_create_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_create_team_ack::IsInitialized() const {

  return true;
}

void ps_create_team_ack::Swap(ps_create_team_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    std::swap(team_name_, other->team_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_create_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_create_team_ack_descriptor_;
  metadata.reflection = ps_create_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_update_team_ntf::kProtoidFieldNumber;
const int ps_update_team_ntf::kRoleIdFieldNumber;
const int ps_update_team_ntf::kTeamFieldNumber;
#endif  // !_MSC_VER

ps_update_team_ntf::ps_update_team_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_update_team_ntf::InitAsDefaultInstance() {
  team_ = const_cast< ::SProtoSpace::team_data*>(&::SProtoSpace::team_data::default_instance());
}

ps_update_team_ntf::ps_update_team_ntf(const ps_update_team_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_update_team_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1002;
  role_id_ = GOOGLE_ULONGLONG(0);
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_update_team_ntf::~ps_update_team_ntf() {
  SharedDtor();
}

void ps_update_team_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void ps_update_team_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_update_team_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_update_team_ntf_descriptor_;
}

const ps_update_team_ntf& ps_update_team_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_update_team_ntf* ps_update_team_ntf::default_instance_ = NULL;

ps_update_team_ntf* ps_update_team_ntf::New() const {
  return new ps_update_team_ntf;
}

void ps_update_team_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1002;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_team()) {
      if (team_ != NULL) team_->::SProtoSpace::team_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_update_team_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_team;
        break;
      }

      // optional .SProtoSpace.team_data team = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_update_team_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.team_data team = 3;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_update_team_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.team_data team = 3;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_update_team_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.team_data team = 3;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_update_team_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_update_team_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_update_team_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_update_team_ntf::MergeFrom(const ps_update_team_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_team()) {
      mutable_team()->::SProtoSpace::team_data::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_update_team_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_update_team_ntf::CopyFrom(const ps_update_team_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_update_team_ntf::IsInitialized() const {

  if (has_team()) {
    if (!this->team().IsInitialized()) return false;
  }
  return true;
}

void ps_update_team_ntf::Swap(ps_update_team_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_update_team_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_update_team_ntf_descriptor_;
  metadata.reflection = ps_update_team_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_enter_team_req::kProtoidFieldNumber;
const int ps_enter_team_req::kTeamIdFieldNumber;
const int ps_enter_team_req::kRoleIdFieldNumber;
const int ps_enter_team_req::kGsIdFieldNumber;
const int ps_enter_team_req::kLvFieldNumber;
const int ps_enter_team_req::kRoleNameFieldNumber;
const int ps_enter_team_req::kHerosFieldNumber;
#endif  // !_MSC_VER

ps_enter_team_req::ps_enter_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_enter_team_req::InitAsDefaultInstance() {
}

ps_enter_team_req::ps_enter_team_req(const ps_enter_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_enter_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1003;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  gs_id_ = GOOGLE_ULONGLONG(0);
  lv_ = 0;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_enter_team_req::~ps_enter_team_req() {
  SharedDtor();
}

void ps_enter_team_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void ps_enter_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_enter_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_enter_team_req_descriptor_;
}

const ps_enter_team_req& ps_enter_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_enter_team_req* ps_enter_team_req::default_instance_ = NULL;

ps_enter_team_req* ps_enter_team_req::New() const {
  return new ps_enter_team_req;
}

void ps_enter_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1003;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    gs_id_ = GOOGLE_ULONGLONG(0);
    lv_ = 0;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_enter_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gs_id;
        break;
      }

      // optional uint64 gs_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional int32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_role_name;
        break;
      }

      // optional string role_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.battle_hero_info heros = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_enter_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint64 gs_id = 4;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gs_id(), output);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // optional string role_name = 6;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->role_name(), output);
  }

  // repeated .SProtoSpace.battle_hero_info heros = 7;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_enter_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint64 gs_id = 4;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gs_id(), target);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // optional string role_name = 6;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->role_name(), target);
  }

  // repeated .SProtoSpace.battle_hero_info heros = 7;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_enter_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 gs_id = 4;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs_id());
    }

    // optional int32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional string role_name = 6;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  // repeated .SProtoSpace.battle_hero_info heros = 7;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_enter_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_enter_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_enter_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_enter_team_req::MergeFrom(const ps_enter_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_enter_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_enter_team_req::CopyFrom(const ps_enter_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_enter_team_req::IsInitialized() const {

  for (int i = 0; i < heros_size(); i++) {
    if (!this->heros(i).IsInitialized()) return false;
  }
  return true;
}

void ps_enter_team_req::Swap(ps_enter_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(lv_, other->lv_);
    std::swap(role_name_, other->role_name_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_enter_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_enter_team_req_descriptor_;
  metadata.reflection = ps_enter_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_enter_team_ack::kProtoidFieldNumber;
const int ps_enter_team_ack::kTeamIdFieldNumber;
const int ps_enter_team_ack::kRoleIdFieldNumber;
const int ps_enter_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_enter_team_ack::ps_enter_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_enter_team_ack::InitAsDefaultInstance() {
}

ps_enter_team_ack::ps_enter_team_ack(const ps_enter_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_enter_team_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1004;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_enter_team_ack::~ps_enter_team_ack() {
  SharedDtor();
}

void ps_enter_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_enter_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_enter_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_enter_team_ack_descriptor_;
}

const ps_enter_team_ack& ps_enter_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_enter_team_ack* ps_enter_team_ack::default_instance_ = NULL;

ps_enter_team_ack* ps_enter_team_ack::New() const {
  return new ps_enter_team_ack;
}

void ps_enter_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1004;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_enter_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_enter_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_enter_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_enter_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_enter_team_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_enter_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_enter_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_enter_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_enter_team_ack::MergeFrom(const ps_enter_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_enter_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_enter_team_ack::CopyFrom(const ps_enter_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_enter_team_ack::IsInitialized() const {

  return true;
}

void ps_enter_team_ack::Swap(ps_enter_team_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_enter_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_enter_team_ack_descriptor_;
  metadata.reflection = ps_enter_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_exit_team_req::kProtoidFieldNumber;
const int ps_exit_team_req::kTeamIdFieldNumber;
const int ps_exit_team_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ps_exit_team_req::ps_exit_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_exit_team_req::InitAsDefaultInstance() {
}

ps_exit_team_req::ps_exit_team_req(const ps_exit_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_exit_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1005;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_exit_team_req::~ps_exit_team_req() {
  SharedDtor();
}

void ps_exit_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_exit_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_exit_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_exit_team_req_descriptor_;
}

const ps_exit_team_req& ps_exit_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_exit_team_req* ps_exit_team_req::default_instance_ = NULL;

ps_exit_team_req* ps_exit_team_req::New() const {
  return new ps_exit_team_req;
}

void ps_exit_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1005;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_exit_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_exit_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_exit_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_exit_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_exit_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_exit_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_exit_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_exit_team_req::MergeFrom(const ps_exit_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_exit_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_exit_team_req::CopyFrom(const ps_exit_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_exit_team_req::IsInitialized() const {

  return true;
}

void ps_exit_team_req::Swap(ps_exit_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_exit_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_exit_team_req_descriptor_;
  metadata.reflection = ps_exit_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_exit_team_ack::kProtoidFieldNumber;
const int ps_exit_team_ack::kTeamIdFieldNumber;
const int ps_exit_team_ack::kRoleIdFieldNumber;
const int ps_exit_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_exit_team_ack::ps_exit_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_exit_team_ack::InitAsDefaultInstance() {
}

ps_exit_team_ack::ps_exit_team_ack(const ps_exit_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_exit_team_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1006;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_exit_team_ack::~ps_exit_team_ack() {
  SharedDtor();
}

void ps_exit_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_exit_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_exit_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_exit_team_ack_descriptor_;
}

const ps_exit_team_ack& ps_exit_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_exit_team_ack* ps_exit_team_ack::default_instance_ = NULL;

ps_exit_team_ack* ps_exit_team_ack::New() const {
  return new ps_exit_team_ack;
}

void ps_exit_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1006;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_exit_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_exit_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_exit_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_exit_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_exit_team_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_exit_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_exit_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_exit_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_exit_team_ack::MergeFrom(const ps_exit_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_exit_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_exit_team_ack::CopyFrom(const ps_exit_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_exit_team_ack::IsInitialized() const {

  return true;
}

void ps_exit_team_ack::Swap(ps_exit_team_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_exit_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_exit_team_ack_descriptor_;
  metadata.reflection = ps_exit_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_ready_team_req::kProtoidFieldNumber;
const int ps_ready_team_req::kTeamIdFieldNumber;
const int ps_ready_team_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ps_ready_team_req::ps_ready_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_ready_team_req::InitAsDefaultInstance() {
}

ps_ready_team_req::ps_ready_team_req(const ps_ready_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_ready_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1007;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_ready_team_req::~ps_ready_team_req() {
  SharedDtor();
}

void ps_ready_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_ready_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_ready_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_ready_team_req_descriptor_;
}

const ps_ready_team_req& ps_ready_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_ready_team_req* ps_ready_team_req::default_instance_ = NULL;

ps_ready_team_req* ps_ready_team_req::New() const {
  return new ps_ready_team_req;
}

void ps_ready_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1007;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_ready_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_ready_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_ready_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_ready_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_ready_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_ready_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_ready_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_ready_team_req::MergeFrom(const ps_ready_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_ready_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_ready_team_req::CopyFrom(const ps_ready_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_ready_team_req::IsInitialized() const {

  return true;
}

void ps_ready_team_req::Swap(ps_ready_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_ready_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_ready_team_req_descriptor_;
  metadata.reflection = ps_ready_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_ready_team_ack::kProtoidFieldNumber;
const int ps_ready_team_ack::kTeamIdFieldNumber;
const int ps_ready_team_ack::kRoleIdFieldNumber;
const int ps_ready_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_ready_team_ack::ps_ready_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_ready_team_ack::InitAsDefaultInstance() {
}

ps_ready_team_ack::ps_ready_team_ack(const ps_ready_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_ready_team_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1008;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_ready_team_ack::~ps_ready_team_ack() {
  SharedDtor();
}

void ps_ready_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_ready_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_ready_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_ready_team_ack_descriptor_;
}

const ps_ready_team_ack& ps_ready_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_ready_team_ack* ps_ready_team_ack::default_instance_ = NULL;

ps_ready_team_ack* ps_ready_team_ack::New() const {
  return new ps_ready_team_ack;
}

void ps_ready_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1008;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_ready_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_ready_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_ready_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_ready_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_ready_team_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_ready_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_ready_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_ready_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_ready_team_ack::MergeFrom(const ps_ready_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_ready_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_ready_team_ack::CopyFrom(const ps_ready_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_ready_team_ack::IsInitialized() const {

  return true;
}

void ps_ready_team_ack::Swap(ps_ready_team_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_ready_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_ready_team_ack_descriptor_;
  metadata.reflection = ps_ready_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_update_team_req::kProtoidFieldNumber;
const int ps_update_team_req::kTeamIdFieldNumber;
const int ps_update_team_req::kRoleIdFieldNumber;
const int ps_update_team_req::kSlotIdFieldNumber;
const int ps_update_team_req::kHerosFieldNumber;
#endif  // !_MSC_VER

ps_update_team_req::ps_update_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_update_team_req::InitAsDefaultInstance() {
  heros_ = const_cast< ::SProtoSpace::battle_hero_info*>(&::SProtoSpace::battle_hero_info::default_instance());
}

ps_update_team_req::ps_update_team_req(const ps_update_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_update_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1009;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 0u;
  heros_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_update_team_req::~ps_update_team_req() {
  SharedDtor();
}

void ps_update_team_req::SharedDtor() {
  if (this != default_instance_) {
    delete heros_;
  }
}

void ps_update_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_update_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_update_team_req_descriptor_;
}

const ps_update_team_req& ps_update_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_update_team_req* ps_update_team_req::default_instance_ = NULL;

ps_update_team_req* ps_update_team_req::New() const {
  return new ps_update_team_req;
}

void ps_update_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1009;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 0u;
    if (has_heros()) {
      if (heros_ != NULL) heros_->::SProtoSpace::battle_hero_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_update_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_heros;
        break;
      }

      // optional .SProtoSpace.battle_hero_info heros = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_update_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 slot_id = 4;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_id(), output);
  }

  // optional .SProtoSpace.battle_hero_info heros = 5;
  if (has_heros()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->heros(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_update_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 slot_id = 4;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_id(), target);
  }

  // optional .SProtoSpace.battle_hero_info heros = 5;
  if (has_heros()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->heros(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_update_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 slot_id = 4;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional .SProtoSpace.battle_hero_info heros = 5;
    if (has_heros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heros());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_update_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_update_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_update_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_update_team_req::MergeFrom(const ps_update_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_heros()) {
      mutable_heros()->::SProtoSpace::battle_hero_info::MergeFrom(from.heros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_update_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_update_team_req::CopyFrom(const ps_update_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_update_team_req::IsInitialized() const {

  if (has_heros()) {
    if (!this->heros().IsInitialized()) return false;
  }
  return true;
}

void ps_update_team_req::Swap(ps_update_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(heros_, other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_update_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_update_team_req_descriptor_;
  metadata.reflection = ps_update_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_update_team_ack::kProtoidFieldNumber;
const int ps_update_team_ack::kTeamIdFieldNumber;
const int ps_update_team_ack::kRoleIdFieldNumber;
const int ps_update_team_ack::kSlotIdFieldNumber;
const int ps_update_team_ack::kHeroIdFieldNumber;
const int ps_update_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_update_team_ack::ps_update_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_update_team_ack::InitAsDefaultInstance() {
}

ps_update_team_ack::ps_update_team_ack(const ps_update_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_update_team_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1010;
  team_id_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 0u;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_update_team_ack::~ps_update_team_ack() {
  SharedDtor();
}

void ps_update_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_update_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_update_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_update_team_ack_descriptor_;
}

const ps_update_team_ack& ps_update_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_update_team_ack* ps_update_team_ack::default_instance_ = NULL;

ps_update_team_ack* ps_update_team_ack::New() const {
  return new ps_update_team_ack;
}

void ps_update_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1010;
    team_id_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 0u;
    hero_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_update_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional int32 ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_update_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 slot_id = 4;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_id(), output);
  }

  // optional uint64 hero_id = 5;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hero_id(), output);
  }

  // optional int32 ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_update_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 slot_id = 4;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_id(), target);
  }

  // optional uint64 hero_id = 5;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hero_id(), target);
  }

  // optional int32 ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_update_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_update_team_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 slot_id = 4;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint64 hero_id = 5;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 ret = 6;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_update_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_update_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_update_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_update_team_ack::MergeFrom(const ps_update_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_update_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_update_team_ack::CopyFrom(const ps_update_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_update_team_ack::IsInitialized() const {

  return true;
}

void ps_update_team_ack::Swap(ps_update_team_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_id_, other->team_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_update_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_update_team_ack_descriptor_;
  metadata.reflection = ps_update_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_get_teams_req::kProtoidFieldNumber;
const int ps_get_teams_req::kTeamTypeFieldNumber;
const int ps_get_teams_req::kTeamSizeFieldNumber;
const int ps_get_teams_req::kTeamPermFieldNumber;
const int ps_get_teams_req::kParmsFieldNumber;
#endif  // !_MSC_VER

ps_get_teams_req::ps_get_teams_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_get_teams_req::InitAsDefaultInstance() {
}

ps_get_teams_req::ps_get_teams_req(const ps_get_teams_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_get_teams_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1011;
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_get_teams_req::~ps_get_teams_req() {
  SharedDtor();
}

void ps_get_teams_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_get_teams_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_get_teams_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_get_teams_req_descriptor_;
}

const ps_get_teams_req& ps_get_teams_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_get_teams_req* ps_get_teams_req::default_instance_ = NULL;

ps_get_teams_req* ps_get_teams_req::New() const {
  return new ps_get_teams_req;
}

void ps_get_teams_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1011;
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
  }
  parms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_get_teams_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parms;
        break;
      }

      // repeated int32 parms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_parms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_parms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_get_teams_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // repeated int32 parms = 5;
  for (int i = 0; i < this->parms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->parms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_get_teams_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // repeated int32 parms = 5;
  for (int i = 0; i < this->parms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->parms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_get_teams_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

  }
  // repeated int32 parms = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->parms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->parms(i));
    }
    total_size += 1 * this->parms_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_get_teams_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_get_teams_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_get_teams_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_get_teams_req::MergeFrom(const ps_get_teams_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  parms_.MergeFrom(from.parms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_get_teams_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_get_teams_req::CopyFrom(const ps_get_teams_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_get_teams_req::IsInitialized() const {

  return true;
}

void ps_get_teams_req::Swap(ps_get_teams_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    parms_.Swap(&other->parms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_get_teams_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_get_teams_req_descriptor_;
  metadata.reflection = ps_get_teams_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_get_teams_ack::kProtoidFieldNumber;
const int ps_get_teams_ack::kRoleIdFieldNumber;
const int ps_get_teams_ack::kRetFieldNumber;
const int ps_get_teams_ack::kTeamsFieldNumber;
#endif  // !_MSC_VER

ps_get_teams_ack::ps_get_teams_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_get_teams_ack::InitAsDefaultInstance() {
}

ps_get_teams_ack::ps_get_teams_ack(const ps_get_teams_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_get_teams_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1012;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_get_teams_ack::~ps_get_teams_ack() {
  SharedDtor();
}

void ps_get_teams_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_get_teams_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_get_teams_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_get_teams_ack_descriptor_;
}

const ps_get_teams_ack& ps_get_teams_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_get_teams_ack* ps_get_teams_ack::default_instance_ = NULL;

ps_get_teams_ack* ps_get_teams_ack::New() const {
  return new ps_get_teams_ack;
}

void ps_get_teams_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1012;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_get_teams_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_teams;
        break;
      }

      // repeated .SProtoSpace.team_brief teams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_get_teams_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // repeated .SProtoSpace.team_brief teams = 4;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_get_teams_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // repeated .SProtoSpace.team_brief teams = 4;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_get_teams_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_get_teams_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.team_brief teams = 4;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_get_teams_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_get_teams_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_get_teams_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_get_teams_ack::MergeFrom(const ps_get_teams_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_get_teams_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_get_teams_ack::CopyFrom(const ps_get_teams_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_get_teams_ack::IsInitialized() const {

  return true;
}

void ps_get_teams_ack::Swap(ps_get_teams_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_get_teams_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_get_teams_ack_descriptor_;
  metadata.reflection = ps_get_teams_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_invite_enter_team_req::kProtoidFieldNumber;
const int ps_invite_enter_team_req::kSourRoleIdFieldNumber;
const int ps_invite_enter_team_req::kSourRoleNameFieldNumber;
const int ps_invite_enter_team_req::kTeamIdFieldNumber;
const int ps_invite_enter_team_req::kRoleidsFieldNumber;
#endif  // !_MSC_VER

ps_invite_enter_team_req::ps_invite_enter_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_invite_enter_team_req::InitAsDefaultInstance() {
}

ps_invite_enter_team_req::ps_invite_enter_team_req(const ps_invite_enter_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_invite_enter_team_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1013;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_invite_enter_team_req::~ps_invite_enter_team_req() {
  SharedDtor();
}

void ps_invite_enter_team_req::SharedDtor() {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sour_role_name_;
  }
  if (this != default_instance_) {
  }
}

void ps_invite_enter_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_invite_enter_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_invite_enter_team_req_descriptor_;
}

const ps_invite_enter_team_req& ps_invite_enter_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_invite_enter_team_req* ps_invite_enter_team_req::default_instance_ = NULL;

ps_invite_enter_team_req* ps_invite_enter_team_req::New() const {
  return new ps_invite_enter_team_req;
}

void ps_invite_enter_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1013;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_sour_role_name()) {
      if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
        sour_role_name_->clear();
      }
    }
    team_id_ = GOOGLE_ULONGLONG(0);
  }
  roleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_invite_enter_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sour_role_name;
        break;
      }

      // optional string sour_role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sour_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sour_role_name().data(), this->sour_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleids;
        break;
      }

      // repeated uint64 roleids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_roleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roleids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_invite_enter_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 sour_role_id = 2;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sour_role_id(), output);
  }

  // optional string sour_role_name = 3;
  if (has_sour_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sour_role_name().data(), this->sour_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sour_role_name(), output);
  }

  // optional uint64 team_id = 4;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_id(), output);
  }

  // repeated uint64 roleids = 5;
  for (int i = 0; i < this->roleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->roleids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_invite_enter_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 sour_role_id = 2;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sour_role_id(), target);
  }

  // optional string sour_role_name = 3;
  if (has_sour_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sour_role_name().data(), this->sour_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sour_role_name(), target);
  }

  // optional uint64 team_id = 4;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_id(), target);
  }

  // repeated uint64 roleids = 5;
  for (int i = 0; i < this->roleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->roleids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_invite_enter_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 sour_role_id = 2;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional string sour_role_name = 3;
    if (has_sour_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sour_role_name());
    }

    // optional uint64 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

  }
  // repeated uint64 roleids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->roleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roleids(i));
    }
    total_size += 1 * this->roleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_invite_enter_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_invite_enter_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_invite_enter_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_invite_enter_team_req::MergeFrom(const ps_invite_enter_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleids_.MergeFrom(from.roleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_sour_role_name()) {
      set_sour_role_name(from.sour_role_name());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_invite_enter_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_invite_enter_team_req::CopyFrom(const ps_invite_enter_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_invite_enter_team_req::IsInitialized() const {

  return true;
}

void ps_invite_enter_team_req::Swap(ps_invite_enter_team_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(sour_role_name_, other->sour_role_name_);
    std::swap(team_id_, other->team_id_);
    roleids_.Swap(&other->roleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_invite_enter_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_invite_enter_team_req_descriptor_;
  metadata.reflection = ps_invite_enter_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_invite_enter_team_ntf::kProtoidFieldNumber;
const int ps_invite_enter_team_ntf::kDestRoleIdFieldNumber;
const int ps_invite_enter_team_ntf::kTeamIdFieldNumber;
const int ps_invite_enter_team_ntf::kTeamNameFieldNumber;
const int ps_invite_enter_team_ntf::kTeamTypeFieldNumber;
const int ps_invite_enter_team_ntf::kSourRoleIdFieldNumber;
const int ps_invite_enter_team_ntf::kSourRoleNameFieldNumber;
#endif  // !_MSC_VER

ps_invite_enter_team_ntf::ps_invite_enter_team_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_invite_enter_team_ntf::InitAsDefaultInstance() {
}

ps_invite_enter_team_ntf::ps_invite_enter_team_ntf(const ps_invite_enter_team_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_invite_enter_team_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1014;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  team_id_ = GOOGLE_ULONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_type_ = 0u;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_invite_enter_team_ntf::~ps_invite_enter_team_ntf() {
  SharedDtor();
}

void ps_invite_enter_team_ntf::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sour_role_name_;
  }
  if (this != default_instance_) {
  }
}

void ps_invite_enter_team_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_invite_enter_team_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_invite_enter_team_ntf_descriptor_;
}

const ps_invite_enter_team_ntf& ps_invite_enter_team_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_invite_enter_team_ntf* ps_invite_enter_team_ntf::default_instance_ = NULL;

ps_invite_enter_team_ntf* ps_invite_enter_team_ntf::New() const {
  return new ps_invite_enter_team_ntf;
}

void ps_invite_enter_team_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1014;
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    team_id_ = GOOGLE_ULONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    team_type_ = 0u;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_sour_role_name()) {
      if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
        sour_role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_invite_enter_team_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_type;
        break;
      }

      // optional uint32 team_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_type_)));
          set_has_team_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sour_role_name;
        break;
      }

      // optional string sour_role_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sour_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sour_role_name().data(), this->sour_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_invite_enter_team_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 dest_role_id = 2;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dest_role_id(), output);
  }

  // optional uint64 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->team_id(), output);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->team_name(), output);
  }

  // optional uint32 team_type = 5;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_type(), output);
  }

  // optional uint64 sour_role_id = 6;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sour_role_id(), output);
  }

  // optional string sour_role_name = 7;
  if (has_sour_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sour_role_name().data(), this->sour_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sour_role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_invite_enter_team_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 dest_role_id = 2;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dest_role_id(), target);
  }

  // optional uint64 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->team_id(), target);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint32 team_type = 5;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_type(), target);
  }

  // optional uint64 sour_role_id = 6;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sour_role_id(), target);
  }

  // optional string sour_role_name = 7;
  if (has_sour_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sour_role_name().data(), this->sour_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sour_role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_invite_enter_team_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = ps_invite_enter_team_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 dest_role_id = 2;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional uint64 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 team_type = 5;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_type());
    }

    // optional uint64 sour_role_id = 6;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional string sour_role_name = 7;
    if (has_sour_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sour_role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_invite_enter_team_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_invite_enter_team_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_invite_enter_team_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_invite_enter_team_ntf::MergeFrom(const ps_invite_enter_team_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_sour_role_name()) {
      set_sour_role_name(from.sour_role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_invite_enter_team_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_invite_enter_team_ntf::CopyFrom(const ps_invite_enter_team_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_invite_enter_team_ntf::IsInitialized() const {

  return true;
}

void ps_invite_enter_team_ntf::Swap(ps_invite_enter_team_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_type_, other->team_type_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(sour_role_name_, other->sour_role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_invite_enter_team_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_invite_enter_team_ntf_descriptor_;
  metadata.reflection = ps_invite_enter_team_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_get_offical_rank_req::kProtoIdFieldNumber;
const int ps_get_offical_rank_req::kOfficeLvFieldNumber;
const int ps_get_offical_rank_req::kRoleIdFieldNumber;
const int ps_get_offical_rank_req::kStartFieldNumber;
const int ps_get_offical_rank_req::kEndFieldNumber;
#endif  // !_MSC_VER

ps_get_offical_rank_req::ps_get_offical_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_get_offical_rank_req::InitAsDefaultInstance() {
}

ps_get_offical_rank_req::ps_get_offical_rank_req(const ps_get_offical_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_get_offical_rank_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1100;
  office_lv_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_get_offical_rank_req::~ps_get_offical_rank_req() {
  SharedDtor();
}

void ps_get_offical_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_get_offical_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_get_offical_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_get_offical_rank_req_descriptor_;
}

const ps_get_offical_rank_req& ps_get_offical_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_get_offical_rank_req* ps_get_offical_rank_req::default_instance_ = NULL;

ps_get_offical_rank_req* ps_get_offical_rank_req::New() const {
  return new ps_get_offical_rank_req;
}

void ps_get_offical_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1100;
    office_lv_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    start_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_get_offical_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional uint32 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // optional uint32 end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_get_offical_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start(), output);
  }

  // optional uint32 end = 5;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_get_offical_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start(), target);
  }

  // optional uint32 end = 5;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_get_offical_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // optional uint32 end = 5;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_get_offical_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_get_offical_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_get_offical_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_get_offical_rank_req::MergeFrom(const ps_get_offical_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_get_offical_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_get_offical_rank_req::CopyFrom(const ps_get_offical_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_get_offical_rank_req::IsInitialized() const {

  return true;
}

void ps_get_offical_rank_req::Swap(ps_get_offical_rank_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_get_offical_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_get_offical_rank_req_descriptor_;
  metadata.reflection = ps_get_offical_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_get_offical_rank_ack::kProtoIdFieldNumber;
const int ps_get_offical_rank_ack::kRoleIdFieldNumber;
const int ps_get_offical_rank_ack::kRetFieldNumber;
const int ps_get_offical_rank_ack::kRankItemsFieldNumber;
#endif  // !_MSC_VER

ps_get_offical_rank_ack::ps_get_offical_rank_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_get_offical_rank_ack::InitAsDefaultInstance() {
}

ps_get_offical_rank_ack::ps_get_offical_rank_ack(const ps_get_offical_rank_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_get_offical_rank_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1101;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_get_offical_rank_ack::~ps_get_offical_rank_ack() {
  SharedDtor();
}

void ps_get_offical_rank_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_get_offical_rank_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_get_offical_rank_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_get_offical_rank_ack_descriptor_;
}

const ps_get_offical_rank_ack& ps_get_offical_rank_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_get_offical_rank_ack* ps_get_offical_rank_ack::default_instance_ = NULL;

ps_get_offical_rank_ack* ps_get_offical_rank_ack::New() const {
  return new ps_get_offical_rank_ack;
}

void ps_get_offical_rank_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1101;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  rank_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_get_offical_rank_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rank_items;
        break;
      }

      // repeated .SProtoSpace.offical_item_data rank_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rank_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_get_offical_rank_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 4;
  for (int i = 0; i < this->rank_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rank_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_get_offical_rank_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 4;
  for (int i = 0; i < this->rank_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rank_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_get_offical_rank_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.offical_item_data rank_items = 4;
  total_size += 1 * this->rank_items_size();
  for (int i = 0; i < this->rank_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_get_offical_rank_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_get_offical_rank_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_get_offical_rank_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_get_offical_rank_ack::MergeFrom(const ps_get_offical_rank_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_items_.MergeFrom(from.rank_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_get_offical_rank_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_get_offical_rank_ack::CopyFrom(const ps_get_offical_rank_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_get_offical_rank_ack::IsInitialized() const {

  return true;
}

void ps_get_offical_rank_ack::Swap(ps_get_offical_rank_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    rank_items_.Swap(&other->rank_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_get_offical_rank_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_get_offical_rank_ack_descriptor_;
  metadata.reflection = ps_get_offical_rank_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_global_offical_rank_req::kProtoIdFieldNumber;
const int ps_global_offical_rank_req::kStartFieldNumber;
const int ps_global_offical_rank_req::kEndFieldNumber;
#endif  // !_MSC_VER

ps_global_offical_rank_req::ps_global_offical_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_global_offical_rank_req::InitAsDefaultInstance() {
}

ps_global_offical_rank_req::ps_global_offical_rank_req(const ps_global_offical_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_global_offical_rank_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1552;
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_global_offical_rank_req::~ps_global_offical_rank_req() {
  SharedDtor();
}

void ps_global_offical_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_global_offical_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_global_offical_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_global_offical_rank_req_descriptor_;
}

const ps_global_offical_rank_req& ps_global_offical_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_global_offical_rank_req* ps_global_offical_rank_req::default_instance_ = NULL;

ps_global_offical_rank_req* ps_global_offical_rank_req::New() const {
  return new ps_global_offical_rank_req;
}

void ps_global_offical_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1552;
    start_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_global_offical_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start;
        break;
      }

      // optional uint32 start = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional uint32 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_global_offical_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 start = 2;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start(), output);
  }

  // optional uint32 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_global_offical_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 start = 2;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start(), target);
  }

  // optional uint32 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_global_offical_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 start = 2;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // optional uint32 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_global_offical_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_global_offical_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_global_offical_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_global_offical_rank_req::MergeFrom(const ps_global_offical_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_global_offical_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_global_offical_rank_req::CopyFrom(const ps_global_offical_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_global_offical_rank_req::IsInitialized() const {

  return true;
}

void ps_global_offical_rank_req::Swap(ps_global_offical_rank_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_global_offical_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_global_offical_rank_req_descriptor_;
  metadata.reflection = ps_global_offical_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_global_offical_rank_ack::kProtoIdFieldNumber;
const int ps_global_offical_rank_ack::kRetFieldNumber;
const int ps_global_offical_rank_ack::kMembersFieldNumber;
const int ps_global_offical_rank_ack::kMyDataFieldNumber;
#endif  // !_MSC_VER

ps_global_offical_rank_ack::ps_global_offical_rank_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_global_offical_rank_ack::InitAsDefaultInstance() {
  my_data_ = const_cast< ::SProtoSpace::offical_member_data*>(&::SProtoSpace::offical_member_data::default_instance());
}

ps_global_offical_rank_ack::ps_global_offical_rank_ack(const ps_global_offical_rank_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_global_offical_rank_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1553;
  ret_ = 0u;
  my_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_global_offical_rank_ack::~ps_global_offical_rank_ack() {
  SharedDtor();
}

void ps_global_offical_rank_ack::SharedDtor() {
  if (this != default_instance_) {
    delete my_data_;
  }
}

void ps_global_offical_rank_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_global_offical_rank_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_global_offical_rank_ack_descriptor_;
}

const ps_global_offical_rank_ack& ps_global_offical_rank_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_global_offical_rank_ack* ps_global_offical_rank_ack::default_instance_ = NULL;

ps_global_offical_rank_ack* ps_global_offical_rank_ack::New() const {
  return new ps_global_offical_rank_ack;
}

void ps_global_offical_rank_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1553;
    ret_ = 0u;
    if (has_my_data()) {
      if (my_data_ != NULL) my_data_->::SProtoSpace::offical_member_data::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_global_offical_rank_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .SProtoSpace.offical_member_data members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(34)) goto parse_my_data;
        break;
      }

      // optional .SProtoSpace.offical_member_data my_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_global_offical_rank_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.offical_member_data members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // optional .SProtoSpace.offical_member_data my_data = 4;
  if (has_my_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->my_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_global_offical_rank_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.offical_member_data members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // optional .SProtoSpace.offical_member_data my_data = 4;
  if (has_my_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->my_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_global_offical_rank_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_global_offical_rank_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.offical_member_data my_data = 4;
    if (has_my_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_data());
    }

  }
  // repeated .SProtoSpace.offical_member_data members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_global_offical_rank_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_global_offical_rank_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_global_offical_rank_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_global_offical_rank_ack::MergeFrom(const ps_global_offical_rank_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_my_data()) {
      mutable_my_data()->::SProtoSpace::offical_member_data::MergeFrom(from.my_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_global_offical_rank_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_global_offical_rank_ack::CopyFrom(const ps_global_offical_rank_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_global_offical_rank_ack::IsInitialized() const {

  return true;
}

void ps_global_offical_rank_ack::Swap(ps_global_offical_rank_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    members_.Swap(&other->members_);
    std::swap(my_data_, other->my_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_global_offical_rank_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_global_offical_rank_ack_descriptor_;
  metadata.reflection = ps_global_offical_rank_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_get_offical_rank_info_req::kProtoIdFieldNumber;
const int ps_get_offical_rank_info_req::kOfficeLvFieldNumber;
const int ps_get_offical_rank_info_req::kRoleIdFieldNumber;
const int ps_get_offical_rank_info_req::kStartFieldNumber;
const int ps_get_offical_rank_info_req::kLenFieldNumber;
const int ps_get_offical_rank_info_req::kShowFieldNumber;
#endif  // !_MSC_VER

ps_get_offical_rank_info_req::ps_get_offical_rank_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_get_offical_rank_info_req::InitAsDefaultInstance() {
}

ps_get_offical_rank_info_req::ps_get_offical_rank_info_req(const ps_get_offical_rank_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_get_offical_rank_info_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1538;
  office_lv_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  start_ = 0;
  len_ = 0;
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_get_offical_rank_info_req::~ps_get_offical_rank_info_req() {
  SharedDtor();
}

void ps_get_offical_rank_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_get_offical_rank_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_get_offical_rank_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_get_offical_rank_info_req_descriptor_;
}

const ps_get_offical_rank_info_req& ps_get_offical_rank_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_get_offical_rank_info_req* ps_get_offical_rank_info_req::default_instance_ = NULL;

ps_get_offical_rank_info_req* ps_get_offical_rank_info_req::New() const {
  return new ps_get_offical_rank_info_req;
}

void ps_get_offical_rank_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1538;
    office_lv_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    start_ = 0;
    len_ = 0;
    show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_get_offical_rank_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional int32 start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional int32 len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_show;
        break;
      }

      // optional bool show = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_get_offical_rank_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start(), output);
  }

  // optional int32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->len(), output);
  }

  // optional bool show = 6;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_get_offical_rank_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start(), target);
  }

  // optional int32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->len(), target);
  }

  // optional bool show = 6;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_get_offical_rank_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional bool show = 6;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_get_offical_rank_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_get_offical_rank_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_get_offical_rank_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_get_offical_rank_info_req::MergeFrom(const ps_get_offical_rank_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_get_offical_rank_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_get_offical_rank_info_req::CopyFrom(const ps_get_offical_rank_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_get_offical_rank_info_req::IsInitialized() const {

  return true;
}

void ps_get_offical_rank_info_req::Swap(ps_get_offical_rank_info_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_, other->start_);
    std::swap(len_, other->len_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_get_offical_rank_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_get_offical_rank_info_req_descriptor_;
  metadata.reflection = ps_get_offical_rank_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_get_offical_rank_info_ack::kProtoIdFieldNumber;
const int ps_get_offical_rank_info_ack::kRetFieldNumber;
const int ps_get_offical_rank_info_ack::kRoleIdFieldNumber;
const int ps_get_offical_rank_info_ack::kOfficalChallengeNumFieldNumber;
const int ps_get_offical_rank_info_ack::kOfficalChallengeMaxFieldNumber;
const int ps_get_offical_rank_info_ack::kMyItemFieldNumber;
const int ps_get_offical_rank_info_ack::kRankItemsFieldNumber;
const int ps_get_offical_rank_info_ack::kEquipsFieldNumber;
const int ps_get_offical_rank_info_ack::kCountFieldNumber;
#endif  // !_MSC_VER

ps_get_offical_rank_info_ack::ps_get_offical_rank_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_get_offical_rank_info_ack::InitAsDefaultInstance() {
  my_item_ = const_cast< ::SProtoSpace::offical_item_data*>(&::SProtoSpace::offical_item_data::default_instance());
}

ps_get_offical_rank_info_ack::ps_get_offical_rank_info_ack(const ps_get_offical_rank_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_get_offical_rank_info_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1539;
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  offical_challenge_num_ = 0;
  offical_challenge_max_ = 0;
  my_item_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_get_offical_rank_info_ack::~ps_get_offical_rank_info_ack() {
  SharedDtor();
}

void ps_get_offical_rank_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete my_item_;
  }
}

void ps_get_offical_rank_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_get_offical_rank_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_get_offical_rank_info_ack_descriptor_;
}

const ps_get_offical_rank_info_ack& ps_get_offical_rank_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_get_offical_rank_info_ack* ps_get_offical_rank_info_ack::default_instance_ = NULL;

ps_get_offical_rank_info_ack* ps_get_offical_rank_info_ack::New() const {
  return new ps_get_offical_rank_info_ack;
}

void ps_get_offical_rank_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1539;
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    offical_challenge_num_ = 0;
    offical_challenge_max_ = 0;
    if (has_my_item()) {
      if (my_item_ != NULL) my_item_->::SProtoSpace::offical_item_data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    count_ = 0;
  }
  rank_items_.Clear();
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_get_offical_rank_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offical_challenge_num;
        break;
      }

      // optional int32 offical_challenge_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_num_)));
          set_has_offical_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_offical_challenge_max;
        break;
      }

      // optional int32 offical_challenge_max = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_max_)));
          set_has_offical_challenge_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_my_item;
        break;
      }

      // optional .SProtoSpace.offical_item_data my_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_items;
        break;
      }

      // repeated .SProtoSpace.offical_item_data rank_items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_items;
        if (input->ExpectTag(66)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.role_show_role_equipped equips = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equips;
        if (input->ExpectTag(72)) goto parse_count;
        break;
      }

      // optional int32 count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_get_offical_rank_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 offical_challenge_num = 4;
  if (has_offical_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offical_challenge_num(), output);
  }

  // optional int32 offical_challenge_max = 5;
  if (has_offical_challenge_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->offical_challenge_max(), output);
  }

  // optional .SProtoSpace.offical_item_data my_item = 6;
  if (has_my_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->my_item(), output);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  for (int i = 0; i < this->rank_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rank_items(i), output);
  }

  // repeated .SProtoSpace.role_show_role_equipped equips = 8;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equips(i), output);
  }

  // optional int32 count = 9;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_get_offical_rank_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 offical_challenge_num = 4;
  if (has_offical_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offical_challenge_num(), target);
  }

  // optional int32 offical_challenge_max = 5;
  if (has_offical_challenge_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->offical_challenge_max(), target);
  }

  // optional .SProtoSpace.offical_item_data my_item = 6;
  if (has_my_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->my_item(), target);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  for (int i = 0; i < this->rank_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rank_items(i), target);
  }

  // repeated .SProtoSpace.role_show_role_equipped equips = 8;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equips(i), target);
  }

  // optional int32 count = 9;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_get_offical_rank_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_get_offical_rank_info_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 offical_challenge_num = 4;
    if (has_offical_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_num());
    }

    // optional int32 offical_challenge_max = 5;
    if (has_offical_challenge_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_max());
    }

    // optional .SProtoSpace.offical_item_data my_item = 6;
    if (has_my_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_item());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 count = 9;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  total_size += 1 * this->rank_items_size();
  for (int i = 0; i < this->rank_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_items(i));
  }

  // repeated .SProtoSpace.role_show_role_equipped equips = 8;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_get_offical_rank_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_get_offical_rank_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_get_offical_rank_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_get_offical_rank_info_ack::MergeFrom(const ps_get_offical_rank_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_items_.MergeFrom(from.rank_items_);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_offical_challenge_num()) {
      set_offical_challenge_num(from.offical_challenge_num());
    }
    if (from.has_offical_challenge_max()) {
      set_offical_challenge_max(from.offical_challenge_max());
    }
    if (from.has_my_item()) {
      mutable_my_item()->::SProtoSpace::offical_item_data::MergeFrom(from.my_item());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_get_offical_rank_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_get_offical_rank_info_ack::CopyFrom(const ps_get_offical_rank_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_get_offical_rank_info_ack::IsInitialized() const {

  return true;
}

void ps_get_offical_rank_info_ack::Swap(ps_get_offical_rank_info_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(offical_challenge_num_, other->offical_challenge_num_);
    std::swap(offical_challenge_max_, other->offical_challenge_max_);
    std::swap(my_item_, other->my_item_);
    rank_items_.Swap(&other->rank_items_);
    equips_.Swap(&other->equips_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_get_offical_rank_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_get_offical_rank_info_ack_descriptor_;
  metadata.reflection = ps_get_offical_rank_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_add_robot_to_offical_arena_req::kProtoIdFieldNumber;
const int ps_add_robot_to_offical_arena_req::kItemDataFieldNumber;
const int ps_add_robot_to_offical_arena_req::kOfficeLvFieldNumber;
#endif  // !_MSC_VER

ps_add_robot_to_offical_arena_req::ps_add_robot_to_offical_arena_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_add_robot_to_offical_arena_req::InitAsDefaultInstance() {
  item_data_ = const_cast< ::SProtoSpace::arena_item_data*>(&::SProtoSpace::arena_item_data::default_instance());
}

ps_add_robot_to_offical_arena_req::ps_add_robot_to_offical_arena_req(const ps_add_robot_to_offical_arena_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_add_robot_to_offical_arena_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1102;
  item_data_ = NULL;
  office_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_add_robot_to_offical_arena_req::~ps_add_robot_to_offical_arena_req() {
  SharedDtor();
}

void ps_add_robot_to_offical_arena_req::SharedDtor() {
  if (this != default_instance_) {
    delete item_data_;
  }
}

void ps_add_robot_to_offical_arena_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_add_robot_to_offical_arena_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_add_robot_to_offical_arena_req_descriptor_;
}

const ps_add_robot_to_offical_arena_req& ps_add_robot_to_offical_arena_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_add_robot_to_offical_arena_req* ps_add_robot_to_offical_arena_req::default_instance_ = NULL;

ps_add_robot_to_offical_arena_req* ps_add_robot_to_offical_arena_req::New() const {
  return new ps_add_robot_to_offical_arena_req;
}

void ps_add_robot_to_offical_arena_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1102;
    if (has_item_data()) {
      if (item_data_ != NULL) item_data_->::SProtoSpace::arena_item_data::Clear();
    }
    office_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_add_robot_to_offical_arena_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_data;
        break;
      }

      // optional .SProtoSpace.arena_item_data item_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_add_robot_to_offical_arena_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.arena_item_data item_data = 2;
  if (has_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_data(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 3;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->office_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_add_robot_to_offical_arena_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.arena_item_data item_data = 2;
  if (has_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_data(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 3;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->office_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_add_robot_to_offical_arena_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.arena_item_data item_data = 2;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_data());
    }

    // optional .SProtoSpace.EGrade office_lv = 3;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_add_robot_to_offical_arena_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_add_robot_to_offical_arena_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_add_robot_to_offical_arena_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_add_robot_to_offical_arena_req::MergeFrom(const ps_add_robot_to_offical_arena_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_item_data()) {
      mutable_item_data()->::SProtoSpace::arena_item_data::MergeFrom(from.item_data());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_add_robot_to_offical_arena_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_add_robot_to_offical_arena_req::CopyFrom(const ps_add_robot_to_offical_arena_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_add_robot_to_offical_arena_req::IsInitialized() const {

  if (has_item_data()) {
    if (!this->item_data().IsInitialized()) return false;
  }
  return true;
}

void ps_add_robot_to_offical_arena_req::Swap(ps_add_robot_to_offical_arena_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(item_data_, other->item_data_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_add_robot_to_offical_arena_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_add_robot_to_offical_arena_req_descriptor_;
  metadata.reflection = ps_add_robot_to_offical_arena_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_add_robot_to_offical_arena_ack::kProtoIdFieldNumber;
const int ps_add_robot_to_offical_arena_ack::kRoleIdFieldNumber;
const int ps_add_robot_to_offical_arena_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_add_robot_to_offical_arena_ack::ps_add_robot_to_offical_arena_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_add_robot_to_offical_arena_ack::InitAsDefaultInstance() {
}

ps_add_robot_to_offical_arena_ack::ps_add_robot_to_offical_arena_ack(const ps_add_robot_to_offical_arena_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_add_robot_to_offical_arena_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1103;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_add_robot_to_offical_arena_ack::~ps_add_robot_to_offical_arena_ack() {
  SharedDtor();
}

void ps_add_robot_to_offical_arena_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_add_robot_to_offical_arena_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_add_robot_to_offical_arena_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_add_robot_to_offical_arena_ack_descriptor_;
}

const ps_add_robot_to_offical_arena_ack& ps_add_robot_to_offical_arena_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_add_robot_to_offical_arena_ack* ps_add_robot_to_offical_arena_ack::default_instance_ = NULL;

ps_add_robot_to_offical_arena_ack* ps_add_robot_to_offical_arena_ack::New() const {
  return new ps_add_robot_to_offical_arena_ack;
}

void ps_add_robot_to_offical_arena_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1103;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_add_robot_to_offical_arena_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_add_robot_to_offical_arena_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_add_robot_to_offical_arena_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_add_robot_to_offical_arena_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_add_robot_to_offical_arena_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_add_robot_to_offical_arena_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_add_robot_to_offical_arena_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_add_robot_to_offical_arena_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_add_robot_to_offical_arena_ack::MergeFrom(const ps_add_robot_to_offical_arena_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_add_robot_to_offical_arena_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_add_robot_to_offical_arena_ack::CopyFrom(const ps_add_robot_to_offical_arena_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_add_robot_to_offical_arena_ack::IsInitialized() const {

  return true;
}

void ps_add_robot_to_offical_arena_ack::Swap(ps_add_robot_to_offical_arena_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_add_robot_to_offical_arena_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_add_robot_to_offical_arena_ack_descriptor_;
  metadata.reflection = ps_add_robot_to_offical_arena_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_challenge_offical_rank_req::kProtoIdFieldNumber;
const int ps_challenge_offical_rank_req::kSourRoleIdFieldNumber;
const int ps_challenge_offical_rank_req::kDestRoleIdFieldNumber;
const int ps_challenge_offical_rank_req::kOfficeLvFieldNumber;
#endif  // !_MSC_VER

ps_challenge_offical_rank_req::ps_challenge_offical_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_challenge_offical_rank_req::InitAsDefaultInstance() {
}

ps_challenge_offical_rank_req::ps_challenge_offical_rank_req(const ps_challenge_offical_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_challenge_offical_rank_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1104;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  office_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_challenge_offical_rank_req::~ps_challenge_offical_rank_req() {
  SharedDtor();
}

void ps_challenge_offical_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_challenge_offical_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_challenge_offical_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_challenge_offical_rank_req_descriptor_;
}

const ps_challenge_offical_rank_req& ps_challenge_offical_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_challenge_offical_rank_req* ps_challenge_offical_rank_req::default_instance_ = NULL;

ps_challenge_offical_rank_req* ps_challenge_offical_rank_req::New() const {
  return new ps_challenge_offical_rank_req;
}

void ps_challenge_offical_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1104;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    office_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_challenge_offical_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_challenge_offical_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 sour_role_id = 2;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sour_role_id(), output);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dest_role_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 4;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->office_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_challenge_offical_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 sour_role_id = 2;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sour_role_id(), target);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dest_role_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 4;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->office_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_challenge_offical_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 sour_role_id = 2;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional uint64 dest_role_id = 3;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 4;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_challenge_offical_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_challenge_offical_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_challenge_offical_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_challenge_offical_rank_req::MergeFrom(const ps_challenge_offical_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_challenge_offical_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_challenge_offical_rank_req::CopyFrom(const ps_challenge_offical_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_challenge_offical_rank_req::IsInitialized() const {

  return true;
}

void ps_challenge_offical_rank_req::Swap(ps_challenge_offical_rank_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_challenge_offical_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_challenge_offical_rank_req_descriptor_;
  metadata.reflection = ps_challenge_offical_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_challenge_offical_rank_ack::kProtoIdFieldNumber;
const int ps_challenge_offical_rank_ack::kOfficeLvFieldNumber;
const int ps_challenge_offical_rank_ack::kSourRoleIdFieldNumber;
const int ps_challenge_offical_rank_ack::kSourDataFieldNumber;
const int ps_challenge_offical_rank_ack::kDestRoleIdFieldNumber;
const int ps_challenge_offical_rank_ack::kDestDataFieldNumber;
const int ps_challenge_offical_rank_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_challenge_offical_rank_ack::ps_challenge_offical_rank_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_challenge_offical_rank_ack::InitAsDefaultInstance() {
  sour_data_ = const_cast< ::SProtoSpace::arena_item_data*>(&::SProtoSpace::arena_item_data::default_instance());
  dest_data_ = const_cast< ::SProtoSpace::arena_item_data*>(&::SProtoSpace::arena_item_data::default_instance());
}

ps_challenge_offical_rank_ack::ps_challenge_offical_rank_ack(const ps_challenge_offical_rank_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_challenge_offical_rank_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1105;
  office_lv_ = 0;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  sour_data_ = NULL;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  dest_data_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_challenge_offical_rank_ack::~ps_challenge_offical_rank_ack() {
  SharedDtor();
}

void ps_challenge_offical_rank_ack::SharedDtor() {
  if (this != default_instance_) {
    delete sour_data_;
    delete dest_data_;
  }
}

void ps_challenge_offical_rank_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_challenge_offical_rank_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_challenge_offical_rank_ack_descriptor_;
}

const ps_challenge_offical_rank_ack& ps_challenge_offical_rank_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_challenge_offical_rank_ack* ps_challenge_offical_rank_ack::default_instance_ = NULL;

ps_challenge_offical_rank_ack* ps_challenge_offical_rank_ack::New() const {
  return new ps_challenge_offical_rank_ack;
}

void ps_challenge_offical_rank_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1105;
    office_lv_ = 0;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_sour_data()) {
      if (sour_data_ != NULL) sour_data_->::SProtoSpace::arena_item_data::Clear();
    }
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_dest_data()) {
      if (dest_data_ != NULL) dest_data_->::SProtoSpace::arena_item_data::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_challenge_offical_rank_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sour_data;
        break;
      }

      // optional .SProtoSpace.arena_item_data sour_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sour_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dest_data;
        break;
      }

      // optional .SProtoSpace.arena_item_data dest_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_challenge_offical_rank_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 sour_role_id = 3;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sour_role_id(), output);
  }

  // optional .SProtoSpace.arena_item_data sour_data = 4;
  if (has_sour_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sour_data(), output);
  }

  // optional uint64 dest_role_id = 5;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dest_role_id(), output);
  }

  // optional .SProtoSpace.arena_item_data dest_data = 6;
  if (has_dest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dest_data(), output);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_challenge_offical_rank_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 sour_role_id = 3;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sour_role_id(), target);
  }

  // optional .SProtoSpace.arena_item_data sour_data = 4;
  if (has_sour_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sour_data(), target);
  }

  // optional uint64 dest_role_id = 5;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dest_role_id(), target);
  }

  // optional .SProtoSpace.arena_item_data dest_data = 6;
  if (has_dest_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dest_data(), target);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_challenge_offical_rank_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_challenge_offical_rank_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 sour_role_id = 3;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional .SProtoSpace.arena_item_data sour_data = 4;
    if (has_sour_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sour_data());
    }

    // optional uint64 dest_role_id = 5;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional .SProtoSpace.arena_item_data dest_data = 6;
    if (has_dest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_data());
    }

    // optional uint32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_challenge_offical_rank_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_challenge_offical_rank_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_challenge_offical_rank_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_challenge_offical_rank_ack::MergeFrom(const ps_challenge_offical_rank_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_sour_data()) {
      mutable_sour_data()->::SProtoSpace::arena_item_data::MergeFrom(from.sour_data());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_dest_data()) {
      mutable_dest_data()->::SProtoSpace::arena_item_data::MergeFrom(from.dest_data());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_challenge_offical_rank_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_challenge_offical_rank_ack::CopyFrom(const ps_challenge_offical_rank_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_challenge_offical_rank_ack::IsInitialized() const {

  if (has_sour_data()) {
    if (!this->sour_data().IsInitialized()) return false;
  }
  if (has_dest_data()) {
    if (!this->dest_data().IsInitialized()) return false;
  }
  return true;
}

void ps_challenge_offical_rank_ack::Swap(ps_challenge_offical_rank_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(sour_data_, other->sour_data_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(dest_data_, other->dest_data_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_challenge_offical_rank_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_challenge_offical_rank_ack_descriptor_;
  metadata.reflection = ps_challenge_offical_rank_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_update_challenge_result_req::kProtoIdFieldNumber;
const int ps_update_challenge_result_req::kOfficeLvFieldNumber;
const int ps_update_challenge_result_req::kSourRoleIdFieldNumber;
const int ps_update_challenge_result_req::kDestRoleIdFieldNumber;
const int ps_update_challenge_result_req::kWinFieldNumber;
const int ps_update_challenge_result_req::kBattleIdFieldNumber;
#endif  // !_MSC_VER

ps_update_challenge_result_req::ps_update_challenge_result_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_update_challenge_result_req::InitAsDefaultInstance() {
}

ps_update_challenge_result_req::ps_update_challenge_result_req(const ps_update_challenge_result_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_update_challenge_result_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1106;
  office_lv_ = 0;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  win_ = false;
  battle_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_update_challenge_result_req::~ps_update_challenge_result_req() {
  SharedDtor();
}

void ps_update_challenge_result_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_update_challenge_result_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_update_challenge_result_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_update_challenge_result_req_descriptor_;
}

const ps_update_challenge_result_req& ps_update_challenge_result_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_update_challenge_result_req* ps_update_challenge_result_req::default_instance_ = NULL;

ps_update_challenge_result_req* ps_update_challenge_result_req::New() const {
  return new ps_update_challenge_result_req;
}

void ps_update_challenge_result_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1106;
    office_lv_ = 0;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    win_ = false;
    battle_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_update_challenge_result_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win;
        break;
      }

      // optional bool win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battle_id;
        break;
      }

      // optional uint64 battle_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_update_challenge_result_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 sour_role_id = 3;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sour_role_id(), output);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dest_role_id(), output);
  }

  // optional bool win = 5;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->win(), output);
  }

  // optional uint64 battle_id = 6;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->battle_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_update_challenge_result_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 sour_role_id = 3;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sour_role_id(), target);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dest_role_id(), target);
  }

  // optional bool win = 5;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->win(), target);
  }

  // optional uint64 battle_id = 6;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->battle_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_update_challenge_result_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 sour_role_id = 3;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional uint64 dest_role_id = 4;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional bool win = 5;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional uint64 battle_id = 6;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_update_challenge_result_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_update_challenge_result_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_update_challenge_result_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_update_challenge_result_req::MergeFrom(const ps_update_challenge_result_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_update_challenge_result_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_update_challenge_result_req::CopyFrom(const ps_update_challenge_result_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_update_challenge_result_req::IsInitialized() const {

  return true;
}

void ps_update_challenge_result_req::Swap(ps_update_challenge_result_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(win_, other->win_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_update_challenge_result_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_update_challenge_result_req_descriptor_;
  metadata.reflection = ps_update_challenge_result_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_update_challenge_result_ack::kProtoIdFieldNumber;
const int ps_update_challenge_result_ack::kRetFieldNumber;
const int ps_update_challenge_result_ack::kOfficeLvFieldNumber;
const int ps_update_challenge_result_ack::kDestRoleIdFieldNumber;
const int ps_update_challenge_result_ack::kDestOlderRankingidFieldNumber;
const int ps_update_challenge_result_ack::kDestNewRankingidFieldNumber;
const int ps_update_challenge_result_ack::kSourRoleIdFieldNumber;
const int ps_update_challenge_result_ack::kSourOlderRankingidFieldNumber;
const int ps_update_challenge_result_ack::kSourNewRankingidFieldNumber;
const int ps_update_challenge_result_ack::kBattleIdFieldNumber;
const int ps_update_challenge_result_ack::kWinFieldNumber;
#endif  // !_MSC_VER

ps_update_challenge_result_ack::ps_update_challenge_result_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_update_challenge_result_ack::InitAsDefaultInstance() {
}

ps_update_challenge_result_ack::ps_update_challenge_result_ack(const ps_update_challenge_result_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_update_challenge_result_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1107;
  ret_ = 0u;
  office_lv_ = 0;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  dest_older_rankingid_ = 0;
  dest_new_rankingid_ = 0;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  sour_older_rankingid_ = 0;
  sour_new_rankingid_ = 0;
  battle_id_ = GOOGLE_ULONGLONG(0);
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_update_challenge_result_ack::~ps_update_challenge_result_ack() {
  SharedDtor();
}

void ps_update_challenge_result_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_update_challenge_result_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_update_challenge_result_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_update_challenge_result_ack_descriptor_;
}

const ps_update_challenge_result_ack& ps_update_challenge_result_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_update_challenge_result_ack* ps_update_challenge_result_ack::default_instance_ = NULL;

ps_update_challenge_result_ack* ps_update_challenge_result_ack::New() const {
  return new ps_update_challenge_result_ack;
}

void ps_update_challenge_result_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1107;
    ret_ = 0u;
    office_lv_ = 0;
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    dest_older_rankingid_ = 0;
    dest_new_rankingid_ = 0;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    sour_older_rankingid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sour_new_rankingid_ = 0;
    battle_id_ = GOOGLE_ULONGLONG(0);
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_update_challenge_result_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dest_older_rankingid;
        break;
      }

      // optional int32 dest_older_rankingid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_older_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_older_rankingid_)));
          set_has_dest_older_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dest_new_rankingid;
        break;
      }

      // optional int32 dest_new_rankingid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_new_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_new_rankingid_)));
          set_has_dest_new_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sour_older_rankingid;
        break;
      }

      // optional int32 sour_older_rankingid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_older_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sour_older_rankingid_)));
          set_has_sour_older_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sour_new_rankingid;
        break;
      }

      // optional int32 sour_new_rankingid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_new_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sour_new_rankingid_)));
          set_has_sour_new_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_battle_id;
        break;
      }

      // optional uint64 battle_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_win;
        break;
      }

      // optional bool win = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_update_challenge_result_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 3;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->office_lv(), output);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dest_role_id(), output);
  }

  // optional int32 dest_older_rankingid = 5;
  if (has_dest_older_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dest_older_rankingid(), output);
  }

  // optional int32 dest_new_rankingid = 6;
  if (has_dest_new_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dest_new_rankingid(), output);
  }

  // optional uint64 sour_role_id = 7;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sour_role_id(), output);
  }

  // optional int32 sour_older_rankingid = 8;
  if (has_sour_older_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sour_older_rankingid(), output);
  }

  // optional int32 sour_new_rankingid = 9;
  if (has_sour_new_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sour_new_rankingid(), output);
  }

  // optional uint64 battle_id = 10;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->battle_id(), output);
  }

  // optional bool win = 11;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_update_challenge_result_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 3;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->office_lv(), target);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dest_role_id(), target);
  }

  // optional int32 dest_older_rankingid = 5;
  if (has_dest_older_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dest_older_rankingid(), target);
  }

  // optional int32 dest_new_rankingid = 6;
  if (has_dest_new_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dest_new_rankingid(), target);
  }

  // optional uint64 sour_role_id = 7;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sour_role_id(), target);
  }

  // optional int32 sour_older_rankingid = 8;
  if (has_sour_older_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sour_older_rankingid(), target);
  }

  // optional int32 sour_new_rankingid = 9;
  if (has_sour_new_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sour_new_rankingid(), target);
  }

  // optional uint64 battle_id = 10;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->battle_id(), target);
  }

  // optional bool win = 11;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_update_challenge_result_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_update_challenge_result_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.EGrade office_lv = 3;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 dest_role_id = 4;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional int32 dest_older_rankingid = 5;
    if (has_dest_older_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_older_rankingid());
    }

    // optional int32 dest_new_rankingid = 6;
    if (has_dest_new_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_new_rankingid());
    }

    // optional uint64 sour_role_id = 7;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional int32 sour_older_rankingid = 8;
    if (has_sour_older_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sour_older_rankingid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sour_new_rankingid = 9;
    if (has_sour_new_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sour_new_rankingid());
    }

    // optional uint64 battle_id = 10;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_id());
    }

    // optional bool win = 11;
    if (has_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_update_challenge_result_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_update_challenge_result_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_update_challenge_result_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_update_challenge_result_ack::MergeFrom(const ps_update_challenge_result_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_dest_older_rankingid()) {
      set_dest_older_rankingid(from.dest_older_rankingid());
    }
    if (from.has_dest_new_rankingid()) {
      set_dest_new_rankingid(from.dest_new_rankingid());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_sour_older_rankingid()) {
      set_sour_older_rankingid(from.sour_older_rankingid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sour_new_rankingid()) {
      set_sour_new_rankingid(from.sour_new_rankingid());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_update_challenge_result_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_update_challenge_result_ack::CopyFrom(const ps_update_challenge_result_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_update_challenge_result_ack::IsInitialized() const {

  return true;
}

void ps_update_challenge_result_ack::Swap(ps_update_challenge_result_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(dest_older_rankingid_, other->dest_older_rankingid_);
    std::swap(dest_new_rankingid_, other->dest_new_rankingid_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(sour_older_rankingid_, other->sour_older_rankingid_);
    std::swap(sour_new_rankingid_, other->sour_new_rankingid_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_update_challenge_result_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_update_challenge_result_ack_descriptor_;
  metadata.reflection = ps_update_challenge_result_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_examine_battle_req::kProtoIdFieldNumber;
const int offical_examine_battle_req::kOfficeLvFieldNumber;
const int offical_examine_battle_req::kSourDataFieldNumber;
const int offical_examine_battle_req::kDestDataFieldNumber;
#endif  // !_MSC_VER

offical_examine_battle_req::offical_examine_battle_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_examine_battle_req::InitAsDefaultInstance() {
  sour_data_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
  dest_data_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
}

offical_examine_battle_req::offical_examine_battle_req(const offical_examine_battle_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_examine_battle_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1108;
  office_lv_ = 0;
  sour_data_ = NULL;
  dest_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_examine_battle_req::~offical_examine_battle_req() {
  SharedDtor();
}

void offical_examine_battle_req::SharedDtor() {
  if (this != default_instance_) {
    delete sour_data_;
    delete dest_data_;
  }
}

void offical_examine_battle_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_examine_battle_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_examine_battle_req_descriptor_;
}

const offical_examine_battle_req& offical_examine_battle_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

offical_examine_battle_req* offical_examine_battle_req::default_instance_ = NULL;

offical_examine_battle_req* offical_examine_battle_req::New() const {
  return new offical_examine_battle_req;
}

void offical_examine_battle_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1108;
    office_lv_ = 0;
    if (has_sour_data()) {
      if (sour_data_ != NULL) sour_data_->::SProtoSpace::battle_role_info::Clear();
    }
    if (has_dest_data()) {
      if (dest_data_ != NULL) dest_data_->::SProtoSpace::battle_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_examine_battle_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sour_data;
        break;
      }

      // optional .SProtoSpace.battle_role_info sour_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sour_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dest_data;
        break;
      }

      // optional .SProtoSpace.battle_role_info dest_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dest_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_examine_battle_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional .SProtoSpace.battle_role_info sour_data = 3;
  if (has_sour_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sour_data(), output);
  }

  // optional .SProtoSpace.battle_role_info dest_data = 4;
  if (has_dest_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dest_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_examine_battle_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional .SProtoSpace.battle_role_info sour_data = 3;
  if (has_sour_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sour_data(), target);
  }

  // optional .SProtoSpace.battle_role_info dest_data = 4;
  if (has_dest_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dest_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_examine_battle_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional .SProtoSpace.battle_role_info sour_data = 3;
    if (has_sour_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sour_data());
    }

    // optional .SProtoSpace.battle_role_info dest_data = 4;
    if (has_dest_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dest_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_examine_battle_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_examine_battle_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_examine_battle_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_examine_battle_req::MergeFrom(const offical_examine_battle_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_sour_data()) {
      mutable_sour_data()->::SProtoSpace::battle_role_info::MergeFrom(from.sour_data());
    }
    if (from.has_dest_data()) {
      mutable_dest_data()->::SProtoSpace::battle_role_info::MergeFrom(from.dest_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_examine_battle_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_examine_battle_req::CopyFrom(const offical_examine_battle_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_examine_battle_req::IsInitialized() const {

  if (has_sour_data()) {
    if (!this->sour_data().IsInitialized()) return false;
  }
  if (has_dest_data()) {
    if (!this->dest_data().IsInitialized()) return false;
  }
  return true;
}

void offical_examine_battle_req::Swap(offical_examine_battle_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(sour_data_, other->sour_data_);
    std::swap(dest_data_, other->dest_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_examine_battle_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_examine_battle_req_descriptor_;
  metadata.reflection = offical_examine_battle_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_examine_battle_ack::kProtoIdFieldNumber;
const int offical_examine_battle_ack::kOfficeLvFieldNumber;
const int offical_examine_battle_ack::kSourIdFieldNumber;
const int offical_examine_battle_ack::kDestIdFieldNumber;
const int offical_examine_battle_ack::kSourScoreFieldNumber;
const int offical_examine_battle_ack::kDestScoreFieldNumber;
const int offical_examine_battle_ack::kWinFieldNumber;
#endif  // !_MSC_VER

offical_examine_battle_ack::offical_examine_battle_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_examine_battle_ack::InitAsDefaultInstance() {
}

offical_examine_battle_ack::offical_examine_battle_ack(const offical_examine_battle_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_examine_battle_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1109;
  office_lv_ = 0;
  sour_id_ = GOOGLE_ULONGLONG(0);
  dest_id_ = GOOGLE_ULONGLONG(0);
  sour_score_ = 0;
  dest_score_ = 0;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_examine_battle_ack::~offical_examine_battle_ack() {
  SharedDtor();
}

void offical_examine_battle_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_examine_battle_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_examine_battle_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_examine_battle_ack_descriptor_;
}

const offical_examine_battle_ack& offical_examine_battle_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

offical_examine_battle_ack* offical_examine_battle_ack::default_instance_ = NULL;

offical_examine_battle_ack* offical_examine_battle_ack::New() const {
  return new offical_examine_battle_ack;
}

void offical_examine_battle_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1109;
    office_lv_ = 0;
    sour_id_ = GOOGLE_ULONGLONG(0);
    dest_id_ = GOOGLE_ULONGLONG(0);
    sour_score_ = 0;
    dest_score_ = 0;
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_examine_battle_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sour_id;
        break;
      }

      // optional uint64 sour_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_id_)));
          set_has_sour_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_id;
        break;
      }

      // optional uint64 dest_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_id_)));
          set_has_dest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sour_score;
        break;
      }

      // optional int32 sour_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sour_score_)));
          set_has_sour_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dest_score;
        break;
      }

      // optional int32 dest_score = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_score_)));
          set_has_dest_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_win;
        break;
      }

      // optional bool win = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_examine_battle_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 sour_id = 3;
  if (has_sour_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sour_id(), output);
  }

  // optional uint64 dest_id = 4;
  if (has_dest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dest_id(), output);
  }

  // optional int32 sour_score = 5;
  if (has_sour_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sour_score(), output);
  }

  // optional int32 dest_score = 6;
  if (has_dest_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dest_score(), output);
  }

  // optional bool win = 7;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_examine_battle_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 sour_id = 3;
  if (has_sour_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sour_id(), target);
  }

  // optional uint64 dest_id = 4;
  if (has_dest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dest_id(), target);
  }

  // optional int32 sour_score = 5;
  if (has_sour_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sour_score(), target);
  }

  // optional int32 dest_score = 6;
  if (has_dest_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dest_score(), target);
  }

  // optional bool win = 7;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_examine_battle_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_examine_battle_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 sour_id = 3;
    if (has_sour_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_id());
    }

    // optional uint64 dest_id = 4;
    if (has_dest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_id());
    }

    // optional int32 sour_score = 5;
    if (has_sour_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sour_score());
    }

    // optional int32 dest_score = 6;
    if (has_dest_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_score());
    }

    // optional bool win = 7;
    if (has_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_examine_battle_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_examine_battle_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_examine_battle_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_examine_battle_ack::MergeFrom(const offical_examine_battle_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_sour_id()) {
      set_sour_id(from.sour_id());
    }
    if (from.has_dest_id()) {
      set_dest_id(from.dest_id());
    }
    if (from.has_sour_score()) {
      set_sour_score(from.sour_score());
    }
    if (from.has_dest_score()) {
      set_dest_score(from.dest_score());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_examine_battle_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_examine_battle_ack::CopyFrom(const offical_examine_battle_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_examine_battle_ack::IsInitialized() const {

  return true;
}

void offical_examine_battle_ack::Swap(offical_examine_battle_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(sour_id_, other->sour_id_);
    std::swap(dest_id_, other->dest_id_);
    std::swap(sour_score_, other->sour_score_);
    std::swap(dest_score_, other->dest_score_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_examine_battle_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_examine_battle_ack_descriptor_;
  metadata.reflection = offical_examine_battle_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_offical_apply_battle_result_req::kProtoIdFieldNumber;
const int ps_offical_apply_battle_result_req::kOfficeLvFieldNumber;
const int ps_offical_apply_battle_result_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

ps_offical_apply_battle_result_req::ps_offical_apply_battle_result_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_offical_apply_battle_result_req::InitAsDefaultInstance() {
}

ps_offical_apply_battle_result_req::ps_offical_apply_battle_result_req(const ps_offical_apply_battle_result_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_offical_apply_battle_result_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1110;
  office_lv_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_offical_apply_battle_result_req::~ps_offical_apply_battle_result_req() {
  SharedDtor();
}

void ps_offical_apply_battle_result_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_offical_apply_battle_result_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_offical_apply_battle_result_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_offical_apply_battle_result_req_descriptor_;
}

const ps_offical_apply_battle_result_req& ps_offical_apply_battle_result_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_offical_apply_battle_result_req* ps_offical_apply_battle_result_req::default_instance_ = NULL;

ps_offical_apply_battle_result_req* ps_offical_apply_battle_result_req::New() const {
  return new ps_offical_apply_battle_result_req;
}

void ps_offical_apply_battle_result_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1110;
    office_lv_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_offical_apply_battle_result_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_offical_apply_battle_result_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_offical_apply_battle_result_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_offical_apply_battle_result_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_offical_apply_battle_result_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_offical_apply_battle_result_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_offical_apply_battle_result_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_offical_apply_battle_result_req::MergeFrom(const ps_offical_apply_battle_result_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_offical_apply_battle_result_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_offical_apply_battle_result_req::CopyFrom(const ps_offical_apply_battle_result_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_offical_apply_battle_result_req::IsInitialized() const {

  return true;
}

void ps_offical_apply_battle_result_req::Swap(ps_offical_apply_battle_result_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_offical_apply_battle_result_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_offical_apply_battle_result_req_descriptor_;
  metadata.reflection = ps_offical_apply_battle_result_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_offical_apply_battle_result_ack::kProtoIdFieldNumber;
const int ps_offical_apply_battle_result_ack::kOfficeLvFieldNumber;
const int ps_offical_apply_battle_result_ack::kRoleIdFieldNumber;
const int ps_offical_apply_battle_result_ack::kTimeFieldNumber;
const int ps_offical_apply_battle_result_ack::kMyPlaceIdFieldNumber;
const int ps_offical_apply_battle_result_ack::kDataFieldNumber;
const int ps_offical_apply_battle_result_ack::kMydataFieldNumber;
const int ps_offical_apply_battle_result_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ps_offical_apply_battle_result_ack::ps_offical_apply_battle_result_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_offical_apply_battle_result_ack::InitAsDefaultInstance() {
}

ps_offical_apply_battle_result_ack::ps_offical_apply_battle_result_ack(const ps_offical_apply_battle_result_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_offical_apply_battle_result_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1111;
  office_lv_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  time_ = 0;
  my_place_id_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_offical_apply_battle_result_ack::~ps_offical_apply_battle_result_ack() {
  SharedDtor();
}

void ps_offical_apply_battle_result_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_offical_apply_battle_result_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_offical_apply_battle_result_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_offical_apply_battle_result_ack_descriptor_;
}

const ps_offical_apply_battle_result_ack& ps_offical_apply_battle_result_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_offical_apply_battle_result_ack* ps_offical_apply_battle_result_ack::default_instance_ = NULL;

ps_offical_apply_battle_result_ack* ps_offical_apply_battle_result_ack::New() const {
  return new ps_offical_apply_battle_result_ack;
}

void ps_offical_apply_battle_result_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1111;
    office_lv_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    time_ = 0;
    my_place_id_ = 0;
    ret_ = 0u;
  }
  data_.Clear();
  mydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_offical_apply_battle_result_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_my_place_id;
        break;
      }

      // optional int32 my_place_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_place_id_)));
          set_has_my_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.offical_apply_battle_data data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectTag(58)) goto parse_mydata;
        break;
      }

      // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mydata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mydata;
        if (input->ExpectTag(64)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_offical_apply_battle_result_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->office_lv(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 my_place_id = 5;
  if (has_my_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->my_place_id(), output);
  }

  // repeated .SProtoSpace.offical_apply_battle_data data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 7;
  for (int i = 0; i < this->mydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mydata(i), output);
  }

  // optional uint32 ret = 8;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_offical_apply_battle_result_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->office_lv(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 my_place_id = 5;
  if (has_my_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->my_place_id(), target);
  }

  // repeated .SProtoSpace.offical_apply_battle_data data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 7;
  for (int i = 0; i < this->mydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mydata(i), target);
  }

  // optional uint32 ret = 8;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_offical_apply_battle_result_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_offical_apply_battle_result_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 my_place_id = 5;
    if (has_my_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_place_id());
    }

    // optional uint32 ret = 8;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.offical_apply_battle_data data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 7;
  total_size += 1 * this->mydata_size();
  for (int i = 0; i < this->mydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mydata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_offical_apply_battle_result_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_offical_apply_battle_result_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_offical_apply_battle_result_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_offical_apply_battle_result_ack::MergeFrom(const ps_offical_apply_battle_result_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mydata_.MergeFrom(from.mydata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_my_place_id()) {
      set_my_place_id(from.my_place_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_offical_apply_battle_result_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_offical_apply_battle_result_ack::CopyFrom(const ps_offical_apply_battle_result_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_offical_apply_battle_result_ack::IsInitialized() const {

  return true;
}

void ps_offical_apply_battle_result_ack::Swap(ps_offical_apply_battle_result_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(my_place_id_, other->my_place_id_);
    data_.Swap(&other->data_);
    mydata_.Swap(&other->mydata_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_offical_apply_battle_result_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_offical_apply_battle_result_ack_descriptor_;
  metadata.reflection = ps_offical_apply_battle_result_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_test_offical_battle_result_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

ps_test_offical_battle_result_req::ps_test_offical_battle_result_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_test_offical_battle_result_req::InitAsDefaultInstance() {
}

ps_test_offical_battle_result_req::ps_test_offical_battle_result_req(const ps_test_offical_battle_result_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_test_offical_battle_result_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1112;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_test_offical_battle_result_req::~ps_test_offical_battle_result_req() {
  SharedDtor();
}

void ps_test_offical_battle_result_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_test_offical_battle_result_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_test_offical_battle_result_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_test_offical_battle_result_req_descriptor_;
}

const ps_test_offical_battle_result_req& ps_test_offical_battle_result_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_test_offical_battle_result_req* ps_test_offical_battle_result_req::default_instance_ = NULL;

ps_test_offical_battle_result_req* ps_test_offical_battle_result_req::New() const {
  return new ps_test_offical_battle_result_req;
}

void ps_test_offical_battle_result_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1112;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_test_offical_battle_result_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_battle_result_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_test_offical_battle_result_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_battle_result_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_test_offical_battle_result_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_battle_result_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_test_offical_battle_result_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_battle_result_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_test_offical_battle_result_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_test_offical_battle_result_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_test_offical_battle_result_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_test_offical_battle_result_req::MergeFrom(const ps_test_offical_battle_result_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_test_offical_battle_result_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_test_offical_battle_result_req::CopyFrom(const ps_test_offical_battle_result_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_test_offical_battle_result_req::IsInitialized() const {

  return true;
}

void ps_test_offical_battle_result_req::Swap(ps_test_offical_battle_result_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_test_offical_battle_result_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_test_offical_battle_result_req_descriptor_;
  metadata.reflection = ps_test_offical_battle_result_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_test_start_offical_battle_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

ps_test_start_offical_battle_req::ps_test_start_offical_battle_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_test_start_offical_battle_req::InitAsDefaultInstance() {
}

ps_test_start_offical_battle_req::ps_test_start_offical_battle_req(const ps_test_start_offical_battle_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_test_start_offical_battle_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1113;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_test_start_offical_battle_req::~ps_test_start_offical_battle_req() {
  SharedDtor();
}

void ps_test_start_offical_battle_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_test_start_offical_battle_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_test_start_offical_battle_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_test_start_offical_battle_req_descriptor_;
}

const ps_test_start_offical_battle_req& ps_test_start_offical_battle_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_test_start_offical_battle_req* ps_test_start_offical_battle_req::default_instance_ = NULL;

ps_test_start_offical_battle_req* ps_test_start_offical_battle_req::New() const {
  return new ps_test_start_offical_battle_req;
}

void ps_test_start_offical_battle_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1113;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_test_start_offical_battle_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_start_offical_battle_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_test_start_offical_battle_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_start_offical_battle_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_test_start_offical_battle_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_start_offical_battle_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_test_start_offical_battle_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_start_offical_battle_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_test_start_offical_battle_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_test_start_offical_battle_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_test_start_offical_battle_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_test_start_offical_battle_req::MergeFrom(const ps_test_start_offical_battle_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_test_start_offical_battle_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_test_start_offical_battle_req::CopyFrom(const ps_test_start_offical_battle_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_test_start_offical_battle_req::IsInitialized() const {

  return true;
}

void ps_test_start_offical_battle_req::Swap(ps_test_start_offical_battle_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_test_start_offical_battle_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_test_start_offical_battle_req_descriptor_;
  metadata.reflection = ps_test_start_offical_battle_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ps_test_offical_sign_up_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

ps_test_offical_sign_up_req::ps_test_offical_sign_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ps_test_offical_sign_up_req::InitAsDefaultInstance() {
}

ps_test_offical_sign_up_req::ps_test_offical_sign_up_req(const ps_test_offical_sign_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ps_test_offical_sign_up_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1114;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ps_test_offical_sign_up_req::~ps_test_offical_sign_up_req() {
  SharedDtor();
}

void ps_test_offical_sign_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ps_test_offical_sign_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ps_test_offical_sign_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ps_test_offical_sign_up_req_descriptor_;
}

const ps_test_offical_sign_up_req& ps_test_offical_sign_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

ps_test_offical_sign_up_req* ps_test_offical_sign_up_req::default_instance_ = NULL;

ps_test_offical_sign_up_req* ps_test_offical_sign_up_req::New() const {
  return new ps_test_offical_sign_up_req;
}

void ps_test_offical_sign_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1114;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ps_test_offical_sign_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_sign_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ps_test_offical_sign_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_sign_up_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ps_test_offical_sign_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_sign_up_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ps_test_offical_sign_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = ps_test_offical_sign_up_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ps_test_offical_sign_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ps_test_offical_sign_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ps_test_offical_sign_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ps_test_offical_sign_up_req::MergeFrom(const ps_test_offical_sign_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ps_test_offical_sign_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ps_test_offical_sign_up_req::CopyFrom(const ps_test_offical_sign_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ps_test_offical_sign_up_req::IsInitialized() const {

  return true;
}

void ps_test_offical_sign_up_req::Swap(ps_test_offical_sign_up_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ps_test_offical_sign_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ps_test_offical_sign_up_req_descriptor_;
  metadata.reflection = ps_test_offical_sign_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_friend_opt_forward_req::kProtoIdFieldNumber;
const int pub_friend_opt_forward_req::kOnfFieldNumber;
const int pub_friend_opt_forward_req::kApplyIdFieldNumber;
#endif  // !_MSC_VER

pub_friend_opt_forward_req::pub_friend_opt_forward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_friend_opt_forward_req::InitAsDefaultInstance() {
  onf_ = const_cast< ::SProtoSpace::game_friend_opt_ntf*>(&::SProtoSpace::game_friend_opt_ntf::default_instance());
}

pub_friend_opt_forward_req::pub_friend_opt_forward_req(const pub_friend_opt_forward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_friend_opt_forward_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1517;
  onf_ = NULL;
  apply_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_friend_opt_forward_req::~pub_friend_opt_forward_req() {
  SharedDtor();
}

void pub_friend_opt_forward_req::SharedDtor() {
  if (this != default_instance_) {
    delete onf_;
  }
}

void pub_friend_opt_forward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_friend_opt_forward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_friend_opt_forward_req_descriptor_;
}

const pub_friend_opt_forward_req& pub_friend_opt_forward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_friend_opt_forward_req* pub_friend_opt_forward_req::default_instance_ = NULL;

pub_friend_opt_forward_req* pub_friend_opt_forward_req::New() const {
  return new pub_friend_opt_forward_req;
}

void pub_friend_opt_forward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1517;
    if (has_onf()) {
      if (onf_ != NULL) onf_->::SProtoSpace::game_friend_opt_ntf::Clear();
    }
    apply_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_friend_opt_forward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onf;
        break;
      }

      // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_friend_opt_forward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
  if (has_onf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->onf(), output);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->apply_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_friend_opt_forward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
  if (has_onf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->onf(), target);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->apply_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_friend_opt_forward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
    if (has_onf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onf());
    }

    // optional uint64 apply_id = 3;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_friend_opt_forward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_friend_opt_forward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_friend_opt_forward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_friend_opt_forward_req::MergeFrom(const pub_friend_opt_forward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_onf()) {
      mutable_onf()->::SProtoSpace::game_friend_opt_ntf::MergeFrom(from.onf());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_friend_opt_forward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_friend_opt_forward_req::CopyFrom(const pub_friend_opt_forward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_friend_opt_forward_req::IsInitialized() const {

  return true;
}

void pub_friend_opt_forward_req::Swap(pub_friend_opt_forward_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(onf_, other->onf_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_friend_opt_forward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_friend_opt_forward_req_descriptor_;
  metadata.reflection = pub_friend_opt_forward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_friend_opt_forward_ack::kProtoIdFieldNumber;
const int pub_friend_opt_forward_ack::kOnfFieldNumber;
const int pub_friend_opt_forward_ack::kApplyIdFieldNumber;
#endif  // !_MSC_VER

pub_friend_opt_forward_ack::pub_friend_opt_forward_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_friend_opt_forward_ack::InitAsDefaultInstance() {
  onf_ = const_cast< ::SProtoSpace::game_friend_opt_ntf*>(&::SProtoSpace::game_friend_opt_ntf::default_instance());
}

pub_friend_opt_forward_ack::pub_friend_opt_forward_ack(const pub_friend_opt_forward_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_friend_opt_forward_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1518;
  onf_ = NULL;
  apply_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_friend_opt_forward_ack::~pub_friend_opt_forward_ack() {
  SharedDtor();
}

void pub_friend_opt_forward_ack::SharedDtor() {
  if (this != default_instance_) {
    delete onf_;
  }
}

void pub_friend_opt_forward_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_friend_opt_forward_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_friend_opt_forward_ack_descriptor_;
}

const pub_friend_opt_forward_ack& pub_friend_opt_forward_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_friend_opt_forward_ack* pub_friend_opt_forward_ack::default_instance_ = NULL;

pub_friend_opt_forward_ack* pub_friend_opt_forward_ack::New() const {
  return new pub_friend_opt_forward_ack;
}

void pub_friend_opt_forward_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1518;
    if (has_onf()) {
      if (onf_ != NULL) onf_->::SProtoSpace::game_friend_opt_ntf::Clear();
    }
    apply_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_friend_opt_forward_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onf;
        break;
      }

      // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_id;
        break;
      }

      // optional uint64 apply_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_id_)));
          set_has_apply_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_friend_opt_forward_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
  if (has_onf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->onf(), output);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->apply_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_friend_opt_forward_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
  if (has_onf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->onf(), target);
  }

  // optional uint64 apply_id = 3;
  if (has_apply_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->apply_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_friend_opt_forward_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_opt_forward_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.game_friend_opt_ntf onf = 2;
    if (has_onf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onf());
    }

    // optional uint64 apply_id = 3;
    if (has_apply_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_friend_opt_forward_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_friend_opt_forward_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_friend_opt_forward_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_friend_opt_forward_ack::MergeFrom(const pub_friend_opt_forward_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_onf()) {
      mutable_onf()->::SProtoSpace::game_friend_opt_ntf::MergeFrom(from.onf());
    }
    if (from.has_apply_id()) {
      set_apply_id(from.apply_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_friend_opt_forward_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_friend_opt_forward_ack::CopyFrom(const pub_friend_opt_forward_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_friend_opt_forward_ack::IsInitialized() const {

  return true;
}

void pub_friend_opt_forward_ack::Swap(pub_friend_opt_forward_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(onf_, other->onf_);
    std::swap(apply_id_, other->apply_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_friend_opt_forward_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_friend_opt_forward_ack_descriptor_;
  metadata.reflection = pub_friend_opt_forward_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_harem_compete_friends_req::kProtoIdFieldNumber;
const int pub_harem_compete_friends_req::kGdTypeFieldNumber;
const int pub_harem_compete_friends_req::kTypeFieldNumber;
const int pub_harem_compete_friends_req::kCountFieldNumber;
const int pub_harem_compete_friends_req::kUuidFieldNumber;
const int pub_harem_compete_friends_req::kGradeFieldNumber;
#endif  // !_MSC_VER

pub_harem_compete_friends_req::pub_harem_compete_friends_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_harem_compete_friends_req::InitAsDefaultInstance() {
}

pub_harem_compete_friends_req::pub_harem_compete_friends_req(const pub_harem_compete_friends_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_harem_compete_friends_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1505;
  gd_type_ = 0u;
  type_ = 0u;
  count_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_harem_compete_friends_req::~pub_harem_compete_friends_req() {
  SharedDtor();
}

void pub_harem_compete_friends_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_harem_compete_friends_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_harem_compete_friends_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_harem_compete_friends_req_descriptor_;
}

const pub_harem_compete_friends_req& pub_harem_compete_friends_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_harem_compete_friends_req* pub_harem_compete_friends_req::default_instance_ = NULL;

pub_harem_compete_friends_req* pub_harem_compete_friends_req::New() const {
  return new pub_harem_compete_friends_req;
}

void pub_harem_compete_friends_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1505;
    gd_type_ = 0u;
    type_ = 0u;
    count_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_harem_compete_friends_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gd_type;
        break;
      }

      // optional uint32 gd_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gd_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gd_type_)));
          set_has_gd_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_harem_compete_friends_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 gd_type = 2;
  if (has_gd_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gd_type(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  // optional uint64 uuid = 5;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uuid(), output);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_harem_compete_friends_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 gd_type = 2;
  if (has_gd_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gd_type(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  // optional uint64 uuid = 5;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uuid(), target);
  }

  // optional uint32 grade = 6;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_harem_compete_friends_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 gd_type = 2;
    if (has_gd_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gd_type());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 uuid = 5;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 grade = 6;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_harem_compete_friends_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_harem_compete_friends_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_harem_compete_friends_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_harem_compete_friends_req::MergeFrom(const pub_harem_compete_friends_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_gd_type()) {
      set_gd_type(from.gd_type());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_harem_compete_friends_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_harem_compete_friends_req::CopyFrom(const pub_harem_compete_friends_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_harem_compete_friends_req::IsInitialized() const {

  return true;
}

void pub_harem_compete_friends_req::Swap(pub_harem_compete_friends_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(gd_type_, other->gd_type_);
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(uuid_, other->uuid_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_harem_compete_friends_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_harem_compete_friends_req_descriptor_;
  metadata.reflection = pub_harem_compete_friends_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_harem_compete_friends_ack::kProtoIdFieldNumber;
const int pub_harem_compete_friends_ack::kUuidFieldNumber;
const int pub_harem_compete_friends_ack::kFriendsFieldNumber;
#endif  // !_MSC_VER

pub_harem_compete_friends_ack::pub_harem_compete_friends_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_harem_compete_friends_ack::InitAsDefaultInstance() {
}

pub_harem_compete_friends_ack::pub_harem_compete_friends_ack(const pub_harem_compete_friends_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_harem_compete_friends_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1506;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_harem_compete_friends_ack::~pub_harem_compete_friends_ack() {
  SharedDtor();
}

void pub_harem_compete_friends_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_harem_compete_friends_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_harem_compete_friends_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_harem_compete_friends_ack_descriptor_;
}

const pub_harem_compete_friends_ack& pub_harem_compete_friends_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_harem_compete_friends_ack* pub_harem_compete_friends_ack::default_instance_ = NULL;

pub_harem_compete_friends_ack* pub_harem_compete_friends_ack::New() const {
  return new pub_harem_compete_friends_ack;
}

void pub_harem_compete_friends_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1506;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  friends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_harem_compete_friends_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        break;
      }

      // repeated .SProtoSpace.friend_base_info friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friends;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_harem_compete_friends_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated .SProtoSpace.friend_base_info friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->friends(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_harem_compete_friends_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated .SProtoSpace.friend_base_info friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->friends(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_harem_compete_friends_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_harem_compete_friends_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated .SProtoSpace.friend_base_info friends = 3;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_harem_compete_friends_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_harem_compete_friends_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_harem_compete_friends_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_harem_compete_friends_ack::MergeFrom(const pub_harem_compete_friends_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_harem_compete_friends_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_harem_compete_friends_ack::CopyFrom(const pub_harem_compete_friends_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_harem_compete_friends_ack::IsInitialized() const {

  return true;
}

void pub_harem_compete_friends_ack::Swap(pub_harem_compete_friends_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    friends_.Swap(&other->friends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_harem_compete_friends_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_harem_compete_friends_ack_descriptor_;
  metadata.reflection = pub_harem_compete_friends_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_search_role_req::kProtoIdFieldNumber;
const int pub_search_role_req::kTypeFieldNumber;
const int pub_search_role_req::kContentFieldNumber;
const int pub_search_role_req::kUuidFieldNumber;
#endif  // !_MSC_VER

pub_search_role_req::pub_search_role_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_search_role_req::InitAsDefaultInstance() {
}

pub_search_role_req::pub_search_role_req(const pub_search_role_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_search_role_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1507;
  type_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_search_role_req::~pub_search_role_req() {
  SharedDtor();
}

void pub_search_role_req::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void pub_search_role_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_search_role_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_search_role_req_descriptor_;
}

const pub_search_role_req& pub_search_role_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_search_role_req* pub_search_role_req::default_instance_ = NULL;

pub_search_role_req* pub_search_role_req::New() const {
  return new pub_search_role_req;
}

void pub_search_role_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1507;
    type_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_search_role_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_search_role_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional uint64 uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_search_role_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional uint64 uuid = 4;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_search_role_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint64 uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_search_role_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_search_role_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_search_role_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_search_role_req::MergeFrom(const pub_search_role_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_search_role_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_search_role_req::CopyFrom(const pub_search_role_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_search_role_req::IsInitialized() const {

  return true;
}

void pub_search_role_req::Swap(pub_search_role_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(uuid_, other->uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_search_role_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_search_role_req_descriptor_;
  metadata.reflection = pub_search_role_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_search_role_ack::kProtoIdFieldNumber;
const int pub_search_role_ack::kUuidFieldNumber;
const int pub_search_role_ack::kRoleFieldNumber;
const int pub_search_role_ack::kRetFieldNumber;
#endif  // !_MSC_VER

pub_search_role_ack::pub_search_role_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_search_role_ack::InitAsDefaultInstance() {
  role_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

pub_search_role_ack::pub_search_role_ack(const pub_search_role_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_search_role_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1508;
  uuid_ = GOOGLE_ULONGLONG(0);
  role_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_search_role_ack::~pub_search_role_ack() {
  SharedDtor();
}

void pub_search_role_ack::SharedDtor() {
  if (this != default_instance_) {
    delete role_;
  }
}

void pub_search_role_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_search_role_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_search_role_ack_descriptor_;
}

const pub_search_role_ack& pub_search_role_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_search_role_ack* pub_search_role_ack::default_instance_ = NULL;

pub_search_role_ack* pub_search_role_ack::New() const {
  return new pub_search_role_ack;
}

void pub_search_role_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1508;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_role()) {
      if (role_ != NULL) role_->::SProtoSpace::friend_base_info::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_search_role_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role;
        break;
      }

      // optional .SProtoSpace.friend_base_info role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_search_role_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.friend_base_info role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->role(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_search_role_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.friend_base_info role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->role(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_search_role_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_search_role_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.friend_base_info role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_search_role_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_search_role_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_search_role_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_search_role_ack::MergeFrom(const pub_search_role_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_role()) {
      mutable_role()->::SProtoSpace::friend_base_info::MergeFrom(from.role());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_search_role_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_search_role_ack::CopyFrom(const pub_search_role_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_search_role_ack::IsInitialized() const {

  return true;
}

void pub_search_role_ack::Swap(pub_search_role_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(role_, other->role_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_search_role_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_search_role_ack_descriptor_;
  metadata.reflection = pub_search_role_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_officer_apply_req::kProtoIdFieldNumber;
const int pub_officer_apply_req::kUuidFieldNumber;
const int pub_officer_apply_req::kGradeFieldNumber;
const int pub_officer_apply_req::kCurGradeFieldNumber;
const int pub_officer_apply_req::kMaxGradeFieldNumber;
const int pub_officer_apply_req::kSexFieldNumber;
const int pub_officer_apply_req::kLvFieldNumber;
const int pub_officer_apply_req::kNameFieldNumber;
const int pub_officer_apply_req::kApplyTimeFieldNumber;
const int pub_officer_apply_req::kBattleDataFieldNumber;
#endif  // !_MSC_VER

pub_officer_apply_req::pub_officer_apply_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_officer_apply_req::InitAsDefaultInstance() {
  battle_data_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
}

pub_officer_apply_req::pub_officer_apply_req(const pub_officer_apply_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_officer_apply_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1509;
  uuid_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  cur_grade_ = 0u;
  max_grade_ = 0u;
  sex_ = 0u;
  lv_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  apply_time_ = GOOGLE_ULONGLONG(0);
  battle_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_officer_apply_req::~pub_officer_apply_req() {
  SharedDtor();
}

void pub_officer_apply_req::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete battle_data_;
  }
}

void pub_officer_apply_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_officer_apply_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_officer_apply_req_descriptor_;
}

const pub_officer_apply_req& pub_officer_apply_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_officer_apply_req* pub_officer_apply_req::default_instance_ = NULL;

pub_officer_apply_req* pub_officer_apply_req::New() const {
  return new pub_officer_apply_req;
}

void pub_officer_apply_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1509;
    uuid_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
    cur_grade_ = 0u;
    max_grade_ = 0u;
    sex_ = 0u;
    lv_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    apply_time_ = GOOGLE_ULONGLONG(0);
    if (has_battle_data()) {
      if (battle_data_ != NULL) battle_data_->::SProtoSpace::battle_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_officer_apply_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_grade;
        break;
      }

      // optional uint32 cur_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_grade;
        break;
      }

      // optional uint32 max_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_apply_time;
        break;
      }

      // optional uint64 apply_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_battle_data;
        break;
      }

      // optional .SProtoSpace.battle_role_info battle_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_officer_apply_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }

  // optional uint32 cur_grade = 4;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_grade(), output);
  }

  // optional uint32 max_grade = 5;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_grade(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 lv = 7;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->lv(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(), output);
  }

  // optional uint64 apply_time = 9;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->apply_time(), output);
  }

  // optional .SProtoSpace.battle_role_info battle_data = 10;
  if (has_battle_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->battle_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_officer_apply_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }

  // optional uint32 cur_grade = 4;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_grade(), target);
  }

  // optional uint32 max_grade = 5;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_grade(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 lv = 7;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->lv(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint64 apply_time = 9;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->apply_time(), target);
  }

  // optional .SProtoSpace.battle_role_info battle_data = 10;
  if (has_battle_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->battle_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_officer_apply_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 cur_grade = 4;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_grade());
    }

    // optional uint32 max_grade = 5;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grade());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 lv = 7;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 apply_time = 9;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

    // optional .SProtoSpace.battle_role_info battle_data = 10;
    if (has_battle_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_officer_apply_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_officer_apply_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_officer_apply_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_officer_apply_req::MergeFrom(const pub_officer_apply_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_battle_data()) {
      mutable_battle_data()->::SProtoSpace::battle_role_info::MergeFrom(from.battle_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_officer_apply_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_officer_apply_req::CopyFrom(const pub_officer_apply_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_officer_apply_req::IsInitialized() const {

  if (has_battle_data()) {
    if (!this->battle_data().IsInitialized()) return false;
  }
  return true;
}

void pub_officer_apply_req::Swap(pub_officer_apply_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(grade_, other->grade_);
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(sex_, other->sex_);
    std::swap(lv_, other->lv_);
    std::swap(name_, other->name_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(battle_data_, other->battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_officer_apply_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_officer_apply_req_descriptor_;
  metadata.reflection = pub_officer_apply_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_officer_apply_ack::kProtoIdFieldNumber;
const int pub_officer_apply_ack::kUuidFieldNumber;
const int pub_officer_apply_ack::kGradeFieldNumber;
const int pub_officer_apply_ack::kRetFieldNumber;
#endif  // !_MSC_VER

pub_officer_apply_ack::pub_officer_apply_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_officer_apply_ack::InitAsDefaultInstance() {
}

pub_officer_apply_ack::pub_officer_apply_ack(const pub_officer_apply_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_officer_apply_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1510;
  uuid_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_officer_apply_ack::~pub_officer_apply_ack() {
  SharedDtor();
}

void pub_officer_apply_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_officer_apply_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_officer_apply_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_officer_apply_ack_descriptor_;
}

const pub_officer_apply_ack& pub_officer_apply_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_officer_apply_ack* pub_officer_apply_ack::default_instance_ = NULL;

pub_officer_apply_ack* pub_officer_apply_ack::New() const {
  return new pub_officer_apply_ack;
}

void pub_officer_apply_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1510;
    uuid_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_officer_apply_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_officer_apply_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_officer_apply_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_officer_apply_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_apply_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_officer_apply_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_officer_apply_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_officer_apply_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_officer_apply_ack::MergeFrom(const pub_officer_apply_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_officer_apply_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_officer_apply_ack::CopyFrom(const pub_officer_apply_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_officer_apply_ack::IsInitialized() const {

  return true;
}

void pub_officer_apply_ack::Swap(pub_officer_apply_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(grade_, other->grade_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_officer_apply_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_officer_apply_ack_descriptor_;
  metadata.reflection = pub_officer_apply_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_heros_formation_ntf::kProtoIdFieldNumber;
const int update_heros_formation_ntf::kRoleIdFieldNumber;
const int update_heros_formation_ntf::kApplyGradeFieldNumber;
const int update_heros_formation_ntf::kHeroInfosFieldNumber;
#endif  // !_MSC_VER

update_heros_formation_ntf::update_heros_formation_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_heros_formation_ntf::InitAsDefaultInstance() {
}

update_heros_formation_ntf::update_heros_formation_ntf(const update_heros_formation_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_heros_formation_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1535;
  role_id_ = GOOGLE_ULONGLONG(0);
  apply_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_heros_formation_ntf::~update_heros_formation_ntf() {
  SharedDtor();
}

void update_heros_formation_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_heros_formation_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_heros_formation_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_heros_formation_ntf_descriptor_;
}

const update_heros_formation_ntf& update_heros_formation_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

update_heros_formation_ntf* update_heros_formation_ntf::default_instance_ = NULL;

update_heros_formation_ntf* update_heros_formation_ntf::New() const {
  return new update_heros_formation_ntf;
}

void update_heros_formation_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1535;
    role_id_ = GOOGLE_ULONGLONG(0);
    apply_grade_ = 0;
  }
  hero_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_heros_formation_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_heros_formation_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_grade;
        break;
      }

      // optional int32 apply_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_grade_)));
          set_has_apply_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hero_infos;
        break;
      }

      // repeated .SProtoSpace.battle_hero_info hero_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hero_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_heros_formation_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_heros_formation_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional int32 apply_grade = 3;
  if (has_apply_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->apply_grade(), output);
  }

  // repeated .SProtoSpace.battle_hero_info hero_infos = 4;
  for (int i = 0; i < this->hero_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hero_infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_heros_formation_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_heros_formation_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional int32 apply_grade = 3;
  if (has_apply_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->apply_grade(), target);
  }

  // repeated .SProtoSpace.battle_hero_info hero_infos = 4;
  for (int i = 0; i < this->hero_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hero_infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_heros_formation_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_heros_formation_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 apply_grade = 3;
    if (has_apply_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_grade());
    }

  }
  // repeated .SProtoSpace.battle_hero_info hero_infos = 4;
  total_size += 1 * this->hero_infos_size();
  for (int i = 0; i < this->hero_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_heros_formation_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_heros_formation_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_heros_formation_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_heros_formation_ntf::MergeFrom(const update_heros_formation_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_infos_.MergeFrom(from.hero_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_apply_grade()) {
      set_apply_grade(from.apply_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_heros_formation_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_heros_formation_ntf::CopyFrom(const update_heros_formation_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_heros_formation_ntf::IsInitialized() const {

  for (int i = 0; i < hero_infos_size(); i++) {
    if (!this->hero_infos(i).IsInitialized()) return false;
  }
  return true;
}

void update_heros_formation_ntf::Swap(update_heros_formation_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(apply_grade_, other->apply_grade_);
    hero_infos_.Swap(&other->hero_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_heros_formation_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_heros_formation_ntf_descriptor_;
  metadata.reflection = update_heros_formation_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_officer_result_ntf::kProtoIdFieldNumber;
const int pub_officer_result_ntf::kResultsFieldNumber;
#endif  // !_MSC_VER

pub_officer_result_ntf::pub_officer_result_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_officer_result_ntf::InitAsDefaultInstance() {
}

pub_officer_result_ntf::pub_officer_result_ntf(const pub_officer_result_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_officer_result_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1115;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_officer_result_ntf::~pub_officer_result_ntf() {
  SharedDtor();
}

void pub_officer_result_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_officer_result_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_officer_result_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_officer_result_ntf_descriptor_;
}

const pub_officer_result_ntf& pub_officer_result_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_officer_result_ntf* pub_officer_result_ntf::default_instance_ = NULL;

pub_officer_result_ntf* pub_officer_result_ntf::New() const {
  return new pub_officer_result_ntf;
}

void pub_officer_result_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1115;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_officer_result_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_result_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .SProtoSpace.officer_result_data results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_officer_result_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_result_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.officer_result_data results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_officer_result_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_result_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.officer_result_data results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_officer_result_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_officer_result_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.officer_result_data results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_officer_result_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_officer_result_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_officer_result_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_officer_result_ntf::MergeFrom(const pub_officer_result_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_officer_result_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_officer_result_ntf::CopyFrom(const pub_officer_result_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_officer_result_ntf::IsInitialized() const {

  return true;
}

void pub_officer_result_ntf::Swap(pub_officer_result_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_officer_result_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_officer_result_ntf_descriptor_;
  metadata.reflection = pub_officer_result_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_offical_reduce_ntf::kProtoIdFieldNumber;
const int pub_offical_reduce_ntf::kDataFieldNumber;
#endif  // !_MSC_VER

pub_offical_reduce_ntf::pub_offical_reduce_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_offical_reduce_ntf::InitAsDefaultInstance() {
}

pub_offical_reduce_ntf::pub_offical_reduce_ntf(const pub_offical_reduce_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_offical_reduce_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1120;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_offical_reduce_ntf::~pub_offical_reduce_ntf() {
  SharedDtor();
}

void pub_offical_reduce_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_offical_reduce_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_offical_reduce_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_offical_reduce_ntf_descriptor_;
}

const pub_offical_reduce_ntf& pub_offical_reduce_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_offical_reduce_ntf* pub_offical_reduce_ntf::default_instance_ = NULL;

pub_offical_reduce_ntf* pub_offical_reduce_ntf::New() const {
  return new pub_offical_reduce_ntf;
}

void pub_offical_reduce_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1120;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_offical_reduce_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_offical_reduce_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.officer_reduce_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_offical_reduce_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_offical_reduce_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.officer_reduce_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_offical_reduce_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_offical_reduce_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.officer_reduce_data data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_offical_reduce_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_offical_reduce_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.officer_reduce_data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_offical_reduce_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_offical_reduce_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_offical_reduce_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_offical_reduce_ntf::MergeFrom(const pub_offical_reduce_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_offical_reduce_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_offical_reduce_ntf::CopyFrom(const pub_offical_reduce_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_offical_reduce_ntf::IsInitialized() const {

  return true;
}

void pub_offical_reduce_ntf::Swap(pub_offical_reduce_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_offical_reduce_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_offical_reduce_ntf_descriptor_;
  metadata.reflection = pub_offical_reduce_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_load_offical_data_req::kProtoIdFieldNumber;
const int pub_load_offical_data_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_load_offical_data_req::pub_load_offical_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_load_offical_data_req::InitAsDefaultInstance() {
}

pub_load_offical_data_req::pub_load_offical_data_req(const pub_load_offical_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_load_offical_data_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1116;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_load_offical_data_req::~pub_load_offical_data_req() {
  SharedDtor();
}

void pub_load_offical_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_load_offical_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_load_offical_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_load_offical_data_req_descriptor_;
}

const pub_load_offical_data_req& pub_load_offical_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_load_offical_data_req* pub_load_offical_data_req::default_instance_ = NULL;

pub_load_offical_data_req* pub_load_offical_data_req::New() const {
  return new pub_load_offical_data_req;
}

void pub_load_offical_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1116;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_load_offical_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_load_offical_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_load_offical_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_load_offical_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_load_offical_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_load_offical_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_load_offical_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_load_offical_data_req::MergeFrom(const pub_load_offical_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_load_offical_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_load_offical_data_req::CopyFrom(const pub_load_offical_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_load_offical_data_req::IsInitialized() const {

  return true;
}

void pub_load_offical_data_req::Swap(pub_load_offical_data_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_load_offical_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_load_offical_data_req_descriptor_;
  metadata.reflection = pub_load_offical_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_load_offical_data_ack::kProtoIdFieldNumber;
const int pub_load_offical_data_ack::kRoleIdFieldNumber;
const int pub_load_offical_data_ack::kCurGradeFieldNumber;
const int pub_load_offical_data_ack::kMaxGradeFieldNumber;
const int pub_load_offical_data_ack::kApplyGradeFieldNumber;
const int pub_load_offical_data_ack::kApplyTimeFieldNumber;
const int pub_load_offical_data_ack::kLastGradeFieldNumber;
const int pub_load_offical_data_ack::kExistFieldNumber;
#endif  // !_MSC_VER

pub_load_offical_data_ack::pub_load_offical_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_load_offical_data_ack::InitAsDefaultInstance() {
}

pub_load_offical_data_ack::pub_load_offical_data_ack(const pub_load_offical_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_load_offical_data_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1117;
  role_id_ = GOOGLE_ULONGLONG(0);
  cur_grade_ = 0u;
  max_grade_ = 0u;
  apply_grade_ = 0u;
  apply_time_ = 0u;
  last_grade_ = 0u;
  exist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_load_offical_data_ack::~pub_load_offical_data_ack() {
  SharedDtor();
}

void pub_load_offical_data_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_load_offical_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_load_offical_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_load_offical_data_ack_descriptor_;
}

const pub_load_offical_data_ack& pub_load_offical_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_load_offical_data_ack* pub_load_offical_data_ack::default_instance_ = NULL;

pub_load_offical_data_ack* pub_load_offical_data_ack::New() const {
  return new pub_load_offical_data_ack;
}

void pub_load_offical_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1117;
    role_id_ = GOOGLE_ULONGLONG(0);
    cur_grade_ = 0u;
    max_grade_ = 0u;
    apply_grade_ = 0u;
    apply_time_ = 0u;
    last_grade_ = 0u;
    exist_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_load_offical_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_grade;
        break;
      }

      // optional uint32 cur_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_grade;
        break;
      }

      // optional uint32 max_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_apply_grade;
        break;
      }

      // optional uint32 apply_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_grade_)));
          set_has_apply_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_time;
        break;
      }

      // optional uint32 apply_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_grade;
        break;
      }

      // optional uint32 last_grade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_grade_)));
          set_has_last_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exist;
        break;
      }

      // optional bool exist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_)));
          set_has_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_load_offical_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_grade(), output);
  }

  // optional uint32 max_grade = 4;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_grade(), output);
  }

  // optional uint32 apply_grade = 5;
  if (has_apply_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->apply_grade(), output);
  }

  // optional uint32 apply_time = 6;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->apply_time(), output);
  }

  // optional uint32 last_grade = 7;
  if (has_last_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_grade(), output);
  }

  // optional bool exist = 8;
  if (has_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->exist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_load_offical_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_grade(), target);
  }

  // optional uint32 max_grade = 4;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_grade(), target);
  }

  // optional uint32 apply_grade = 5;
  if (has_apply_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->apply_grade(), target);
  }

  // optional uint32 apply_time = 6;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->apply_time(), target);
  }

  // optional uint32 last_grade = 7;
  if (has_last_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_grade(), target);
  }

  // optional bool exist = 8;
  if (has_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->exist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_load_offical_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_load_offical_data_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 cur_grade = 3;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_grade());
    }

    // optional uint32 max_grade = 4;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grade());
    }

    // optional uint32 apply_grade = 5;
    if (has_apply_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_grade());
    }

    // optional uint32 apply_time = 6;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_time());
    }

    // optional uint32 last_grade = 7;
    if (has_last_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_grade());
    }

    // optional bool exist = 8;
    if (has_exist()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_load_offical_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_load_offical_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_load_offical_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_load_offical_data_ack::MergeFrom(const pub_load_offical_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_apply_grade()) {
      set_apply_grade(from.apply_grade());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_last_grade()) {
      set_last_grade(from.last_grade());
    }
    if (from.has_exist()) {
      set_exist(from.exist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_load_offical_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_load_offical_data_ack::CopyFrom(const pub_load_offical_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_load_offical_data_ack::IsInitialized() const {

  return true;
}

void pub_load_offical_data_ack::Swap(pub_load_offical_data_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(apply_grade_, other->apply_grade_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(last_grade_, other->last_grade_);
    std::swap(exist_, other->exist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_load_offical_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_load_offical_data_ack_descriptor_;
  metadata.reflection = pub_load_offical_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_officer_applicants_req::kProtoidFieldNumber;
const int pub_get_officer_applicants_req::kGradeFieldNumber;
const int pub_get_officer_applicants_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_get_officer_applicants_req::pub_get_officer_applicants_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_officer_applicants_req::InitAsDefaultInstance() {
}

pub_get_officer_applicants_req::pub_get_officer_applicants_req(const pub_get_officer_applicants_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_officer_applicants_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1118;
  grade_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_officer_applicants_req::~pub_get_officer_applicants_req() {
  SharedDtor();
}

void pub_get_officer_applicants_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_officer_applicants_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_officer_applicants_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_officer_applicants_req_descriptor_;
}

const pub_get_officer_applicants_req& pub_get_officer_applicants_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_officer_applicants_req* pub_get_officer_applicants_req::default_instance_ = NULL;

pub_get_officer_applicants_req* pub_get_officer_applicants_req::New() const {
  return new pub_get_officer_applicants_req;
}

void pub_get_officer_applicants_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1118;
    grade_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_officer_applicants_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_officer_applicants_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_officer_applicants_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_officer_applicants_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_officer_applicants_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_officer_applicants_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_officer_applicants_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_officer_applicants_req::MergeFrom(const pub_get_officer_applicants_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_officer_applicants_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_officer_applicants_req::CopyFrom(const pub_get_officer_applicants_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_officer_applicants_req::IsInitialized() const {

  return true;
}

void pub_get_officer_applicants_req::Swap(pub_get_officer_applicants_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_officer_applicants_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_officer_applicants_req_descriptor_;
  metadata.reflection = pub_get_officer_applicants_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_officer_applicants_ack::kProtoidFieldNumber;
const int pub_get_officer_applicants_ack::kRetFieldNumber;
const int pub_get_officer_applicants_ack::kRoleIdFieldNumber;
const int pub_get_officer_applicants_ack::kGradeFieldNumber;
const int pub_get_officer_applicants_ack::kApplyNumFieldNumber;
const int pub_get_officer_applicants_ack::kPostsNumFieldNumber;
const int pub_get_officer_applicants_ack::kApplysFieldNumber;
#endif  // !_MSC_VER

pub_get_officer_applicants_ack::pub_get_officer_applicants_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_officer_applicants_ack::InitAsDefaultInstance() {
}

pub_get_officer_applicants_ack::pub_get_officer_applicants_ack(const pub_get_officer_applicants_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_officer_applicants_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1119;
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  apply_num_ = 0u;
  posts_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_officer_applicants_ack::~pub_get_officer_applicants_ack() {
  SharedDtor();
}

void pub_get_officer_applicants_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_officer_applicants_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_officer_applicants_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_officer_applicants_ack_descriptor_;
}

const pub_get_officer_applicants_ack& pub_get_officer_applicants_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_officer_applicants_ack* pub_get_officer_applicants_ack::default_instance_ = NULL;

pub_get_officer_applicants_ack* pub_get_officer_applicants_ack::New() const {
  return new pub_get_officer_applicants_ack;
}

void pub_get_officer_applicants_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1119;
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
    apply_num_ = 0u;
    posts_num_ = 0u;
  }
  applys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_officer_applicants_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_apply_num;
        break;
      }

      // optional uint32 apply_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_num_)));
          set_has_apply_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_posts_num;
        break;
      }

      // optional uint32 posts_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posts_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posts_num_)));
          set_has_posts_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_applys;
        break;
      }

      // repeated .SProtoSpace.offical_apply_data applys = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_applys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_officer_applicants_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 grade = 4;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->grade(), output);
  }

  // optional uint32 apply_num = 5;
  if (has_apply_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->apply_num(), output);
  }

  // optional uint32 posts_num = 6;
  if (has_posts_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->posts_num(), output);
  }

  // repeated .SProtoSpace.offical_apply_data applys = 7;
  for (int i = 0; i < this->applys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->applys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_officer_applicants_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 grade = 4;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->grade(), target);
  }

  // optional uint32 apply_num = 5;
  if (has_apply_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->apply_num(), target);
  }

  // optional uint32 posts_num = 6;
  if (has_posts_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->posts_num(), target);
  }

  // repeated .SProtoSpace.offical_apply_data applys = 7;
  for (int i = 0; i < this->applys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->applys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_officer_applicants_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_officer_applicants_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 grade = 4;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 apply_num = 5;
    if (has_apply_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_num());
    }

    // optional uint32 posts_num = 6;
    if (has_posts_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posts_num());
    }

  }
  // repeated .SProtoSpace.offical_apply_data applys = 7;
  total_size += 1 * this->applys_size();
  for (int i = 0; i < this->applys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_officer_applicants_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_officer_applicants_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_officer_applicants_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_officer_applicants_ack::MergeFrom(const pub_get_officer_applicants_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  applys_.MergeFrom(from.applys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_apply_num()) {
      set_apply_num(from.apply_num());
    }
    if (from.has_posts_num()) {
      set_posts_num(from.posts_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_officer_applicants_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_officer_applicants_ack::CopyFrom(const pub_get_officer_applicants_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_officer_applicants_ack::IsInitialized() const {

  return true;
}

void pub_get_officer_applicants_ack::Swap(pub_get_officer_applicants_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(grade_, other->grade_);
    std::swap(apply_num_, other->apply_num_);
    std::swap(posts_num_, other->posts_num_);
    applys_.Swap(&other->applys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_officer_applicants_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_officer_applicants_ack_descriptor_;
  metadata.reflection = pub_get_officer_applicants_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_update_offical_lv_req::kProtoidFieldNumber;
const int pub_update_offical_lv_req::kGradeFieldNumber;
const int pub_update_offical_lv_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_update_offical_lv_req::pub_update_offical_lv_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_update_offical_lv_req::InitAsDefaultInstance() {
}

pub_update_offical_lv_req::pub_update_offical_lv_req(const pub_update_offical_lv_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_update_offical_lv_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1512;
  grade_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_update_offical_lv_req::~pub_update_offical_lv_req() {
  SharedDtor();
}

void pub_update_offical_lv_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_update_offical_lv_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_update_offical_lv_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_update_offical_lv_req_descriptor_;
}

const pub_update_offical_lv_req& pub_update_offical_lv_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_update_offical_lv_req* pub_update_offical_lv_req::default_instance_ = NULL;

pub_update_offical_lv_req* pub_update_offical_lv_req::New() const {
  return new pub_update_offical_lv_req;
}

void pub_update_offical_lv_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1512;
    grade_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_update_offical_lv_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_offical_lv_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_update_offical_lv_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_offical_lv_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_update_offical_lv_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_offical_lv_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_update_offical_lv_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_offical_lv_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_update_offical_lv_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_update_offical_lv_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_update_offical_lv_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_update_offical_lv_req::MergeFrom(const pub_update_offical_lv_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_update_offical_lv_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_update_offical_lv_req::CopyFrom(const pub_update_offical_lv_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_update_offical_lv_req::IsInitialized() const {

  return true;
}

void pub_update_offical_lv_req::Swap(pub_update_offical_lv_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_update_offical_lv_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_update_offical_lv_req_descriptor_;
  metadata.reflection = pub_update_offical_lv_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_cancel_offical_apply_req::kProtoidFieldNumber;
const int pub_cancel_offical_apply_req::kGradeFieldNumber;
const int pub_cancel_offical_apply_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_cancel_offical_apply_req::pub_cancel_offical_apply_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_cancel_offical_apply_req::InitAsDefaultInstance() {
}

pub_cancel_offical_apply_req::pub_cancel_offical_apply_req(const pub_cancel_offical_apply_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_cancel_offical_apply_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1513;
  grade_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_cancel_offical_apply_req::~pub_cancel_offical_apply_req() {
  SharedDtor();
}

void pub_cancel_offical_apply_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_cancel_offical_apply_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_cancel_offical_apply_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_cancel_offical_apply_req_descriptor_;
}

const pub_cancel_offical_apply_req& pub_cancel_offical_apply_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_cancel_offical_apply_req* pub_cancel_offical_apply_req::default_instance_ = NULL;

pub_cancel_offical_apply_req* pub_cancel_offical_apply_req::New() const {
  return new pub_cancel_offical_apply_req;
}

void pub_cancel_offical_apply_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1513;
    grade_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_cancel_offical_apply_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_cancel_offical_apply_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_cancel_offical_apply_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_cancel_offical_apply_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_cancel_offical_apply_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_cancel_offical_apply_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_cancel_offical_apply_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_cancel_offical_apply_req::MergeFrom(const pub_cancel_offical_apply_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_cancel_offical_apply_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_cancel_offical_apply_req::CopyFrom(const pub_cancel_offical_apply_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_cancel_offical_apply_req::IsInitialized() const {

  return true;
}

void pub_cancel_offical_apply_req::Swap(pub_cancel_offical_apply_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_cancel_offical_apply_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_cancel_offical_apply_req_descriptor_;
  metadata.reflection = pub_cancel_offical_apply_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_cancel_offical_apply_ack::kProtoidFieldNumber;
const int pub_cancel_offical_apply_ack::kGradeFieldNumber;
const int pub_cancel_offical_apply_ack::kRoleIdFieldNumber;
const int pub_cancel_offical_apply_ack::kRetFieldNumber;
#endif  // !_MSC_VER

pub_cancel_offical_apply_ack::pub_cancel_offical_apply_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_cancel_offical_apply_ack::InitAsDefaultInstance() {
}

pub_cancel_offical_apply_ack::pub_cancel_offical_apply_ack(const pub_cancel_offical_apply_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_cancel_offical_apply_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1514;
  grade_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_cancel_offical_apply_ack::~pub_cancel_offical_apply_ack() {
  SharedDtor();
}

void pub_cancel_offical_apply_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_cancel_offical_apply_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_cancel_offical_apply_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_cancel_offical_apply_ack_descriptor_;
}

const pub_cancel_offical_apply_ack& pub_cancel_offical_apply_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_cancel_offical_apply_ack* pub_cancel_offical_apply_ack::default_instance_ = NULL;

pub_cancel_offical_apply_ack* pub_cancel_offical_apply_ack::New() const {
  return new pub_cancel_offical_apply_ack;
}

void pub_cancel_offical_apply_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1514;
    grade_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_cancel_offical_apply_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_cancel_offical_apply_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_cancel_offical_apply_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_cancel_offical_apply_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_cancel_offical_apply_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_cancel_offical_apply_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_cancel_offical_apply_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_cancel_offical_apply_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_cancel_offical_apply_ack::MergeFrom(const pub_cancel_offical_apply_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_cancel_offical_apply_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_cancel_offical_apply_ack::CopyFrom(const pub_cancel_offical_apply_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_cancel_offical_apply_ack::IsInitialized() const {

  return true;
}

void pub_cancel_offical_apply_ack::Swap(pub_cancel_offical_apply_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_cancel_offical_apply_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_cancel_offical_apply_ack_descriptor_;
  metadata.reflection = pub_cancel_offical_apply_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_challenge_roles_req::kProtoidFieldNumber;
const int pub_get_offical_challenge_roles_req::kGradeFieldNumber;
const int pub_get_offical_challenge_roles_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_challenge_roles_req::pub_get_offical_challenge_roles_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_challenge_roles_req::InitAsDefaultInstance() {
}

pub_get_offical_challenge_roles_req::pub_get_offical_challenge_roles_req(const pub_get_offical_challenge_roles_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_challenge_roles_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1533;
  grade_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_challenge_roles_req::~pub_get_offical_challenge_roles_req() {
  SharedDtor();
}

void pub_get_offical_challenge_roles_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_challenge_roles_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_challenge_roles_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_challenge_roles_req_descriptor_;
}

const pub_get_offical_challenge_roles_req& pub_get_offical_challenge_roles_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_challenge_roles_req* pub_get_offical_challenge_roles_req::default_instance_ = NULL;

pub_get_offical_challenge_roles_req* pub_get_offical_challenge_roles_req::New() const {
  return new pub_get_offical_challenge_roles_req;
}

void pub_get_offical_challenge_roles_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1533;
    grade_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_challenge_roles_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_challenge_roles_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->grade(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_challenge_roles_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->grade(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_challenge_roles_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_challenge_roles_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_challenge_roles_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_challenge_roles_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_challenge_roles_req::MergeFrom(const pub_get_offical_challenge_roles_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_challenge_roles_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_challenge_roles_req::CopyFrom(const pub_get_offical_challenge_roles_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_challenge_roles_req::IsInitialized() const {

  return true;
}

void pub_get_offical_challenge_roles_req::Swap(pub_get_offical_challenge_roles_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(grade_, other->grade_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_challenge_roles_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_challenge_roles_req_descriptor_;
  metadata.reflection = pub_get_offical_challenge_roles_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_challenge_roles_ack::kProtoidFieldNumber;
const int pub_get_offical_challenge_roles_ack::kRetFieldNumber;
const int pub_get_offical_challenge_roles_ack::kGradeFieldNumber;
const int pub_get_offical_challenge_roles_ack::kRoleIdFieldNumber;
const int pub_get_offical_challenge_roles_ack::kItemsFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_challenge_roles_ack::pub_get_offical_challenge_roles_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_challenge_roles_ack::InitAsDefaultInstance() {
}

pub_get_offical_challenge_roles_ack::pub_get_offical_challenge_roles_ack(const pub_get_offical_challenge_roles_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_challenge_roles_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1534;
  ret_ = 0u;
  grade_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_challenge_roles_ack::~pub_get_offical_challenge_roles_ack() {
  SharedDtor();
}

void pub_get_offical_challenge_roles_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_challenge_roles_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_challenge_roles_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_challenge_roles_ack_descriptor_;
}

const pub_get_offical_challenge_roles_ack& pub_get_offical_challenge_roles_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_challenge_roles_ack* pub_get_offical_challenge_roles_ack::default_instance_ = NULL;

pub_get_offical_challenge_roles_ack* pub_get_offical_challenge_roles_ack::New() const {
  return new pub_get_offical_challenge_roles_ack;
}

void pub_get_offical_challenge_roles_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1534;
    ret_ = 0u;
    grade_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_challenge_roles_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.offical_item_data items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_challenge_roles_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // repeated .SProtoSpace.offical_item_data items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_challenge_roles_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // repeated .SProtoSpace.offical_item_data items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_challenge_roles_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_get_offical_challenge_roles_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.offical_item_data items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_challenge_roles_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_challenge_roles_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_challenge_roles_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_challenge_roles_ack::MergeFrom(const pub_get_offical_challenge_roles_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_challenge_roles_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_challenge_roles_ack::CopyFrom(const pub_get_offical_challenge_roles_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_challenge_roles_ack::IsInitialized() const {

  return true;
}

void pub_get_offical_challenge_roles_ack::Swap(pub_get_offical_challenge_roles_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    std::swap(role_id_, other->role_id_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_challenge_roles_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_challenge_roles_ack_descriptor_;
  metadata.reflection = pub_get_offical_challenge_roles_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_send_flower_req::kProtoidFieldNumber;
const int game_pub_send_flower_req::kSendRoleIdFieldNumber;
const int game_pub_send_flower_req::kSendInfoFieldNumber;
#endif  // !_MSC_VER

game_pub_send_flower_req::game_pub_send_flower_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_send_flower_req::InitAsDefaultInstance() {
  send_info_ = const_cast< ::SProtoSpace::flower_send_info*>(&::SProtoSpace::flower_send_info::default_instance());
}

game_pub_send_flower_req::game_pub_send_flower_req(const game_pub_send_flower_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_send_flower_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1259;
  send_role_id_ = GOOGLE_ULONGLONG(0);
  send_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_send_flower_req::~game_pub_send_flower_req() {
  SharedDtor();
}

void game_pub_send_flower_req::SharedDtor() {
  if (this != default_instance_) {
    delete send_info_;
  }
}

void game_pub_send_flower_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_send_flower_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_send_flower_req_descriptor_;
}

const game_pub_send_flower_req& game_pub_send_flower_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_send_flower_req* game_pub_send_flower_req::default_instance_ = NULL;

game_pub_send_flower_req* game_pub_send_flower_req::New() const {
  return new game_pub_send_flower_req;
}

void game_pub_send_flower_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1259;
    send_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_send_info()) {
      if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_send_flower_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_send_flower_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_role_id;
        break;
      }

      // optional uint64 send_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_role_id_)));
          set_has_send_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_info;
        break;
      }

      // optional .SProtoSpace.flower_send_info send_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_send_flower_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_send_flower_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 send_role_id = 2;
  if (has_send_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->send_role_id(), output);
  }

  // optional .SProtoSpace.flower_send_info send_info = 3;
  if (has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->send_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_send_flower_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_send_flower_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 send_role_id = 2;
  if (has_send_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->send_role_id(), target);
  }

  // optional .SProtoSpace.flower_send_info send_info = 3;
  if (has_send_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->send_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_send_flower_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_send_flower_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 send_role_id = 2;
    if (has_send_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_role_id());
    }

    // optional .SProtoSpace.flower_send_info send_info = 3;
    if (has_send_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_send_flower_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_send_flower_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_send_flower_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_send_flower_req::MergeFrom(const game_pub_send_flower_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_send_role_id()) {
      set_send_role_id(from.send_role_id());
    }
    if (from.has_send_info()) {
      mutable_send_info()->::SProtoSpace::flower_send_info::MergeFrom(from.send_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_send_flower_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_send_flower_req::CopyFrom(const game_pub_send_flower_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_send_flower_req::IsInitialized() const {

  return true;
}

void game_pub_send_flower_req::Swap(game_pub_send_flower_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(send_role_id_, other->send_role_id_);
    std::swap(send_info_, other->send_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_send_flower_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_send_flower_req_descriptor_;
  metadata.reflection = game_pub_send_flower_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_send_flower_ack::kProtoidFieldNumber;
const int pub_game_send_flower_ack::kSendRoleIdFieldNumber;
const int pub_game_send_flower_ack::kSendInfoFieldNumber;
const int pub_game_send_flower_ack::kToRoleInfoFieldNumber;
#endif  // !_MSC_VER

pub_game_send_flower_ack::pub_game_send_flower_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_send_flower_ack::InitAsDefaultInstance() {
  send_info_ = const_cast< ::SProtoSpace::flower_send_info*>(&::SProtoSpace::flower_send_info::default_instance());
  to_role_info_ = const_cast< ::SProtoSpace::public_role_base_info*>(&::SProtoSpace::public_role_base_info::default_instance());
}

pub_game_send_flower_ack::pub_game_send_flower_ack(const pub_game_send_flower_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_send_flower_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1260;
  send_role_id_ = GOOGLE_ULONGLONG(0);
  send_info_ = NULL;
  to_role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_send_flower_ack::~pub_game_send_flower_ack() {
  SharedDtor();
}

void pub_game_send_flower_ack::SharedDtor() {
  if (this != default_instance_) {
    delete send_info_;
    delete to_role_info_;
  }
}

void pub_game_send_flower_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_send_flower_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_send_flower_ack_descriptor_;
}

const pub_game_send_flower_ack& pub_game_send_flower_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_send_flower_ack* pub_game_send_flower_ack::default_instance_ = NULL;

pub_game_send_flower_ack* pub_game_send_flower_ack::New() const {
  return new pub_game_send_flower_ack;
}

void pub_game_send_flower_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1260;
    send_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_send_info()) {
      if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
    }
    if (has_to_role_info()) {
      if (to_role_info_ != NULL) to_role_info_->::SProtoSpace::public_role_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_send_flower_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_send_flower_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_role_id;
        break;
      }

      // optional uint64 send_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_role_id_)));
          set_has_send_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_send_info;
        break;
      }

      // optional .SProtoSpace.flower_send_info send_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_to_role_info;
        break;
      }

      // optional .SProtoSpace.public_role_base_info to_role_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_to_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_send_flower_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_send_flower_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 send_role_id = 2;
  if (has_send_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->send_role_id(), output);
  }

  // optional .SProtoSpace.flower_send_info send_info = 3;
  if (has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->send_info(), output);
  }

  // optional .SProtoSpace.public_role_base_info to_role_info = 4;
  if (has_to_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->to_role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_send_flower_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_send_flower_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 send_role_id = 2;
  if (has_send_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->send_role_id(), target);
  }

  // optional .SProtoSpace.flower_send_info send_info = 3;
  if (has_send_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->send_info(), target);
  }

  // optional .SProtoSpace.public_role_base_info to_role_info = 4;
  if (has_to_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->to_role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_send_flower_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_send_flower_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 send_role_id = 2;
    if (has_send_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->send_role_id());
    }

    // optional .SProtoSpace.flower_send_info send_info = 3;
    if (has_send_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_info());
    }

    // optional .SProtoSpace.public_role_base_info to_role_info = 4;
    if (has_to_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->to_role_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_send_flower_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_send_flower_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_send_flower_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_send_flower_ack::MergeFrom(const pub_game_send_flower_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_send_role_id()) {
      set_send_role_id(from.send_role_id());
    }
    if (from.has_send_info()) {
      mutable_send_info()->::SProtoSpace::flower_send_info::MergeFrom(from.send_info());
    }
    if (from.has_to_role_info()) {
      mutable_to_role_info()->::SProtoSpace::public_role_base_info::MergeFrom(from.to_role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_send_flower_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_send_flower_ack::CopyFrom(const pub_game_send_flower_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_send_flower_ack::IsInitialized() const {

  return true;
}

void pub_game_send_flower_ack::Swap(pub_game_send_flower_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(send_role_id_, other->send_role_id_);
    std::swap(send_info_, other->send_info_);
    std::swap(to_role_info_, other->to_role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_send_flower_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_send_flower_ack_descriptor_;
  metadata.reflection = pub_game_send_flower_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_flower_to_receive_nty::kProtoidFieldNumber;
const int game_pub_flower_to_receive_nty::kToRoleIdFieldNumber;
const int game_pub_flower_to_receive_nty::kFromRoleIdFieldNumber;
const int game_pub_flower_to_receive_nty::kAddPopularityNumFieldNumber;
const int game_pub_flower_to_receive_nty::kSendInfoFieldNumber;
#endif  // !_MSC_VER

game_pub_flower_to_receive_nty::game_pub_flower_to_receive_nty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_flower_to_receive_nty::InitAsDefaultInstance() {
  send_info_ = const_cast< ::SProtoSpace::flower_send_info*>(&::SProtoSpace::flower_send_info::default_instance());
}

game_pub_flower_to_receive_nty::game_pub_flower_to_receive_nty(const game_pub_flower_to_receive_nty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_flower_to_receive_nty::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1261;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  add_popularity_num_ = 0u;
  send_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_flower_to_receive_nty::~game_pub_flower_to_receive_nty() {
  SharedDtor();
}

void game_pub_flower_to_receive_nty::SharedDtor() {
  if (this != default_instance_) {
    delete send_info_;
  }
}

void game_pub_flower_to_receive_nty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_flower_to_receive_nty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_flower_to_receive_nty_descriptor_;
}

const game_pub_flower_to_receive_nty& game_pub_flower_to_receive_nty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_flower_to_receive_nty* game_pub_flower_to_receive_nty::default_instance_ = NULL;

game_pub_flower_to_receive_nty* game_pub_flower_to_receive_nty::New() const {
  return new game_pub_flower_to_receive_nty;
}

void game_pub_flower_to_receive_nty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1261;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    from_role_id_ = GOOGLE_ULONGLONG(0);
    add_popularity_num_ = 0u;
    if (has_send_info()) {
      if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_flower_to_receive_nty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_flower_to_receive_nty_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_popularity_num;
        break;
      }

      // optional uint32 add_popularity_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_popularity_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_popularity_num_)));
          set_has_add_popularity_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_info;
        break;
      }

      // optional .SProtoSpace.flower_send_info send_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_flower_to_receive_nty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_flower_to_receive_nty_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional uint64 from_role_id = 3;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_role_id(), output);
  }

  // optional uint32 add_popularity_num = 4;
  if (has_add_popularity_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_popularity_num(), output);
  }

  // optional .SProtoSpace.flower_send_info send_info = 5;
  if (has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->send_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_flower_to_receive_nty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_flower_to_receive_nty_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional uint64 from_role_id = 3;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_role_id(), target);
  }

  // optional uint32 add_popularity_num = 4;
  if (has_add_popularity_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_popularity_num(), target);
  }

  // optional .SProtoSpace.flower_send_info send_info = 5;
  if (has_send_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->send_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_flower_to_receive_nty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_flower_to_receive_nty_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional uint64 from_role_id = 3;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional uint32 add_popularity_num = 4;
    if (has_add_popularity_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_popularity_num());
    }

    // optional .SProtoSpace.flower_send_info send_info = 5;
    if (has_send_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_flower_to_receive_nty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_flower_to_receive_nty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_flower_to_receive_nty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_flower_to_receive_nty::MergeFrom(const game_pub_flower_to_receive_nty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_add_popularity_num()) {
      set_add_popularity_num(from.add_popularity_num());
    }
    if (from.has_send_info()) {
      mutable_send_info()->::SProtoSpace::flower_send_info::MergeFrom(from.send_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_flower_to_receive_nty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_flower_to_receive_nty::CopyFrom(const game_pub_flower_to_receive_nty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_flower_to_receive_nty::IsInitialized() const {

  return true;
}

void game_pub_flower_to_receive_nty::Swap(game_pub_flower_to_receive_nty* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(add_popularity_num_, other->add_popularity_num_);
    std::swap(send_info_, other->send_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_flower_to_receive_nty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_flower_to_receive_nty_descriptor_;
  metadata.reflection = game_pub_flower_to_receive_nty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_flower_to_receive_nty::kProtoidFieldNumber;
const int pub_game_flower_to_receive_nty::kToRoleIdFieldNumber;
const int pub_game_flower_to_receive_nty::kFromRoleIdFieldNumber;
const int pub_game_flower_to_receive_nty::kAddPopularityNumFieldNumber;
const int pub_game_flower_to_receive_nty::kSendInfoFieldNumber;
#endif  // !_MSC_VER

pub_game_flower_to_receive_nty::pub_game_flower_to_receive_nty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_flower_to_receive_nty::InitAsDefaultInstance() {
  send_info_ = const_cast< ::SProtoSpace::flower_send_info*>(&::SProtoSpace::flower_send_info::default_instance());
}

pub_game_flower_to_receive_nty::pub_game_flower_to_receive_nty(const pub_game_flower_to_receive_nty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_flower_to_receive_nty::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1262;
  to_role_id_ = GOOGLE_ULONGLONG(0);
  from_role_id_ = GOOGLE_ULONGLONG(0);
  add_popularity_num_ = 0u;
  send_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_flower_to_receive_nty::~pub_game_flower_to_receive_nty() {
  SharedDtor();
}

void pub_game_flower_to_receive_nty::SharedDtor() {
  if (this != default_instance_) {
    delete send_info_;
  }
}

void pub_game_flower_to_receive_nty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_flower_to_receive_nty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_flower_to_receive_nty_descriptor_;
}

const pub_game_flower_to_receive_nty& pub_game_flower_to_receive_nty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_flower_to_receive_nty* pub_game_flower_to_receive_nty::default_instance_ = NULL;

pub_game_flower_to_receive_nty* pub_game_flower_to_receive_nty::New() const {
  return new pub_game_flower_to_receive_nty;
}

void pub_game_flower_to_receive_nty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1262;
    to_role_id_ = GOOGLE_ULONGLONG(0);
    from_role_id_ = GOOGLE_ULONGLONG(0);
    add_popularity_num_ = 0u;
    if (has_send_info()) {
      if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_flower_to_receive_nty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_flower_to_receive_nty_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_popularity_num;
        break;
      }

      // optional uint32 add_popularity_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_popularity_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_popularity_num_)));
          set_has_add_popularity_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_send_info;
        break;
      }

      // optional .SProtoSpace.flower_send_info send_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_flower_to_receive_nty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_flower_to_receive_nty_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->to_role_id(), output);
  }

  // optional uint64 from_role_id = 3;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->from_role_id(), output);
  }

  // optional uint32 add_popularity_num = 4;
  if (has_add_popularity_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->add_popularity_num(), output);
  }

  // optional .SProtoSpace.flower_send_info send_info = 5;
  if (has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->send_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_flower_to_receive_nty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_flower_to_receive_nty_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 to_role_id = 2;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->to_role_id(), target);
  }

  // optional uint64 from_role_id = 3;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->from_role_id(), target);
  }

  // optional uint32 add_popularity_num = 4;
  if (has_add_popularity_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->add_popularity_num(), target);
  }

  // optional .SProtoSpace.flower_send_info send_info = 5;
  if (has_send_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->send_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_flower_to_receive_nty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_flower_to_receive_nty_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 to_role_id = 2;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional uint64 from_role_id = 3;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional uint32 add_popularity_num = 4;
    if (has_add_popularity_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_popularity_num());
    }

    // optional .SProtoSpace.flower_send_info send_info = 5;
    if (has_send_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_flower_to_receive_nty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_flower_to_receive_nty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_flower_to_receive_nty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_flower_to_receive_nty::MergeFrom(const pub_game_flower_to_receive_nty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_add_popularity_num()) {
      set_add_popularity_num(from.add_popularity_num());
    }
    if (from.has_send_info()) {
      mutable_send_info()->::SProtoSpace::flower_send_info::MergeFrom(from.send_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_flower_to_receive_nty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_flower_to_receive_nty::CopyFrom(const pub_game_flower_to_receive_nty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_flower_to_receive_nty::IsInitialized() const {

  return true;
}

void pub_game_flower_to_receive_nty::Swap(pub_game_flower_to_receive_nty* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(add_popularity_num_, other->add_popularity_num_);
    std::swap(send_info_, other->send_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_flower_to_receive_nty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_flower_to_receive_nty_descriptor_;
  metadata.reflection = pub_game_flower_to_receive_nty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_forward_add_req::kProtoIdFieldNumber;
const int pub_forward_add_req::kTargetIdFieldNumber;
const int pub_forward_add_req::kAreaIdFieldNumber;
const int pub_forward_add_req::kApplyInfoFieldNumber;
#endif  // !_MSC_VER

pub_forward_add_req::pub_forward_add_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_forward_add_req::InitAsDefaultInstance() {
  apply_info_ = const_cast< ::SProtoSpace::friend_apply_info*>(&::SProtoSpace::friend_apply_info::default_instance());
}

pub_forward_add_req::pub_forward_add_req(const pub_forward_add_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_forward_add_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1515;
  target_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  apply_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_forward_add_req::~pub_forward_add_req() {
  SharedDtor();
}

void pub_forward_add_req::SharedDtor() {
  if (this != default_instance_) {
    delete apply_info_;
  }
}

void pub_forward_add_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_forward_add_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_forward_add_req_descriptor_;
}

const pub_forward_add_req& pub_forward_add_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_forward_add_req* pub_forward_add_req::default_instance_ = NULL;

pub_forward_add_req* pub_forward_add_req::New() const {
  return new pub_forward_add_req;
}

void pub_forward_add_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1515;
    target_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    if (has_apply_info()) {
      if (apply_info_ != NULL) apply_info_->::SProtoSpace::friend_apply_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_forward_add_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_apply_info;
        break;
      }

      // optional .SProtoSpace.friend_apply_info apply_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_forward_add_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional .SProtoSpace.friend_apply_info apply_info = 4;
  if (has_apply_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->apply_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_forward_add_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional .SProtoSpace.friend_apply_info apply_info = 4;
  if (has_apply_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->apply_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_forward_add_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional .SProtoSpace.friend_apply_info apply_info = 4;
    if (has_apply_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_forward_add_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_forward_add_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_forward_add_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_forward_add_req::MergeFrom(const pub_forward_add_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_apply_info()) {
      mutable_apply_info()->::SProtoSpace::friend_apply_info::MergeFrom(from.apply_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_forward_add_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_forward_add_req::CopyFrom(const pub_forward_add_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_forward_add_req::IsInitialized() const {

  return true;
}

void pub_forward_add_req::Swap(pub_forward_add_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(apply_info_, other->apply_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_forward_add_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_forward_add_req_descriptor_;
  metadata.reflection = pub_forward_add_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_forward_add_ack::kProtoIdFieldNumber;
const int pub_forward_add_ack::kTargetIdFieldNumber;
const int pub_forward_add_ack::kAreaIdFieldNumber;
const int pub_forward_add_ack::kApplyInfoFieldNumber;
#endif  // !_MSC_VER

pub_forward_add_ack::pub_forward_add_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_forward_add_ack::InitAsDefaultInstance() {
  apply_info_ = const_cast< ::SProtoSpace::friend_apply_info*>(&::SProtoSpace::friend_apply_info::default_instance());
}

pub_forward_add_ack::pub_forward_add_ack(const pub_forward_add_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_forward_add_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1516;
  target_id_ = GOOGLE_ULONGLONG(0);
  area_id_ = 0u;
  apply_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_forward_add_ack::~pub_forward_add_ack() {
  SharedDtor();
}

void pub_forward_add_ack::SharedDtor() {
  if (this != default_instance_) {
    delete apply_info_;
  }
}

void pub_forward_add_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_forward_add_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_forward_add_ack_descriptor_;
}

const pub_forward_add_ack& pub_forward_add_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_forward_add_ack* pub_forward_add_ack::default_instance_ = NULL;

pub_forward_add_ack* pub_forward_add_ack::New() const {
  return new pub_forward_add_ack;
}

void pub_forward_add_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1516;
    target_id_ = GOOGLE_ULONGLONG(0);
    area_id_ = 0u;
    if (has_apply_info()) {
      if (apply_info_ != NULL) apply_info_->::SProtoSpace::friend_apply_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_forward_add_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_area_id;
        break;
      }

      // optional uint32 area_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_apply_info;
        break;
      }

      // optional .SProtoSpace.friend_apply_info apply_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_forward_add_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_id(), output);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area_id(), output);
  }

  // optional .SProtoSpace.friend_apply_info apply_info = 4;
  if (has_apply_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->apply_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_forward_add_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_id(), target);
  }

  // optional uint32 area_id = 3;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area_id(), target);
  }

  // optional .SProtoSpace.friend_apply_info apply_info = 4;
  if (has_apply_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->apply_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_forward_add_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_forward_add_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

    // optional uint32 area_id = 3;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional .SProtoSpace.friend_apply_info apply_info = 4;
    if (has_apply_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_forward_add_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_forward_add_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_forward_add_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_forward_add_ack::MergeFrom(const pub_forward_add_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_apply_info()) {
      mutable_apply_info()->::SProtoSpace::friend_apply_info::MergeFrom(from.apply_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_forward_add_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_forward_add_ack::CopyFrom(const pub_forward_add_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_forward_add_ack::IsInitialized() const {

  return true;
}

void pub_forward_add_ack::Swap(pub_forward_add_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(target_id_, other->target_id_);
    std::swap(area_id_, other->area_id_);
    std::swap(apply_info_, other->apply_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_forward_add_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_forward_add_ack_descriptor_;
  metadata.reflection = pub_forward_add_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int message_packing_info::kProtoidFieldNumber;
const int message_packing_info::kProtoBytesFieldNumber;
const int message_packing_info::kProtoLenFieldNumber;
#endif  // !_MSC_VER

message_packing_info::message_packing_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void message_packing_info::InitAsDefaultInstance() {
}

message_packing_info::message_packing_info(const message_packing_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void message_packing_info::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1;
  proto_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proto_len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

message_packing_info::~message_packing_info() {
  SharedDtor();
}

void message_packing_info::SharedDtor() {
  if (proto_bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete proto_bytes_;
  }
  if (this != default_instance_) {
  }
}

void message_packing_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* message_packing_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return message_packing_info_descriptor_;
}

const message_packing_info& message_packing_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

message_packing_info* message_packing_info::default_instance_ = NULL;

message_packing_info* message_packing_info::New() const {
  return new message_packing_info;
}

void message_packing_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1;
    if (has_proto_bytes()) {
      if (proto_bytes_ != &::google::protobuf::internal::kEmptyString) {
        proto_bytes_->clear();
      }
    }
    proto_len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool message_packing_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proto_bytes;
        break;
      }

      // optional bytes proto_bytes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proto_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_proto_len;
        break;
      }

      // optional uint32 proto_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_len_)));
          set_has_proto_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void message_packing_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1;
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bytes proto_bytes = 3;
  if (has_proto_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->proto_bytes(), output);
  }

  // optional uint32 proto_len = 4;
  if (has_proto_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->proto_len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* message_packing_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1;
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bytes proto_bytes = 3;
  if (has_proto_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->proto_bytes(), target);
  }

  // optional uint32 proto_len = 4;
  if (has_proto_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->proto_len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int message_packing_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1;
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bytes proto_bytes = 3;
    if (has_proto_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proto_bytes());
    }

    // optional uint32 proto_len = 4;
    if (has_proto_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proto_len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void message_packing_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const message_packing_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const message_packing_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void message_packing_info::MergeFrom(const message_packing_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_proto_bytes()) {
      set_proto_bytes(from.proto_bytes());
    }
    if (from.has_proto_len()) {
      set_proto_len(from.proto_len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void message_packing_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_packing_info::CopyFrom(const message_packing_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_packing_info::IsInitialized() const {

  return true;
}

void message_packing_info::Swap(message_packing_info* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(proto_bytes_, other->proto_bytes_);
    std::swap(proto_len_, other->proto_len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata message_packing_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = message_packing_info_descriptor_;
  metadata.reflection = message_packing_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_msg_packing_ntf::kProtoidFieldNumber;
const int game_pub_msg_packing_ntf::kTargetGameIdFieldNumber;
const int game_pub_msg_packing_ntf::kPackingFieldNumber;
#endif  // !_MSC_VER

game_pub_msg_packing_ntf::game_pub_msg_packing_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_msg_packing_ntf::InitAsDefaultInstance() {
  packing_ = const_cast< ::SProtoSpace::message_packing_info*>(&::SProtoSpace::message_packing_info::default_instance());
}

game_pub_msg_packing_ntf::game_pub_msg_packing_ntf(const game_pub_msg_packing_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_msg_packing_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1200;
  target_game_id_ = GOOGLE_ULONGLONG(0);
  packing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_msg_packing_ntf::~game_pub_msg_packing_ntf() {
  SharedDtor();
}

void game_pub_msg_packing_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete packing_;
  }
}

void game_pub_msg_packing_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_msg_packing_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_msg_packing_ntf_descriptor_;
}

const game_pub_msg_packing_ntf& game_pub_msg_packing_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_msg_packing_ntf* game_pub_msg_packing_ntf::default_instance_ = NULL;

game_pub_msg_packing_ntf* game_pub_msg_packing_ntf::New() const {
  return new game_pub_msg_packing_ntf;
}

void game_pub_msg_packing_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1200;
    target_game_id_ = GOOGLE_ULONGLONG(0);
    if (has_packing()) {
      if (packing_ != NULL) packing_->::SProtoSpace::message_packing_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_msg_packing_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_msg_packing_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_game_id;
        break;
      }

      // optional uint64 target_game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_game_id_)));
          set_has_target_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packing;
        break;
      }

      // optional .SProtoSpace.message_packing_info packing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_msg_packing_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_msg_packing_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 target_game_id = 2;
  if (has_target_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_game_id(), output);
  }

  // optional .SProtoSpace.message_packing_info packing = 3;
  if (has_packing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_msg_packing_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_msg_packing_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 target_game_id = 2;
  if (has_target_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_game_id(), target);
  }

  // optional .SProtoSpace.message_packing_info packing = 3;
  if (has_packing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->packing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_msg_packing_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = game_pub_msg_packing_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 target_game_id = 2;
    if (has_target_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_game_id());
    }

    // optional .SProtoSpace.message_packing_info packing = 3;
    if (has_packing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_msg_packing_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_msg_packing_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_msg_packing_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_msg_packing_ntf::MergeFrom(const game_pub_msg_packing_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_target_game_id()) {
      set_target_game_id(from.target_game_id());
    }
    if (from.has_packing()) {
      mutable_packing()->::SProtoSpace::message_packing_info::MergeFrom(from.packing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_msg_packing_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_msg_packing_ntf::CopyFrom(const game_pub_msg_packing_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_msg_packing_ntf::IsInitialized() const {

  return true;
}

void game_pub_msg_packing_ntf::Swap(game_pub_msg_packing_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(target_game_id_, other->target_game_id_);
    std::swap(packing_, other->packing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_msg_packing_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_msg_packing_ntf_descriptor_;
  metadata.reflection = game_pub_msg_packing_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_msg_packing_ntf::kProtoidFieldNumber;
const int pub_game_msg_packing_ntf::kTargetGameIdFieldNumber;
const int pub_game_msg_packing_ntf::kPackingFieldNumber;
#endif  // !_MSC_VER

pub_game_msg_packing_ntf::pub_game_msg_packing_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_msg_packing_ntf::InitAsDefaultInstance() {
  packing_ = const_cast< ::SProtoSpace::message_packing_info*>(&::SProtoSpace::message_packing_info::default_instance());
}

pub_game_msg_packing_ntf::pub_game_msg_packing_ntf(const pub_game_msg_packing_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_msg_packing_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1201;
  target_game_id_ = GOOGLE_ULONGLONG(0);
  packing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_msg_packing_ntf::~pub_game_msg_packing_ntf() {
  SharedDtor();
}

void pub_game_msg_packing_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete packing_;
  }
}

void pub_game_msg_packing_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_msg_packing_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_msg_packing_ntf_descriptor_;
}

const pub_game_msg_packing_ntf& pub_game_msg_packing_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_msg_packing_ntf* pub_game_msg_packing_ntf::default_instance_ = NULL;

pub_game_msg_packing_ntf* pub_game_msg_packing_ntf::New() const {
  return new pub_game_msg_packing_ntf;
}

void pub_game_msg_packing_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1201;
    target_game_id_ = GOOGLE_ULONGLONG(0);
    if (has_packing()) {
      if (packing_ != NULL) packing_->::SProtoSpace::message_packing_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_msg_packing_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_msg_packing_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_game_id;
        break;
      }

      // optional uint64 target_game_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_game_id_)));
          set_has_target_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packing;
        break;
      }

      // optional .SProtoSpace.message_packing_info packing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_msg_packing_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_msg_packing_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 target_game_id = 2;
  if (has_target_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->target_game_id(), output);
  }

  // optional .SProtoSpace.message_packing_info packing = 3;
  if (has_packing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->packing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_msg_packing_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_msg_packing_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 target_game_id = 2;
  if (has_target_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_game_id(), target);
  }

  // optional .SProtoSpace.message_packing_info packing = 3;
  if (has_packing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->packing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_msg_packing_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_game_msg_packing_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 target_game_id = 2;
    if (has_target_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_game_id());
    }

    // optional .SProtoSpace.message_packing_info packing = 3;
    if (has_packing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_msg_packing_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_msg_packing_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_msg_packing_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_msg_packing_ntf::MergeFrom(const pub_game_msg_packing_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_target_game_id()) {
      set_target_game_id(from.target_game_id());
    }
    if (from.has_packing()) {
      mutable_packing()->::SProtoSpace::message_packing_info::MergeFrom(from.packing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_msg_packing_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_msg_packing_ntf::CopyFrom(const pub_game_msg_packing_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_msg_packing_ntf::IsInitialized() const {

  return true;
}

void pub_game_msg_packing_ntf::Swap(pub_game_msg_packing_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(target_game_id_, other->target_game_id_);
    std::swap(packing_, other->packing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_msg_packing_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_msg_packing_ntf_descriptor_;
  metadata.reflection = pub_game_msg_packing_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_role_req::kProtoIdFieldNumber;
const int pub_get_role_req::kModeFieldNumber;
const int pub_get_role_req::kUuidFieldNumber;
const int pub_get_role_req::kTargetIdFieldNumber;
#endif  // !_MSC_VER

pub_get_role_req::pub_get_role_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_role_req::InitAsDefaultInstance() {
}

pub_get_role_req::pub_get_role_req(const pub_get_role_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_role_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1519;
  mode_ = 1;
  uuid_ = GOOGLE_ULONGLONG(0);
  target_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_role_req::~pub_get_role_req() {
  SharedDtor();
}

void pub_get_role_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_role_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_role_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_role_req_descriptor_;
}

const pub_get_role_req& pub_get_role_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_role_req* pub_get_role_req::default_instance_ = NULL;

pub_get_role_req* pub_get_role_req::New() const {
  return new pub_get_role_req;
}

void pub_get_role_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1519;
    mode_ = 1;
    uuid_ = GOOGLE_ULONGLONG(0);
    target_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_role_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .SProtoSpace.EGetRoleDoType mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGetRoleDoType_IsValid(value)) {
            set_mode(static_cast< ::SProtoSpace::EGetRoleDoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_id;
        break;
      }

      // optional uint64 target_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_role_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGetRoleDoType mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uuid(), output);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->target_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_role_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGetRoleDoType mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uuid(), target);
  }

  // optional uint64 target_id = 4;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->target_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_role_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGetRoleDoType mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint64 target_id = 4;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_role_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_role_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_role_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_role_req::MergeFrom(const pub_get_role_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_role_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_role_req::CopyFrom(const pub_get_role_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_role_req::IsInitialized() const {

  return true;
}

void pub_get_role_req::Swap(pub_get_role_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(mode_, other->mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(target_id_, other->target_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_role_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_role_req_descriptor_;
  metadata.reflection = pub_get_role_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_role_ack::kProtoIdFieldNumber;
const int pub_get_role_ack::kModeFieldNumber;
const int pub_get_role_ack::kUuidFieldNumber;
const int pub_get_role_ack::kInfoFieldNumber;
#endif  // !_MSC_VER

pub_get_role_ack::pub_get_role_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_role_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::friend_base_info*>(&::SProtoSpace::friend_base_info::default_instance());
}

pub_get_role_ack::pub_get_role_ack(const pub_get_role_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_role_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1520;
  mode_ = 1;
  uuid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_role_ack::~pub_get_role_ack() {
  SharedDtor();
}

void pub_get_role_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void pub_get_role_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_role_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_role_ack_descriptor_;
}

const pub_get_role_ack& pub_get_role_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_role_ack* pub_get_role_ack::default_instance_ = NULL;

pub_get_role_ack* pub_get_role_ack::New() const {
  return new pub_get_role_ack;
}

void pub_get_role_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1520;
    mode_ = 1;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::friend_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_role_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }

      // optional .SProtoSpace.EGetRoleDoType mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGetRoleDoType_IsValid(value)) {
            set_mode(static_cast< ::SProtoSpace::EGetRoleDoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.friend_base_info info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_role_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.EGetRoleDoType mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uuid(), output);
  }

  // optional .SProtoSpace.friend_base_info info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_role_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.EGetRoleDoType mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional uint64 uuid = 3;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uuid(), target);
  }

  // optional .SProtoSpace.friend_base_info info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_role_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.EGetRoleDoType mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint64 uuid = 3;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.friend_base_info info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_role_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_role_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_role_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_role_ack::MergeFrom(const pub_get_role_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::friend_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_role_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_role_ack::CopyFrom(const pub_get_role_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_role_ack::IsInitialized() const {

  return true;
}

void pub_get_role_ack::Swap(pub_get_role_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(mode_, other->mode_);
    std::swap(uuid_, other->uuid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_role_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_role_ack_descriptor_;
  metadata.reflection = pub_get_role_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_friends_ntf::kProtoIdFieldNumber;
const int pub_game_friends_ntf::kUuidFieldNumber;
const int pub_game_friends_ntf::kNtfFieldNumber;
#endif  // !_MSC_VER

pub_game_friends_ntf::pub_game_friends_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_friends_ntf::InitAsDefaultInstance() {
  ntf_ = const_cast< ::SProtoSpace::game_friends_ntf*>(&::SProtoSpace::game_friends_ntf::default_instance());
}

pub_game_friends_ntf::pub_game_friends_ntf(const pub_game_friends_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_friends_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1521;
  uuid_ = GOOGLE_ULONGLONG(0);
  ntf_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_friends_ntf::~pub_game_friends_ntf() {
  SharedDtor();
}

void pub_game_friends_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete ntf_;
  }
}

void pub_game_friends_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_friends_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_friends_ntf_descriptor_;
}

const pub_game_friends_ntf& pub_game_friends_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_friends_ntf* pub_game_friends_ntf::default_instance_ = NULL;

pub_game_friends_ntf* pub_game_friends_ntf::New() const {
  return new pub_game_friends_ntf;
}

void pub_game_friends_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1521;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_ntf()) {
      if (ntf_ != NULL) ntf_->::SProtoSpace::game_friends_ntf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_friends_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_friends_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ntf;
        break;
      }

      // optional .SProtoSpace.game_friends_ntf ntf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ntf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ntf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_friends_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_friends_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.game_friends_ntf ntf = 3;
  if (has_ntf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ntf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_friends_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_friends_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.game_friends_ntf ntf = 3;
  if (has_ntf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ntf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_friends_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_friends_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.game_friends_ntf ntf = 3;
    if (has_ntf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ntf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_friends_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_friends_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_friends_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_friends_ntf::MergeFrom(const pub_game_friends_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_ntf()) {
      mutable_ntf()->::SProtoSpace::game_friends_ntf::MergeFrom(from.ntf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_friends_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_friends_ntf::CopyFrom(const pub_game_friends_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_friends_ntf::IsInitialized() const {

  return true;
}

void pub_game_friends_ntf::Swap(pub_game_friends_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(ntf_, other->ntf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_friends_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_friends_ntf_descriptor_;
  metadata.reflection = pub_game_friends_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_complete_role_req::kProtoIdFieldNumber;
const int pub_complete_role_req::kUuidFieldNumber;
const int pub_complete_role_req::kAckInfoFieldNumber;
#endif  // !_MSC_VER

pub_complete_role_req::pub_complete_role_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_complete_role_req::InitAsDefaultInstance() {
  ack_info_ = const_cast< ::SProtoSpace::game_onekey_apply_info_ack*>(&::SProtoSpace::game_onekey_apply_info_ack::default_instance());
}

pub_complete_role_req::pub_complete_role_req(const pub_complete_role_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_complete_role_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1522;
  uuid_ = GOOGLE_ULONGLONG(0);
  ack_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_complete_role_req::~pub_complete_role_req() {
  SharedDtor();
}

void pub_complete_role_req::SharedDtor() {
  if (this != default_instance_) {
    delete ack_info_;
  }
}

void pub_complete_role_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_complete_role_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_complete_role_req_descriptor_;
}

const pub_complete_role_req& pub_complete_role_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_complete_role_req* pub_complete_role_req::default_instance_ = NULL;

pub_complete_role_req* pub_complete_role_req::New() const {
  return new pub_complete_role_req;
}

void pub_complete_role_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1522;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_ack_info()) {
      if (ack_info_ != NULL) ack_info_->::SProtoSpace::game_onekey_apply_info_ack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_complete_role_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ack_info;
        break;
      }

      // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_complete_role_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
  if (has_ack_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ack_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_complete_role_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
  if (has_ack_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ack_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_complete_role_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
    if (has_ack_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_complete_role_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_complete_role_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_complete_role_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_complete_role_req::MergeFrom(const pub_complete_role_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_ack_info()) {
      mutable_ack_info()->::SProtoSpace::game_onekey_apply_info_ack::MergeFrom(from.ack_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_complete_role_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_complete_role_req::CopyFrom(const pub_complete_role_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_complete_role_req::IsInitialized() const {

  return true;
}

void pub_complete_role_req::Swap(pub_complete_role_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(ack_info_, other->ack_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_complete_role_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_complete_role_req_descriptor_;
  metadata.reflection = pub_complete_role_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_complete_role_ack::kProtoIdFieldNumber;
const int pub_complete_role_ack::kUuidFieldNumber;
const int pub_complete_role_ack::kAckInfoFieldNumber;
#endif  // !_MSC_VER

pub_complete_role_ack::pub_complete_role_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_complete_role_ack::InitAsDefaultInstance() {
  ack_info_ = const_cast< ::SProtoSpace::game_onekey_apply_info_ack*>(&::SProtoSpace::game_onekey_apply_info_ack::default_instance());
}

pub_complete_role_ack::pub_complete_role_ack(const pub_complete_role_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_complete_role_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1523;
  uuid_ = GOOGLE_ULONGLONG(0);
  ack_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_complete_role_ack::~pub_complete_role_ack() {
  SharedDtor();
}

void pub_complete_role_ack::SharedDtor() {
  if (this != default_instance_) {
    delete ack_info_;
  }
}

void pub_complete_role_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_complete_role_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_complete_role_ack_descriptor_;
}

const pub_complete_role_ack& pub_complete_role_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_complete_role_ack* pub_complete_role_ack::default_instance_ = NULL;

pub_complete_role_ack* pub_complete_role_ack::New() const {
  return new pub_complete_role_ack;
}

void pub_complete_role_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1523;
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_ack_info()) {
      if (ack_info_ != NULL) ack_info_->::SProtoSpace::game_onekey_apply_info_ack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_complete_role_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ack_info;
        break;
      }

      // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ack_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ack_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_complete_role_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
  if (has_ack_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ack_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_complete_role_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
  if (has_ack_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ack_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_complete_role_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_complete_role_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional .SProtoSpace.game_onekey_apply_info_ack ack_info = 3;
    if (has_ack_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ack_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_complete_role_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_complete_role_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_complete_role_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_complete_role_ack::MergeFrom(const pub_complete_role_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_ack_info()) {
      mutable_ack_info()->::SProtoSpace::game_onekey_apply_info_ack::MergeFrom(from.ack_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_complete_role_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_complete_role_ack::CopyFrom(const pub_complete_role_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_complete_role_ack::IsInitialized() const {

  return true;
}

void pub_complete_role_ack::Swap(pub_complete_role_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(ack_info_, other->ack_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_complete_role_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_complete_role_ack_descriptor_;
  metadata.reflection = pub_complete_role_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_friend_refresh_req::kProtoIdFieldNumber;
const int pub_friend_refresh_req::kUuidFieldNumber;
const int pub_friend_refresh_req::kRoleIdsFieldNumber;
const int pub_friend_refresh_req::kTypeFieldNumber;
const int pub_friend_refresh_req::kDoTypeFieldNumber;
#endif  // !_MSC_VER

pub_friend_refresh_req::pub_friend_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_friend_refresh_req::InitAsDefaultInstance() {
}

pub_friend_refresh_req::pub_friend_refresh_req(const pub_friend_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_friend_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1524;
  uuid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  do_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_friend_refresh_req::~pub_friend_refresh_req() {
  SharedDtor();
}

void pub_friend_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_friend_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_friend_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_friend_refresh_req_descriptor_;
}

const pub_friend_refresh_req& pub_friend_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_friend_refresh_req* pub_friend_refresh_req::default_instance_ = NULL;

pub_friend_refresh_req* pub_friend_refresh_req::New() const {
  return new pub_friend_refresh_req;
}

void pub_friend_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1524;
    uuid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    do_type_ = 0u;
  }
  role_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_friend_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        break;
      }

      // repeated uint64 role_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_role_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_ids;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_do_type;
        break;
      }

      // optional uint32 do_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &do_type_)));
          set_has_do_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_friend_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated uint64 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->role_ids(i), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional uint32 do_type = 5;
  if (has_do_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->do_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_friend_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated uint64 role_ids = 3;
  for (int i = 0; i < this->role_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->role_ids(i), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional uint32 do_type = 5;
  if (has_do_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->do_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_friend_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 do_type = 5;
    if (has_do_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->do_type());
    }

  }
  // repeated uint64 role_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_ids(i));
    }
    total_size += 1 * this->role_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_friend_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_friend_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_friend_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_friend_refresh_req::MergeFrom(const pub_friend_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_ids_.MergeFrom(from.role_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_do_type()) {
      set_do_type(from.do_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_friend_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_friend_refresh_req::CopyFrom(const pub_friend_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_friend_refresh_req::IsInitialized() const {

  return true;
}

void pub_friend_refresh_req::Swap(pub_friend_refresh_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    role_ids_.Swap(&other->role_ids_);
    std::swap(type_, other->type_);
    std::swap(do_type_, other->do_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_friend_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_friend_refresh_req_descriptor_;
  metadata.reflection = pub_friend_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_friend_refresh_ack::kProtoIdFieldNumber;
const int pub_friend_refresh_ack::kInfosFieldNumber;
const int pub_friend_refresh_ack::kTypeFieldNumber;
const int pub_friend_refresh_ack::kUuidFieldNumber;
const int pub_friend_refresh_ack::kDoTypeFieldNumber;
#endif  // !_MSC_VER

pub_friend_refresh_ack::pub_friend_refresh_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_friend_refresh_ack::InitAsDefaultInstance() {
}

pub_friend_refresh_ack::pub_friend_refresh_ack(const pub_friend_refresh_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_friend_refresh_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1525;
  type_ = 0u;
  uuid_ = GOOGLE_ULONGLONG(0);
  do_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_friend_refresh_ack::~pub_friend_refresh_ack() {
  SharedDtor();
}

void pub_friend_refresh_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_friend_refresh_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_friend_refresh_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_friend_refresh_ack_descriptor_;
}

const pub_friend_refresh_ack& pub_friend_refresh_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_friend_refresh_ack* pub_friend_refresh_ack::default_instance_ = NULL;

pub_friend_refresh_ack* pub_friend_refresh_ack::New() const {
  return new pub_friend_refresh_ack;
}

void pub_friend_refresh_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1525;
    type_ = 0u;
    uuid_ = GOOGLE_ULONGLONG(0);
    do_type_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_friend_refresh_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .SProtoSpace.friend_base_info infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_do_type;
        break;
      }

      // optional uint32 do_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_do_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &do_type_)));
          set_has_do_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_friend_refresh_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.friend_base_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint64 uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uuid(), output);
  }

  // optional uint32 do_type = 5;
  if (has_do_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->do_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_friend_refresh_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.friend_base_info infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint64 uuid = 4;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->uuid(), target);
  }

  // optional uint32 do_type = 5;
  if (has_do_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->do_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_friend_refresh_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_friend_refresh_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 uuid = 4;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 do_type = 5;
    if (has_do_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->do_type());
    }

  }
  // repeated .SProtoSpace.friend_base_info infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_friend_refresh_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_friend_refresh_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_friend_refresh_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_friend_refresh_ack::MergeFrom(const pub_friend_refresh_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_do_type()) {
      set_do_type(from.do_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_friend_refresh_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_friend_refresh_ack::CopyFrom(const pub_friend_refresh_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_friend_refresh_ack::IsInitialized() const {

  return true;
}

void pub_friend_refresh_ack::Swap(pub_friend_refresh_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    infos_.Swap(&other->infos_);
    std::swap(type_, other->type_);
    std::swap(uuid_, other->uuid_);
    std::swap(do_type_, other->do_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_friend_refresh_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_friend_refresh_ack_descriptor_;
  metadata.reflection = pub_friend_refresh_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_get_all_event_msg_ntf::kProtoIdFieldNumber;
const int game_pub_get_all_event_msg_ntf::kRoleIdFieldNumber;
#endif  // !_MSC_VER

game_pub_get_all_event_msg_ntf::game_pub_get_all_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_get_all_event_msg_ntf::InitAsDefaultInstance() {
}

game_pub_get_all_event_msg_ntf::game_pub_get_all_event_msg_ntf(const game_pub_get_all_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_get_all_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1250;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_get_all_event_msg_ntf::~game_pub_get_all_event_msg_ntf() {
  SharedDtor();
}

void game_pub_get_all_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_pub_get_all_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_get_all_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_get_all_event_msg_ntf_descriptor_;
}

const game_pub_get_all_event_msg_ntf& game_pub_get_all_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_get_all_event_msg_ntf* game_pub_get_all_event_msg_ntf::default_instance_ = NULL;

game_pub_get_all_event_msg_ntf* game_pub_get_all_event_msg_ntf::New() const {
  return new game_pub_get_all_event_msg_ntf;
}

void game_pub_get_all_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1250;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_get_all_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_all_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_get_all_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_all_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_get_all_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_all_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_get_all_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_all_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_get_all_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_get_all_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_get_all_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_get_all_event_msg_ntf::MergeFrom(const game_pub_get_all_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_get_all_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_get_all_event_msg_ntf::CopyFrom(const game_pub_get_all_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_get_all_event_msg_ntf::IsInitialized() const {

  return true;
}

void game_pub_get_all_event_msg_ntf::Swap(game_pub_get_all_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_get_all_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_get_all_event_msg_ntf_descriptor_;
  metadata.reflection = game_pub_get_all_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_get_all_event_msg_ntf::kProtoIdFieldNumber;
const int pub_game_get_all_event_msg_ntf::kRoleIdFieldNumber;
const int pub_game_get_all_event_msg_ntf::kEventMsgsFieldNumber;
#endif  // !_MSC_VER

pub_game_get_all_event_msg_ntf::pub_game_get_all_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_get_all_event_msg_ntf::InitAsDefaultInstance() {
}

pub_game_get_all_event_msg_ntf::pub_game_get_all_event_msg_ntf(const pub_game_get_all_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_get_all_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1251;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_get_all_event_msg_ntf::~pub_game_get_all_event_msg_ntf() {
  SharedDtor();
}

void pub_game_get_all_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_game_get_all_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_get_all_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_get_all_event_msg_ntf_descriptor_;
}

const pub_game_get_all_event_msg_ntf& pub_game_get_all_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_get_all_event_msg_ntf* pub_game_get_all_event_msg_ntf::default_instance_ = NULL;

pub_game_get_all_event_msg_ntf* pub_game_get_all_event_msg_ntf::New() const {
  return new pub_game_get_all_event_msg_ntf;
}

void pub_game_get_all_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1251;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  event_msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_get_all_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_all_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_msgs;
        break;
      }

      // repeated .SProtoSpace.db_event_msg_info event_msgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_get_all_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_all_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // repeated .SProtoSpace.db_event_msg_info event_msgs = 3;
  for (int i = 0; i < this->event_msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event_msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_get_all_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_all_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // repeated .SProtoSpace.db_event_msg_info event_msgs = 3;
  for (int i = 0; i < this->event_msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event_msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_get_all_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_all_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.db_event_msg_info event_msgs = 3;
  total_size += 1 * this->event_msgs_size();
  for (int i = 0; i < this->event_msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_get_all_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_get_all_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_get_all_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_get_all_event_msg_ntf::MergeFrom(const pub_game_get_all_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_msgs_.MergeFrom(from.event_msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_get_all_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_get_all_event_msg_ntf::CopyFrom(const pub_game_get_all_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_get_all_event_msg_ntf::IsInitialized() const {

  return true;
}

void pub_game_get_all_event_msg_ntf::Swap(pub_game_get_all_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    event_msgs_.Swap(&other->event_msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_get_all_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_get_all_event_msg_ntf_descriptor_;
  metadata.reflection = pub_game_get_all_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_get_id_event_msg_ntf::kProtoIdFieldNumber;
const int game_pub_get_id_event_msg_ntf::kRoleIdFieldNumber;
const int game_pub_get_id_event_msg_ntf::kEventIdFieldNumber;
#endif  // !_MSC_VER

game_pub_get_id_event_msg_ntf::game_pub_get_id_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_get_id_event_msg_ntf::InitAsDefaultInstance() {
}

game_pub_get_id_event_msg_ntf::game_pub_get_id_event_msg_ntf(const game_pub_get_id_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_get_id_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1257;
  role_id_ = GOOGLE_ULONGLONG(0);
  event_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_get_id_event_msg_ntf::~game_pub_get_id_event_msg_ntf() {
  SharedDtor();
}

void game_pub_get_id_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_pub_get_id_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_get_id_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_get_id_event_msg_ntf_descriptor_;
}

const game_pub_get_id_event_msg_ntf& game_pub_get_id_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_get_id_event_msg_ntf* game_pub_get_id_event_msg_ntf::default_instance_ = NULL;

game_pub_get_id_event_msg_ntf* game_pub_get_id_event_msg_ntf::New() const {
  return new game_pub_get_id_event_msg_ntf;
}

void game_pub_get_id_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1257;
    role_id_ = GOOGLE_ULONGLONG(0);
    event_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_get_id_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_id_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }

      // optional uint64 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_get_id_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_id_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->event_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_get_id_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_id_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 event_id = 3;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->event_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_get_id_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_id_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_get_id_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_get_id_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_get_id_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_get_id_event_msg_ntf::MergeFrom(const game_pub_get_id_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_get_id_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_get_id_event_msg_ntf::CopyFrom(const game_pub_get_id_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_get_id_event_msg_ntf::IsInitialized() const {

  return true;
}

void game_pub_get_id_event_msg_ntf::Swap(game_pub_get_id_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_get_id_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_get_id_event_msg_ntf_descriptor_;
  metadata.reflection = game_pub_get_id_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_get_id_event_msg_ntf::kProtoIdFieldNumber;
const int pub_game_get_id_event_msg_ntf::kRoleIdFieldNumber;
const int pub_game_get_id_event_msg_ntf::kEventMsgsFieldNumber;
#endif  // !_MSC_VER

pub_game_get_id_event_msg_ntf::pub_game_get_id_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_get_id_event_msg_ntf::InitAsDefaultInstance() {
  event_msgs_ = const_cast< ::SProtoSpace::db_event_msg_info*>(&::SProtoSpace::db_event_msg_info::default_instance());
}

pub_game_get_id_event_msg_ntf::pub_game_get_id_event_msg_ntf(const pub_game_get_id_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_get_id_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1258;
  role_id_ = GOOGLE_ULONGLONG(0);
  event_msgs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_get_id_event_msg_ntf::~pub_game_get_id_event_msg_ntf() {
  SharedDtor();
}

void pub_game_get_id_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete event_msgs_;
  }
}

void pub_game_get_id_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_get_id_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_get_id_event_msg_ntf_descriptor_;
}

const pub_game_get_id_event_msg_ntf& pub_game_get_id_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_get_id_event_msg_ntf* pub_game_get_id_event_msg_ntf::default_instance_ = NULL;

pub_game_get_id_event_msg_ntf* pub_game_get_id_event_msg_ntf::New() const {
  return new pub_game_get_id_event_msg_ntf;
}

void pub_game_get_id_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1258;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_event_msgs()) {
      if (event_msgs_ != NULL) event_msgs_->::SProtoSpace::db_event_msg_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_get_id_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_id_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_msgs;
        break;
      }

      // optional .SProtoSpace.db_event_msg_info event_msgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_get_id_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_id_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.db_event_msg_info event_msgs = 3;
  if (has_event_msgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event_msgs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_get_id_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_id_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.db_event_msg_info event_msgs = 3;
  if (has_event_msgs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event_msgs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_get_id_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_get_id_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.db_event_msg_info event_msgs = 3;
    if (has_event_msgs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_msgs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_get_id_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_get_id_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_get_id_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_get_id_event_msg_ntf::MergeFrom(const pub_game_get_id_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_event_msgs()) {
      mutable_event_msgs()->::SProtoSpace::db_event_msg_info::MergeFrom(from.event_msgs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_get_id_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_get_id_event_msg_ntf::CopyFrom(const pub_game_get_id_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_get_id_event_msg_ntf::IsInitialized() const {

  return true;
}

void pub_game_get_id_event_msg_ntf::Swap(pub_game_get_id_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(event_msgs_, other->event_msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_get_id_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_get_id_event_msg_ntf_descriptor_;
  metadata.reflection = pub_game_get_id_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_delete_event_msg_ntf::kProtoIdFieldNumber;
const int game_pub_delete_event_msg_ntf::kRoleIdFieldNumber;
const int game_pub_delete_event_msg_ntf::kDeleteIdFieldNumber;
#endif  // !_MSC_VER

game_pub_delete_event_msg_ntf::game_pub_delete_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_delete_event_msg_ntf::InitAsDefaultInstance() {
}

game_pub_delete_event_msg_ntf::game_pub_delete_event_msg_ntf(const game_pub_delete_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_delete_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1252;
  role_id_ = GOOGLE_ULONGLONG(0);
  delete_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_delete_event_msg_ntf::~game_pub_delete_event_msg_ntf() {
  SharedDtor();
}

void game_pub_delete_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_pub_delete_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_delete_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_delete_event_msg_ntf_descriptor_;
}

const game_pub_delete_event_msg_ntf& game_pub_delete_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_delete_event_msg_ntf* game_pub_delete_event_msg_ntf::default_instance_ = NULL;

game_pub_delete_event_msg_ntf* game_pub_delete_event_msg_ntf::New() const {
  return new game_pub_delete_event_msg_ntf;
}

void game_pub_delete_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1252;
    role_id_ = GOOGLE_ULONGLONG(0);
    delete_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_delete_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_delete_id;
        break;
      }

      // optional uint64 delete_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_delete_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &delete_id_)));
          set_has_delete_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_delete_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 delete_id = 4;
  if (has_delete_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->delete_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_delete_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 delete_id = 4;
  if (has_delete_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->delete_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_delete_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 delete_id = 4;
    if (has_delete_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->delete_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_delete_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_delete_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_delete_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_delete_event_msg_ntf::MergeFrom(const game_pub_delete_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_delete_id()) {
      set_delete_id(from.delete_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_delete_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_delete_event_msg_ntf::CopyFrom(const game_pub_delete_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_delete_event_msg_ntf::IsInitialized() const {

  return true;
}

void game_pub_delete_event_msg_ntf::Swap(game_pub_delete_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(delete_id_, other->delete_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_delete_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_delete_event_msg_ntf_descriptor_;
  metadata.reflection = game_pub_delete_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_delete_type_msgs_ntf::kProtoIdFieldNumber;
const int game_pub_delete_type_msgs_ntf::kRoleIdFieldNumber;
const int game_pub_delete_type_msgs_ntf::kEventTypeFieldNumber;
#endif  // !_MSC_VER

game_pub_delete_type_msgs_ntf::game_pub_delete_type_msgs_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_delete_type_msgs_ntf::InitAsDefaultInstance() {
}

game_pub_delete_type_msgs_ntf::game_pub_delete_type_msgs_ntf(const game_pub_delete_type_msgs_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_delete_type_msgs_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1253;
  role_id_ = GOOGLE_ULONGLONG(0);
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_delete_type_msgs_ntf::~game_pub_delete_type_msgs_ntf() {
  SharedDtor();
}

void game_pub_delete_type_msgs_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_pub_delete_type_msgs_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_delete_type_msgs_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_delete_type_msgs_ntf_descriptor_;
}

const game_pub_delete_type_msgs_ntf& game_pub_delete_type_msgs_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_delete_type_msgs_ntf* game_pub_delete_type_msgs_ntf::default_instance_ = NULL;

game_pub_delete_type_msgs_ntf* game_pub_delete_type_msgs_ntf::New() const {
  return new game_pub_delete_type_msgs_ntf;
}

void game_pub_delete_type_msgs_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1253;
    role_id_ = GOOGLE_ULONGLONG(0);
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_delete_type_msgs_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_type_msgs_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_delete_type_msgs_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_type_msgs_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_delete_type_msgs_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_type_msgs_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_delete_type_msgs_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_delete_type_msgs_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_delete_type_msgs_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_delete_type_msgs_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_delete_type_msgs_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_delete_type_msgs_ntf::MergeFrom(const game_pub_delete_type_msgs_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_delete_type_msgs_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_delete_type_msgs_ntf::CopyFrom(const game_pub_delete_type_msgs_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_delete_type_msgs_ntf::IsInitialized() const {

  return true;
}

void game_pub_delete_type_msgs_ntf::Swap(game_pub_delete_type_msgs_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_delete_type_msgs_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_delete_type_msgs_ntf_descriptor_;
  metadata.reflection = game_pub_delete_type_msgs_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_read_event_msg_ntf::kProtoIdFieldNumber;
const int game_pub_read_event_msg_ntf::kRoleIdFieldNumber;
const int game_pub_read_event_msg_ntf::kEventTypeFieldNumber;
#endif  // !_MSC_VER

game_pub_read_event_msg_ntf::game_pub_read_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_read_event_msg_ntf::InitAsDefaultInstance() {
}

game_pub_read_event_msg_ntf::game_pub_read_event_msg_ntf(const game_pub_read_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_read_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1254;
  role_id_ = GOOGLE_ULONGLONG(0);
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_read_event_msg_ntf::~game_pub_read_event_msg_ntf() {
  SharedDtor();
}

void game_pub_read_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_pub_read_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_read_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_read_event_msg_ntf_descriptor_;
}

const game_pub_read_event_msg_ntf& game_pub_read_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_read_event_msg_ntf* game_pub_read_event_msg_ntf::default_instance_ = NULL;

game_pub_read_event_msg_ntf* game_pub_read_event_msg_ntf::New() const {
  return new game_pub_read_event_msg_ntf;
}

void game_pub_read_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1254;
    role_id_ = GOOGLE_ULONGLONG(0);
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_read_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_read_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_read_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_read_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_read_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_read_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_read_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_read_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_read_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_read_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_read_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_read_event_msg_ntf::MergeFrom(const game_pub_read_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_read_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_read_event_msg_ntf::CopyFrom(const game_pub_read_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_read_event_msg_ntf::IsInitialized() const {

  return true;
}

void game_pub_read_event_msg_ntf::Swap(game_pub_read_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_read_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_read_event_msg_ntf_descriptor_;
  metadata.reflection = game_pub_read_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_insert_event_msg_ntf::kProtoIdFieldNumber;
const int game_pub_insert_event_msg_ntf::kRoleIdFieldNumber;
const int game_pub_insert_event_msg_ntf::kEventMsgFieldNumber;
const int game_pub_insert_event_msg_ntf::kIsNtyClientFieldNumber;
#endif  // !_MSC_VER

game_pub_insert_event_msg_ntf::game_pub_insert_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_insert_event_msg_ntf::InitAsDefaultInstance() {
  event_msg_ = const_cast< ::SProtoSpace::db_event_msg_info*>(&::SProtoSpace::db_event_msg_info::default_instance());
}

game_pub_insert_event_msg_ntf::game_pub_insert_event_msg_ntf(const game_pub_insert_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_insert_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1255;
  role_id_ = GOOGLE_ULONGLONG(0);
  event_msg_ = NULL;
  is_nty_client_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_insert_event_msg_ntf::~game_pub_insert_event_msg_ntf() {
  SharedDtor();
}

void game_pub_insert_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete event_msg_;
  }
}

void game_pub_insert_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_insert_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_insert_event_msg_ntf_descriptor_;
}

const game_pub_insert_event_msg_ntf& game_pub_insert_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_insert_event_msg_ntf* game_pub_insert_event_msg_ntf::default_instance_ = NULL;

game_pub_insert_event_msg_ntf* game_pub_insert_event_msg_ntf::New() const {
  return new game_pub_insert_event_msg_ntf;
}

void game_pub_insert_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1255;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_event_msg()) {
      if (event_msg_ != NULL) event_msg_->::SProtoSpace::db_event_msg_info::Clear();
    }
    is_nty_client_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_insert_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_insert_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_msg;
        break;
      }

      // optional .SProtoSpace.db_event_msg_info event_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_nty_client;
        break;
      }

      // optional bool is_nty_client = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_nty_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nty_client_)));
          set_has_is_nty_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_insert_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_insert_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.db_event_msg_info event_msg = 3;
  if (has_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event_msg(), output);
  }

  // optional bool is_nty_client = 4;
  if (has_is_nty_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_nty_client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_insert_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_insert_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.db_event_msg_info event_msg = 3;
  if (has_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event_msg(), target);
  }

  // optional bool is_nty_client = 4;
  if (has_is_nty_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_nty_client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_insert_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_insert_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.db_event_msg_info event_msg = 3;
    if (has_event_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_msg());
    }

    // optional bool is_nty_client = 4;
    if (has_is_nty_client()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_insert_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_insert_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_insert_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_insert_event_msg_ntf::MergeFrom(const game_pub_insert_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_event_msg()) {
      mutable_event_msg()->::SProtoSpace::db_event_msg_info::MergeFrom(from.event_msg());
    }
    if (from.has_is_nty_client()) {
      set_is_nty_client(from.is_nty_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_insert_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_insert_event_msg_ntf::CopyFrom(const game_pub_insert_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_insert_event_msg_ntf::IsInitialized() const {

  return true;
}

void game_pub_insert_event_msg_ntf::Swap(game_pub_insert_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(event_msg_, other->event_msg_);
    std::swap(is_nty_client_, other->is_nty_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_insert_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_insert_event_msg_ntf_descriptor_;
  metadata.reflection = game_pub_insert_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_game_insert_event_msg_ntf::kProtoIdFieldNumber;
const int pub_game_insert_event_msg_ntf::kRoleIdFieldNumber;
const int pub_game_insert_event_msg_ntf::kEventMsgFieldNumber;
const int pub_game_insert_event_msg_ntf::kIsNtyClientFieldNumber;
#endif  // !_MSC_VER

pub_game_insert_event_msg_ntf::pub_game_insert_event_msg_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_game_insert_event_msg_ntf::InitAsDefaultInstance() {
  event_msg_ = const_cast< ::SProtoSpace::db_event_msg_info*>(&::SProtoSpace::db_event_msg_info::default_instance());
}

pub_game_insert_event_msg_ntf::pub_game_insert_event_msg_ntf(const pub_game_insert_event_msg_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_game_insert_event_msg_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1256;
  role_id_ = GOOGLE_ULONGLONG(0);
  event_msg_ = NULL;
  is_nty_client_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_game_insert_event_msg_ntf::~pub_game_insert_event_msg_ntf() {
  SharedDtor();
}

void pub_game_insert_event_msg_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete event_msg_;
  }
}

void pub_game_insert_event_msg_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_game_insert_event_msg_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_game_insert_event_msg_ntf_descriptor_;
}

const pub_game_insert_event_msg_ntf& pub_game_insert_event_msg_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_game_insert_event_msg_ntf* pub_game_insert_event_msg_ntf::default_instance_ = NULL;

pub_game_insert_event_msg_ntf* pub_game_insert_event_msg_ntf::New() const {
  return new pub_game_insert_event_msg_ntf;
}

void pub_game_insert_event_msg_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1256;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_event_msg()) {
      if (event_msg_ != NULL) event_msg_->::SProtoSpace::db_event_msg_info::Clear();
    }
    is_nty_client_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_game_insert_event_msg_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_insert_event_msg_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_msg;
        break;
      }

      // optional .SProtoSpace.db_event_msg_info event_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_nty_client;
        break;
      }

      // optional bool is_nty_client = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_nty_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nty_client_)));
          set_has_is_nty_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_game_insert_event_msg_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_insert_event_msg_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.db_event_msg_info event_msg = 3;
  if (has_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event_msg(), output);
  }

  // optional bool is_nty_client = 4;
  if (has_is_nty_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_nty_client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_game_insert_event_msg_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_insert_event_msg_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.db_event_msg_info event_msg = 3;
  if (has_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event_msg(), target);
  }

  // optional bool is_nty_client = 4;
  if (has_is_nty_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_nty_client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_game_insert_event_msg_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_game_insert_event_msg_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.db_event_msg_info event_msg = 3;
    if (has_event_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_msg());
    }

    // optional bool is_nty_client = 4;
    if (has_is_nty_client()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_game_insert_event_msg_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_game_insert_event_msg_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_game_insert_event_msg_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_game_insert_event_msg_ntf::MergeFrom(const pub_game_insert_event_msg_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_event_msg()) {
      mutable_event_msg()->::SProtoSpace::db_event_msg_info::MergeFrom(from.event_msg());
    }
    if (from.has_is_nty_client()) {
      set_is_nty_client(from.is_nty_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_game_insert_event_msg_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_game_insert_event_msg_ntf::CopyFrom(const pub_game_insert_event_msg_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_game_insert_event_msg_ntf::IsInitialized() const {

  return true;
}

void pub_game_insert_event_msg_ntf::Swap(pub_game_insert_event_msg_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(event_msg_, other->event_msg_);
    std::swap(is_nty_client_, other->is_nty_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_game_insert_event_msg_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_game_insert_event_msg_ntf_descriptor_;
  metadata.reflection = pub_game_insert_event_msg_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_get_rank_data_req::kProtoIdFieldNumber;
const int game_pub_get_rank_data_req::kRoleIdFieldNumber;
const int game_pub_get_rank_data_req::kTypeFieldNumber;
const int game_pub_get_rank_data_req::kStartIndexFieldNumber;
const int game_pub_get_rank_data_req::kEndIndexFieldNumber;
#endif  // !_MSC_VER

game_pub_get_rank_data_req::game_pub_get_rank_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_get_rank_data_req::InitAsDefaultInstance() {
}

game_pub_get_rank_data_req::game_pub_get_rank_data_req(const game_pub_get_rank_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_get_rank_data_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1526;
  role_id_ = GOOGLE_ULONGLONG(0);
  type_ = 1000;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_get_rank_data_req::~game_pub_get_rank_data_req() {
  SharedDtor();
}

void game_pub_get_rank_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_pub_get_rank_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_get_rank_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_get_rank_data_req_descriptor_;
}

const game_pub_get_rank_data_req& game_pub_get_rank_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_get_rank_data_req* game_pub_get_rank_data_req::default_instance_ = NULL;

game_pub_get_rank_data_req* game_pub_get_rank_data_req::New() const {
  return new game_pub_get_rank_data_req;
}

void game_pub_get_rank_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1526;
    role_id_ = GOOGLE_ULONGLONG(0);
    type_ = 1000;
    start_index_ = 0;
    end_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_get_rank_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.RANK_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::RANK_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_get_rank_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.RANK_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 start_index = 4;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_index(), output);
  }

  // optional int32 end_index = 5;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_get_rank_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.RANK_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 start_index = 4;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_index(), target);
  }

  // optional int32 end_index = 5;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_get_rank_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.RANK_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 start_index = 4;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 5;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_get_rank_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_get_rank_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_get_rank_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_get_rank_data_req::MergeFrom(const game_pub_get_rank_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_get_rank_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_get_rank_data_req::CopyFrom(const game_pub_get_rank_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_get_rank_data_req::IsInitialized() const {

  return true;
}

void game_pub_get_rank_data_req::Swap(game_pub_get_rank_data_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_get_rank_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_get_rank_data_req_descriptor_;
  metadata.reflection = game_pub_get_rank_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_pub_get_rank_data_ack::kProtoIdFieldNumber;
const int game_pub_get_rank_data_ack::kRetFieldNumber;
const int game_pub_get_rank_data_ack::kRoleIdFieldNumber;
const int game_pub_get_rank_data_ack::kTypeFieldNumber;
const int game_pub_get_rank_data_ack::kStartIndexFieldNumber;
const int game_pub_get_rank_data_ack::kEndIndexFieldNumber;
const int game_pub_get_rank_data_ack::kMyItemFieldNumber;
const int game_pub_get_rank_data_ack::kItemsFieldNumber;
#endif  // !_MSC_VER

game_pub_get_rank_data_ack::game_pub_get_rank_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_pub_get_rank_data_ack::InitAsDefaultInstance() {
  my_item_ = const_cast< ::SProtoSpace::rank_common_item*>(&::SProtoSpace::rank_common_item::default_instance());
}

game_pub_get_rank_data_ack::game_pub_get_rank_data_ack(const game_pub_get_rank_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_pub_get_rank_data_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1527;
  ret_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  type_ = 1000;
  start_index_ = 0;
  end_index_ = 0;
  my_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_pub_get_rank_data_ack::~game_pub_get_rank_data_ack() {
  SharedDtor();
}

void game_pub_get_rank_data_ack::SharedDtor() {
  if (this != default_instance_) {
    delete my_item_;
  }
}

void game_pub_get_rank_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_pub_get_rank_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_pub_get_rank_data_ack_descriptor_;
}

const game_pub_get_rank_data_ack& game_pub_get_rank_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

game_pub_get_rank_data_ack* game_pub_get_rank_data_ack::default_instance_ = NULL;

game_pub_get_rank_data_ack* game_pub_get_rank_data_ack::New() const {
  return new game_pub_get_rank_data_ack;
}

void game_pub_get_rank_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1527;
    ret_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    type_ = 1000;
    start_index_ = 0;
    end_index_ = 0;
    if (has_my_item()) {
      if (my_item_ != NULL) my_item_->::SProtoSpace::rank_common_item::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_pub_get_rank_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.RANK_TYPE type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::RANK_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_my_item;
        break;
      }

      // optional .SProtoSpace.rank_common_item my_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.rank_common_item items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_pub_get_rank_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional .SProtoSpace.RANK_TYPE type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional int32 start_index = 5;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->start_index(), output);
  }

  // optional int32 end_index = 6;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end_index(), output);
  }

  // optional .SProtoSpace.rank_common_item my_item = 7;
  if (has_my_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->my_item(), output);
  }

  // repeated .SProtoSpace.rank_common_item items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_pub_get_rank_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional .SProtoSpace.RANK_TYPE type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional int32 start_index = 5;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->start_index(), target);
  }

  // optional int32 end_index = 6;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end_index(), target);
  }

  // optional .SProtoSpace.rank_common_item my_item = 7;
  if (has_my_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->my_item(), target);
  }

  // repeated .SProtoSpace.rank_common_item items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_pub_get_rank_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = game_pub_get_rank_data_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.RANK_TYPE type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 start_index = 5;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 6;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

    // optional .SProtoSpace.rank_common_item my_item = 7;
    if (has_my_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_item());
    }

  }
  // repeated .SProtoSpace.rank_common_item items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_pub_get_rank_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_pub_get_rank_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_pub_get_rank_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_pub_get_rank_data_ack::MergeFrom(const game_pub_get_rank_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
    if (from.has_my_item()) {
      mutable_my_item()->::SProtoSpace::rank_common_item::MergeFrom(from.my_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_pub_get_rank_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_pub_get_rank_data_ack::CopyFrom(const game_pub_get_rank_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_pub_get_rank_data_ack::IsInitialized() const {

  return true;
}

void game_pub_get_rank_data_ack::Swap(game_pub_get_rank_data_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(type_, other->type_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(my_item_, other->my_item_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_pub_get_rank_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_pub_get_rank_data_ack_descriptor_;
  metadata.reflection = game_pub_get_rank_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_rank_data_ntf::kProtoIdFieldNumber;
const int update_rank_data_ntf::kTypeFieldNumber;
const int update_rank_data_ntf::kRoleIdFieldNumber;
const int update_rank_data_ntf::kValuesFieldNumber;
#endif  // !_MSC_VER

update_rank_data_ntf::update_rank_data_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_rank_data_ntf::InitAsDefaultInstance() {
}

update_rank_data_ntf::update_rank_data_ntf(const update_rank_data_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_rank_data_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1532;
  type_ = 1000;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_rank_data_ntf::~update_rank_data_ntf() {
  SharedDtor();
}

void update_rank_data_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_rank_data_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_rank_data_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_rank_data_ntf_descriptor_;
}

const update_rank_data_ntf& update_rank_data_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

update_rank_data_ntf* update_rank_data_ntf::default_instance_ = NULL;

update_rank_data_ntf* update_rank_data_ntf::New() const {
  return new update_rank_data_ntf;
}

void update_rank_data_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1532;
    type_ = 1000;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_rank_data_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_rank_data_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.RANK_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::RANK_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        break;
      }

      // repeated uint32 values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_rank_data_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_rank_data_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.RANK_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // repeated uint32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_rank_data_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_rank_data_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.RANK_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // repeated uint32 values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_rank_data_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = update_rank_data_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.RANK_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated uint32 values = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->values_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->values(i));
    }
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_rank_data_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_rank_data_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_rank_data_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_rank_data_ntf::MergeFrom(const update_rank_data_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_rank_data_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_rank_data_ntf::CopyFrom(const update_rank_data_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_rank_data_ntf::IsInitialized() const {

  return true;
}

void update_rank_data_ntf::Swap(update_rank_data_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(type_, other->type_);
    std::swap(role_id_, other->role_id_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_rank_data_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_rank_data_ntf_descriptor_;
  metadata.reflection = update_rank_data_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_battle_replay_save_req::kProtoIdFieldNumber;
const int pub_battle_replay_save_req::kReplayIdFieldNumber;
const int pub_battle_replay_save_req::kDataFieldNumber;
#endif  // !_MSC_VER

pub_battle_replay_save_req::pub_battle_replay_save_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_battle_replay_save_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::battle_replay_info*>(&::SProtoSpace::battle_replay_info::default_instance());
}

pub_battle_replay_save_req::pub_battle_replay_save_req(const pub_battle_replay_save_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_battle_replay_save_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1640;
  replay_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_battle_replay_save_req::~pub_battle_replay_save_req() {
  SharedDtor();
}

void pub_battle_replay_save_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void pub_battle_replay_save_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_battle_replay_save_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_battle_replay_save_req_descriptor_;
}

const pub_battle_replay_save_req& pub_battle_replay_save_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_battle_replay_save_req* pub_battle_replay_save_req::default_instance_ = NULL;

pub_battle_replay_save_req* pub_battle_replay_save_req::New() const {
  return new pub_battle_replay_save_req;
}

void pub_battle_replay_save_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1640;
    replay_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::battle_replay_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_battle_replay_save_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_battle_replay_save_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.battle_replay_info data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_battle_replay_save_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_battle_replay_save_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 replay_id = 2;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->replay_id(), output);
  }

  // optional .SProtoSpace.battle_replay_info data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_battle_replay_save_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_battle_replay_save_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 replay_id = 2;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->replay_id(), target);
  }

  // optional .SProtoSpace.battle_replay_info data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_battle_replay_save_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_battle_replay_save_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 replay_id = 2;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

    // optional .SProtoSpace.battle_replay_info data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_battle_replay_save_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_battle_replay_save_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_battle_replay_save_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_battle_replay_save_req::MergeFrom(const pub_battle_replay_save_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::battle_replay_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_battle_replay_save_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_battle_replay_save_req::CopyFrom(const pub_battle_replay_save_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_battle_replay_save_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void pub_battle_replay_save_req::Swap(pub_battle_replay_save_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_battle_replay_save_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_battle_replay_save_req_descriptor_;
  metadata.reflection = pub_battle_replay_save_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_battle_replay_req::kProtoidFieldNumber;
const int pub_battle_replay_req::kRoleIdFieldNumber;
const int pub_battle_replay_req::kReplayIdFieldNumber;
#endif  // !_MSC_VER

pub_battle_replay_req::pub_battle_replay_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_battle_replay_req::InitAsDefaultInstance() {
}

pub_battle_replay_req::pub_battle_replay_req(const pub_battle_replay_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_battle_replay_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1641;
  role_id_ = GOOGLE_ULONGLONG(0);
  replay_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_battle_replay_req::~pub_battle_replay_req() {
  SharedDtor();
}

void pub_battle_replay_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_battle_replay_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_battle_replay_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_battle_replay_req_descriptor_;
}

const pub_battle_replay_req& pub_battle_replay_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_battle_replay_req* pub_battle_replay_req::default_instance_ = NULL;

pub_battle_replay_req* pub_battle_replay_req::New() const {
  return new pub_battle_replay_req;
}

void pub_battle_replay_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1641;
    role_id_ = GOOGLE_ULONGLONG(0);
    replay_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_battle_replay_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_battle_replay_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->replay_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_battle_replay_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->replay_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_battle_replay_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 replay_id = 3;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_battle_replay_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_battle_replay_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_battle_replay_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_battle_replay_req::MergeFrom(const pub_battle_replay_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_battle_replay_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_battle_replay_req::CopyFrom(const pub_battle_replay_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_battle_replay_req::IsInitialized() const {

  return true;
}

void pub_battle_replay_req::Swap(pub_battle_replay_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_battle_replay_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_battle_replay_req_descriptor_;
  metadata.reflection = pub_battle_replay_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_battle_replay_ack::kProtoidFieldNumber;
const int pub_battle_replay_ack::kRoleIdFieldNumber;
const int pub_battle_replay_ack::kRetFieldNumber;
const int pub_battle_replay_ack::kReplayIdFieldNumber;
const int pub_battle_replay_ack::kDataFieldNumber;
#endif  // !_MSC_VER

pub_battle_replay_ack::pub_battle_replay_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_battle_replay_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::battle_replay_info*>(&::SProtoSpace::battle_replay_info::default_instance());
}

pub_battle_replay_ack::pub_battle_replay_ack(const pub_battle_replay_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_battle_replay_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1642;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  replay_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_battle_replay_ack::~pub_battle_replay_ack() {
  SharedDtor();
}

void pub_battle_replay_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void pub_battle_replay_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_battle_replay_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_battle_replay_ack_descriptor_;
}

const pub_battle_replay_ack& pub_battle_replay_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_battle_replay_ack* pub_battle_replay_ack::default_instance_ = NULL;

pub_battle_replay_ack* pub_battle_replay_ack::New() const {
  return new pub_battle_replay_ack;
}

void pub_battle_replay_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1642;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
    replay_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::battle_replay_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_battle_replay_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.battle_replay_info data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_battle_replay_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional uint64 replay_id = 4;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->replay_id(), output);
  }

  // optional .SProtoSpace.battle_replay_info data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_battle_replay_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional uint64 replay_id = 4;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->replay_id(), target);
  }

  // optional .SProtoSpace.battle_replay_info data = 5;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_battle_replay_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_battle_replay_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 3 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 replay_id = 4;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

    // optional .SProtoSpace.battle_replay_info data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_battle_replay_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_battle_replay_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_battle_replay_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_battle_replay_ack::MergeFrom(const pub_battle_replay_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::battle_replay_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_battle_replay_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_battle_replay_ack::CopyFrom(const pub_battle_replay_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_battle_replay_ack::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void pub_battle_replay_ack::Swap(pub_battle_replay_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_battle_replay_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_battle_replay_ack_descriptor_;
  metadata.reflection = pub_battle_replay_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_query_scene_req::kProtoidFieldNumber;
const int pub_query_scene_req::kQueryTypeFieldNumber;
const int pub_query_scene_req::kRoleIdFieldNumber;
const int pub_query_scene_req::kSceneIdFieldNumber;
const int pub_query_scene_req::kSceneTypeFieldNumber;
const int pub_query_scene_req::kLastSceneIdFieldNumber;
const int pub_query_scene_req::kLastSceneTypeFieldNumber;
const int pub_query_scene_req::kTokenFieldNumber;
#endif  // !_MSC_VER

pub_query_scene_req::pub_query_scene_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_query_scene_req::InitAsDefaultInstance() {
}

pub_query_scene_req::pub_query_scene_req(const pub_query_scene_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_query_scene_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1654;
  query_type_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  scene_id_ = 0u;
  scene_type_ = 0u;
  last_scene_id_ = 0u;
  last_scene_type_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_query_scene_req::~pub_query_scene_req() {
  SharedDtor();
}

void pub_query_scene_req::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void pub_query_scene_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_query_scene_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_query_scene_req_descriptor_;
}

const pub_query_scene_req& pub_query_scene_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_query_scene_req* pub_query_scene_req::default_instance_ = NULL;

pub_query_scene_req* pub_query_scene_req::New() const {
  return new pub_query_scene_req;
}

void pub_query_scene_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1654;
    query_type_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    scene_id_ = 0u;
    scene_type_ = 0u;
    last_scene_id_ = 0u;
    last_scene_type_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_query_scene_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_type;
        break;
      }

      // optional uint32 query_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_type_)));
          set_has_query_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_scene_id;
        break;
      }

      // optional uint32 last_scene_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_scene_id_)));
          set_has_last_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_scene_type;
        break;
      }

      // optional uint32 last_scene_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_scene_type_)));
          set_has_last_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }

      // optional string token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_query_scene_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 query_type = 2;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->query_type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_type(), output);
  }

  // optional uint32 last_scene_id = 6;
  if (has_last_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_scene_id(), output);
  }

  // optional uint32 last_scene_type = 7;
  if (has_last_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_scene_type(), output);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_query_scene_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 query_type = 2;
  if (has_query_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->query_type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // optional uint32 scene_type = 5;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_type(), target);
  }

  // optional uint32 last_scene_id = 6;
  if (has_last_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_scene_id(), target);
  }

  // optional uint32 last_scene_type = 7;
  if (has_last_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_scene_type(), target);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_query_scene_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 query_type = 2;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 5;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint32 last_scene_id = 6;
    if (has_last_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_scene_id());
    }

    // optional uint32 last_scene_type = 7;
    if (has_last_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_scene_type());
    }

    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_query_scene_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_query_scene_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_query_scene_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_query_scene_req::MergeFrom(const pub_query_scene_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_last_scene_id()) {
      set_last_scene_id(from.last_scene_id());
    }
    if (from.has_last_scene_type()) {
      set_last_scene_type(from.last_scene_type());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_query_scene_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_query_scene_req::CopyFrom(const pub_query_scene_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_query_scene_req::IsInitialized() const {

  return true;
}

void pub_query_scene_req::Swap(pub_query_scene_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(query_type_, other->query_type_);
    std::swap(role_id_, other->role_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(last_scene_id_, other->last_scene_id_);
    std::swap(last_scene_type_, other->last_scene_type_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_query_scene_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_query_scene_req_descriptor_;
  metadata.reflection = pub_query_scene_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_query_scene_ack::kProtoidFieldNumber;
const int pub_query_scene_ack::kQueryTypeFieldNumber;
const int pub_query_scene_ack::kRoleIdFieldNumber;
const int pub_query_scene_ack::kRetFieldNumber;
const int pub_query_scene_ack::kSceneIdFieldNumber;
const int pub_query_scene_ack::kSceneTypeFieldNumber;
const int pub_query_scene_ack::kGameIdFieldNumber;
const int pub_query_scene_ack::kTokenFieldNumber;
#endif  // !_MSC_VER

pub_query_scene_ack::pub_query_scene_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_query_scene_ack::InitAsDefaultInstance() {
}

pub_query_scene_ack::pub_query_scene_ack(const pub_query_scene_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_query_scene_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1655;
  query_type_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  scene_id_ = 0u;
  scene_type_ = 0u;
  game_id_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_query_scene_ack::~pub_query_scene_ack() {
  SharedDtor();
}

void pub_query_scene_ack::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void pub_query_scene_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_query_scene_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_query_scene_ack_descriptor_;
}

const pub_query_scene_ack& pub_query_scene_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_query_scene_ack* pub_query_scene_ack::default_instance_ = NULL;

pub_query_scene_ack* pub_query_scene_ack::New() const {
  return new pub_query_scene_ack;
}

void pub_query_scene_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1655;
    query_type_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
    scene_id_ = 0u;
    scene_type_ = 0u;
    game_id_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_query_scene_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_query_type;
        break;
      }

      // optional uint32 query_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_type_)));
          set_has_query_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_token;
        break;
      }

      // optional string token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_query_scene_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 query_type = 2;
  if (has_query_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->query_type(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 ret = 4 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  // optional uint32 scene_id = 5;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_id(), output);
  }

  // optional uint32 scene_type = 6;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scene_type(), output);
  }

  // optional uint64 game_id = 7;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->game_id(), output);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_query_scene_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 query_type = 2;
  if (has_query_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->query_type(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 ret = 4 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  // optional uint32 scene_id = 5;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_id(), target);
  }

  // optional uint32 scene_type = 6;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->scene_type(), target);
  }

  // optional uint64 game_id = 7;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->game_id(), target);
  }

  // optional string token = 8;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_query_scene_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_query_scene_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 query_type = 2;
    if (has_query_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_type());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 ret = 4 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 scene_id = 5;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 6;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint64 game_id = 7;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

    // optional string token = 8;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_query_scene_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_query_scene_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_query_scene_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_query_scene_ack::MergeFrom(const pub_query_scene_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_query_type()) {
      set_query_type(from.query_type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_query_scene_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_query_scene_ack::CopyFrom(const pub_query_scene_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_query_scene_ack::IsInitialized() const {

  return true;
}

void pub_query_scene_ack::Swap(pub_query_scene_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(query_type_, other->query_type_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_query_scene_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_query_scene_ack_descriptor_;
  metadata.reflection = pub_query_scene_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_destory_scene_ntf::kProtoidFieldNumber;
const int pub_destory_scene_ntf::kSceneIdFieldNumber;
const int pub_destory_scene_ntf::kSceneTypeFieldNumber;
#endif  // !_MSC_VER

pub_destory_scene_ntf::pub_destory_scene_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_destory_scene_ntf::InitAsDefaultInstance() {
}

pub_destory_scene_ntf::pub_destory_scene_ntf(const pub_destory_scene_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_destory_scene_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1657;
  scene_id_ = 0u;
  scene_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_destory_scene_ntf::~pub_destory_scene_ntf() {
  SharedDtor();
}

void pub_destory_scene_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_destory_scene_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_destory_scene_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_destory_scene_ntf_descriptor_;
}

const pub_destory_scene_ntf& pub_destory_scene_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_destory_scene_ntf* pub_destory_scene_ntf::default_instance_ = NULL;

pub_destory_scene_ntf* pub_destory_scene_ntf::New() const {
  return new pub_destory_scene_ntf;
}

void pub_destory_scene_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1657;
    scene_id_ = 0u;
    scene_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_destory_scene_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_destory_scene_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_destory_scene_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_destory_scene_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_destory_scene_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_destory_scene_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_destory_scene_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_destory_scene_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 3;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_destory_scene_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_destory_scene_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_destory_scene_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_destory_scene_ntf::MergeFrom(const pub_destory_scene_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_destory_scene_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_destory_scene_ntf::CopyFrom(const pub_destory_scene_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_destory_scene_ntf::IsInitialized() const {

  return true;
}

void pub_destory_scene_ntf::Swap(pub_destory_scene_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_destory_scene_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_destory_scene_ntf_descriptor_;
  metadata.reflection = pub_destory_scene_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_scene_role_change_ntf::kProtoidFieldNumber;
const int pub_scene_role_change_ntf::kSceneIdFieldNumber;
const int pub_scene_role_change_ntf::kSceneTypeFieldNumber;
const int pub_scene_role_change_ntf::kAddRolesFieldNumber;
const int pub_scene_role_change_ntf::kDelRolesFieldNumber;
#endif  // !_MSC_VER

pub_scene_role_change_ntf::pub_scene_role_change_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_scene_role_change_ntf::InitAsDefaultInstance() {
}

pub_scene_role_change_ntf::pub_scene_role_change_ntf(const pub_scene_role_change_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_scene_role_change_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1656;
  scene_id_ = 0u;
  scene_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_scene_role_change_ntf::~pub_scene_role_change_ntf() {
  SharedDtor();
}

void pub_scene_role_change_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_scene_role_change_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_scene_role_change_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_scene_role_change_ntf_descriptor_;
}

const pub_scene_role_change_ntf& pub_scene_role_change_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_scene_role_change_ntf* pub_scene_role_change_ntf::default_instance_ = NULL;

pub_scene_role_change_ntf* pub_scene_role_change_ntf::New() const {
  return new pub_scene_role_change_ntf;
}

void pub_scene_role_change_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1656;
    scene_id_ = 0u;
    scene_type_ = 0u;
  }
  add_roles_.Clear();
  del_roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_scene_role_change_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_scene_role_change_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_roles;
        break;
      }

      // repeated uint64 add_roles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_add_roles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_add_roles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_add_roles;
        if (input->ExpectTag(40)) goto parse_del_roles;
        break;
      }

      // repeated uint64 del_roles = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_del_roles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_roles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_del_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_scene_role_change_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_scene_role_change_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_type(), output);
  }

  // repeated uint64 add_roles = 4;
  for (int i = 0; i < this->add_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->add_roles(i), output);
  }

  // repeated uint64 del_roles = 5;
  for (int i = 0; i < this->del_roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->del_roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_scene_role_change_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_scene_role_change_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_type(), target);
  }

  // repeated uint64 add_roles = 4;
  for (int i = 0; i < this->add_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->add_roles(i), target);
  }

  // repeated uint64 del_roles = 5;
  for (int i = 0; i < this->del_roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->del_roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_scene_role_change_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_scene_role_change_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 3;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

  }
  // repeated uint64 add_roles = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->add_roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->add_roles(i));
    }
    total_size += 1 * this->add_roles_size() + data_size;
  }

  // repeated uint64 del_roles = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_roles(i));
    }
    total_size += 1 * this->del_roles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_scene_role_change_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_scene_role_change_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_scene_role_change_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_scene_role_change_ntf::MergeFrom(const pub_scene_role_change_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_roles_.MergeFrom(from.add_roles_);
  del_roles_.MergeFrom(from.del_roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_scene_role_change_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_scene_role_change_ntf::CopyFrom(const pub_scene_role_change_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_scene_role_change_ntf::IsInitialized() const {

  return true;
}

void pub_scene_role_change_ntf::Swap(pub_scene_role_change_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    add_roles_.Swap(&other->add_roles_);
    del_roles_.Swap(&other->del_roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_scene_role_change_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_scene_role_change_ntf_descriptor_;
  metadata.reflection = pub_scene_role_change_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_update_3d_scene_info_ntf::kProtoidFieldNumber;
const int pub_update_3d_scene_info_ntf::kSceneIdFieldNumber;
const int pub_update_3d_scene_info_ntf::kSceneTypeFieldNumber;
const int pub_update_3d_scene_info_ntf::kConfIdFieldNumber;
const int pub_update_3d_scene_info_ntf::kSceneNameFieldNumber;
#endif  // !_MSC_VER

pub_update_3d_scene_info_ntf::pub_update_3d_scene_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_update_3d_scene_info_ntf::InitAsDefaultInstance() {
}

pub_update_3d_scene_info_ntf::pub_update_3d_scene_info_ntf(const pub_update_3d_scene_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_update_3d_scene_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1721;
  scene_id_ = 0u;
  scene_type_ = 0u;
  conf_id_ = 0u;
  scene_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_update_3d_scene_info_ntf::~pub_update_3d_scene_info_ntf() {
  SharedDtor();
}

void pub_update_3d_scene_info_ntf::SharedDtor() {
  if (scene_name_ != &::google::protobuf::internal::kEmptyString) {
    delete scene_name_;
  }
  if (this != default_instance_) {
  }
}

void pub_update_3d_scene_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_update_3d_scene_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_update_3d_scene_info_ntf_descriptor_;
}

const pub_update_3d_scene_info_ntf& pub_update_3d_scene_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_update_3d_scene_info_ntf* pub_update_3d_scene_info_ntf::default_instance_ = NULL;

pub_update_3d_scene_info_ntf* pub_update_3d_scene_info_ntf::New() const {
  return new pub_update_3d_scene_info_ntf;
}

void pub_update_3d_scene_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1721;
    scene_id_ = 0u;
    scene_type_ = 0u;
    conf_id_ = 0u;
    if (has_scene_name()) {
      if (scene_name_ != &::google::protobuf::internal::kEmptyString) {
        scene_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_update_3d_scene_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_3d_scene_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conf_id;
        break;
      }

      // optional uint32 conf_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conf_id_)));
          set_has_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_scene_name;
        break;
      }

      // optional string scene_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_update_3d_scene_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_3d_scene_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_type(), output);
  }

  // optional uint32 conf_id = 4;
  if (has_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->conf_id(), output);
  }

  // optional string scene_name = 5;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->scene_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_update_3d_scene_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_3d_scene_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_type(), target);
  }

  // optional uint32 conf_id = 4;
  if (has_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->conf_id(), target);
  }

  // optional string scene_name = 5;
  if (has_scene_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->scene_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_update_3d_scene_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_update_3d_scene_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 3;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint32 conf_id = 4;
    if (has_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conf_id());
    }

    // optional string scene_name = 5;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_update_3d_scene_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_update_3d_scene_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_update_3d_scene_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_update_3d_scene_info_ntf::MergeFrom(const pub_update_3d_scene_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_conf_id()) {
      set_conf_id(from.conf_id());
    }
    if (from.has_scene_name()) {
      set_scene_name(from.scene_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_update_3d_scene_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_update_3d_scene_info_ntf::CopyFrom(const pub_update_3d_scene_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_update_3d_scene_info_ntf::IsInitialized() const {

  return true;
}

void pub_update_3d_scene_info_ntf::Swap(pub_update_3d_scene_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(conf_id_, other->conf_id_);
    std::swap(scene_name_, other->scene_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_update_3d_scene_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_update_3d_scene_info_ntf_descriptor_;
  metadata.reflection = pub_update_3d_scene_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_switch_game_id_ntf::kProtoidFieldNumber;
const int pub_switch_game_id_ntf::kGsIdFieldNumber;
#endif  // !_MSC_VER

pub_switch_game_id_ntf::pub_switch_game_id_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_switch_game_id_ntf::InitAsDefaultInstance() {
}

pub_switch_game_id_ntf::pub_switch_game_id_ntf(const pub_switch_game_id_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_switch_game_id_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1714;
  gs_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_switch_game_id_ntf::~pub_switch_game_id_ntf() {
  SharedDtor();
}

void pub_switch_game_id_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_switch_game_id_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_switch_game_id_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_switch_game_id_ntf_descriptor_;
}

const pub_switch_game_id_ntf& pub_switch_game_id_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_switch_game_id_ntf* pub_switch_game_id_ntf::default_instance_ = NULL;

pub_switch_game_id_ntf* pub_switch_game_id_ntf::New() const {
  return new pub_switch_game_id_ntf;
}

void pub_switch_game_id_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1714;
    gs_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_switch_game_id_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_switch_game_id_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gs_id;
        break;
      }

      // optional uint64 gs_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gs_id_)));
          set_has_gs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_switch_game_id_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_switch_game_id_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 gs_id = 2;
  if (has_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gs_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_switch_game_id_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_switch_game_id_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 gs_id = 2;
  if (has_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gs_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_switch_game_id_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_switch_game_id_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 gs_id = 2;
    if (has_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gs_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_switch_game_id_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_switch_game_id_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_switch_game_id_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_switch_game_id_ntf::MergeFrom(const pub_switch_game_id_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_gs_id()) {
      set_gs_id(from.gs_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_switch_game_id_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_switch_game_id_ntf::CopyFrom(const pub_switch_game_id_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_switch_game_id_ntf::IsInitialized() const {

  return true;
}

void pub_switch_game_id_ntf::Swap(pub_switch_game_id_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(gs_id_, other->gs_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_switch_game_id_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_switch_game_id_ntf_descriptor_;
  metadata.reflection = pub_switch_game_id_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_officer_daily_salary_req::kProtoidFieldNumber;
const int pub_officer_daily_salary_req::kRoleIdFieldNumber;
const int pub_officer_daily_salary_req::kGradeFieldNumber;
#endif  // !_MSC_VER

pub_officer_daily_salary_req::pub_officer_daily_salary_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_officer_daily_salary_req::InitAsDefaultInstance() {
}

pub_officer_daily_salary_req::pub_officer_daily_salary_req(const pub_officer_daily_salary_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_officer_daily_salary_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1536;
  role_id_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_officer_daily_salary_req::~pub_officer_daily_salary_req() {
  SharedDtor();
}

void pub_officer_daily_salary_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_officer_daily_salary_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_officer_daily_salary_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_officer_daily_salary_req_descriptor_;
}

const pub_officer_daily_salary_req& pub_officer_daily_salary_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_officer_daily_salary_req* pub_officer_daily_salary_req::default_instance_ = NULL;

pub_officer_daily_salary_req* pub_officer_daily_salary_req::New() const {
  return new pub_officer_daily_salary_req;
}

void pub_officer_daily_salary_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1536;
    role_id_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_officer_daily_salary_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_officer_daily_salary_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_officer_daily_salary_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_officer_daily_salary_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_officer_daily_salary_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_officer_daily_salary_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_officer_daily_salary_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_officer_daily_salary_req::MergeFrom(const pub_officer_daily_salary_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_officer_daily_salary_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_officer_daily_salary_req::CopyFrom(const pub_officer_daily_salary_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_officer_daily_salary_req::IsInitialized() const {

  return true;
}

void pub_officer_daily_salary_req::Swap(pub_officer_daily_salary_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_officer_daily_salary_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_officer_daily_salary_req_descriptor_;
  metadata.reflection = pub_officer_daily_salary_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_officer_daily_salary_ack::kProtoidFieldNumber;
const int pub_officer_daily_salary_ack::kRoleIdFieldNumber;
const int pub_officer_daily_salary_ack::kGradeFieldNumber;
const int pub_officer_daily_salary_ack::kRankingIdFieldNumber;
const int pub_officer_daily_salary_ack::kRetFieldNumber;
#endif  // !_MSC_VER

pub_officer_daily_salary_ack::pub_officer_daily_salary_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_officer_daily_salary_ack::InitAsDefaultInstance() {
}

pub_officer_daily_salary_ack::pub_officer_daily_salary_ack(const pub_officer_daily_salary_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_officer_daily_salary_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1537;
  role_id_ = GOOGLE_ULONGLONG(0);
  grade_ = 0u;
  ranking_id_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_officer_daily_salary_ack::~pub_officer_daily_salary_ack() {
  SharedDtor();
}

void pub_officer_daily_salary_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_officer_daily_salary_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_officer_daily_salary_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_officer_daily_salary_ack_descriptor_;
}

const pub_officer_daily_salary_ack& pub_officer_daily_salary_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_officer_daily_salary_ack* pub_officer_daily_salary_ack::default_instance_ = NULL;

pub_officer_daily_salary_ack* pub_officer_daily_salary_ack::New() const {
  return new pub_officer_daily_salary_ack;
}

void pub_officer_daily_salary_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1537;
    role_id_ = GOOGLE_ULONGLONG(0);
    grade_ = 0u;
    ranking_id_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_officer_daily_salary_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional uint32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ranking_id;
        break;
      }

      // optional uint32 ranking_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranking_id_)));
          set_has_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional int32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_officer_daily_salary_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->grade(), output);
  }

  // optional uint32 ranking_id = 4;
  if (has_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ranking_id(), output);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_officer_daily_salary_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->grade(), target);
  }

  // optional uint32 ranking_id = 4;
  if (has_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ranking_id(), target);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_officer_daily_salary_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_officer_daily_salary_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grade());
    }

    // optional uint32 ranking_id = 4;
    if (has_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranking_id());
    }

    // optional int32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_officer_daily_salary_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_officer_daily_salary_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_officer_daily_salary_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_officer_daily_salary_ack::MergeFrom(const pub_officer_daily_salary_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ranking_id()) {
      set_ranking_id(from.ranking_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_officer_daily_salary_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_officer_daily_salary_ack::CopyFrom(const pub_officer_daily_salary_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_officer_daily_salary_ack::IsInitialized() const {

  return true;
}

void pub_officer_daily_salary_ack::Swap(pub_officer_daily_salary_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(grade_, other->grade_);
    std::swap(ranking_id_, other->ranking_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_officer_daily_salary_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_officer_daily_salary_ack_descriptor_;
  metadata.reflection = pub_officer_daily_salary_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_offical_battle_report_req::kProtoidFieldNumber;
const int pub_offical_battle_report_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_offical_battle_report_req::pub_offical_battle_report_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_offical_battle_report_req::InitAsDefaultInstance() {
}

pub_offical_battle_report_req::pub_offical_battle_report_req(const pub_offical_battle_report_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_offical_battle_report_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1121;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_offical_battle_report_req::~pub_offical_battle_report_req() {
  SharedDtor();
}

void pub_offical_battle_report_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_offical_battle_report_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_offical_battle_report_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_offical_battle_report_req_descriptor_;
}

const pub_offical_battle_report_req& pub_offical_battle_report_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_offical_battle_report_req* pub_offical_battle_report_req::default_instance_ = NULL;

pub_offical_battle_report_req* pub_offical_battle_report_req::New() const {
  return new pub_offical_battle_report_req;
}

void pub_offical_battle_report_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1121;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_offical_battle_report_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_offical_battle_report_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_offical_battle_report_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_offical_battle_report_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_offical_battle_report_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_offical_battle_report_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_offical_battle_report_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_offical_battle_report_req::MergeFrom(const pub_offical_battle_report_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_offical_battle_report_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_offical_battle_report_req::CopyFrom(const pub_offical_battle_report_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_offical_battle_report_req::IsInitialized() const {

  return true;
}

void pub_offical_battle_report_req::Swap(pub_offical_battle_report_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_offical_battle_report_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_offical_battle_report_req_descriptor_;
  metadata.reflection = pub_offical_battle_report_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_offical_battle_report_ack::kProtoidFieldNumber;
const int pub_offical_battle_report_ack::kRetFieldNumber;
const int pub_offical_battle_report_ack::kRoleIdFieldNumber;
const int pub_offical_battle_report_ack::kReportsFieldNumber;
#endif  // !_MSC_VER

pub_offical_battle_report_ack::pub_offical_battle_report_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_offical_battle_report_ack::InitAsDefaultInstance() {
}

pub_offical_battle_report_ack::pub_offical_battle_report_ack(const pub_offical_battle_report_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_offical_battle_report_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 1122;
  ret_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_offical_battle_report_ack::~pub_offical_battle_report_ack() {
  SharedDtor();
}

void pub_offical_battle_report_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_offical_battle_report_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_offical_battle_report_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_offical_battle_report_ack_descriptor_;
}

const pub_offical_battle_report_ack& pub_offical_battle_report_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_offical_battle_report_ack* pub_offical_battle_report_ack::default_instance_ = NULL;

pub_offical_battle_report_ack* pub_offical_battle_report_ack::New() const {
  return new pub_offical_battle_report_ack;
}

void pub_offical_battle_report_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 1122;
    ret_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  reports_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_offical_battle_report_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reports;
        break;
      }

      // repeated .SProtoSpace.offical_battle_report_unit reports = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reports()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reports;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_offical_battle_report_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // repeated .SProtoSpace.offical_battle_report_unit reports = 4;
  for (int i = 0; i < this->reports_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reports(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_offical_battle_report_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // repeated .SProtoSpace.offical_battle_report_unit reports = 4;
  for (int i = 0; i < this->reports_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reports(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_offical_battle_report_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = pub_offical_battle_report_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  // repeated .SProtoSpace.offical_battle_report_unit reports = 4;
  total_size += 1 * this->reports_size();
  for (int i = 0; i < this->reports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reports(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_offical_battle_report_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_offical_battle_report_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_offical_battle_report_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_offical_battle_report_ack::MergeFrom(const pub_offical_battle_report_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  reports_.MergeFrom(from.reports_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_offical_battle_report_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_offical_battle_report_ack::CopyFrom(const pub_offical_battle_report_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_offical_battle_report_ack::IsInitialized() const {

  return true;
}

void pub_offical_battle_report_ack::Swap(pub_offical_battle_report_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    reports_.Swap(&other->reports_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_offical_battle_report_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_offical_battle_report_ack_descriptor_;
  metadata.reflection = pub_offical_battle_report_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_formation_req::kProtoIdFieldNumber;
const int pub_get_offical_formation_req::kMyRoleIdFieldNumber;
const int pub_get_offical_formation_req::kDestRoleIdFieldNumber;
const int pub_get_offical_formation_req::kOfficeLvFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_formation_req::pub_get_offical_formation_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_formation_req::InitAsDefaultInstance() {
}

pub_get_offical_formation_req::pub_get_offical_formation_req(const pub_get_offical_formation_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_formation_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1540;
  my_role_id_ = GOOGLE_ULONGLONG(0);
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  office_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_formation_req::~pub_get_offical_formation_req() {
  SharedDtor();
}

void pub_get_offical_formation_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_formation_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_formation_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_formation_req_descriptor_;
}

const pub_get_offical_formation_req& pub_get_offical_formation_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_formation_req* pub_get_offical_formation_req::default_instance_ = NULL;

pub_get_offical_formation_req* pub_get_offical_formation_req::New() const {
  return new pub_get_offical_formation_req;
}

void pub_get_offical_formation_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1540;
    my_role_id_ = GOOGLE_ULONGLONG(0);
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    office_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_formation_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_my_role_id;
        break;
      }

      // optional uint64 my_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_role_id_)));
          set_has_my_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_office_lv;
        break;
      }

      // optional .SProtoSpace.EGrade office_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EGrade_IsValid(value)) {
            set_office_lv(static_cast< ::SProtoSpace::EGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_formation_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 my_role_id = 2;
  if (has_my_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->my_role_id(), output);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dest_role_id(), output);
  }

  // optional .SProtoSpace.EGrade office_lv = 4;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->office_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_formation_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 my_role_id = 2;
  if (has_my_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->my_role_id(), target);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dest_role_id(), target);
  }

  // optional .SProtoSpace.EGrade office_lv = 4;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->office_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_formation_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 my_role_id = 2;
    if (has_my_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_role_id());
    }

    // optional uint64 dest_role_id = 3;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional .SProtoSpace.EGrade office_lv = 4;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->office_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_formation_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_formation_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_formation_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_formation_req::MergeFrom(const pub_get_offical_formation_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_my_role_id()) {
      set_my_role_id(from.my_role_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_formation_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_formation_req::CopyFrom(const pub_get_offical_formation_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_formation_req::IsInitialized() const {

  return true;
}

void pub_get_offical_formation_req::Swap(pub_get_offical_formation_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(my_role_id_, other->my_role_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_formation_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_formation_req_descriptor_;
  metadata.reflection = pub_get_offical_formation_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_formation_ack::kProtoIdFieldNumber;
const int pub_get_offical_formation_ack::kRetFieldNumber;
const int pub_get_offical_formation_ack::kMyRoleIdFieldNumber;
const int pub_get_offical_formation_ack::kDestRoleIdFieldNumber;
const int pub_get_offical_formation_ack::kNameFieldNumber;
const int pub_get_offical_formation_ack::kSexFieldNumber;
const int pub_get_offical_formation_ack::kHeadFieldNumber;
const int pub_get_offical_formation_ack::kBordFieldNumber;
const int pub_get_offical_formation_ack::kGradeFieldNumber;
const int pub_get_offical_formation_ack::kLvFieldNumber;
const int pub_get_offical_formation_ack::kHerosFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_formation_ack::pub_get_offical_formation_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_formation_ack::InitAsDefaultInstance() {
}

pub_get_offical_formation_ack::pub_get_offical_formation_ack(const pub_get_offical_formation_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_formation_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1541;
  ret_ = 0u;
  my_role_id_ = GOOGLE_ULONGLONG(0);
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bord_ = 0;
  grade_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_formation_ack::~pub_get_offical_formation_ack() {
  SharedDtor();
}

void pub_get_offical_formation_ack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void pub_get_offical_formation_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_formation_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_formation_ack_descriptor_;
}

const pub_get_offical_formation_ack& pub_get_offical_formation_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_formation_ack* pub_get_offical_formation_ack::default_instance_ = NULL;

pub_get_offical_formation_ack* pub_get_offical_formation_ack::New() const {
  return new pub_get_offical_formation_ack;
}

void pub_get_offical_formation_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1541;
    ret_ = 0u;
    my_role_id_ = GOOGLE_ULONGLONG(0);
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    bord_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    grade_ = 0;
    lv_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_formation_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_role_id;
        break;
      }

      // optional uint64 my_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &my_role_id_)));
          set_has_my_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_head;
        break;
      }

      // optional string head = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bord;
        break;
      }

      // optional int32 bord = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bord_)));
          set_has_bord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_grade;
        break;
      }

      // optional int32 grade = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lv;
        break;
      }

      // optional int32 lv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.hero_base_info heros = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_formation_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 my_role_id = 3;
  if (has_my_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->my_role_id(), output);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dest_role_id(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional string head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->head(), output);
  }

  // optional int32 bord = 8;
  if (has_bord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bord(), output);
  }

  // optional int32 grade = 9;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->grade(), output);
  }

  // optional int32 lv = 10;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lv(), output);
  }

  // repeated .SProtoSpace.hero_base_info heros = 11;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_formation_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 my_role_id = 3;
  if (has_my_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->my_role_id(), target);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dest_role_id(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional string head = 7;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->head(), target);
  }

  // optional int32 bord = 8;
  if (has_bord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bord(), target);
  }

  // optional int32 grade = 9;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->grade(), target);
  }

  // optional int32 lv = 10;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lv(), target);
  }

  // repeated .SProtoSpace.hero_base_info heros = 11;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_formation_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_formation_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 my_role_id = 3;
    if (has_my_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->my_role_id());
    }

    // optional uint64 dest_role_id = 4;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string head = 7;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional int32 bord = 8;
    if (has_bord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bord());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 grade = 9;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 lv = 10;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  // repeated .SProtoSpace.hero_base_info heros = 11;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_formation_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_formation_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_formation_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_formation_ack::MergeFrom(const pub_get_offical_formation_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_my_role_id()) {
      set_my_role_id(from.my_role_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_bord()) {
      set_bord(from.bord());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_formation_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_formation_ack::CopyFrom(const pub_get_offical_formation_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_formation_ack::IsInitialized() const {

  return true;
}

void pub_get_offical_formation_ack::Swap(pub_get_offical_formation_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(my_role_id_, other->my_role_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(head_, other->head_);
    std::swap(bord_, other->bord_);
    std::swap(grade_, other->grade_);
    std::swap(lv_, other->lv_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_formation_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_formation_ack_descriptor_;
  metadata.reflection = pub_get_offical_formation_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_gm_upgrade_office_req::kProtoIdFieldNumber;
const int pub_gm_upgrade_office_req::kGradeFieldNumber;
const int pub_gm_upgrade_office_req::kDataFieldNumber;
#endif  // !_MSC_VER

pub_gm_upgrade_office_req::pub_gm_upgrade_office_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_gm_upgrade_office_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::arena_item_data*>(&::SProtoSpace::arena_item_data::default_instance());
}

pub_gm_upgrade_office_req::pub_gm_upgrade_office_req(const pub_gm_upgrade_office_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_gm_upgrade_office_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1542;
  grade_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_gm_upgrade_office_req::~pub_gm_upgrade_office_req() {
  SharedDtor();
}

void pub_gm_upgrade_office_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void pub_gm_upgrade_office_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_gm_upgrade_office_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_gm_upgrade_office_req_descriptor_;
}

const pub_gm_upgrade_office_req& pub_gm_upgrade_office_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_gm_upgrade_office_req* pub_gm_upgrade_office_req::default_instance_ = NULL;

pub_gm_upgrade_office_req* pub_gm_upgrade_office_req::New() const {
  return new pub_gm_upgrade_office_req;
}

void pub_gm_upgrade_office_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1542;
    grade_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::arena_item_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_gm_upgrade_office_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_upgrade_office_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.arena_item_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_gm_upgrade_office_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_upgrade_office_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // optional .SProtoSpace.arena_item_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_gm_upgrade_office_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_upgrade_office_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // optional .SProtoSpace.arena_item_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_gm_upgrade_office_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_upgrade_office_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional .SProtoSpace.arena_item_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_gm_upgrade_office_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_gm_upgrade_office_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_gm_upgrade_office_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_gm_upgrade_office_req::MergeFrom(const pub_gm_upgrade_office_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::arena_item_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_gm_upgrade_office_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_gm_upgrade_office_req::CopyFrom(const pub_gm_upgrade_office_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_gm_upgrade_office_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void pub_gm_upgrade_office_req::Swap(pub_gm_upgrade_office_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(grade_, other->grade_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_gm_upgrade_office_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_gm_upgrade_office_req_descriptor_;
  metadata.reflection = pub_gm_upgrade_office_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_robot_gen_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

offical_robot_gen_req::offical_robot_gen_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_robot_gen_req::InitAsDefaultInstance() {
}

offical_robot_gen_req::offical_robot_gen_req(const offical_robot_gen_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_robot_gen_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1543;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_robot_gen_req::~offical_robot_gen_req() {
  SharedDtor();
}

void offical_robot_gen_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_robot_gen_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_robot_gen_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_robot_gen_req_descriptor_;
}

const offical_robot_gen_req& offical_robot_gen_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

offical_robot_gen_req* offical_robot_gen_req::default_instance_ = NULL;

offical_robot_gen_req* offical_robot_gen_req::New() const {
  return new offical_robot_gen_req;
}

void offical_robot_gen_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1543;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_robot_gen_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_robot_gen_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_robot_gen_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_robot_gen_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_robot_gen_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_robot_gen_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_robot_gen_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_robot_gen_req::MergeFrom(const offical_robot_gen_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_robot_gen_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_robot_gen_req::CopyFrom(const offical_robot_gen_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_robot_gen_req::IsInitialized() const {

  return true;
}

void offical_robot_gen_req::Swap(offical_robot_gen_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_robot_gen_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_robot_gen_req_descriptor_;
  metadata.reflection = offical_robot_gen_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_robot_gen_ack::kProtoIdFieldNumber;
#endif  // !_MSC_VER

offical_robot_gen_ack::offical_robot_gen_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_robot_gen_ack::InitAsDefaultInstance() {
}

offical_robot_gen_ack::offical_robot_gen_ack(const offical_robot_gen_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_robot_gen_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1544;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_robot_gen_ack::~offical_robot_gen_ack() {
  SharedDtor();
}

void offical_robot_gen_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_robot_gen_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_robot_gen_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_robot_gen_ack_descriptor_;
}

const offical_robot_gen_ack& offical_robot_gen_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

offical_robot_gen_ack* offical_robot_gen_ack::default_instance_ = NULL;

offical_robot_gen_ack* offical_robot_gen_ack::New() const {
  return new offical_robot_gen_ack;
}

void offical_robot_gen_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1544;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_robot_gen_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_robot_gen_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_robot_gen_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_robot_gen_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = offical_robot_gen_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_robot_gen_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_robot_gen_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_robot_gen_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_robot_gen_ack::MergeFrom(const offical_robot_gen_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_robot_gen_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_robot_gen_ack::CopyFrom(const offical_robot_gen_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_robot_gen_ack::IsInitialized() const {

  return true;
}

void offical_robot_gen_ack::Swap(offical_robot_gen_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_robot_gen_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_robot_gen_ack_descriptor_;
  metadata.reflection = offical_robot_gen_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_minimum_chat_room_req::kProtoIdFieldNumber;
const int get_minimum_chat_room_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

get_minimum_chat_room_req::get_minimum_chat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_minimum_chat_room_req::InitAsDefaultInstance() {
}

get_minimum_chat_room_req::get_minimum_chat_room_req(const get_minimum_chat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_minimum_chat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1702;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_minimum_chat_room_req::~get_minimum_chat_room_req() {
  SharedDtor();
}

void get_minimum_chat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_minimum_chat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_minimum_chat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_minimum_chat_room_req_descriptor_;
}

const get_minimum_chat_room_req& get_minimum_chat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

get_minimum_chat_room_req* get_minimum_chat_room_req::default_instance_ = NULL;

get_minimum_chat_room_req* get_minimum_chat_room_req::New() const {
  return new get_minimum_chat_room_req;
}

void get_minimum_chat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1702;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_minimum_chat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_minimum_chat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_minimum_chat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_minimum_chat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_minimum_chat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_minimum_chat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_minimum_chat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_minimum_chat_room_req::MergeFrom(const get_minimum_chat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_minimum_chat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_minimum_chat_room_req::CopyFrom(const get_minimum_chat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_minimum_chat_room_req::IsInitialized() const {

  return true;
}

void get_minimum_chat_room_req::Swap(get_minimum_chat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_minimum_chat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_minimum_chat_room_req_descriptor_;
  metadata.reflection = get_minimum_chat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_minimum_chat_room_ack::kProtoIdFieldNumber;
const int get_minimum_chat_room_ack::kRetFieldNumber;
const int get_minimum_chat_room_ack::kRoleIdFieldNumber;
const int get_minimum_chat_room_ack::kRoomIdFieldNumber;
const int get_minimum_chat_room_ack::kGameIdFieldNumber;
#endif  // !_MSC_VER

get_minimum_chat_room_ack::get_minimum_chat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_minimum_chat_room_ack::InitAsDefaultInstance() {
}

get_minimum_chat_room_ack::get_minimum_chat_room_ack(const get_minimum_chat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_minimum_chat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1703;
  ret_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  room_id_ = 0;
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_minimum_chat_room_ack::~get_minimum_chat_room_ack() {
  SharedDtor();
}

void get_minimum_chat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_minimum_chat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_minimum_chat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_minimum_chat_room_ack_descriptor_;
}

const get_minimum_chat_room_ack& get_minimum_chat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

get_minimum_chat_room_ack* get_minimum_chat_room_ack::default_instance_ = NULL;

get_minimum_chat_room_ack* get_minimum_chat_room_ack::New() const {
  return new get_minimum_chat_room_ack;
}

void get_minimum_chat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1703;
    ret_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    room_id_ = 0;
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_minimum_chat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_minimum_chat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 room_id = 4;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->room_id(), output);
  }

  // optional uint64 game_id = 5;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_minimum_chat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 room_id = 4;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->room_id(), target);
  }

  // optional uint64 game_id = 5;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_minimum_chat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = get_minimum_chat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 room_id = 4;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional uint64 game_id = 5;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_minimum_chat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_minimum_chat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_minimum_chat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_minimum_chat_room_ack::MergeFrom(const get_minimum_chat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_minimum_chat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_minimum_chat_room_ack::CopyFrom(const get_minimum_chat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_minimum_chat_room_ack::IsInitialized() const {

  return true;
}

void get_minimum_chat_room_ack::Swap(get_minimum_chat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_minimum_chat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_minimum_chat_room_ack_descriptor_;
  metadata.reflection = get_minimum_chat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_chat_room_list_req::kProtoIdFieldNumber;
const int pub_get_chat_room_list_req::kRoleIdFieldNumber;
const int pub_get_chat_room_list_req::kIndexStartFieldNumber;
const int pub_get_chat_room_list_req::kIndexEndFieldNumber;
#endif  // !_MSC_VER

pub_get_chat_room_list_req::pub_get_chat_room_list_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_chat_room_list_req::InitAsDefaultInstance() {
}

pub_get_chat_room_list_req::pub_get_chat_room_list_req(const pub_get_chat_room_list_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_chat_room_list_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1704;
  role_id_ = GOOGLE_ULONGLONG(0);
  index_start_ = 0;
  index_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_chat_room_list_req::~pub_get_chat_room_list_req() {
  SharedDtor();
}

void pub_get_chat_room_list_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_chat_room_list_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_chat_room_list_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_chat_room_list_req_descriptor_;
}

const pub_get_chat_room_list_req& pub_get_chat_room_list_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_chat_room_list_req* pub_get_chat_room_list_req::default_instance_ = NULL;

pub_get_chat_room_list_req* pub_get_chat_room_list_req::New() const {
  return new pub_get_chat_room_list_req;
}

void pub_get_chat_room_list_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1704;
    role_id_ = GOOGLE_ULONGLONG(0);
    index_start_ = 0;
    index_end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_chat_room_list_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index_start;
        break;
      }

      // optional int32 index_start = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_start_)));
          set_has_index_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index_end;
        break;
      }

      // optional int32 index_end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_end_)));
          set_has_index_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_chat_room_list_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional int32 index_start = 3;
  if (has_index_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index_start(), output);
  }

  // optional int32 index_end = 4;
  if (has_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index_end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_chat_room_list_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional int32 index_start = 3;
  if (has_index_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index_start(), target);
  }

  // optional int32 index_end = 4;
  if (has_index_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index_end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_chat_room_list_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 index_start = 3;
    if (has_index_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_start());
    }

    // optional int32 index_end = 4;
    if (has_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_chat_room_list_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_chat_room_list_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_chat_room_list_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_chat_room_list_req::MergeFrom(const pub_get_chat_room_list_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_index_start()) {
      set_index_start(from.index_start());
    }
    if (from.has_index_end()) {
      set_index_end(from.index_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_chat_room_list_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_chat_room_list_req::CopyFrom(const pub_get_chat_room_list_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_chat_room_list_req::IsInitialized() const {

  return true;
}

void pub_get_chat_room_list_req::Swap(pub_get_chat_room_list_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(index_start_, other->index_start_);
    std::swap(index_end_, other->index_end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_chat_room_list_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_chat_room_list_req_descriptor_;
  metadata.reflection = pub_get_chat_room_list_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_chat_room_list_ack::kProtoIdFieldNumber;
const int pub_get_chat_room_list_ack::kRetFieldNumber;
const int pub_get_chat_room_list_ack::kRoleIdFieldNumber;
const int pub_get_chat_room_list_ack::kIndexStartFieldNumber;
const int pub_get_chat_room_list_ack::kIndexEndFieldNumber;
const int pub_get_chat_room_list_ack::kRoomsFieldNumber;
#endif  // !_MSC_VER

pub_get_chat_room_list_ack::pub_get_chat_room_list_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_chat_room_list_ack::InitAsDefaultInstance() {
}

pub_get_chat_room_list_ack::pub_get_chat_room_list_ack(const pub_get_chat_room_list_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_chat_room_list_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1705;
  ret_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  index_start_ = 0;
  index_end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_chat_room_list_ack::~pub_get_chat_room_list_ack() {
  SharedDtor();
}

void pub_get_chat_room_list_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_chat_room_list_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_chat_room_list_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_chat_room_list_ack_descriptor_;
}

const pub_get_chat_room_list_ack& pub_get_chat_room_list_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_chat_room_list_ack* pub_get_chat_room_list_ack::default_instance_ = NULL;

pub_get_chat_room_list_ack* pub_get_chat_room_list_ack::New() const {
  return new pub_get_chat_room_list_ack;
}

void pub_get_chat_room_list_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1705;
    ret_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    index_start_ = 0;
    index_end_ = 0;
  }
  rooms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_chat_room_list_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index_start;
        break;
      }

      // optional int32 index_start = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_start_)));
          set_has_index_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index_end;
        break;
      }

      // optional int32 index_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_end_)));
          set_has_index_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rooms;
        break;
      }

      // repeated .SProtoSpace.chat_room_state rooms = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rooms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rooms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rooms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_chat_room_list_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional int32 index_start = 4;
  if (has_index_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index_start(), output);
  }

  // optional int32 index_end = 5;
  if (has_index_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index_end(), output);
  }

  // repeated .SProtoSpace.chat_room_state rooms = 6;
  for (int i = 0; i < this->rooms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rooms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_chat_room_list_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional int32 index_start = 4;
  if (has_index_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index_start(), target);
  }

  // optional int32 index_end = 5;
  if (has_index_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index_end(), target);
  }

  // repeated .SProtoSpace.chat_room_state rooms = 6;
  for (int i = 0; i < this->rooms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rooms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_chat_room_list_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_chat_room_list_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 index_start = 4;
    if (has_index_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_start());
    }

    // optional int32 index_end = 5;
    if (has_index_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index_end());
    }

  }
  // repeated .SProtoSpace.chat_room_state rooms = 6;
  total_size += 1 * this->rooms_size();
  for (int i = 0; i < this->rooms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rooms(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_chat_room_list_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_chat_room_list_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_chat_room_list_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_chat_room_list_ack::MergeFrom(const pub_get_chat_room_list_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rooms_.MergeFrom(from.rooms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_index_start()) {
      set_index_start(from.index_start());
    }
    if (from.has_index_end()) {
      set_index_end(from.index_end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_chat_room_list_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_chat_room_list_ack::CopyFrom(const pub_get_chat_room_list_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_chat_room_list_ack::IsInitialized() const {

  return true;
}

void pub_get_chat_room_list_ack::Swap(pub_get_chat_room_list_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(index_start_, other->index_start_);
    std::swap(index_end_, other->index_end_);
    rooms_.Swap(&other->rooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_chat_room_list_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_chat_room_list_ack_descriptor_;
  metadata.reflection = pub_get_chat_room_list_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_create_3dchat_room_req::kProtoIdFieldNumber;
const int pub_create_3dchat_room_req::kRoomConfIdFieldNumber;
const int pub_create_3dchat_room_req::kRoomNameFieldNumber;
const int pub_create_3dchat_room_req::kTokenFieldNumber;
const int pub_create_3dchat_room_req::kFeeFieldNumber;
#endif  // !_MSC_VER

pub_create_3dchat_room_req::pub_create_3dchat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_create_3dchat_room_req::InitAsDefaultInstance() {
}

pub_create_3dchat_room_req::pub_create_3dchat_room_req(const pub_create_3dchat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_create_3dchat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1715;
  room_conf_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fee_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_create_3dchat_room_req::~pub_create_3dchat_room_req() {
  SharedDtor();
}

void pub_create_3dchat_room_req::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void pub_create_3dchat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_create_3dchat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_create_3dchat_room_req_descriptor_;
}

const pub_create_3dchat_room_req& pub_create_3dchat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_create_3dchat_room_req* pub_create_3dchat_room_req::default_instance_ = NULL;

pub_create_3dchat_room_req* pub_create_3dchat_room_req::New() const {
  return new pub_create_3dchat_room_req;
}

void pub_create_3dchat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1715;
    room_conf_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    fee_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_create_3dchat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_conf_id;
        break;
      }

      // optional int32 room_conf_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_conf_id_)));
          set_has_room_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // optional string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fee;
        break;
      }

      // optional int32 fee = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fee_)));
          set_has_fee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_create_3dchat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_conf_id = 2;
  if (has_room_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_conf_id(), output);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  // optional int32 fee = 5;
  if (has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fee(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_create_3dchat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_conf_id = 2;
  if (has_room_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_conf_id(), target);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  // optional int32 fee = 5;
  if (has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fee(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_create_3dchat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_conf_id = 2;
    if (has_room_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_conf_id());
    }

    // optional string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional int32 fee = 5;
    if (has_fee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fee());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_create_3dchat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_create_3dchat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_create_3dchat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_create_3dchat_room_req::MergeFrom(const pub_create_3dchat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_conf_id()) {
      set_room_conf_id(from.room_conf_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_fee()) {
      set_fee(from.fee());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_create_3dchat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_create_3dchat_room_req::CopyFrom(const pub_create_3dchat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_create_3dchat_room_req::IsInitialized() const {

  return true;
}

void pub_create_3dchat_room_req::Swap(pub_create_3dchat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_conf_id_, other->room_conf_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(token_, other->token_);
    std::swap(fee_, other->fee_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_create_3dchat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_create_3dchat_room_req_descriptor_;
  metadata.reflection = pub_create_3dchat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_create_3dchat_room_ack::kProtoIdFieldNumber;
const int pub_create_3dchat_room_ack::kRetFieldNumber;
const int pub_create_3dchat_room_ack::kIdFieldNumber;
const int pub_create_3dchat_room_ack::kCreateTmFieldNumber;
const int pub_create_3dchat_room_ack::kRoomConfIdFieldNumber;
const int pub_create_3dchat_room_ack::kRoomNameFieldNumber;
const int pub_create_3dchat_room_ack::kTokenFieldNumber;
#endif  // !_MSC_VER

pub_create_3dchat_room_ack::pub_create_3dchat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_create_3dchat_room_ack::InitAsDefaultInstance() {
}

pub_create_3dchat_room_ack::pub_create_3dchat_room_ack(const pub_create_3dchat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_create_3dchat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1716;
  ret_ = 0;
  id_ = 0;
  create_tm_ = 0;
  room_conf_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_create_3dchat_room_ack::~pub_create_3dchat_room_ack() {
  SharedDtor();
}

void pub_create_3dchat_room_ack::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void pub_create_3dchat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_create_3dchat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_create_3dchat_room_ack_descriptor_;
}

const pub_create_3dchat_room_ack& pub_create_3dchat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_create_3dchat_room_ack* pub_create_3dchat_room_ack::default_instance_ = NULL;

pub_create_3dchat_room_ack* pub_create_3dchat_room_ack::New() const {
  return new pub_create_3dchat_room_ack;
}

void pub_create_3dchat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1716;
    ret_ = 0;
    id_ = 0;
    create_tm_ = 0;
    room_conf_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_create_3dchat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_tm;
        break;
      }

      // optional int32 create_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_tm_)));
          set_has_create_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_room_conf_id;
        break;
      }

      // optional int32 room_conf_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_conf_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_conf_id_)));
          set_has_room_conf_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_room_name;
        break;
      }

      // optional string room_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }

      // optional string token = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_create_3dchat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 create_tm = 4;
  if (has_create_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->create_tm(), output);
  }

  // optional int32 room_conf_id = 5;
  if (has_room_conf_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->room_conf_id(), output);
  }

  // optional string room_name = 6;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->room_name(), output);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_create_3dchat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 create_tm = 4;
  if (has_create_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->create_tm(), target);
  }

  // optional int32 room_conf_id = 5;
  if (has_room_conf_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->room_conf_id(), target);
  }

  // optional string room_name = 6;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->room_name(), target);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_create_3dchat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_create_3dchat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 create_tm = 4;
    if (has_create_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_tm());
    }

    // optional int32 room_conf_id = 5;
    if (has_room_conf_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_conf_id());
    }

    // optional string room_name = 6;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

    // optional string token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_create_3dchat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_create_3dchat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_create_3dchat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_create_3dchat_room_ack::MergeFrom(const pub_create_3dchat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_create_tm()) {
      set_create_tm(from.create_tm());
    }
    if (from.has_room_conf_id()) {
      set_room_conf_id(from.room_conf_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_create_3dchat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_create_3dchat_room_ack::CopyFrom(const pub_create_3dchat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_create_3dchat_room_ack::IsInitialized() const {

  return true;
}

void pub_create_3dchat_room_ack::Swap(pub_create_3dchat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(create_tm_, other->create_tm_);
    std::swap(room_conf_id_, other->room_conf_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_create_3dchat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_create_3dchat_room_ack_descriptor_;
  metadata.reflection = pub_create_3dchat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_top_3dchat_room_req::kProtoIdFieldNumber;
const int pub_top_3dchat_room_req::kRoomIdFieldNumber;
const int pub_top_3dchat_room_req::kTopTmFieldNumber;
const int pub_top_3dchat_room_req::kDurFieldNumber;
#endif  // !_MSC_VER

pub_top_3dchat_room_req::pub_top_3dchat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_top_3dchat_room_req::InitAsDefaultInstance() {
}

pub_top_3dchat_room_req::pub_top_3dchat_room_req(const pub_top_3dchat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_top_3dchat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1717;
  room_id_ = 0;
  top_tm_ = 0;
  dur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_top_3dchat_room_req::~pub_top_3dchat_room_req() {
  SharedDtor();
}

void pub_top_3dchat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_top_3dchat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_top_3dchat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_top_3dchat_room_req_descriptor_;
}

const pub_top_3dchat_room_req& pub_top_3dchat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_top_3dchat_room_req* pub_top_3dchat_room_req::default_instance_ = NULL;

pub_top_3dchat_room_req* pub_top_3dchat_room_req::New() const {
  return new pub_top_3dchat_room_req;
}

void pub_top_3dchat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1717;
    room_id_ = 0;
    top_tm_ = 0;
    dur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_top_3dchat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_top_tm;
        break;
      }

      // optional int32 top_tm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_tm_)));
          set_has_top_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dur;
        break;
      }

      // optional int32 dur = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dur_)));
          set_has_dur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_top_3dchat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional int32 top_tm = 3;
  if (has_top_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->top_tm(), output);
  }

  // optional int32 dur = 4;
  if (has_dur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_top_3dchat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional int32 top_tm = 3;
  if (has_top_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->top_tm(), target);
  }

  // optional int32 dur = 4;
  if (has_dur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_top_3dchat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 top_tm = 3;
    if (has_top_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_tm());
    }

    // optional int32 dur = 4;
    if (has_dur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_top_3dchat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_top_3dchat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_top_3dchat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_top_3dchat_room_req::MergeFrom(const pub_top_3dchat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_top_tm()) {
      set_top_tm(from.top_tm());
    }
    if (from.has_dur()) {
      set_dur(from.dur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_top_3dchat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_top_3dchat_room_req::CopyFrom(const pub_top_3dchat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_top_3dchat_room_req::IsInitialized() const {

  return true;
}

void pub_top_3dchat_room_req::Swap(pub_top_3dchat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(top_tm_, other->top_tm_);
    std::swap(dur_, other->dur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_top_3dchat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_top_3dchat_room_req_descriptor_;
  metadata.reflection = pub_top_3dchat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_top_3dchat_room_ack::kProtoIdFieldNumber;
const int pub_top_3dchat_room_ack::kRetFieldNumber;
const int pub_top_3dchat_room_ack::kRoomIdFieldNumber;
const int pub_top_3dchat_room_ack::kTopTmFieldNumber;
const int pub_top_3dchat_room_ack::kDurFieldNumber;
#endif  // !_MSC_VER

pub_top_3dchat_room_ack::pub_top_3dchat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_top_3dchat_room_ack::InitAsDefaultInstance() {
}

pub_top_3dchat_room_ack::pub_top_3dchat_room_ack(const pub_top_3dchat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_top_3dchat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1718;
  ret_ = 0;
  room_id_ = 0;
  top_tm_ = 0;
  dur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_top_3dchat_room_ack::~pub_top_3dchat_room_ack() {
  SharedDtor();
}

void pub_top_3dchat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_top_3dchat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_top_3dchat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_top_3dchat_room_ack_descriptor_;
}

const pub_top_3dchat_room_ack& pub_top_3dchat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_top_3dchat_room_ack* pub_top_3dchat_room_ack::default_instance_ = NULL;

pub_top_3dchat_room_ack* pub_top_3dchat_room_ack::New() const {
  return new pub_top_3dchat_room_ack;
}

void pub_top_3dchat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1718;
    ret_ = 0;
    room_id_ = 0;
    top_tm_ = 0;
    dur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_top_3dchat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_top_tm;
        break;
      }

      // optional int32 top_tm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_tm_)));
          set_has_top_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dur;
        break;
      }

      // optional int32 dur = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dur_)));
          set_has_dur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_top_3dchat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional int32 top_tm = 4;
  if (has_top_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->top_tm(), output);
  }

  // optional int32 dur = 5;
  if (has_dur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_top_3dchat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional int32 top_tm = 4;
  if (has_top_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->top_tm(), target);
  }

  // optional int32 dur = 5;
  if (has_dur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_top_3dchat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_top_3dchat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional int32 top_tm = 4;
    if (has_top_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_tm());
    }

    // optional int32 dur = 5;
    if (has_dur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_top_3dchat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_top_3dchat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_top_3dchat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_top_3dchat_room_ack::MergeFrom(const pub_top_3dchat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_top_tm()) {
      set_top_tm(from.top_tm());
    }
    if (from.has_dur()) {
      set_dur(from.dur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_top_3dchat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_top_3dchat_room_ack::CopyFrom(const pub_top_3dchat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_top_3dchat_room_ack::IsInitialized() const {

  return true;
}

void pub_top_3dchat_room_ack::Swap(pub_top_3dchat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(top_tm_, other->top_tm_);
    std::swap(dur_, other->dur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_top_3dchat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_top_3dchat_room_ack_descriptor_;
  metadata.reflection = pub_top_3dchat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_cancel_top_3dchat_room_req::kProtoIdFieldNumber;
const int pub_cancel_top_3dchat_room_req::kRoomIdFieldNumber;
#endif  // !_MSC_VER

pub_cancel_top_3dchat_room_req::pub_cancel_top_3dchat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_cancel_top_3dchat_room_req::InitAsDefaultInstance() {
}

pub_cancel_top_3dchat_room_req::pub_cancel_top_3dchat_room_req(const pub_cancel_top_3dchat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_cancel_top_3dchat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1719;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_cancel_top_3dchat_room_req::~pub_cancel_top_3dchat_room_req() {
  SharedDtor();
}

void pub_cancel_top_3dchat_room_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_cancel_top_3dchat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_cancel_top_3dchat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_cancel_top_3dchat_room_req_descriptor_;
}

const pub_cancel_top_3dchat_room_req& pub_cancel_top_3dchat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_cancel_top_3dchat_room_req* pub_cancel_top_3dchat_room_req::default_instance_ = NULL;

pub_cancel_top_3dchat_room_req* pub_cancel_top_3dchat_room_req::New() const {
  return new pub_cancel_top_3dchat_room_req;
}

void pub_cancel_top_3dchat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1719;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_cancel_top_3dchat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_cancel_top_3dchat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_cancel_top_3dchat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_cancel_top_3dchat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_cancel_top_3dchat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_cancel_top_3dchat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_cancel_top_3dchat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_cancel_top_3dchat_room_req::MergeFrom(const pub_cancel_top_3dchat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_cancel_top_3dchat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_cancel_top_3dchat_room_req::CopyFrom(const pub_cancel_top_3dchat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_cancel_top_3dchat_room_req::IsInitialized() const {

  return true;
}

void pub_cancel_top_3dchat_room_req::Swap(pub_cancel_top_3dchat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_cancel_top_3dchat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_cancel_top_3dchat_room_req_descriptor_;
  metadata.reflection = pub_cancel_top_3dchat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_cancel_top_3dchat_room_ack::kProtoIdFieldNumber;
const int pub_cancel_top_3dchat_room_ack::kRoomIdFieldNumber;
#endif  // !_MSC_VER

pub_cancel_top_3dchat_room_ack::pub_cancel_top_3dchat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_cancel_top_3dchat_room_ack::InitAsDefaultInstance() {
}

pub_cancel_top_3dchat_room_ack::pub_cancel_top_3dchat_room_ack(const pub_cancel_top_3dchat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_cancel_top_3dchat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1720;
  room_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_cancel_top_3dchat_room_ack::~pub_cancel_top_3dchat_room_ack() {
  SharedDtor();
}

void pub_cancel_top_3dchat_room_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_cancel_top_3dchat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_cancel_top_3dchat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_cancel_top_3dchat_room_ack_descriptor_;
}

const pub_cancel_top_3dchat_room_ack& pub_cancel_top_3dchat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_cancel_top_3dchat_room_ack* pub_cancel_top_3dchat_room_ack::default_instance_ = NULL;

pub_cancel_top_3dchat_room_ack* pub_cancel_top_3dchat_room_ack::New() const {
  return new pub_cancel_top_3dchat_room_ack;
}

void pub_cancel_top_3dchat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1720;
    room_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_cancel_top_3dchat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_cancel_top_3dchat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_cancel_top_3dchat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_cancel_top_3dchat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_cancel_top_3dchat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_cancel_top_3dchat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_cancel_top_3dchat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_cancel_top_3dchat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_cancel_top_3dchat_room_ack::MergeFrom(const pub_cancel_top_3dchat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_cancel_top_3dchat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_cancel_top_3dchat_room_ack::CopyFrom(const pub_cancel_top_3dchat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_cancel_top_3dchat_room_ack::IsInitialized() const {

  return true;
}

void pub_cancel_top_3dchat_room_ack::Swap(pub_cancel_top_3dchat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_cancel_top_3dchat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_cancel_top_3dchat_room_ack_descriptor_;
  metadata.reflection = pub_cancel_top_3dchat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_change_name_3dchat_room_req::kProtoIdFieldNumber;
const int pub_change_name_3dchat_room_req::kRoomIdFieldNumber;
const int pub_change_name_3dchat_room_req::kRoomNameFieldNumber;
#endif  // !_MSC_VER

pub_change_name_3dchat_room_req::pub_change_name_3dchat_room_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_change_name_3dchat_room_req::InitAsDefaultInstance() {
}

pub_change_name_3dchat_room_req::pub_change_name_3dchat_room_req(const pub_change_name_3dchat_room_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_change_name_3dchat_room_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1722;
  room_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_change_name_3dchat_room_req::~pub_change_name_3dchat_room_req() {
  SharedDtor();
}

void pub_change_name_3dchat_room_req::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void pub_change_name_3dchat_room_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_change_name_3dchat_room_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_change_name_3dchat_room_req_descriptor_;
}

const pub_change_name_3dchat_room_req& pub_change_name_3dchat_room_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_change_name_3dchat_room_req* pub_change_name_3dchat_room_req::default_instance_ = NULL;

pub_change_name_3dchat_room_req* pub_change_name_3dchat_room_req::New() const {
  return new pub_change_name_3dchat_room_req;
}

void pub_change_name_3dchat_room_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1722;
    room_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_change_name_3dchat_room_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_room_name;
        break;
      }

      // optional string room_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_change_name_3dchat_room_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->room_id(), output);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->room_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_change_name_3dchat_room_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 room_id = 2;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->room_id(), target);
  }

  // optional string room_name = 3;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_change_name_3dchat_room_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string room_name = 3;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_change_name_3dchat_room_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_change_name_3dchat_room_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_change_name_3dchat_room_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_change_name_3dchat_room_req::MergeFrom(const pub_change_name_3dchat_room_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_change_name_3dchat_room_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_change_name_3dchat_room_req::CopyFrom(const pub_change_name_3dchat_room_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_change_name_3dchat_room_req::IsInitialized() const {

  return true;
}

void pub_change_name_3dchat_room_req::Swap(pub_change_name_3dchat_room_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_change_name_3dchat_room_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_change_name_3dchat_room_req_descriptor_;
  metadata.reflection = pub_change_name_3dchat_room_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_change_name_3dchat_room_ack::kProtoIdFieldNumber;
const int pub_change_name_3dchat_room_ack::kRetFieldNumber;
const int pub_change_name_3dchat_room_ack::kRoomIdFieldNumber;
const int pub_change_name_3dchat_room_ack::kRoomNameFieldNumber;
#endif  // !_MSC_VER

pub_change_name_3dchat_room_ack::pub_change_name_3dchat_room_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_change_name_3dchat_room_ack::InitAsDefaultInstance() {
}

pub_change_name_3dchat_room_ack::pub_change_name_3dchat_room_ack(const pub_change_name_3dchat_room_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_change_name_3dchat_room_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1723;
  ret_ = 0;
  room_id_ = 0;
  room_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_change_name_3dchat_room_ack::~pub_change_name_3dchat_room_ack() {
  SharedDtor();
}

void pub_change_name_3dchat_room_ack::SharedDtor() {
  if (room_name_ != &::google::protobuf::internal::kEmptyString) {
    delete room_name_;
  }
  if (this != default_instance_) {
  }
}

void pub_change_name_3dchat_room_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_change_name_3dchat_room_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_change_name_3dchat_room_ack_descriptor_;
}

const pub_change_name_3dchat_room_ack& pub_change_name_3dchat_room_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_change_name_3dchat_room_ack* pub_change_name_3dchat_room_ack::default_instance_ = NULL;

pub_change_name_3dchat_room_ack* pub_change_name_3dchat_room_ack::New() const {
  return new pub_change_name_3dchat_room_ack;
}

void pub_change_name_3dchat_room_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1723;
    ret_ = 0;
    room_id_ = 0;
    if (has_room_name()) {
      if (room_name_ != &::google::protobuf::internal::kEmptyString) {
        room_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_change_name_3dchat_room_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_room_id;
        break;
      }

      // optional int32 room_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_room_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
          set_has_room_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_room_name;
        break;
      }

      // optional string room_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room_name().data(), this->room_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_change_name_3dchat_room_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->room_id(), output);
  }

  // optional string room_name = 4;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->room_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_change_name_3dchat_room_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 room_id = 3;
  if (has_room_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->room_id(), target);
  }

  // optional string room_name = 4;
  if (has_room_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room_name().data(), this->room_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->room_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_change_name_3dchat_room_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_change_name_3dchat_room_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 room_id = 3;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->room_id());
    }

    // optional string room_name = 4;
    if (has_room_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_change_name_3dchat_room_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_change_name_3dchat_room_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_change_name_3dchat_room_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_change_name_3dchat_room_ack::MergeFrom(const pub_change_name_3dchat_room_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_name()) {
      set_room_name(from.room_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_change_name_3dchat_room_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_change_name_3dchat_room_ack::CopyFrom(const pub_change_name_3dchat_room_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_change_name_3dchat_room_ack::IsInitialized() const {

  return true;
}

void pub_change_name_3dchat_room_ack::Swap(pub_change_name_3dchat_room_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_name_, other->room_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_change_name_3dchat_room_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_change_name_3dchat_room_ack_descriptor_;
  metadata.reflection = pub_change_name_3dchat_room_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_role_gs_id_req::kProtoIdFieldNumber;
const int pub_get_role_gs_id_req::kSourRoleIdFieldNumber;
const int pub_get_role_gs_id_req::kDestRoleIdFieldNumber;
#endif  // !_MSC_VER

pub_get_role_gs_id_req::pub_get_role_gs_id_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_role_gs_id_req::InitAsDefaultInstance() {
}

pub_get_role_gs_id_req::pub_get_role_gs_id_req(const pub_get_role_gs_id_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_role_gs_id_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1706;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_role_gs_id_req::~pub_get_role_gs_id_req() {
  SharedDtor();
}

void pub_get_role_gs_id_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_role_gs_id_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_role_gs_id_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_role_gs_id_req_descriptor_;
}

const pub_get_role_gs_id_req& pub_get_role_gs_id_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_role_gs_id_req* pub_get_role_gs_id_req::default_instance_ = NULL;

pub_get_role_gs_id_req* pub_get_role_gs_id_req::New() const {
  return new pub_get_role_gs_id_req;
}

void pub_get_role_gs_id_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1706;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    dest_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_role_gs_id_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_role_gs_id_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 sour_role_id = 2;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sour_role_id(), output);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dest_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_role_gs_id_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 sour_role_id = 2;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sour_role_id(), target);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dest_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_role_gs_id_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 sour_role_id = 2;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional uint64 dest_role_id = 3;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_role_gs_id_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_role_gs_id_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_role_gs_id_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_role_gs_id_req::MergeFrom(const pub_get_role_gs_id_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_role_gs_id_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_role_gs_id_req::CopyFrom(const pub_get_role_gs_id_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_role_gs_id_req::IsInitialized() const {

  return true;
}

void pub_get_role_gs_id_req::Swap(pub_get_role_gs_id_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_role_gs_id_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_role_gs_id_req_descriptor_;
  metadata.reflection = pub_get_role_gs_id_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_role_gs_id_ack::kProtoIdFieldNumber;
const int pub_get_role_gs_id_ack::kRetFieldNumber;
const int pub_get_role_gs_id_ack::kSourRoleIdFieldNumber;
const int pub_get_role_gs_id_ack::kDestRoleIdFieldNumber;
const int pub_get_role_gs_id_ack::kDestGsIdFieldNumber;
#endif  // !_MSC_VER

pub_get_role_gs_id_ack::pub_get_role_gs_id_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_role_gs_id_ack::InitAsDefaultInstance() {
}

pub_get_role_gs_id_ack::pub_get_role_gs_id_ack(const pub_get_role_gs_id_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_role_gs_id_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1707;
  ret_ = 0;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  dest_gs_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_role_gs_id_ack::~pub_get_role_gs_id_ack() {
  SharedDtor();
}

void pub_get_role_gs_id_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_role_gs_id_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_role_gs_id_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_role_gs_id_ack_descriptor_;
}

const pub_get_role_gs_id_ack& pub_get_role_gs_id_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_role_gs_id_ack* pub_get_role_gs_id_ack::default_instance_ = NULL;

pub_get_role_gs_id_ack* pub_get_role_gs_id_ack::New() const {
  return new pub_get_role_gs_id_ack;
}

void pub_get_role_gs_id_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1707;
    ret_ = 0;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    dest_gs_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_role_gs_id_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dest_gs_id;
        break;
      }

      // optional uint64 dest_gs_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_gs_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_gs_id_)));
          set_has_dest_gs_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_role_gs_id_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 sour_role_id = 3;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sour_role_id(), output);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dest_role_id(), output);
  }

  // optional uint64 dest_gs_id = 5;
  if (has_dest_gs_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dest_gs_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_role_gs_id_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 sour_role_id = 3;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sour_role_id(), target);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dest_role_id(), target);
  }

  // optional uint64 dest_gs_id = 5;
  if (has_dest_gs_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dest_gs_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_role_gs_id_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_role_gs_id_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 sour_role_id = 3;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional uint64 dest_role_id = 4;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional uint64 dest_gs_id = 5;
    if (has_dest_gs_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_gs_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_role_gs_id_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_role_gs_id_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_role_gs_id_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_role_gs_id_ack::MergeFrom(const pub_get_role_gs_id_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_dest_gs_id()) {
      set_dest_gs_id(from.dest_gs_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_role_gs_id_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_role_gs_id_ack::CopyFrom(const pub_get_role_gs_id_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_role_gs_id_ack::IsInitialized() const {

  return true;
}

void pub_get_role_gs_id_ack::Swap(pub_get_role_gs_id_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(dest_gs_id_, other->dest_gs_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_role_gs_id_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_role_gs_id_ack_descriptor_;
  metadata.reflection = pub_get_role_gs_id_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_members_req::kProtoIdFieldNumber;
const int pub_get_offical_members_req::kGradeFieldNumber;
const int pub_get_offical_members_req::kStartIndexFieldNumber;
const int pub_get_offical_members_req::kEndIndexFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_members_req::pub_get_offical_members_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_members_req::InitAsDefaultInstance() {
}

pub_get_offical_members_req::pub_get_offical_members_req(const pub_get_offical_members_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_members_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1548;
  grade_ = 0;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_members_req::~pub_get_offical_members_req() {
  SharedDtor();
}

void pub_get_offical_members_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_members_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_members_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_members_req_descriptor_;
}

const pub_get_offical_members_req& pub_get_offical_members_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_members_req* pub_get_offical_members_req::default_instance_ = NULL;

pub_get_offical_members_req* pub_get_offical_members_req::New() const {
  return new pub_get_offical_members_req;
}

void pub_get_offical_members_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1548;
    grade_ = 0;
    start_index_ = 0;
    end_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_members_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_members_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_index(), output);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_members_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_index(), target);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_members_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 4;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_members_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_members_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_members_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_members_req::MergeFrom(const pub_get_offical_members_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_members_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_members_req::CopyFrom(const pub_get_offical_members_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_members_req::IsInitialized() const {

  return true;
}

void pub_get_offical_members_req::Swap(pub_get_offical_members_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(grade_, other->grade_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_members_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_members_req_descriptor_;
  metadata.reflection = pub_get_offical_members_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_members_ack::kProtoIdFieldNumber;
const int pub_get_offical_members_ack::kRetFieldNumber;
const int pub_get_offical_members_ack::kGradeFieldNumber;
const int pub_get_offical_members_ack::kMembersFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_members_ack::pub_get_offical_members_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_members_ack::InitAsDefaultInstance() {
}

pub_get_offical_members_ack::pub_get_offical_members_ack(const pub_get_offical_members_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_members_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1549;
  ret_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_members_ack::~pub_get_offical_members_ack() {
  SharedDtor();
}

void pub_get_offical_members_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_members_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_members_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_members_ack_descriptor_;
}

const pub_get_offical_members_ack& pub_get_offical_members_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_members_ack* pub_get_offical_members_ack::default_instance_ = NULL;

pub_get_offical_members_ack* pub_get_offical_members_ack::New() const {
  return new pub_get_offical_members_ack;
}

void pub_get_offical_members_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1549;
    ret_ = 0;
    grade_ = 0;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_members_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .SProtoSpace.offical_member_data members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_members_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // repeated .SProtoSpace.offical_member_data members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_members_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // repeated .SProtoSpace.offical_member_data members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_members_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_members_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  // repeated .SProtoSpace.offical_member_data members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_members_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_members_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_members_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_members_ack::MergeFrom(const pub_get_offical_members_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_members_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_members_ack::CopyFrom(const pub_get_offical_members_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_members_ack::IsInitialized() const {

  return true;
}

void pub_get_offical_members_ack::Swap(pub_get_offical_members_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_members_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_members_ack_descriptor_;
  metadata.reflection = pub_get_offical_members_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_gm_start_match_req::kProtoIdFieldNumber;
const int pub_gm_start_match_req::kGradeFieldNumber;
const int pub_gm_start_match_req::kStartTimeFieldNumber;
const int pub_gm_start_match_req::kEndTimeFieldNumber;
#endif  // !_MSC_VER

pub_gm_start_match_req::pub_gm_start_match_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_gm_start_match_req::InitAsDefaultInstance() {
}

pub_gm_start_match_req::pub_gm_start_match_req(const pub_gm_start_match_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_gm_start_match_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1550;
  grade_ = 0;
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_gm_start_match_req::~pub_gm_start_match_req() {
  SharedDtor();
}

void pub_gm_start_match_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_gm_start_match_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_gm_start_match_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_gm_start_match_req_descriptor_;
}

const pub_gm_start_match_req& pub_gm_start_match_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_gm_start_match_req* pub_gm_start_match_req::default_instance_ = NULL;

pub_gm_start_match_req* pub_gm_start_match_req::New() const {
  return new pub_gm_start_match_req;
}

void pub_gm_start_match_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1550;
    grade_ = 0;
    start_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_gm_start_match_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional int32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_gm_start_match_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // optional int32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_time(), output);
  }

  // optional int32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_gm_start_match_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // optional int32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_time(), target);
  }

  // optional int32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_gm_start_match_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }

    // optional int32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_gm_start_match_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_gm_start_match_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_gm_start_match_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_gm_start_match_req::MergeFrom(const pub_gm_start_match_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_gm_start_match_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_gm_start_match_req::CopyFrom(const pub_gm_start_match_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_gm_start_match_req::IsInitialized() const {

  return true;
}

void pub_gm_start_match_req::Swap(pub_gm_start_match_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(grade_, other->grade_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_gm_start_match_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_gm_start_match_req_descriptor_;
  metadata.reflection = pub_gm_start_match_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_gm_start_match_ack::kProtoIdFieldNumber;
const int pub_gm_start_match_ack::kRetFieldNumber;
const int pub_gm_start_match_ack::kGradeFieldNumber;
#endif  // !_MSC_VER

pub_gm_start_match_ack::pub_gm_start_match_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_gm_start_match_ack::InitAsDefaultInstance() {
}

pub_gm_start_match_ack::pub_gm_start_match_ack(const pub_gm_start_match_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_gm_start_match_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1551;
  ret_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_gm_start_match_ack::~pub_gm_start_match_ack() {
  SharedDtor();
}

void pub_gm_start_match_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_gm_start_match_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_gm_start_match_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_gm_start_match_ack_descriptor_;
}

const pub_gm_start_match_ack& pub_gm_start_match_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_gm_start_match_ack* pub_gm_start_match_ack::default_instance_ = NULL;

pub_gm_start_match_ack* pub_gm_start_match_ack::New() const {
  return new pub_gm_start_match_ack;
}

void pub_gm_start_match_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1551;
    ret_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_gm_start_match_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_gm_start_match_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_gm_start_match_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_gm_start_match_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_start_match_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_gm_start_match_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_gm_start_match_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_gm_start_match_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_gm_start_match_ack::MergeFrom(const pub_gm_start_match_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_gm_start_match_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_gm_start_match_ack::CopyFrom(const pub_gm_start_match_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_gm_start_match_ack::IsInitialized() const {

  return true;
}

void pub_gm_start_match_ack::Swap(pub_gm_start_match_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_gm_start_match_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_gm_start_match_ack_descriptor_;
  metadata.reflection = pub_gm_start_match_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_gm_send_office_mail_req::kProtoIdFieldNumber;
const int pub_gm_send_office_mail_req::kMailIdFieldNumber;
const int pub_gm_send_office_mail_req::kGradeFieldNumber;
#endif  // !_MSC_VER

pub_gm_send_office_mail_req::pub_gm_send_office_mail_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_gm_send_office_mail_req::InitAsDefaultInstance() {
}

pub_gm_send_office_mail_req::pub_gm_send_office_mail_req(const pub_gm_send_office_mail_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_gm_send_office_mail_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1554;
  mail_id_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_gm_send_office_mail_req::~pub_gm_send_office_mail_req() {
  SharedDtor();
}

void pub_gm_send_office_mail_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_gm_send_office_mail_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_gm_send_office_mail_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_gm_send_office_mail_req_descriptor_;
}

const pub_gm_send_office_mail_req& pub_gm_send_office_mail_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_gm_send_office_mail_req* pub_gm_send_office_mail_req::default_instance_ = NULL;

pub_gm_send_office_mail_req* pub_gm_send_office_mail_req::New() const {
  return new pub_gm_send_office_mail_req;
}

void pub_gm_send_office_mail_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1554;
    mail_id_ = 0;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_gm_send_office_mail_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_send_office_mail_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional int32 mail_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_gm_send_office_mail_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_send_office_mail_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mail_id(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_gm_send_office_mail_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_send_office_mail_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mail_id(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_gm_send_office_mail_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_gm_send_office_mail_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mail_id());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_gm_send_office_mail_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_gm_send_office_mail_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_gm_send_office_mail_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_gm_send_office_mail_req::MergeFrom(const pub_gm_send_office_mail_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_gm_send_office_mail_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_gm_send_office_mail_req::CopyFrom(const pub_gm_send_office_mail_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_gm_send_office_mail_req::IsInitialized() const {

  return true;
}

void pub_gm_send_office_mail_req::Swap(pub_gm_send_office_mail_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_gm_send_office_mail_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_gm_send_office_mail_req_descriptor_;
  metadata.reflection = pub_gm_send_office_mail_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_data_req::kProtoIdFieldNumber;
const int pub_get_offical_data_req::kGradeFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_data_req::pub_get_offical_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_data_req::InitAsDefaultInstance() {
}

pub_get_offical_data_req::pub_get_offical_data_req(const pub_get_offical_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_data_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1555;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_data_req::~pub_get_offical_data_req() {
  SharedDtor();
}

void pub_get_offical_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_data_req_descriptor_;
}

const pub_get_offical_data_req& pub_get_offical_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_data_req* pub_get_offical_data_req::default_instance_ = NULL;

pub_get_offical_data_req* pub_get_offical_data_req::New() const {
  return new pub_get_offical_data_req;
}

void pub_get_offical_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1555;
    grade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // optional int32 grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_data_req::MergeFrom(const pub_get_offical_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_data_req::CopyFrom(const pub_get_offical_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_data_req::IsInitialized() const {

  return true;
}

void pub_get_offical_data_req::Swap(pub_get_offical_data_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_data_req_descriptor_;
  metadata.reflection = pub_get_offical_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pub_get_offical_data_ack::kProtoIdFieldNumber;
const int pub_get_offical_data_ack::kRetFieldNumber;
const int pub_get_offical_data_ack::kGradeFieldNumber;
const int pub_get_offical_data_ack::kRankingIdFieldNumber;
#endif  // !_MSC_VER

pub_get_offical_data_ack::pub_get_offical_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pub_get_offical_data_ack::InitAsDefaultInstance() {
}

pub_get_offical_data_ack::pub_get_offical_data_ack(const pub_get_offical_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pub_get_offical_data_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 1556;
  ret_ = 0;
  grade_ = 0;
  ranking_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pub_get_offical_data_ack::~pub_get_offical_data_ack() {
  SharedDtor();
}

void pub_get_offical_data_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pub_get_offical_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pub_get_offical_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pub_get_offical_data_ack_descriptor_;
}

const pub_get_offical_data_ack& pub_get_offical_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fpublic_2eproto();
  return *default_instance_;
}

pub_get_offical_data_ack* pub_get_offical_data_ack::default_instance_ = NULL;

pub_get_offical_data_ack* pub_get_offical_data_ack::New() const {
  return new pub_get_offical_data_ack;
}

void pub_get_offical_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 1556;
    ret_ = 0;
    grade_ = 0;
    ranking_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pub_get_offical_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ranking_id;
        break;
      }

      // optional int32 ranking_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_id_)));
          set_has_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pub_get_offical_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // optional int32 ranking_id = 4;
  if (has_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranking_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pub_get_offical_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // optional int32 ranking_id = 4;
  if (has_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranking_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pub_get_offical_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID proto_id = 1 [default = pub_get_offical_data_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 ranking_id = 4;
    if (has_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pub_get_offical_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pub_get_offical_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pub_get_offical_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pub_get_offical_data_ack::MergeFrom(const pub_get_offical_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ranking_id()) {
      set_ranking_id(from.ranking_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pub_get_offical_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pub_get_offical_data_ack::CopyFrom(const pub_get_offical_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pub_get_offical_data_ack::IsInitialized() const {

  return true;
}

void pub_get_offical_data_ack::Swap(pub_get_offical_data_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(grade_, other->grade_);
    std::swap(ranking_id_, other->ranking_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pub_get_offical_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pub_get_offical_data_ack_descriptor_;
  metadata.reflection = pub_get_offical_data_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
