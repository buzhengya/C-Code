// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* account_check_in_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_check_in_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* account_check_in_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_check_in_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_packet_seq_id_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_packet_seq_id_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_packet_seq_id_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_packet_seq_id_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* sys_packet_seq_id_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sys_packet_seq_id_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* uplink_packet_seq_error_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  uplink_packet_seq_error_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_secret_key_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_secret_key_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_secret_key_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_secret_key_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_secret_start_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_secret_start_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_secret_start_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_secret_start_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* account_role_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  account_role_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_role_of_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_role_of_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_role_of_game_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_role_of_game_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* switch_scene_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  switch_scene_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_game_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_game_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_game_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_game_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_unlock_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_unlock_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_unlock_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_unlock_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* system_unlock_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  system_unlock_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_role_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_role_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_common_base_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_common_base_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_update_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_update_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_raise_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_raise_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_raise_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_raise_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_bind_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_bind_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_bind_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_bind_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_unbind_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_unbind_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_unbind_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_unbind_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_lock_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_lock_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_lock_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_lock_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_unlock_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_unlock_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_unlock_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_unlock_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_sell_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_sell_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* soul_sell_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  soul_sell_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_packet_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_packet_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_packet_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_packet_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_use_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_use_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_use_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_use_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_sold_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_sold_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_sold_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_sold_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* bag_expand_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bag_expand_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* bag_expand_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bag_expand_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* bag_capacity_not_enough_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bag_capacity_not_enough_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_list_data_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_list_data_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* add_hero_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  add_hero_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* remove_hero_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  remove_hero_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_info_change_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_info_change_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_upgrade_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_upgrade_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_upgrade_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_upgrade_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_upstar_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_upstar_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_upstar_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_upstar_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_awaken_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_awaken_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_awaken_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_awaken_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_lock_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_lock_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_lock_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_lock_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_compose_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_compose_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_compose_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_compose_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_skin_active_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_skin_active_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_skin_active_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_skin_active_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_change_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_change_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_change_name_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_change_name_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_level_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_level_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_level_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_quality_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_quality_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_quality_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_quality_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_combine_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_combine_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* item_combine_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  item_combine_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_star_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_star_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_star_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_star_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_skill_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_skill_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_skill_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_skill_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_unequip_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_unequip_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_unequip_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_unequip_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_level_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_level_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_level_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_onekey_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_onekey_level_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_onekey_level_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_onekey_level_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_level_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_level_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_all_level_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_all_level_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_all_level_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_all_level_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_onekey_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_onekey_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_equip_onekey_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_equip_onekey_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_unequip_onekey_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_unequip_onekey_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_unequip_onekey_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_unequip_onekey_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_operation_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_operation_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gm_operation_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gm_operation_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* leave_game_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  leave_game_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* kick_game_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  kick_game_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* beat_heart_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  beat_heart_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* sync_time_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sync_time_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_heart_beat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_heart_beat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_heart_beat_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_heart_beat_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_info_update_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_info_update_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_fight_score_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_fight_score_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_change_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_change_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_change_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_change_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_active_skin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_active_skin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_active_skin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_active_skin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_buy_skin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_buy_skin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_buy_skin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_buy_skin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_wear_skin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_wear_skin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_wear_skin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_wear_skin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_player_skillup_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_player_skillup_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_buy_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_buy_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_buy_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_buy_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_base_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_base_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_base_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_base_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_get_like_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_get_like_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_get_like_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_get_like_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_player_base_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_player_base_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_player_base_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_player_base_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_like_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_like_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_like_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_like_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_name_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_name_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_position_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_position_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_position_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_position_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_signature_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_signature_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_signature_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_signature_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_age_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_age_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_age_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_age_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_starsign_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_starsign_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_starsign_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_starsign_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_birthday_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_birthday_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_birthday_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_birthday_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_labels_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_labels_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_change_labels_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_change_labels_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_get_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_get_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_get_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_get_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_write_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_write_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_write_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_write_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_like_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_like_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_like_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_like_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_comment_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_comment_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_comment_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_comment_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_remove_emotion_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_remove_emotion_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_remove_emotion_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_remove_emotion_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_remove_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_remove_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_remove_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_remove_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_set_hero_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_set_hero_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_set_hero_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_set_hero_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_set_hero_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_set_hero_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_set_border_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_set_border_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_set_border_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_set_border_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_delete_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_delete_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_delete_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_delete_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_get_comment_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_get_comment_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_show_get_comment_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_show_get_comment_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* discover_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discover_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* discover_show_boss_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discover_show_boss_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_discover_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_discover_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_discover_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_discover_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_discover_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_discover_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_discover_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_discover_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_mopping_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_mopping_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_mopping_ack_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_mopping_ack_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_mopping_ack_moppping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_mopping_ack_moppping_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_mopping_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_mopping_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_buy_times_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_buy_times_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_buy_times_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_buy_times_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_get_section_star_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_get_section_star_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_get_section_star_ack_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_get_section_star_ack_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* discovery_get_section_star_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  discovery_get_section_star_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_base_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_base_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_all_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_all_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_all_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_all_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_refresh_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_refresh_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_refresh_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_refresh_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_visit_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_visit_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_visit_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_visit_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_reward_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_reward_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_royals_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_royals_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_pro_update_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_pro_update_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_task_reward_draw_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_task_reward_draw_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_update_royal_task_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_update_royal_task_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_intimacy_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_intimacy_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_intimacy_reward_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_intimacy_reward_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_draw_reward_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_draw_reward_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_draw_reward_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_draw_reward_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_all_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_all_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_all_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_all_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_refresh_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_refresh_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_refresh_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_refresh_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_qingan_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_qingan_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_qingan_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_qingan_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_unlock_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_unlock_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_unlock_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_unlock_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_branch_task_fin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_branch_task_fin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_branch_task_fin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_branch_task_fin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_chat_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_chat_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_chat_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_chat_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_get_gifts_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_get_gifts_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_get_gifts_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_get_gifts_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_give_gift_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_give_gift_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_give_gift_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_give_gift_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_enter_scene_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_enter_scene_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_enter_scene_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_enter_scene_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_event_fin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_event_fin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* game_royal_event_fin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  game_royal_event_fin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_data_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_data_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_chest_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_chest_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_role_chest_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_role_chest_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_role_chest_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_role_chest_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* create_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  create_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* enter_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  enter_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_team_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_team_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ready_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ready_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* ready_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ready_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* update_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  update_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_teams_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_teams_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_teams_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_teams_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* invite_roles_enter_team_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_roles_enter_team_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* invite_roles_enter_team_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_roles_enter_team_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* invite_enter_team_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  invite_enter_team_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_rank_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_rank_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_rank_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_rank_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_rank_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_rank_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_formation_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_formation_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_offical_formation_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_offical_formation_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* challenge_offical_rank_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  challenge_offical_rank_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* challenge_offical_rank_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  challenge_offical_rank_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_apply_battle_result_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_apply_battle_result_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* offical_apply_battle_result_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  offical_apply_battle_result_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_plot_upload_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_plot_upload_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_plot_upload_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_plot_upload_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_plot_get_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_plot_get_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_plot_get_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_plot_get_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_end_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_end_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_end_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_end_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_chapter_end_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_chapter_end_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_chapter_end_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_chapter_end_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_choose_branch_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_choose_branch_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_choose_branch_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_choose_branch_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_trigger_action_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_trigger_action_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_trigger_action_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_trigger_action_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_event_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_event_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_event_msg_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_event_msg_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_get_all_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_get_all_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_get_all_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_get_all_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_read_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_read_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_read_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_read_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_del_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_del_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_del_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_del_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_nty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_nty_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_get_by_id_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_get_by_id_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* event_msg_get_by_id_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  event_msg_get_by_id_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_rank_data_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_rank_data_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_rank_data_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_rank_data_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_uint_achievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_uint_achievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_achievements_ntf_type_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_achievements_ntf_type_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_achievements_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_achievements_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_achievement_get_rewards_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_achievement_get_rewards_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_achievement_get_rewards_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_achievement_get_rewards_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_achievement_point_rewards_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_achievement_point_rewards_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_achievement_point_rewards_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_achievement_point_rewards_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_bag_nty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_bag_nty_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_bag_all_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_bag_all_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_bag_all_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_bag_all_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_bag_all_nty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_bag_all_nty_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_send_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_send_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_send_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_send_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* flower_receive_nty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  flower_receive_nty_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_reward_item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_reward_item_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_rewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_rewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_info_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_info_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_info_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_info_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_ssr_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_ssr_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_ssr_ack_one_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_ssr_ack_one_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_draw_card_ssr_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_draw_card_ssr_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_talent_activate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_talent_activate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_talent_activate_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_talent_activate_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_role_talents_activate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_role_talents_activate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_role_talents_activate_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_role_talents_activate_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* switch_role_skill_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  switch_role_skill_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* switch_role_skill_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  switch_role_skill_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_use_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_use_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_use_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_use_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_un_use_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_un_use_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_un_use_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_un_use_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_lv_up_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_lv_up_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_lv_up_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_lv_up_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_break_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_break_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_break_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_break_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* talisman_change_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talisman_change_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* red_pt_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  red_pt_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* red_pt_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  red_pt_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* red_pt_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  red_pt_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_wearing_fashions_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_wearing_fashions_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_wearing_fashions_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_wearing_fashions_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_all_fashions_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_all_fashions_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_all_fashions_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_all_fashions_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* wear_fashions_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wear_fashions_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* wear_fashions_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wear_fashions_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_other_role_fashion_cs_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_other_role_fashion_cs_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* get_other_role_fashion_cs_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  get_other_role_fashion_cs_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_config_version_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_config_version_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* verify_config_version_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  verify_config_version_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* debug_hero_attr_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  debug_hero_attr_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* waiting_in_line_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  waiting_in_line_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* finish_in_line_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  finish_in_line_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_waiting_in_line_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_waiting_in_line_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* exit_waiting_in_line_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  exit_waiting_in_line_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* user_event_track_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  user_event_track_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_guide_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_guide_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_guide_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_guide_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_guide_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_guide_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_guide_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_guide_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* onekey_skip_guide_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  onekey_skip_guide_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* onekey_skip_guide_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  onekey_skip_guide_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_little_game_set_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_little_game_set_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_little_game_set_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_little_game_set_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_little_game_get_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_little_game_get_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* plot_little_game_get_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  plot_little_game_get_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_get_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_get_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_get_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_get_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_change_name_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_change_name_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_change_name_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_change_name_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_do_action_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_do_action_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_do_action_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_do_action_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_send_out_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_send_out_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_send_out_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_send_out_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_get_out_award_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_get_out_award_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_get_out_award_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_get_out_award_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_feed_food_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_feed_food_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_feed_food_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_feed_food_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_set_show_pet_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_set_show_pet_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_set_show_pet_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_set_show_pet_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_out_back_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_out_back_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* pet_out_back_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pet_out_back_ack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* eAchievementState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eDrawCardCoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserEventTrackType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGUIDE_OPENCONDI_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5frole_2eproto() {
  protobuf_AddDesc_cs_5frole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_role.proto");
  GOOGLE_CHECK(file != NULL);
  account_check_in_req_descriptor_ = file->message_type(0);
  static const int account_check_in_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, areaid_),
  };
  account_check_in_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_check_in_req_descriptor_,
      account_check_in_req::default_instance_,
      account_check_in_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_check_in_req));
  account_check_in_ack_descriptor_ = file->message_type(1);
  static const int account_check_in_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_ack, ret_),
  };
  account_check_in_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_check_in_ack_descriptor_,
      account_check_in_ack::default_instance_,
      account_check_in_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_check_in_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_check_in_ack));
  sys_packet_seq_id_ntf_descriptor_ = file->message_type(2);
  static const int sys_packet_seq_id_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ntf, protoid_),
  };
  sys_packet_seq_id_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_packet_seq_id_ntf_descriptor_,
      sys_packet_seq_id_ntf::default_instance_,
      sys_packet_seq_id_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_packet_seq_id_ntf));
  sys_packet_seq_id_req_descriptor_ = file->message_type(3);
  static const int sys_packet_seq_id_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_req, downlink_seq_id_),
  };
  sys_packet_seq_id_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_packet_seq_id_req_descriptor_,
      sys_packet_seq_id_req::default_instance_,
      sys_packet_seq_id_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_packet_seq_id_req));
  sys_packet_seq_id_ack_descriptor_ = file->message_type(4);
  static const int sys_packet_seq_id_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ack, uplink_seq_id_),
  };
  sys_packet_seq_id_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sys_packet_seq_id_ack_descriptor_,
      sys_packet_seq_id_ack::default_instance_,
      sys_packet_seq_id_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sys_packet_seq_id_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sys_packet_seq_id_ack));
  uplink_packet_seq_error_ntf_descriptor_ = file->message_type(5);
  static const int uplink_packet_seq_error_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uplink_packet_seq_error_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uplink_packet_seq_error_ntf, uplink_seq_id_),
  };
  uplink_packet_seq_error_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      uplink_packet_seq_error_ntf_descriptor_,
      uplink_packet_seq_error_ntf::default_instance_,
      uplink_packet_seq_error_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uplink_packet_seq_error_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uplink_packet_seq_error_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(uplink_packet_seq_error_ntf));
  client_secret_key_req_descriptor_ = file->message_type(6);
  static const int client_secret_key_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_req, public_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_req, seed_),
  };
  client_secret_key_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_secret_key_req_descriptor_,
      client_secret_key_req::default_instance_,
      client_secret_key_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_secret_key_req));
  client_secret_key_ack_descriptor_ = file->message_type(7);
  static const int client_secret_key_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_ack, secret_key_),
  };
  client_secret_key_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_secret_key_ack_descriptor_,
      client_secret_key_ack::default_instance_,
      client_secret_key_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_key_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_secret_key_ack));
  client_secret_start_req_descriptor_ = file->message_type(8);
  static const int client_secret_start_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_req, ret_),
  };
  client_secret_start_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_secret_start_req_descriptor_,
      client_secret_start_req::default_instance_,
      client_secret_start_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_secret_start_req));
  client_secret_start_ack_descriptor_ = file->message_type(9);
  static const int client_secret_start_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_ack, ret_),
  };
  client_secret_start_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_secret_start_ack_descriptor_,
      client_secret_start_ack::default_instance_,
      client_secret_start_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_secret_start_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_secret_start_ack));
  account_role_data_ack_descriptor_ = file->message_type(10);
  static const int account_role_data_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data_ack, data_),
  };
  account_role_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      account_role_data_ack_descriptor_,
      account_role_data_ack::default_instance_,
      account_role_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(account_role_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(account_role_data_ack));
  create_role_of_game_descriptor_ = file->message_type(11);
  static const int create_role_of_game_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game, rolesex_),
  };
  create_role_of_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_role_of_game_descriptor_,
      create_role_of_game::default_instance_,
      create_role_of_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_role_of_game));
  create_role_of_game_ack_descriptor_ = file->message_type(12);
  static const int create_role_of_game_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game_ack, create_ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game_ack, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game_ack, data_),
  };
  create_role_of_game_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_role_of_game_ack_descriptor_,
      create_role_of_game_ack::default_instance_,
      create_role_of_game_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_role_of_game_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_role_of_game_ack));
  switch_scene_req_descriptor_ = file->message_type(13);
  static const int switch_scene_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_scene_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_scene_req, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_scene_req, scene_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_scene_req, game_id_),
  };
  switch_scene_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      switch_scene_req_descriptor_,
      switch_scene_req::default_instance_,
      switch_scene_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_scene_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_scene_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(switch_scene_req));
  enter_game_req_descriptor_ = file->message_type(14);
  static const int enter_game_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_req, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_req, reason_),
  };
  enter_game_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_game_req_descriptor_,
      enter_game_req::default_instance_,
      enter_game_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_game_req));
  enter_game_ack_descriptor_ = file->message_type(15);
  static const int enter_game_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_ack, ret_),
  };
  enter_game_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_game_ack_descriptor_,
      enter_game_ack::default_instance_,
      enter_game_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_game_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_game_ack));
  system_unlock_req_descriptor_ = file->message_type(16);
  static const int system_unlock_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_req, protoid_),
  };
  system_unlock_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_unlock_req_descriptor_,
      system_unlock_req::default_instance_,
      system_unlock_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_unlock_req));
  system_unlock_ack_descriptor_ = file->message_type(17);
  static const int system_unlock_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ack, lock_module_ids_),
  };
  system_unlock_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_unlock_ack_descriptor_,
      system_unlock_ack::default_instance_,
      system_unlock_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_unlock_ack));
  system_unlock_ntf_descriptor_ = file->message_type(18);
  static const int system_unlock_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ntf, unlock_module_ids_),
  };
  system_unlock_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      system_unlock_ntf_descriptor_,
      system_unlock_ntf::default_instance_,
      system_unlock_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(system_unlock_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(system_unlock_ntf));
  role_info_ntf_descriptor_ = file->message_type(19);
  static const int role_info_ntf_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, soul_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, item_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, jade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, buy_power_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, tender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, treason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, wise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, adorkable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, scheming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, bag_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, task_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, offical_salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, first_offical_award_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, wine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, wine_cup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, daily_fortune_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, adv_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, adv_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, talent_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, change_name_time_),
  };
  role_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_info_ntf_descriptor_,
      role_info_ntf::default_instance_,
      role_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_info_ntf));
  item_info_descriptor_ = file->message_type(20);
  static const int item_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, item_count_),
  };
  item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_info_descriptor_,
      item_info::default_instance_,
      item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_info));
  update_role_info_ntf_descriptor_ = file->message_type(21);
  static const int update_role_info_ntf_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, item_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, jade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, plot_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, buy_power_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, tender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, treason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, wise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, adorkable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, good_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, scheming_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, bag_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, task_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, offical_salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, talent_point_),
  };
  update_role_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_role_info_ntf_descriptor_,
      update_role_info_ntf::default_instance_,
      update_role_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_role_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_role_info_ntf));
  role_common_base_ntf_descriptor_ = file->message_type(22);
  static const int role_common_base_ntf_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, jade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, task_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, wine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, wine_cup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, adv_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, adv_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, talent_point_),
  };
  role_common_base_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_common_base_ntf_descriptor_,
      role_common_base_ntf::default_instance_,
      role_common_base_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_common_base_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_common_base_ntf));
  soul_update_ntf_descriptor_ = file->message_type(23);
  static const int soul_update_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_update_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_update_ntf, add_soul_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_update_ntf, del_soul_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_update_ntf, fix_soul_s_),
  };
  soul_update_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_update_ntf_descriptor_,
      soul_update_ntf::default_instance_,
      soul_update_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_update_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_update_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_update_ntf));
  soul_raise_req_descriptor_ = file->message_type(24);
  static const int soul_raise_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_req, consume_id_),
  };
  soul_raise_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_raise_req_descriptor_,
      soul_raise_req::default_instance_,
      soul_raise_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_raise_req));
  soul_raise_ack_descriptor_ = file->message_type(25);
  static const int soul_raise_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_ack, ret_),
  };
  soul_raise_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_raise_ack_descriptor_,
      soul_raise_ack::default_instance_,
      soul_raise_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_raise_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_raise_ack));
  soul_bind_req_descriptor_ = file->message_type(26);
  static const int soul_bind_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_req, hero_uid_),
  };
  soul_bind_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_bind_req_descriptor_,
      soul_bind_req::default_instance_,
      soul_bind_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_bind_req));
  soul_bind_ack_descriptor_ = file->message_type(27);
  static const int soul_bind_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_ack, hero_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_ack, ret_),
  };
  soul_bind_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_bind_ack_descriptor_,
      soul_bind_ack::default_instance_,
      soul_bind_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_bind_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_bind_ack));
  soul_unbind_req_descriptor_ = file->message_type(28);
  static const int soul_unbind_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_req, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_req, hero_uid_),
  };
  soul_unbind_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_unbind_req_descriptor_,
      soul_unbind_req::default_instance_,
      soul_unbind_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_unbind_req));
  soul_unbind_ack_descriptor_ = file->message_type(29);
  static const int soul_unbind_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_ack, ret_),
  };
  soul_unbind_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_unbind_ack_descriptor_,
      soul_unbind_ack::default_instance_,
      soul_unbind_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unbind_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_unbind_ack));
  soul_lock_req_descriptor_ = file->message_type(30);
  static const int soul_lock_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_req, id_),
  };
  soul_lock_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_lock_req_descriptor_,
      soul_lock_req::default_instance_,
      soul_lock_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_lock_req));
  soul_lock_ack_descriptor_ = file->message_type(31);
  static const int soul_lock_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_ack, ret_),
  };
  soul_lock_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_lock_ack_descriptor_,
      soul_lock_ack::default_instance_,
      soul_lock_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_lock_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_lock_ack));
  soul_unlock_req_descriptor_ = file->message_type(32);
  static const int soul_unlock_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_req, id_),
  };
  soul_unlock_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_unlock_req_descriptor_,
      soul_unlock_req::default_instance_,
      soul_unlock_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_unlock_req));
  soul_unlock_ack_descriptor_ = file->message_type(33);
  static const int soul_unlock_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_ack, ret_),
  };
  soul_unlock_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_unlock_ack_descriptor_,
      soul_unlock_ack::default_instance_,
      soul_unlock_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_unlock_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_unlock_ack));
  soul_sell_req_descriptor_ = file->message_type(34);
  static const int soul_sell_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_req, soul_ids_),
  };
  soul_sell_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_sell_req_descriptor_,
      soul_sell_req::default_instance_,
      soul_sell_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_sell_req));
  soul_sell_ack_descriptor_ = file->message_type(35);
  static const int soul_sell_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_ack, ret_),
  };
  soul_sell_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      soul_sell_ack_descriptor_,
      soul_sell_ack::default_instance_,
      soul_sell_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(soul_sell_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(soul_sell_ack));
  item_packet_req_descriptor_ = file->message_type(36);
  static const int item_packet_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_req, playerid_),
  };
  item_packet_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_packet_req_descriptor_,
      item_packet_req::default_instance_,
      item_packet_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_packet_req));
  item_packet_ack_descriptor_ = file->message_type(37);
  static const int item_packet_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, fix_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, del_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, error_code_),
  };
  item_packet_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_packet_ack_descriptor_,
      item_packet_ack::default_instance_,
      item_packet_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_packet_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_packet_ack));
  item_use_req_descriptor_ = file->message_type(38);
  static const int item_use_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_req, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_req, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_req, index_),
  };
  item_use_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_use_req_descriptor_,
      item_use_req::default_instance_,
      item_use_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_use_req));
  item_use_ack_descriptor_ = file->message_type(39);
  static const int item_use_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_ack, items_),
  };
  item_use_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_use_ack_descriptor_,
      item_use_ack::default_instance_,
      item_use_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_use_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_use_ack));
  item_sold_req_descriptor_ = file->message_type(40);
  static const int item_sold_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, is_batch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, item_uid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, item_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, item_count_),
  };
  item_sold_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_sold_req_descriptor_,
      item_sold_req::default_instance_,
      item_sold_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_sold_req));
  item_sold_ack_descriptor_ = file->message_type(41);
  static const int item_sold_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_ack, error_code_),
  };
  item_sold_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_sold_ack_descriptor_,
      item_sold_ack::default_instance_,
      item_sold_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_sold_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_sold_ack));
  bag_expand_req_descriptor_ = file->message_type(42);
  static const int bag_expand_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_req, add_size_),
  };
  bag_expand_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bag_expand_req_descriptor_,
      bag_expand_req::default_instance_,
      bag_expand_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bag_expand_req));
  bag_expand_ack_descriptor_ = file->message_type(43);
  static const int bag_expand_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_ack, error_code_),
  };
  bag_expand_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bag_expand_ack_descriptor_,
      bag_expand_ack::default_instance_,
      bag_expand_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_expand_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bag_expand_ack));
  bag_capacity_not_enough_ntf_descriptor_ = file->message_type(44);
  static const int bag_capacity_not_enough_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_capacity_not_enough_ntf, protoid_),
  };
  bag_capacity_not_enough_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bag_capacity_not_enough_ntf_descriptor_,
      bag_capacity_not_enough_ntf::default_instance_,
      bag_capacity_not_enough_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_capacity_not_enough_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bag_capacity_not_enough_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bag_capacity_not_enough_ntf));
  hero_list_data_ntf_descriptor_ = file->message_type(45);
  static const int hero_list_data_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_list_data_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_list_data_ntf, heroes_),
  };
  hero_list_data_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_list_data_ntf_descriptor_,
      hero_list_data_ntf::default_instance_,
      hero_list_data_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_list_data_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_list_data_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_list_data_ntf));
  add_hero_ntf_descriptor_ = file->message_type(46);
  static const int add_hero_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_hero_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_hero_ntf, heroes_),
  };
  add_hero_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      add_hero_ntf_descriptor_,
      add_hero_ntf::default_instance_,
      add_hero_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_hero_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(add_hero_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(add_hero_ntf));
  remove_hero_ntf_descriptor_ = file->message_type(47);
  static const int remove_hero_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_hero_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_hero_ntf, ids_),
  };
  remove_hero_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      remove_hero_ntf_descriptor_,
      remove_hero_ntf::default_instance_,
      remove_hero_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_hero_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(remove_hero_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(remove_hero_ntf));
  hero_info_change_ntf_descriptor_ = file->message_type(48);
  static const int hero_info_change_ntf_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, awaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, awaken_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, skin_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, talismans_),
  };
  hero_info_change_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_info_change_ntf_descriptor_,
      hero_info_change_ntf::default_instance_,
      hero_info_change_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_info_change_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_info_change_ntf));
  hero_upgrade_req_descriptor_ = file->message_type(49);
  static const int hero_upgrade_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_req, materials_),
  };
  hero_upgrade_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_upgrade_req_descriptor_,
      hero_upgrade_req::default_instance_,
      hero_upgrade_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_upgrade_req));
  hero_upgrade_ack_descriptor_ = file->message_type(50);
  static const int hero_upgrade_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_ack, hero_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_ack, ret_),
  };
  hero_upgrade_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_upgrade_ack_descriptor_,
      hero_upgrade_ack::default_instance_,
      hero_upgrade_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upgrade_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_upgrade_ack));
  hero_upstar_req_descriptor_ = file->message_type(51);
  static const int hero_upstar_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_req, materials_),
  };
  hero_upstar_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_upstar_req_descriptor_,
      hero_upstar_req::default_instance_,
      hero_upstar_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_upstar_req));
  hero_upstar_ack_descriptor_ = file->message_type(52);
  static const int hero_upstar_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_ack, hero_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_ack, ret_),
  };
  hero_upstar_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_upstar_ack_descriptor_,
      hero_upstar_ack::default_instance_,
      hero_upstar_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_upstar_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_upstar_ack));
  hero_awaken_req_descriptor_ = file->message_type(53);
  static const int hero_awaken_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_req, hero_id_),
  };
  hero_awaken_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_awaken_req_descriptor_,
      hero_awaken_req::default_instance_,
      hero_awaken_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_awaken_req));
  hero_awaken_ack_descriptor_ = file->message_type(54);
  static const int hero_awaken_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_ack, ret_),
  };
  hero_awaken_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_awaken_ack_descriptor_,
      hero_awaken_ack::default_instance_,
      hero_awaken_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_awaken_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_awaken_ack));
  hero_lock_req_descriptor_ = file->message_type(55);
  static const int hero_lock_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_req, lock_),
  };
  hero_lock_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_lock_req_descriptor_,
      hero_lock_req::default_instance_,
      hero_lock_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_lock_req));
  hero_lock_ack_descriptor_ = file->message_type(56);
  static const int hero_lock_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_ack, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_ack, ret_),
  };
  hero_lock_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_lock_ack_descriptor_,
      hero_lock_ack::default_instance_,
      hero_lock_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_lock_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_lock_ack));
  hero_compose_req_descriptor_ = file->message_type(57);
  static const int hero_compose_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_req, template_id_),
  };
  hero_compose_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_compose_req_descriptor_,
      hero_compose_req::default_instance_,
      hero_compose_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_compose_req));
  hero_compose_ack_descriptor_ = file->message_type(58);
  static const int hero_compose_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_ack, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_ack, ret_),
  };
  hero_compose_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_compose_ack_descriptor_,
      hero_compose_ack::default_instance_,
      hero_compose_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_compose_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_compose_ack));
  hero_skin_active_req_descriptor_ = file->message_type(59);
  static const int hero_skin_active_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_req, template_id_),
  };
  hero_skin_active_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_skin_active_req_descriptor_,
      hero_skin_active_req::default_instance_,
      hero_skin_active_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_skin_active_req));
  hero_skin_active_ack_descriptor_ = file->message_type(60);
  static const int hero_skin_active_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_ack, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_ack, ret_),
  };
  hero_skin_active_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_skin_active_ack_descriptor_,
      hero_skin_active_ack::default_instance_,
      hero_skin_active_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skin_active_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_skin_active_ack));
  hero_change_name_req_descriptor_ = file->message_type(61);
  static const int hero_change_name_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_req, change_name_),
  };
  hero_change_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_change_name_req_descriptor_,
      hero_change_name_req::default_instance_,
      hero_change_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_change_name_req));
  hero_change_name_ack_descriptor_ = file->message_type(62);
  static const int hero_change_name_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_ack, change_name_),
  };
  hero_change_name_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_change_name_ack_descriptor_,
      hero_change_name_ack::default_instance_,
      hero_change_name_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_change_name_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_change_name_ack));
  hero_level_up_req_descriptor_ = file->message_type(63);
  static const int hero_level_up_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_req, materials_),
  };
  hero_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_level_up_req_descriptor_,
      hero_level_up_req::default_instance_,
      hero_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_level_up_req));
  hero_level_up_ack_descriptor_ = file->message_type(64);
  static const int hero_level_up_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_ack, hero_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_ack, ret_),
  };
  hero_level_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_level_up_ack_descriptor_,
      hero_level_up_ack::default_instance_,
      hero_level_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_level_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_level_up_ack));
  hero_quality_up_req_descriptor_ = file->message_type(65);
  static const int hero_quality_up_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_req, hero_id_),
  };
  hero_quality_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_quality_up_req_descriptor_,
      hero_quality_up_req::default_instance_,
      hero_quality_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_quality_up_req));
  hero_quality_up_ack_descriptor_ = file->message_type(66);
  static const int hero_quality_up_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_ack, hero_id_),
  };
  hero_quality_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_quality_up_ack_descriptor_,
      hero_quality_up_ack::default_instance_,
      hero_quality_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_quality_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_quality_up_ack));
  item_combine_req_descriptor_ = file->message_type(67);
  static const int item_combine_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_req, dest_equip_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_req, combine_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_req, cost_item_uid_),
  };
  item_combine_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_combine_req_descriptor_,
      item_combine_req::default_instance_,
      item_combine_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_combine_req));
  item_combine_ack_descriptor_ = file->message_type(68);
  static const int item_combine_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_ack, dest_equip_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_ack, combine_num_),
  };
  item_combine_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      item_combine_ack_descriptor_,
      item_combine_ack::default_instance_,
      item_combine_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(item_combine_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(item_combine_ack));
  hero_star_up_req_descriptor_ = file->message_type(69);
  static const int hero_star_up_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_req, materials_),
  };
  hero_star_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_star_up_req_descriptor_,
      hero_star_up_req::default_instance_,
      hero_star_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_star_up_req));
  hero_star_up_ack_descriptor_ = file->message_type(70);
  static const int hero_star_up_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_ack, hero_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_ack, ret_),
  };
  hero_star_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_star_up_ack_descriptor_,
      hero_star_up_ack::default_instance_,
      hero_star_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_star_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_star_up_ack));
  hero_skill_up_req_descriptor_ = file->message_type(71);
  static const int hero_skill_up_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_req, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_req, materials_),
  };
  hero_skill_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_skill_up_req_descriptor_,
      hero_skill_up_req::default_instance_,
      hero_skill_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_skill_up_req));
  hero_skill_up_ack_descriptor_ = file->message_type(72);
  static const int hero_skill_up_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, skill_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, skill_point_),
  };
  hero_skill_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_skill_up_ack_descriptor_,
      hero_skill_up_ack::default_instance_,
      hero_skill_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_skill_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_skill_up_ack));
  hero_equip_req_descriptor_ = file->message_type(73);
  static const int hero_equip_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_req, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_req, item_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_req, slot_id_),
  };
  hero_equip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_req_descriptor_,
      hero_equip_req::default_instance_,
      hero_equip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_req));
  hero_equip_ack_descriptor_ = file->message_type(74);
  static const int hero_equip_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, item_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, item_tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, slot_id_),
  };
  hero_equip_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_ack_descriptor_,
      hero_equip_ack::default_instance_,
      hero_equip_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_ack));
  hero_unequip_req_descriptor_ = file->message_type(75);
  static const int hero_unequip_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_req, slot_id_),
  };
  hero_unequip_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_unequip_req_descriptor_,
      hero_unequip_req::default_instance_,
      hero_unequip_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_unequip_req));
  hero_unequip_ack_descriptor_ = file->message_type(76);
  static const int hero_unequip_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, slot_id_),
  };
  hero_unequip_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_unequip_ack_descriptor_,
      hero_unequip_ack::default_instance_,
      hero_unequip_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_unequip_ack));
  hero_equip_level_up_req_descriptor_ = file->message_type(77);
  static const int hero_equip_level_up_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_req, item_id_),
  };
  hero_equip_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_level_up_req_descriptor_,
      hero_equip_level_up_req::default_instance_,
      hero_equip_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_level_up_req));
  hero_equip_level_up_ack_descriptor_ = file->message_type(78);
  static const int hero_equip_level_up_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_ack, item_id_),
  };
  hero_equip_level_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_level_up_ack_descriptor_,
      hero_equip_level_up_ack::default_instance_,
      hero_equip_level_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_level_up_ack));
  hero_equip_onekey_level_up_req_descriptor_ = file->message_type(79);
  static const int hero_equip_onekey_level_up_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_req, item_id_),
  };
  hero_equip_onekey_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_onekey_level_up_req_descriptor_,
      hero_equip_onekey_level_up_req::default_instance_,
      hero_equip_onekey_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_onekey_level_up_req));
  hero_equip_onekey_level_up_ack_descriptor_ = file->message_type(80);
  static const int hero_equip_onekey_level_up_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, money_),
  };
  hero_equip_onekey_level_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_onekey_level_up_ack_descriptor_,
      hero_equip_onekey_level_up_ack::default_instance_,
      hero_equip_onekey_level_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_level_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_onekey_level_up_ack));
  hero_equip_level_info_descriptor_ = file->message_type(81);
  static const int hero_equip_level_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_info, level_),
  };
  hero_equip_level_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_level_info_descriptor_,
      hero_equip_level_info::default_instance_,
      hero_equip_level_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_level_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_level_info));
  hero_equip_all_level_up_req_descriptor_ = file->message_type(82);
  static const int hero_equip_all_level_up_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_req, hero_id_),
  };
  hero_equip_all_level_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_all_level_up_req_descriptor_,
      hero_equip_all_level_up_req::default_instance_,
      hero_equip_all_level_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_all_level_up_req));
  hero_equip_all_level_up_ack_descriptor_ = file->message_type(83);
  static const int hero_equip_all_level_up_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, money_),
  };
  hero_equip_all_level_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_all_level_up_ack_descriptor_,
      hero_equip_all_level_up_ack::default_instance_,
      hero_equip_all_level_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_all_level_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_all_level_up_ack));
  hero_equip_onekey_req_descriptor_ = file->message_type(84);
  static const int hero_equip_onekey_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_req, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_req, equips_),
  };
  hero_equip_onekey_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_onekey_req_descriptor_,
      hero_equip_onekey_req::default_instance_,
      hero_equip_onekey_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_onekey_req));
  hero_equip_onekey_ack_descriptor_ = file->message_type(85);
  static const int hero_equip_onekey_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_ack, equips_),
  };
  hero_equip_onekey_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_equip_onekey_ack_descriptor_,
      hero_equip_onekey_ack::default_instance_,
      hero_equip_onekey_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_equip_onekey_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_equip_onekey_ack));
  hero_unequip_onekey_req_descriptor_ = file->message_type(86);
  static const int hero_unequip_onekey_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_req, hero_id_),
  };
  hero_unequip_onekey_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_unequip_onekey_req_descriptor_,
      hero_unequip_onekey_req::default_instance_,
      hero_unequip_onekey_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_unequip_onekey_req));
  hero_unequip_onekey_ack_descriptor_ = file->message_type(87);
  static const int hero_unequip_onekey_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_ack, equips_),
  };
  hero_unequip_onekey_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_unequip_onekey_ack_descriptor_,
      hero_unequip_onekey_ack::default_instance_,
      hero_unequip_onekey_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_unequip_onekey_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_unequip_onekey_ack));
  gm_operation_req_descriptor_ = file->message_type(88);
  static const int gm_operation_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_req, cmd_),
  };
  gm_operation_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_operation_req_descriptor_,
      gm_operation_req::default_instance_,
      gm_operation_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_operation_req));
  gm_operation_ack_descriptor_ = file->message_type(89);
  static const int gm_operation_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_ack, info_),
  };
  gm_operation_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gm_operation_ack_descriptor_,
      gm_operation_ack::default_instance_,
      gm_operation_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gm_operation_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gm_operation_ack));
  leave_game_req_descriptor_ = file->message_type(90);
  static const int leave_game_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_game_req, protoid_),
  };
  leave_game_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      leave_game_req_descriptor_,
      leave_game_req::default_instance_,
      leave_game_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_game_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(leave_game_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(leave_game_req));
  kick_game_ntf_descriptor_ = file->message_type(91);
  static const int kick_game_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_game_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_game_ntf, reason_),
  };
  kick_game_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      kick_game_ntf_descriptor_,
      kick_game_ntf::default_instance_,
      kick_game_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_game_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(kick_game_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(kick_game_ntf));
  beat_heart_ntf_descriptor_ = file->message_type(92);
  static const int beat_heart_ntf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(beat_heart_ntf, protoid_),
  };
  beat_heart_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      beat_heart_ntf_descriptor_,
      beat_heart_ntf::default_instance_,
      beat_heart_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(beat_heart_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(beat_heart_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(beat_heart_ntf));
  sync_time_ntf_descriptor_ = file->message_type(93);
  static const int sync_time_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_time_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_time_ntf, time_),
  };
  sync_time_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sync_time_ntf_descriptor_,
      sync_time_ntf::default_instance_,
      sync_time_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_time_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sync_time_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sync_time_ntf));
  client_heart_beat_req_descriptor_ = file->message_type(94);
  static const int client_heart_beat_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_req, check_sum_),
  };
  client_heart_beat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_heart_beat_req_descriptor_,
      client_heart_beat_req::default_instance_,
      client_heart_beat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_heart_beat_req));
  client_heart_beat_ack_descriptor_ = file->message_type(95);
  static const int client_heart_beat_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_ack, check_sum_),
  };
  client_heart_beat_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_heart_beat_ack_descriptor_,
      client_heart_beat_ack::default_instance_,
      client_heart_beat_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heart_beat_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_heart_beat_ack));
  role_player_info_ntf_descriptor_ = file->message_type(96);
  static const int role_player_info_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, liked_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, talent_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, fashions_p_wearing_),
  };
  role_player_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_info_ntf_descriptor_,
      role_player_info_ntf::default_instance_,
      role_player_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_info_ntf));
  role_player_info_update_ntf_descriptor_ = file->message_type(97);
  static const int role_player_info_update_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_update_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_update_ntf, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_update_ntf, pro_),
  };
  role_player_info_update_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_info_update_ntf_descriptor_,
      role_player_info_update_ntf::default_instance_,
      role_player_info_update_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_update_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_info_update_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_info_update_ntf));
  role_fight_score_ntf_descriptor_ = file->message_type(98);
  static const int role_fight_score_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fight_score_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fight_score_ntf, value_),
  };
  role_fight_score_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_fight_score_ntf_descriptor_,
      role_fight_score_ntf::default_instance_,
      role_fight_score_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fight_score_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_fight_score_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_fight_score_ntf));
  role_player_change_req_descriptor_ = file->message_type(99);
  static const int role_player_change_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_req, to_player_id_),
  };
  role_player_change_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_change_req_descriptor_,
      role_player_change_req::default_instance_,
      role_player_change_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_change_req));
  role_player_change_ack_descriptor_ = file->message_type(100);
  static const int role_player_change_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_ack, from_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_ack, to_player_id_),
  };
  role_player_change_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_change_ack_descriptor_,
      role_player_change_ack::default_instance_,
      role_player_change_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_change_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_change_ack));
  role_player_active_skin_req_descriptor_ = file->message_type(101);
  static const int role_player_active_skin_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_req, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_req, active_skin_id_),
  };
  role_player_active_skin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_active_skin_req_descriptor_,
      role_player_active_skin_req::default_instance_,
      role_player_active_skin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_active_skin_req));
  role_player_active_skin_ack_descriptor_ = file->message_type(102);
  static const int role_player_active_skin_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_ack, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_ack, active_skin_id_),
  };
  role_player_active_skin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_active_skin_ack_descriptor_,
      role_player_active_skin_ack::default_instance_,
      role_player_active_skin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_active_skin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_active_skin_ack));
  role_player_buy_skin_req_descriptor_ = file->message_type(103);
  static const int role_player_buy_skin_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_req, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_req, skin_id_),
  };
  role_player_buy_skin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_buy_skin_req_descriptor_,
      role_player_buy_skin_req::default_instance_,
      role_player_buy_skin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_buy_skin_req));
  role_player_buy_skin_ack_descriptor_ = file->message_type(104);
  static const int role_player_buy_skin_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_ack, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_ack, skin_id_),
  };
  role_player_buy_skin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_buy_skin_ack_descriptor_,
      role_player_buy_skin_ack::default_instance_,
      role_player_buy_skin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_buy_skin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_buy_skin_ack));
  role_player_wear_skin_req_descriptor_ = file->message_type(105);
  static const int role_player_wear_skin_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_req, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_req, skin_id_),
  };
  role_player_wear_skin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_wear_skin_req_descriptor_,
      role_player_wear_skin_req::default_instance_,
      role_player_wear_skin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_wear_skin_req));
  role_player_wear_skin_ack_descriptor_ = file->message_type(106);
  static const int role_player_wear_skin_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_ack, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_ack, skin_id_),
  };
  role_player_wear_skin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_wear_skin_ack_descriptor_,
      role_player_wear_skin_ack::default_instance_,
      role_player_wear_skin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_wear_skin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_wear_skin_ack));
  role_player_skillup_ntf_descriptor_ = file->message_type(107);
  static const int role_player_skillup_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_skillup_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_skillup_ntf, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_skillup_ntf, skill_info_),
  };
  role_player_skillup_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_player_skillup_ntf_descriptor_,
      role_player_skillup_ntf::default_instance_,
      role_player_skillup_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_skillup_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_player_skillup_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_player_skillup_ntf));
  role_buy_req_descriptor_ = file->message_type(108);
  static const int role_buy_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_req, buy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_req, buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_req, buy_id_),
  };
  role_buy_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_buy_req_descriptor_,
      role_buy_req::default_instance_,
      role_buy_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_buy_req));
  role_buy_ack_descriptor_ = file->message_type(109);
  static const int role_buy_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, buy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, buy_id_),
  };
  role_buy_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_buy_ack_descriptor_,
      role_buy_ack::default_instance_,
      role_buy_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_buy_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_buy_ack));
  role_show_base_info_req_descriptor_ = file->message_type(110);
  static const int role_show_base_info_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_req, show_role_id_),
  };
  role_show_base_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_base_info_req_descriptor_,
      role_show_base_info_req::default_instance_,
      role_show_base_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_base_info_req));
  role_show_base_info_ack_descriptor_ = file->message_type(111);
  static const int role_show_base_info_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_ack, show_data_),
  };
  role_show_base_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_base_info_ack_descriptor_,
      role_show_base_info_ack::default_instance_,
      role_show_base_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_base_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_base_info_ack));
  role_show_get_like_req_descriptor_ = file->message_type(112);
  static const int role_show_get_like_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_req, show_role_id_),
  };
  role_show_get_like_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_get_like_req_descriptor_,
      role_show_get_like_req::default_instance_,
      role_show_get_like_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_get_like_req));
  role_show_get_like_ack_descriptor_ = file->message_type(113);
  static const int role_show_get_like_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_ack, likes_),
  };
  role_show_get_like_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_get_like_ack_descriptor_,
      role_show_get_like_ack::default_instance_,
      role_show_get_like_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_like_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_get_like_ack));
  role_show_player_base_req_descriptor_ = file->message_type(114);
  static const int role_show_player_base_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_req, show_role_id_),
  };
  role_show_player_base_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_player_base_req_descriptor_,
      role_show_player_base_req::default_instance_,
      role_show_player_base_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_player_base_req));
  role_show_player_base_ack_descriptor_ = file->message_type(115);
  static const int role_show_player_base_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_ack, show_data_),
  };
  role_show_player_base_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_player_base_ack_descriptor_,
      role_show_player_base_ack::default_instance_,
      role_show_player_base_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_player_base_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_player_base_ack));
  role_show_like_req_descriptor_ = file->message_type(116);
  static const int role_show_like_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_req, show_role_id_),
  };
  role_show_like_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_like_req_descriptor_,
      role_show_like_req::default_instance_,
      role_show_like_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_like_req));
  role_show_like_ack_descriptor_ = file->message_type(117);
  static const int role_show_like_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_ack, show_role_id_),
  };
  role_show_like_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_like_ack_descriptor_,
      role_show_like_ack::default_instance_,
      role_show_like_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_like_ack));
  role_show_change_name_req_descriptor_ = file->message_type(118);
  static const int role_show_change_name_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_req, new_name_),
  };
  role_show_change_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_name_req_descriptor_,
      role_show_change_name_req::default_instance_,
      role_show_change_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_name_req));
  role_show_change_name_ack_descriptor_ = file->message_type(119);
  static const int role_show_change_name_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_ack, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_ack, change_name_time_),
  };
  role_show_change_name_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_name_ack_descriptor_,
      role_show_change_name_ack::default_instance_,
      role_show_change_name_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_name_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_name_ack));
  role_show_change_position_req_descriptor_ = file->message_type(120);
  static const int role_show_change_position_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_req, position_),
  };
  role_show_change_position_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_position_req_descriptor_,
      role_show_change_position_req::default_instance_,
      role_show_change_position_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_position_req));
  role_show_change_position_ack_descriptor_ = file->message_type(121);
  static const int role_show_change_position_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_ack, position_),
  };
  role_show_change_position_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_position_ack_descriptor_,
      role_show_change_position_ack::default_instance_,
      role_show_change_position_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_position_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_position_ack));
  role_show_change_signature_req_descriptor_ = file->message_type(122);
  static const int role_show_change_signature_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_req, signature_),
  };
  role_show_change_signature_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_signature_req_descriptor_,
      role_show_change_signature_req::default_instance_,
      role_show_change_signature_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_signature_req));
  role_show_change_signature_ack_descriptor_ = file->message_type(123);
  static const int role_show_change_signature_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_ack, result_),
  };
  role_show_change_signature_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_signature_ack_descriptor_,
      role_show_change_signature_ack::default_instance_,
      role_show_change_signature_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_signature_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_signature_ack));
  role_show_change_age_req_descriptor_ = file->message_type(124);
  static const int role_show_change_age_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_req, age_),
  };
  role_show_change_age_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_age_req_descriptor_,
      role_show_change_age_req::default_instance_,
      role_show_change_age_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_age_req));
  role_show_change_age_ack_descriptor_ = file->message_type(125);
  static const int role_show_change_age_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_ack, age_),
  };
  role_show_change_age_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_age_ack_descriptor_,
      role_show_change_age_ack::default_instance_,
      role_show_change_age_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_age_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_age_ack));
  role_show_change_starsign_req_descriptor_ = file->message_type(126);
  static const int role_show_change_starsign_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_req, star_sign_),
  };
  role_show_change_starsign_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_starsign_req_descriptor_,
      role_show_change_starsign_req::default_instance_,
      role_show_change_starsign_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_starsign_req));
  role_show_change_starsign_ack_descriptor_ = file->message_type(127);
  static const int role_show_change_starsign_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_ack, star_sign_),
  };
  role_show_change_starsign_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_starsign_ack_descriptor_,
      role_show_change_starsign_ack::default_instance_,
      role_show_change_starsign_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_starsign_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_starsign_ack));
  role_show_change_birthday_req_descriptor_ = file->message_type(128);
  static const int role_show_change_birthday_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_req, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_req, day_),
  };
  role_show_change_birthday_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_birthday_req_descriptor_,
      role_show_change_birthday_req::default_instance_,
      role_show_change_birthday_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_birthday_req));
  role_show_change_birthday_ack_descriptor_ = file->message_type(129);
  static const int role_show_change_birthday_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, star_sign_),
  };
  role_show_change_birthday_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_birthday_ack_descriptor_,
      role_show_change_birthday_ack::default_instance_,
      role_show_change_birthday_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_birthday_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_birthday_ack));
  role_show_change_labels_req_descriptor_ = file->message_type(130);
  static const int role_show_change_labels_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_req, labels_),
  };
  role_show_change_labels_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_labels_req_descriptor_,
      role_show_change_labels_req::default_instance_,
      role_show_change_labels_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_labels_req));
  role_show_change_labels_ack_descriptor_ = file->message_type(131);
  static const int role_show_change_labels_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_ack, labels_),
  };
  role_show_change_labels_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_change_labels_ack_descriptor_,
      role_show_change_labels_ack::default_instance_,
      role_show_change_labels_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_change_labels_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_change_labels_ack));
  role_show_get_emotion_req_descriptor_ = file->message_type(132);
  static const int role_show_get_emotion_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_req, count_),
  };
  role_show_get_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_get_emotion_req_descriptor_,
      role_show_get_emotion_req::default_instance_,
      role_show_get_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_get_emotion_req));
  role_show_get_emotion_ack_descriptor_ = file->message_type(133);
  static const int role_show_get_emotion_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_ack, emotion_all_),
  };
  role_show_get_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_get_emotion_ack_descriptor_,
      role_show_get_emotion_ack::default_instance_,
      role_show_get_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_get_emotion_ack));
  role_show_write_emotion_req_descriptor_ = file->message_type(134);
  static const int role_show_write_emotion_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_req, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_req, img_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_req, msg_type_),
  };
  role_show_write_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_write_emotion_req_descriptor_,
      role_show_write_emotion_req::default_instance_,
      role_show_write_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_write_emotion_req));
  role_show_write_emotion_ack_descriptor_ = file->message_type(135);
  static const int role_show_write_emotion_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, img_urls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, create_time_),
  };
  role_show_write_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_write_emotion_ack_descriptor_,
      role_show_write_emotion_ack::default_instance_,
      role_show_write_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_write_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_write_emotion_ack));
  role_show_like_emotion_req_descriptor_ = file->message_type(136);
  static const int role_show_like_emotion_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, show_role_id_),
  };
  role_show_like_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_like_emotion_req_descriptor_,
      role_show_like_emotion_req::default_instance_,
      role_show_like_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_like_emotion_req));
  role_show_like_emotion_ack_descriptor_ = file->message_type(137);
  static const int role_show_like_emotion_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, ret_),
  };
  role_show_like_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_like_emotion_ack_descriptor_,
      role_show_like_emotion_ack::default_instance_,
      role_show_like_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_like_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_like_emotion_ack));
  role_show_comment_emotion_req_descriptor_ = file->message_type(138);
  static const int role_show_comment_emotion_req_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, emotion_id_),
  };
  role_show_comment_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_comment_emotion_req_descriptor_,
      role_show_comment_emotion_req::default_instance_,
      role_show_comment_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_comment_emotion_req));
  role_show_comment_emotion_ack_descriptor_ = file->message_type(139);
  static const int role_show_comment_emotion_ack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, to_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, msg_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, comment_id_),
  };
  role_show_comment_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_comment_emotion_ack_descriptor_,
      role_show_comment_emotion_ack::default_instance_,
      role_show_comment_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_comment_emotion_ack));
  role_show_remove_emotion_req_descriptor_ = file->message_type(140);
  static const int role_show_remove_emotion_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_req, emotion_id_),
  };
  role_show_remove_emotion_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_remove_emotion_req_descriptor_,
      role_show_remove_emotion_req::default_instance_,
      role_show_remove_emotion_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_remove_emotion_req));
  role_show_remove_emotion_ack_descriptor_ = file->message_type(141);
  static const int role_show_remove_emotion_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_ack, ret_),
  };
  role_show_remove_emotion_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_remove_emotion_ack_descriptor_,
      role_show_remove_emotion_ack::default_instance_,
      role_show_remove_emotion_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_emotion_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_remove_emotion_ack));
  role_show_remove_comment_req_descriptor_ = file->message_type(142);
  static const int role_show_remove_comment_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, comment_id_),
  };
  role_show_remove_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_remove_comment_req_descriptor_,
      role_show_remove_comment_req::default_instance_,
      role_show_remove_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_remove_comment_req));
  role_show_remove_comment_ack_descriptor_ = file->message_type(143);
  static const int role_show_remove_comment_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, to_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, emotion_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, comment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, ret_),
  };
  role_show_remove_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_remove_comment_ack_descriptor_,
      role_show_remove_comment_ack::default_instance_,
      role_show_remove_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_remove_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_remove_comment_ack));
  role_show_set_hero_info_descriptor_ = file->message_type(144);
  static const int role_show_set_hero_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_info, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_info, hero_id_),
  };
  role_show_set_hero_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_set_hero_info_descriptor_,
      role_show_set_hero_info::default_instance_,
      role_show_set_hero_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_set_hero_info));
  role_show_set_hero_req_descriptor_ = file->message_type(145);
  static const int role_show_set_hero_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_req, data_),
  };
  role_show_set_hero_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_set_hero_req_descriptor_,
      role_show_set_hero_req::default_instance_,
      role_show_set_hero_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_set_hero_req));
  role_show_set_hero_ack_descriptor_ = file->message_type(146);
  static const int role_show_set_hero_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_ack, result_),
  };
  role_show_set_hero_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_set_hero_ack_descriptor_,
      role_show_set_hero_ack::default_instance_,
      role_show_set_hero_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_hero_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_set_hero_ack));
  role_show_set_border_req_descriptor_ = file->message_type(147);
  static const int role_show_set_border_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_req, border_id_),
  };
  role_show_set_border_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_set_border_req_descriptor_,
      role_show_set_border_req::default_instance_,
      role_show_set_border_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_set_border_req));
  role_show_set_border_ack_descriptor_ = file->message_type(148);
  static const int role_show_set_border_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_ack, result_),
  };
  role_show_set_border_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_set_border_ack_descriptor_,
      role_show_set_border_ack::default_instance_,
      role_show_set_border_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_set_border_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_set_border_ack));
  role_show_comment_req_descriptor_ = file->message_type(149);
  static const int role_show_comment_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_req, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_req, comment_),
  };
  role_show_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_comment_req_descriptor_,
      role_show_comment_req::default_instance_,
      role_show_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_comment_req));
  role_show_comment_ack_descriptor_ = file->message_type(150);
  static const int role_show_comment_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_ack, comment_),
  };
  role_show_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_comment_ack_descriptor_,
      role_show_comment_ack::default_instance_,
      role_show_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_comment_ack));
  role_show_delete_comment_req_descriptor_ = file->message_type(151);
  static const int role_show_delete_comment_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_req, to_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_req, time_),
  };
  role_show_delete_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_delete_comment_req_descriptor_,
      role_show_delete_comment_req::default_instance_,
      role_show_delete_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_delete_comment_req));
  role_show_delete_comment_ack_descriptor_ = file->message_type(152);
  static const int role_show_delete_comment_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_ack, result_),
  };
  role_show_delete_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_delete_comment_ack_descriptor_,
      role_show_delete_comment_ack::default_instance_,
      role_show_delete_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_delete_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_delete_comment_ack));
  role_show_get_comment_req_descriptor_ = file->message_type(153);
  static const int role_show_get_comment_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_req, show_role_id_),
  };
  role_show_get_comment_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_get_comment_req_descriptor_,
      role_show_get_comment_req::default_instance_,
      role_show_get_comment_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_get_comment_req));
  role_show_get_comment_ack_descriptor_ = file->message_type(154);
  static const int role_show_get_comment_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_ack, show_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_ack, comment_all_),
  };
  role_show_get_comment_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_show_get_comment_ack_descriptor_,
      role_show_get_comment_ack::default_instance_,
      role_show_get_comment_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_show_get_comment_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_show_get_comment_ack));
  discover_info_ntf_descriptor_ = file->message_type(155);
  static const int discover_info_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, chapter_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, discover_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, star_box_ids_),
  };
  discover_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discover_info_ntf_descriptor_,
      discover_info_ntf::default_instance_,
      discover_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discover_info_ntf));
  discover_show_boss_ntf_descriptor_ = file->message_type(156);
  static const int discover_show_boss_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_show_boss_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_show_boss_ntf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_show_boss_ntf, boss_id_),
  };
  discover_show_boss_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discover_show_boss_ntf_descriptor_,
      discover_show_boss_ntf::default_instance_,
      discover_show_boss_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_show_boss_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discover_show_boss_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discover_show_boss_ntf));
  enter_discover_req_descriptor_ = file->message_type(157);
  static const int enter_discover_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_req, id_),
  };
  enter_discover_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_discover_req_descriptor_,
      enter_discover_req::default_instance_,
      enter_discover_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_discover_req));
  enter_discover_ack_descriptor_ = file->message_type(158);
  static const int enter_discover_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_ack, id_),
  };
  enter_discover_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_discover_ack_descriptor_,
      enter_discover_ack::default_instance_,
      enter_discover_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_discover_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_discover_ack));
  exit_discover_req_descriptor_ = file->message_type(159);
  static const int exit_discover_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_req, id_),
  };
  exit_discover_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_discover_req_descriptor_,
      exit_discover_req::default_instance_,
      exit_discover_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_discover_req));
  exit_discover_ack_descriptor_ = file->message_type(160);
  static const int exit_discover_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, boxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, monster_),
  };
  exit_discover_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_discover_ack_descriptor_,
      exit_discover_ack::default_instance_,
      exit_discover_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_discover_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_discover_ack));
  discovery_mopping_req_descriptor_ = file->message_type(161);
  static const int discovery_mopping_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, mopping_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, discovery_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, item_add_num_),
  };
  discovery_mopping_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_mopping_req_descriptor_,
      discovery_mopping_req::default_instance_,
      discovery_mopping_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_mopping_req));
  discovery_mopping_ack_rewards_descriptor_ = file->message_type(162);
  static const int discovery_mopping_ack_rewards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_rewards, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_rewards, item_count_),
  };
  discovery_mopping_ack_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_mopping_ack_rewards_descriptor_,
      discovery_mopping_ack_rewards::default_instance_,
      discovery_mopping_ack_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_mopping_ack_rewards));
  discovery_mopping_ack_moppping_descriptor_ = file->message_type(163);
  static const int discovery_mopping_ack_moppping_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_moppping, mopping_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_moppping, reward_items_),
  };
  discovery_mopping_ack_moppping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_mopping_ack_moppping_descriptor_,
      discovery_mopping_ack_moppping::default_instance_,
      discovery_mopping_ack_moppping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_moppping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack_moppping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_mopping_ack_moppping));
  discovery_mopping_ack_descriptor_ = file->message_type(164);
  static const int discovery_mopping_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, mopping_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, moppings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, mopping_times_remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, discovery_id_),
  };
  discovery_mopping_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_mopping_ack_descriptor_,
      discovery_mopping_ack::default_instance_,
      discovery_mopping_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_mopping_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_mopping_ack));
  discovery_buy_times_req_descriptor_ = file->message_type(165);
  static const int discovery_buy_times_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_req, discovery_id_),
  };
  discovery_buy_times_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_buy_times_req_descriptor_,
      discovery_buy_times_req::default_instance_,
      discovery_buy_times_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_buy_times_req));
  discovery_buy_times_ack_descriptor_ = file->message_type(166);
  static const int discovery_buy_times_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_ack, discovery_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_ack, mopping_times_remain_),
  };
  discovery_buy_times_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_buy_times_ack_descriptor_,
      discovery_buy_times_ack::default_instance_,
      discovery_buy_times_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_buy_times_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_buy_times_ack));
  discovery_get_section_star_req_descriptor_ = file->message_type(167);
  static const int discovery_get_section_star_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_req, reward_id_),
  };
  discovery_get_section_star_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_get_section_star_req_descriptor_,
      discovery_get_section_star_req::default_instance_,
      discovery_get_section_star_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_get_section_star_req));
  discovery_get_section_star_ack_rewards_descriptor_ = file->message_type(168);
  static const int discovery_get_section_star_ack_rewards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack_rewards, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack_rewards, item_count_),
  };
  discovery_get_section_star_ack_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_get_section_star_ack_rewards_descriptor_,
      discovery_get_section_star_ack_rewards::default_instance_,
      discovery_get_section_star_ack_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_get_section_star_ack_rewards));
  discovery_get_section_star_ack_descriptor_ = file->message_type(169);
  static const int discovery_get_section_star_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack, ret_),
  };
  discovery_get_section_star_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      discovery_get_section_star_ack_descriptor_,
      discovery_get_section_star_ack::default_instance_,
      discovery_get_section_star_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(discovery_get_section_star_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(discovery_get_section_star_ack));
  royal_base_info_ntf_descriptor_ = file->message_type(170);
  static const int royal_base_info_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info_ntf, info_),
  };
  royal_base_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_base_info_ntf_descriptor_,
      royal_base_info_ntf::default_instance_,
      royal_base_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_base_info_ntf));
  royal_all_info_req_descriptor_ = file->message_type(171);
  static const int royal_all_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_req, proto_id_),
  };
  royal_all_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_all_info_req_descriptor_,
      royal_all_info_req::default_instance_,
      royal_all_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_all_info_req));
  royal_all_info_ack_descriptor_ = file->message_type(172);
  static const int royal_all_info_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_ack, royals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_ack, info_),
  };
  royal_all_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_all_info_ack_descriptor_,
      royal_all_info_ack::default_instance_,
      royal_all_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_all_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_all_info_ack));
  royal_refresh_req_descriptor_ = file->message_type(173);
  static const int royal_refresh_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_req, proto_id_),
  };
  royal_refresh_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_refresh_req_descriptor_,
      royal_refresh_req::default_instance_,
      royal_refresh_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_refresh_req));
  royal_refresh_ack_descriptor_ = file->message_type(174);
  static const int royal_refresh_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_ack, royal_ids_),
  };
  royal_refresh_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_refresh_ack_descriptor_,
      royal_refresh_ack::default_instance_,
      royal_refresh_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_refresh_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_refresh_ack));
  royal_visit_req_descriptor_ = file->message_type(175);
  static const int royal_visit_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_req, royal_id_),
  };
  royal_visit_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_visit_req_descriptor_,
      royal_visit_req::default_instance_,
      royal_visit_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_visit_req));
  royal_visit_ack_descriptor_ = file->message_type(176);
  static const int royal_visit_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, ret_),
  };
  royal_visit_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_visit_ack_descriptor_,
      royal_visit_ack::default_instance_,
      royal_visit_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_visit_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_visit_ack));
  royal_reward_ntf_descriptor_ = file->message_type(177);
  static const int royal_reward_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, ret_),
  };
  royal_reward_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_reward_ntf_descriptor_,
      royal_reward_ntf::default_instance_,
      royal_reward_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_reward_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_reward_ntf));
  all_royals_ntf_descriptor_ = file->message_type(178);
  static const int all_royals_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_royals_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_royals_ntf, royals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_royals_ntf, info_),
  };
  all_royals_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_royals_ntf_descriptor_,
      all_royals_ntf::default_instance_,
      all_royals_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_royals_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_royals_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_royals_ntf));
  royal_pro_update_ntf_descriptor_ = file->message_type(179);
  static const int royal_pro_update_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_pro_update_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_pro_update_ntf, royal_),
  };
  royal_pro_update_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_pro_update_ntf_descriptor_,
      royal_pro_update_ntf::default_instance_,
      royal_pro_update_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_pro_update_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_pro_update_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_pro_update_ntf));
  royal_task_reward_draw_ntf_descriptor_ = file->message_type(180);
  static const int royal_task_reward_draw_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_reward_draw_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_reward_draw_ntf, ret_),
  };
  royal_task_reward_draw_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_task_reward_draw_ntf_descriptor_,
      royal_task_reward_draw_ntf::default_instance_,
      royal_task_reward_draw_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_reward_draw_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_reward_draw_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_task_reward_draw_ntf));
  game_update_royal_task_ntf_descriptor_ = file->message_type(181);
  static const int game_update_royal_task_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_update_royal_task_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_update_royal_task_ntf, royals_),
  };
  game_update_royal_task_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_update_royal_task_ntf_descriptor_,
      game_update_royal_task_ntf::default_instance_,
      game_update_royal_task_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_update_royal_task_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_update_royal_task_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_update_royal_task_ntf));
  game_royal_intimacy_reward_req_descriptor_ = file->message_type(182);
  static const int game_royal_intimacy_reward_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_req, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_req, index_),
  };
  game_royal_intimacy_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_intimacy_reward_req_descriptor_,
      game_royal_intimacy_reward_req::default_instance_,
      game_royal_intimacy_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_intimacy_reward_req));
  game_royal_intimacy_reward_ack_descriptor_ = file->message_type(183);
  static const int game_royal_intimacy_reward_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_ack, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_ack, index_),
  };
  game_royal_intimacy_reward_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_intimacy_reward_ack_descriptor_,
      game_royal_intimacy_reward_ack::default_instance_,
      game_royal_intimacy_reward_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_intimacy_reward_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_intimacy_reward_ack));
  game_royal_draw_reward_req_descriptor_ = file->message_type(184);
  static const int game_royal_draw_reward_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_req, royal_task_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_req, royal_config_id_),
  };
  game_royal_draw_reward_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_draw_reward_req_descriptor_,
      game_royal_draw_reward_req::default_instance_,
      game_royal_draw_reward_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_draw_reward_req));
  game_royal_draw_reward_ack_descriptor_ = file->message_type(185);
  static const int game_royal_draw_reward_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_ack, ret_),
  };
  game_royal_draw_reward_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_draw_reward_ack_descriptor_,
      game_royal_draw_reward_ack::default_instance_,
      game_royal_draw_reward_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_draw_reward_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_draw_reward_ack));
  game_royal_all_data_req_descriptor_ = file->message_type(186);
  static const int game_royal_all_data_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_req, config_id_),
  };
  game_royal_all_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_all_data_req_descriptor_,
      game_royal_all_data_req::default_instance_,
      game_royal_all_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_all_data_req));
  game_royal_all_data_ack_descriptor_ = file->message_type(187);
  static const int game_royal_all_data_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_ack, royals_),
  };
  game_royal_all_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_all_data_ack_descriptor_,
      game_royal_all_data_ack::default_instance_,
      game_royal_all_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_all_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_all_data_ack));
  game_royal_refresh_data_req_descriptor_ = file->message_type(188);
  static const int game_royal_refresh_data_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_req, config_id_),
  };
  game_royal_refresh_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_refresh_data_req_descriptor_,
      game_royal_refresh_data_req::default_instance_,
      game_royal_refresh_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_refresh_data_req));
  game_royal_refresh_data_ack_descriptor_ = file->message_type(189);
  static const int game_royal_refresh_data_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_ack, royals_),
  };
  game_royal_refresh_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_refresh_data_ack_descriptor_,
      game_royal_refresh_data_ack::default_instance_,
      game_royal_refresh_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_refresh_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_refresh_data_ack));
  game_royal_qingan_req_descriptor_ = file->message_type(190);
  static const int game_royal_qingan_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_req, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_req, royal_id_),
  };
  game_royal_qingan_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_qingan_req_descriptor_,
      game_royal_qingan_req::default_instance_,
      game_royal_qingan_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_qingan_req));
  game_royal_qingan_ack_descriptor_ = file->message_type(191);
  static const int game_royal_qingan_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_ack, royals_),
  };
  game_royal_qingan_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_qingan_ack_descriptor_,
      game_royal_qingan_ack::default_instance_,
      game_royal_qingan_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_qingan_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_qingan_ack));
  game_royal_unlock_req_descriptor_ = file->message_type(192);
  static const int game_royal_unlock_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_req, config_id_),
  };
  game_royal_unlock_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_unlock_req_descriptor_,
      game_royal_unlock_req::default_instance_,
      game_royal_unlock_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_unlock_req));
  game_royal_unlock_ack_descriptor_ = file->message_type(193);
  static const int game_royal_unlock_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_ack, ret_),
  };
  game_royal_unlock_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_unlock_ack_descriptor_,
      game_royal_unlock_ack::default_instance_,
      game_royal_unlock_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_unlock_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_unlock_ack));
  game_branch_task_fin_req_descriptor_ = file->message_type(194);
  static const int game_branch_task_fin_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_req, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_req, task_id_),
  };
  game_branch_task_fin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_branch_task_fin_req_descriptor_,
      game_branch_task_fin_req::default_instance_,
      game_branch_task_fin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_branch_task_fin_req));
  game_branch_task_fin_ack_descriptor_ = file->message_type(195);
  static const int game_branch_task_fin_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_ack, ret_),
  };
  game_branch_task_fin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_branch_task_fin_ack_descriptor_,
      game_branch_task_fin_ack::default_instance_,
      game_branch_task_fin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_branch_task_fin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_branch_task_fin_ack));
  game_royal_chat_req_descriptor_ = file->message_type(196);
  static const int game_royal_chat_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_req, royal_id_),
  };
  game_royal_chat_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_chat_req_descriptor_,
      game_royal_chat_req::default_instance_,
      game_royal_chat_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_chat_req));
  game_royal_chat_ack_descriptor_ = file->message_type(197);
  static const int game_royal_chat_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_ack, task_id_),
  };
  game_royal_chat_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_chat_ack_descriptor_,
      game_royal_chat_ack::default_instance_,
      game_royal_chat_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_chat_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_chat_ack));
  game_royal_get_gifts_req_descriptor_ = file->message_type(198);
  static const int game_royal_get_gifts_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_req, proto_id_),
  };
  game_royal_get_gifts_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_get_gifts_req_descriptor_,
      game_royal_get_gifts_req::default_instance_,
      game_royal_get_gifts_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_get_gifts_req));
  game_royal_get_gifts_ack_descriptor_ = file->message_type(199);
  static const int game_royal_get_gifts_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_ack, gift_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_ack, ret_),
  };
  game_royal_get_gifts_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_get_gifts_ack_descriptor_,
      game_royal_get_gifts_ack::default_instance_,
      game_royal_get_gifts_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_get_gifts_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_get_gifts_ack));
  game_royal_give_gift_req_descriptor_ = file->message_type(200);
  static const int game_royal_give_gift_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_req, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_req, gift_id_),
  };
  game_royal_give_gift_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_give_gift_req_descriptor_,
      game_royal_give_gift_req::default_instance_,
      game_royal_give_gift_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_give_gift_req));
  game_royal_give_gift_ack_descriptor_ = file->message_type(201);
  static const int game_royal_give_gift_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_ack, gift_id_),
  };
  game_royal_give_gift_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_give_gift_ack_descriptor_,
      game_royal_give_gift_ack::default_instance_,
      game_royal_give_gift_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_give_gift_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_give_gift_ack));
  game_royal_enter_scene_req_descriptor_ = file->message_type(202);
  static const int game_royal_enter_scene_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_req, scene_id_),
  };
  game_royal_enter_scene_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_enter_scene_req_descriptor_,
      game_royal_enter_scene_req::default_instance_,
      game_royal_enter_scene_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_enter_scene_req));
  game_royal_enter_scene_ack_descriptor_ = file->message_type(203);
  static const int game_royal_enter_scene_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, can_find_),
  };
  game_royal_enter_scene_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_enter_scene_ack_descriptor_,
      game_royal_enter_scene_ack::default_instance_,
      game_royal_enter_scene_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_enter_scene_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_enter_scene_ack));
  game_royal_event_fin_req_descriptor_ = file->message_type(204);
  static const int game_royal_event_fin_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_req, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_req, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_req, result_),
  };
  game_royal_event_fin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_event_fin_req_descriptor_,
      game_royal_event_fin_req::default_instance_,
      game_royal_event_fin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_event_fin_req));
  game_royal_event_fin_ack_descriptor_ = file->message_type(205);
  static const int game_royal_event_fin_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, royal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, ret_),
  };
  game_royal_event_fin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      game_royal_event_fin_ack_descriptor_,
      game_royal_event_fin_ack::default_instance_,
      game_royal_event_fin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(game_royal_event_fin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(game_royal_event_fin_ack));
  get_offical_data_req_descriptor_ = file->message_type(206);
  static const int get_offical_data_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_req, proto_id_),
  };
  get_offical_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_data_req_descriptor_,
      get_offical_data_req::default_instance_,
      get_offical_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_data_req));
  get_offical_data_ack_descriptor_ = file->message_type(207);
  static const int get_offical_data_ack_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, apply_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, is_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, last_draw_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, daily_offical_chal_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, last_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, exist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, ranking_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, time_data_),
  };
  get_offical_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_data_ack_descriptor_,
      get_offical_data_ack::default_instance_,
      get_offical_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_data_ack));
  offical_data_ntf_descriptor_ = file->message_type(208);
  static const int offical_data_ntf_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, cur_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, apply_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, apply_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, is_draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, last_draw_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, daily_offical_chal_num_),
  };
  offical_data_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_data_ntf_descriptor_,
      offical_data_ntf::default_instance_,
      offical_data_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_data_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_data_ntf));
  update_chest_ntf_descriptor_ = file->message_type(209);
  static const int update_chest_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chest_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chest_ntf, chests_),
  };
  update_chest_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_chest_ntf_descriptor_,
      update_chest_ntf::default_instance_,
      update_chest_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chest_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_chest_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_chest_ntf));
  get_role_chest_req_descriptor_ = file->message_type(210);
  static const int get_role_chest_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_req, chest_id_),
  };
  get_role_chest_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_role_chest_req_descriptor_,
      get_role_chest_req::default_instance_,
      get_role_chest_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_role_chest_req));
  get_role_chest_ack_descriptor_ = file->message_type(211);
  static const int get_role_chest_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_ack, chest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_ack, ret_),
  };
  get_role_chest_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_role_chest_ack_descriptor_,
      get_role_chest_ack::default_instance_,
      get_role_chest_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_role_chest_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_role_chest_ack));
  create_team_req_descriptor_ = file->message_type(212);
  static const int create_team_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, heros_),
  };
  create_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_team_req_descriptor_,
      create_team_req::default_instance_,
      create_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_team_req));
  create_team_ack_descriptor_ = file->message_type(213);
  static const int create_team_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, heros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, ret_),
  };
  create_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      create_team_ack_descriptor_,
      create_team_ack::default_instance_,
      create_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(create_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(create_team_ack));
  enter_team_req_descriptor_ = file->message_type(214);
  static const int enter_team_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_req, heros_),
  };
  enter_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_team_req_descriptor_,
      enter_team_req::default_instance_,
      enter_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_team_req));
  enter_team_ack_descriptor_ = file->message_type(215);
  static const int enter_team_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_ack, ret_),
  };
  enter_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      enter_team_ack_descriptor_,
      enter_team_ack::default_instance_,
      enter_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(enter_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(enter_team_ack));
  exit_team_req_descriptor_ = file->message_type(216);
  static const int exit_team_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_req, team_id_),
  };
  exit_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_team_req_descriptor_,
      exit_team_req::default_instance_,
      exit_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_team_req));
  exit_team_ack_descriptor_ = file->message_type(217);
  static const int exit_team_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_ack, ret_),
  };
  exit_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_team_ack_descriptor_,
      exit_team_ack::default_instance_,
      exit_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_team_ack));
  update_team_ntf_descriptor_ = file->message_type(218);
  static const int update_team_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ntf, team_),
  };
  update_team_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_team_ntf_descriptor_,
      update_team_ntf::default_instance_,
      update_team_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_team_ntf));
  ready_team_req_descriptor_ = file->message_type(219);
  static const int ready_team_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_req, team_id_),
  };
  ready_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ready_team_req_descriptor_,
      ready_team_req::default_instance_,
      ready_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ready_team_req));
  ready_team_ack_descriptor_ = file->message_type(220);
  static const int ready_team_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_ack, ret_),
  };
  ready_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ready_team_ack_descriptor_,
      ready_team_ack::default_instance_,
      ready_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ready_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ready_team_ack));
  update_team_req_descriptor_ = file->message_type(221);
  static const int update_team_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_req, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_req, hero_id_),
  };
  update_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_team_req_descriptor_,
      update_team_req::default_instance_,
      update_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_team_req));
  update_team_ack_descriptor_ = file->message_type(222);
  static const int update_team_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, ret_),
  };
  update_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      update_team_ack_descriptor_,
      update_team_ack::default_instance_,
      update_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(update_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(update_team_ack));
  get_teams_req_descriptor_ = file->message_type(223);
  static const int get_teams_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, team_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, team_perm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, parms_),
  };
  get_teams_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_teams_req_descriptor_,
      get_teams_req::default_instance_,
      get_teams_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_teams_req));
  get_teams_ack_descriptor_ = file->message_type(224);
  static const int get_teams_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_ack, teams_),
  };
  get_teams_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_teams_ack_descriptor_,
      get_teams_ack::default_instance_,
      get_teams_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_teams_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_teams_ack));
  invite_roles_enter_team_req_descriptor_ = file->message_type(225);
  static const int invite_roles_enter_team_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_req, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_req, roles_),
  };
  invite_roles_enter_team_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_roles_enter_team_req_descriptor_,
      invite_roles_enter_team_req::default_instance_,
      invite_roles_enter_team_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_roles_enter_team_req));
  invite_roles_enter_team_ack_descriptor_ = file->message_type(226);
  static const int invite_roles_enter_team_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_ack, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_ack, ret_),
  };
  invite_roles_enter_team_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_roles_enter_team_ack_descriptor_,
      invite_roles_enter_team_ack::default_instance_,
      invite_roles_enter_team_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_roles_enter_team_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_roles_enter_team_ack));
  invite_enter_team_ntf_descriptor_ = file->message_type(227);
  static const int invite_enter_team_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, team_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, sour_role_name_),
  };
  invite_enter_team_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      invite_enter_team_ntf_descriptor_,
      invite_enter_team_ntf::default_instance_,
      invite_enter_team_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(invite_enter_team_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(invite_enter_team_ntf));
  get_offical_rank_req_descriptor_ = file->message_type(228);
  static const int get_offical_rank_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_req, end_index_),
  };
  get_offical_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_rank_req_descriptor_,
      get_offical_rank_req::default_instance_,
      get_offical_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_rank_req));
  get_offical_rank_ack_descriptor_ = file->message_type(229);
  static const int get_offical_rank_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_ack, rank_items_),
  };
  get_offical_rank_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_rank_ack_descriptor_,
      get_offical_rank_ack::default_instance_,
      get_offical_rank_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_rank_ack));
  get_offical_rank_info_req_descriptor_ = file->message_type(230);
  static const int get_offical_rank_info_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, show_),
  };
  get_offical_rank_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_rank_info_req_descriptor_,
      get_offical_rank_info_req::default_instance_,
      get_offical_rank_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_rank_info_req));
  get_offical_rank_info_ack_descriptor_ = file->message_type(231);
  static const int get_offical_rank_info_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, offical_challenge_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, offical_challenge_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, my_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, current_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, rank_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, equip_items_),
  };
  get_offical_rank_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_rank_info_ack_descriptor_,
      get_offical_rank_info_ack::default_instance_,
      get_offical_rank_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_rank_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_rank_info_ack));
  get_offical_formation_req_descriptor_ = file->message_type(232);
  static const int get_offical_formation_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_req, role_id_),
  };
  get_offical_formation_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_formation_req_descriptor_,
      get_offical_formation_req::default_instance_,
      get_offical_formation_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_formation_req));
  get_offical_formation_ack_descriptor_ = file->message_type(233);
  static const int get_offical_formation_ack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, bord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, heros_),
  };
  get_offical_formation_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_offical_formation_ack_descriptor_,
      get_offical_formation_ack::default_instance_,
      get_offical_formation_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_offical_formation_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_offical_formation_ack));
  challenge_offical_rank_req_descriptor_ = file->message_type(234);
  static const int challenge_offical_rank_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_req, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_req, dest_role_id_),
  };
  challenge_offical_rank_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      challenge_offical_rank_req_descriptor_,
      challenge_offical_rank_req::default_instance_,
      challenge_offical_rank_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(challenge_offical_rank_req));
  challenge_offical_rank_ack_descriptor_ = file->message_type(235);
  static const int challenge_offical_rank_ack_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, dest_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, dest_older_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, dest_new_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, sour_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, sour_older_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, sour_new_rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, merit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, heros_),
  };
  challenge_offical_rank_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      challenge_offical_rank_ack_descriptor_,
      challenge_offical_rank_ack::default_instance_,
      challenge_offical_rank_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(challenge_offical_rank_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(challenge_offical_rank_ack));
  offical_apply_battle_result_req_descriptor_ = file->message_type(236);
  static const int offical_apply_battle_result_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_req, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_req, office_lv_),
  };
  offical_apply_battle_result_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_apply_battle_result_req_descriptor_,
      offical_apply_battle_result_req::default_instance_,
      offical_apply_battle_result_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_apply_battle_result_req));
  offical_apply_battle_result_ack_descriptor_ = file->message_type(237);
  static const int offical_apply_battle_result_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, proto_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, office_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, mydata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, my_place_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, ret_),
  };
  offical_apply_battle_result_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      offical_apply_battle_result_ack_descriptor_,
      offical_apply_battle_result_ack::default_instance_,
      offical_apply_battle_result_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(offical_apply_battle_result_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(offical_apply_battle_result_ack));
  role_plot_upload_req_descriptor_ = file->message_type(238);
  static const int role_plot_upload_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_req, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_req, screen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_req, section_id_),
  };
  role_plot_upload_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_plot_upload_req_descriptor_,
      role_plot_upload_req::default_instance_,
      role_plot_upload_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_plot_upload_req));
  role_plot_upload_ack_descriptor_ = file->message_type(239);
  static const int role_plot_upload_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_ack, result_),
  };
  role_plot_upload_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_plot_upload_ack_descriptor_,
      role_plot_upload_ack::default_instance_,
      role_plot_upload_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_upload_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_plot_upload_ack));
  role_plot_get_req_descriptor_ = file->message_type(240);
  static const int role_plot_get_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_req, get_type_),
  };
  role_plot_get_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_plot_get_req_descriptor_,
      role_plot_get_req::default_instance_,
      role_plot_get_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_plot_get_req));
  role_plot_get_ack_descriptor_ = file->message_type(241);
  static const int role_plot_get_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, plot_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, branch_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, end_ids_),
  };
  role_plot_get_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_plot_get_ack_descriptor_,
      role_plot_get_ack::default_instance_,
      role_plot_get_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_plot_get_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_plot_get_ack));
  plot_end_req_descriptor_ = file->message_type(242);
  static const int plot_end_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_req, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_req, screen_id_),
  };
  plot_end_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_end_req_descriptor_,
      plot_end_req::default_instance_,
      plot_end_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_end_req));
  plot_end_ack_descriptor_ = file->message_type(243);
  static const int plot_end_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_ack, get_end_id_),
  };
  plot_end_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_end_ack_descriptor_,
      plot_end_ack::default_instance_,
      plot_end_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_end_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_end_ack));
  plot_chapter_end_req_descriptor_ = file->message_type(244);
  static const int plot_chapter_end_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_req, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_req, screen_id_),
  };
  plot_chapter_end_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_chapter_end_req_descriptor_,
      plot_chapter_end_req::default_instance_,
      plot_chapter_end_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_chapter_end_req));
  plot_chapter_end_ack_descriptor_ = file->message_type(245);
  static const int plot_chapter_end_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_ack, result_),
  };
  plot_chapter_end_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_chapter_end_ack_descriptor_,
      plot_chapter_end_ack::default_instance_,
      plot_chapter_end_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_chapter_end_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_chapter_end_ack));
  plot_choose_branch_req_descriptor_ = file->message_type(246);
  static const int plot_choose_branch_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_req, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_req, screen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_req, branch_id_),
  };
  plot_choose_branch_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_choose_branch_req_descriptor_,
      plot_choose_branch_req::default_instance_,
      plot_choose_branch_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_choose_branch_req));
  plot_choose_branch_ack_descriptor_ = file->message_type(247);
  static const int plot_choose_branch_ack_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, add_character_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, add_royal_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, reward_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, screen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, branch_id_),
  };
  plot_choose_branch_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_choose_branch_ack_descriptor_,
      plot_choose_branch_ack::default_instance_,
      plot_choose_branch_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_choose_branch_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_choose_branch_ack));
  plot_trigger_action_req_descriptor_ = file->message_type(248);
  static const int plot_trigger_action_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_req, chapter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_req, screen_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_req, action_id_),
  };
  plot_trigger_action_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_trigger_action_req_descriptor_,
      plot_trigger_action_req::default_instance_,
      plot_trigger_action_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_trigger_action_req));
  plot_trigger_action_ack_descriptor_ = file->message_type(249);
  static const int plot_trigger_action_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_ack, reward_items_),
  };
  plot_trigger_action_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_trigger_action_ack_descriptor_,
      plot_trigger_action_ack::default_instance_,
      plot_trigger_action_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_trigger_action_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_trigger_action_ack));
  all_event_info_descriptor_ = file->message_type(250);
  static const int all_event_info_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_offical_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_qingan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_slap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_tribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_send_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_receive_flower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, event_reduce_),
  };
  all_event_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_event_info_descriptor_,
      all_event_info::default_instance_,
      all_event_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_event_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_event_info));
  client_event_msg_info_descriptor_ = file->message_type(251);
  static const int client_event_msg_info_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, from_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, from_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, from_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, from_sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, from_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, from_border_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, is_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, msg_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, msg_content_),
  };
  client_event_msg_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_event_msg_info_descriptor_,
      client_event_msg_info::default_instance_,
      client_event_msg_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_event_msg_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_event_msg_info));
  event_msg_get_all_req_descriptor_ = file->message_type(252);
  static const int event_msg_get_all_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_req, protoid_),
  };
  event_msg_get_all_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_get_all_req_descriptor_,
      event_msg_get_all_req::default_instance_,
      event_msg_get_all_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_get_all_req));
  event_msg_get_all_ack_descriptor_ = file->message_type(253);
  static const int event_msg_get_all_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_ack, msgs_),
  };
  event_msg_get_all_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_get_all_ack_descriptor_,
      event_msg_get_all_ack::default_instance_,
      event_msg_get_all_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_all_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_get_all_ack));
  event_msg_read_req_descriptor_ = file->message_type(254);
  static const int event_msg_read_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_req, event_type_),
  };
  event_msg_read_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_read_req_descriptor_,
      event_msg_read_req::default_instance_,
      event_msg_read_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_read_req));
  event_msg_read_ack_descriptor_ = file->message_type(255);
  static const int event_msg_read_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_ack, event_type_),
  };
  event_msg_read_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_read_ack_descriptor_,
      event_msg_read_ack::default_instance_,
      event_msg_read_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_read_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_read_ack));
  event_msg_del_req_descriptor_ = file->message_type(256);
  static const int event_msg_del_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_req, event_type_),
  };
  event_msg_del_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_del_req_descriptor_,
      event_msg_del_req::default_instance_,
      event_msg_del_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_del_req));
  event_msg_del_ack_descriptor_ = file->message_type(257);
  static const int event_msg_del_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_ack, event_type_),
  };
  event_msg_del_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_del_ack_descriptor_,
      event_msg_del_ack::default_instance_,
      event_msg_del_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_del_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_del_ack));
  event_msg_nty_descriptor_ = file->message_type(258);
  static const int event_msg_nty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_nty, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_nty, msgs_),
  };
  event_msg_nty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_nty_descriptor_,
      event_msg_nty::default_instance_,
      event_msg_nty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_nty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_nty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_nty));
  event_msg_get_by_id_req_descriptor_ = file->message_type(259);
  static const int event_msg_get_by_id_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_req, event_uuid_),
  };
  event_msg_get_by_id_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_get_by_id_req_descriptor_,
      event_msg_get_by_id_req::default_instance_,
      event_msg_get_by_id_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_get_by_id_req));
  event_msg_get_by_id_ack_descriptor_ = file->message_type(260);
  static const int event_msg_get_by_id_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_ack, msg_),
  };
  event_msg_get_by_id_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      event_msg_get_by_id_ack_descriptor_,
      event_msg_get_by_id_ack::default_instance_,
      event_msg_get_by_id_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(event_msg_get_by_id_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(event_msg_get_by_id_ack));
  get_rank_data_req_descriptor_ = file->message_type(261);
  static const int get_rank_data_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_req, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_req, end_index_),
  };
  get_rank_data_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_rank_data_req_descriptor_,
      get_rank_data_req::default_instance_,
      get_rank_data_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_rank_data_req));
  get_rank_data_ack_descriptor_ = file->message_type(262);
  static const int get_rank_data_ack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, start_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, end_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, my_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, items_),
  };
  get_rank_data_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_rank_data_ack_descriptor_,
      get_rank_data_ack::default_instance_,
      get_rank_data_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_rank_data_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_rank_data_ack));
  role_uint_achievement_descriptor_ = file->message_type(263);
  static const int role_uint_achievement_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, task_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, state_utc_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, current_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, max_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, is_new_),
  };
  role_uint_achievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_uint_achievement_descriptor_,
      role_uint_achievement::default_instance_,
      role_uint_achievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_uint_achievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_uint_achievement));
  role_achievements_ntf_type_list_descriptor_ = file->message_type(264);
  static const int role_achievements_ntf_type_list_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf_type_list, big_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf_type_list, small_types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf_type_list, big_type_pt_),
  };
  role_achievements_ntf_type_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_achievements_ntf_type_list_descriptor_,
      role_achievements_ntf_type_list::default_instance_,
      role_achievements_ntf_type_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf_type_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf_type_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_achievements_ntf_type_list));
  role_achievements_ntf_descriptor_ = file->message_type(265);
  static const int role_achievements_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, achievements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, points_reward_getted_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, current_achieve_pt_),
  };
  role_achievements_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_achievements_ntf_descriptor_,
      role_achievements_ntf::default_instance_,
      role_achievements_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievements_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_achievements_ntf));
  role_achievement_get_rewards_req_descriptor_ = file->message_type(266);
  static const int role_achievement_get_rewards_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_req, task_config_id_),
  };
  role_achievement_get_rewards_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_achievement_get_rewards_req_descriptor_,
      role_achievement_get_rewards_req::default_instance_,
      role_achievement_get_rewards_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_achievement_get_rewards_req));
  role_achievement_get_rewards_ack_descriptor_ = file->message_type(267);
  static const int role_achievement_get_rewards_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_ack, succeed_get_award_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_ack, failed_get_award_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_ack, error_codes_),
  };
  role_achievement_get_rewards_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_achievement_get_rewards_ack_descriptor_,
      role_achievement_get_rewards_ack::default_instance_,
      role_achievement_get_rewards_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_get_rewards_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_achievement_get_rewards_ack));
  role_achievement_point_rewards_req_descriptor_ = file->message_type(268);
  static const int role_achievement_point_rewards_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_req, achievement_pt_reward_id_),
  };
  role_achievement_point_rewards_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_achievement_point_rewards_req_descriptor_,
      role_achievement_point_rewards_req::default_instance_,
      role_achievement_point_rewards_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_achievement_point_rewards_req));
  role_achievement_point_rewards_ack_descriptor_ = file->message_type(269);
  static const int role_achievement_point_rewards_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_ack, succeed_get_award_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_ack, failed_get_award_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_ack, error_codes_),
  };
  role_achievement_point_rewards_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_achievement_point_rewards_ack_descriptor_,
      role_achievement_point_rewards_ack::default_instance_,
      role_achievement_point_rewards_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_achievement_point_rewards_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_achievement_point_rewards_ack));
  flower_bag_nty_descriptor_ = file->message_type(270);
  static const int flower_bag_nty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_nty, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_nty, flower_),
  };
  flower_bag_nty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_bag_nty_descriptor_,
      flower_bag_nty::default_instance_,
      flower_bag_nty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_nty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_nty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_bag_nty));
  flower_bag_all_req_descriptor_ = file->message_type(271);
  static const int flower_bag_all_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_req, protoid_),
  };
  flower_bag_all_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_bag_all_req_descriptor_,
      flower_bag_all_req::default_instance_,
      flower_bag_all_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_bag_all_req));
  flower_bag_all_ack_descriptor_ = file->message_type(272);
  static const int flower_bag_all_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_ack, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_ack, flower_),
  };
  flower_bag_all_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_bag_all_ack_descriptor_,
      flower_bag_all_ack::default_instance_,
      flower_bag_all_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_bag_all_ack));
  flower_bag_all_nty_descriptor_ = file->message_type(273);
  static const int flower_bag_all_nty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_nty, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_nty, flower_),
  };
  flower_bag_all_nty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_bag_all_nty_descriptor_,
      flower_bag_all_nty::default_instance_,
      flower_bag_all_nty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_nty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_bag_all_nty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_bag_all_nty));
  flower_send_req_descriptor_ = file->message_type(274);
  static const int flower_send_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_req, send_info_),
  };
  flower_send_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_send_req_descriptor_,
      flower_send_req::default_instance_,
      flower_send_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_send_req));
  flower_send_ack_descriptor_ = file->message_type(275);
  static const int flower_send_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_ack, result_),
  };
  flower_send_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_send_ack_descriptor_,
      flower_send_ack::default_instance_,
      flower_send_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_send_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_send_ack));
  flower_receive_nty_descriptor_ = file->message_type(276);
  static const int flower_receive_nty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, from_role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, send_flower_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, send_flower_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, remark_),
  };
  flower_receive_nty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      flower_receive_nty_descriptor_,
      flower_receive_nty::default_instance_,
      flower_receive_nty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(flower_receive_nty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(flower_receive_nty));
  role_draw_card_info_descriptor_ = file->message_type(277);
  static const int role_draw_card_info_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, draw_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, now_remain_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, remain_free_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, remain_limit_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, next_add_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, next_sp_drop_time_),
  };
  role_draw_card_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_info_descriptor_,
      role_draw_card_info::default_instance_,
      role_draw_card_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_info));
  role_draw_card_reward_item_descriptor_ = file->message_type(278);
  static const int role_draw_card_reward_item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_reward_item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_reward_item, count_),
  };
  role_draw_card_reward_item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_reward_item_descriptor_,
      role_draw_card_reward_item::default_instance_,
      role_draw_card_reward_item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_reward_item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_reward_item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_reward_item));
  role_draw_card_rewards_descriptor_ = file->message_type(279);
  static const int role_draw_card_rewards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_rewards, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_rewards, random_results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_rewards, real_results_),
  };
  role_draw_card_rewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_rewards_descriptor_,
      role_draw_card_rewards::default_instance_,
      role_draw_card_rewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_rewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_rewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_rewards));
  role_draw_card_info_req_descriptor_ = file->message_type(280);
  static const int role_draw_card_info_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_req, protoid_),
  };
  role_draw_card_info_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_info_req_descriptor_,
      role_draw_card_info_req::default_instance_,
      role_draw_card_info_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_info_req));
  role_draw_card_info_ack_descriptor_ = file->message_type(281);
  static const int role_draw_card_info_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_ack, lists_),
  };
  role_draw_card_info_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_info_ack_descriptor_,
      role_draw_card_info_ack::default_instance_,
      role_draw_card_info_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_info_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_info_ack));
  role_draw_card_req_descriptor_ = file->message_type(282);
  static const int role_draw_card_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_req, draw_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_req, need_coin_type_),
  };
  role_draw_card_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_req_descriptor_,
      role_draw_card_req::default_instance_,
      role_draw_card_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_req));
  role_draw_card_ack_descriptor_ = file->message_type(283);
  static const int role_draw_card_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, draw_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, need_coin_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, error_code_),
  };
  role_draw_card_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_ack_descriptor_,
      role_draw_card_ack::default_instance_,
      role_draw_card_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_ack));
  role_draw_card_ssr_req_descriptor_ = file->message_type(284);
  static const int role_draw_card_ssr_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_req, protoid_),
  };
  role_draw_card_ssr_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_ssr_req_descriptor_,
      role_draw_card_ssr_req::default_instance_,
      role_draw_card_ssr_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_ssr_req));
  role_draw_card_ssr_ack_one_descriptor_ = file->message_type(285);
  static const int role_draw_card_ssr_ack_one_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack_one, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack_one, item_id_),
  };
  role_draw_card_ssr_ack_one_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_ssr_ack_one_descriptor_,
      role_draw_card_ssr_ack_one::default_instance_,
      role_draw_card_ssr_ack_one_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack_one, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack_one, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_ssr_ack_one));
  role_draw_card_ssr_ack_descriptor_ = file->message_type(286);
  static const int role_draw_card_ssr_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack, results_),
  };
  role_draw_card_ssr_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_draw_card_ssr_ack_descriptor_,
      role_draw_card_ssr_ack::default_instance_,
      role_draw_card_ssr_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_draw_card_ssr_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_draw_card_ssr_ack));
  role_talent_activate_req_descriptor_ = file->message_type(287);
  static const int role_talent_activate_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_req, id_),
  };
  role_talent_activate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_talent_activate_req_descriptor_,
      role_talent_activate_req::default_instance_,
      role_talent_activate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_talent_activate_req));
  role_talent_activate_ack_descriptor_ = file->message_type(288);
  static const int role_talent_activate_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_ack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_ack, ret_),
  };
  role_talent_activate_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_talent_activate_ack_descriptor_,
      role_talent_activate_ack::default_instance_,
      role_talent_activate_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_talent_activate_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_talent_activate_ack));
  all_role_talents_activate_req_descriptor_ = file->message_type(289);
  static const int all_role_talents_activate_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_req, protoid_),
  };
  all_role_talents_activate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_role_talents_activate_req_descriptor_,
      all_role_talents_activate_req::default_instance_,
      all_role_talents_activate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_role_talents_activate_req));
  all_role_talents_activate_ack_descriptor_ = file->message_type(290);
  static const int all_role_talents_activate_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_ack, id_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_ack, ret_),
  };
  all_role_talents_activate_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_role_talents_activate_ack_descriptor_,
      all_role_talents_activate_ack::default_instance_,
      all_role_talents_activate_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_role_talents_activate_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_role_talents_activate_ack));
  switch_role_skill_req_descriptor_ = file->message_type(291);
  static const int switch_role_skill_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_req, skill_id_),
  };
  switch_role_skill_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      switch_role_skill_req_descriptor_,
      switch_role_skill_req::default_instance_,
      switch_role_skill_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(switch_role_skill_req));
  switch_role_skill_ack_descriptor_ = file->message_type(292);
  static const int switch_role_skill_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_ack, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_ack, ret_),
  };
  switch_role_skill_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      switch_role_skill_ack_descriptor_,
      switch_role_skill_ack::default_instance_,
      switch_role_skill_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(switch_role_skill_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(switch_role_skill_ack));
  talisman_use_req_descriptor_ = file->message_type(293);
  static const int talisman_use_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, talisman_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, use_slot_),
  };
  talisman_use_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_use_req_descriptor_,
      talisman_use_req::default_instance_,
      talisman_use_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_use_req));
  talisman_use_ack_descriptor_ = file->message_type(294);
  static const int talisman_use_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, talisman_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, use_slot_),
  };
  talisman_use_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_use_ack_descriptor_,
      talisman_use_ack::default_instance_,
      talisman_use_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_use_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_use_ack));
  talisman_un_use_req_descriptor_ = file->message_type(295);
  static const int talisman_un_use_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_req, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_req, un_use_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_req, hero_uuid_),
  };
  talisman_un_use_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_un_use_req_descriptor_,
      talisman_un_use_req::default_instance_,
      talisman_un_use_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_un_use_req));
  talisman_un_use_ack_descriptor_ = file->message_type(296);
  static const int talisman_un_use_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, un_use_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, hero_uuid_),
  };
  talisman_un_use_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_un_use_ack_descriptor_,
      talisman_un_use_ack::default_instance_,
      talisman_un_use_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_un_use_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_un_use_ack));
  talisman_lv_up_req_descriptor_ = file->message_type(297);
  static const int talisman_lv_up_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, talisman_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, cost_uuids_),
  };
  talisman_lv_up_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_lv_up_req_descriptor_,
      talisman_lv_up_req::default_instance_,
      talisman_lv_up_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_lv_up_req));
  talisman_lv_up_ack_descriptor_ = file->message_type(298);
  static const int talisman_lv_up_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, talisman_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, cost_uuids_),
  };
  talisman_lv_up_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_lv_up_ack_descriptor_,
      talisman_lv_up_ack::default_instance_,
      talisman_lv_up_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_lv_up_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_lv_up_ack));
  talisman_break_req_descriptor_ = file->message_type(299);
  static const int talisman_break_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_req, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_req, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_req, talisman_uuid_),
  };
  talisman_break_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_break_req_descriptor_,
      talisman_break_req::default_instance_,
      talisman_break_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_break_req));
  talisman_break_ack_descriptor_ = file->message_type(300);
  static const int talisman_break_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, talisman_uuid_),
  };
  talisman_break_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_break_ack_descriptor_,
      talisman_break_ack::default_instance_,
      talisman_break_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_break_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_break_ack));
  talisman_change_ntf_descriptor_ = file->message_type(301);
  static const int talisman_change_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, hero_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, talisman_),
  };
  talisman_change_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talisman_change_ntf_descriptor_,
      talisman_change_ntf::default_instance_,
      talisman_change_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talisman_change_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talisman_change_ntf));
  red_pt_req_descriptor_ = file->message_type(302);
  static const int red_pt_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_req, sys_id_s_),
  };
  red_pt_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      red_pt_req_descriptor_,
      red_pt_req::default_instance_,
      red_pt_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(red_pt_req));
  red_pt_ack_descriptor_ = file->message_type(303);
  static const int red_pt_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ack, infos_),
  };
  red_pt_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      red_pt_ack_descriptor_,
      red_pt_ack::default_instance_,
      red_pt_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(red_pt_ack));
  red_pt_ntf_descriptor_ = file->message_type(304);
  static const int red_pt_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ntf, infos_),
  };
  red_pt_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      red_pt_ntf_descriptor_,
      red_pt_ntf::default_instance_,
      red_pt_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(red_pt_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(red_pt_ntf));
  get_wearing_fashions_req_descriptor_ = file->message_type(305);
  static const int get_wearing_fashions_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_req, protoid_),
  };
  get_wearing_fashions_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_wearing_fashions_req_descriptor_,
      get_wearing_fashions_req::default_instance_,
      get_wearing_fashions_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_wearing_fashions_req));
  get_wearing_fashions_ack_descriptor_ = file->message_type(306);
  static const int get_wearing_fashions_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_ack, fashions_p_wearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_ack, error_code_),
  };
  get_wearing_fashions_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_wearing_fashions_ack_descriptor_,
      get_wearing_fashions_ack::default_instance_,
      get_wearing_fashions_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_wearing_fashions_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_wearing_fashions_ack));
  get_all_fashions_req_descriptor_ = file->message_type(307);
  static const int get_all_fashions_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_req, protoid_),
  };
  get_all_fashions_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_all_fashions_req_descriptor_,
      get_all_fashions_req::default_instance_,
      get_all_fashions_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_all_fashions_req));
  get_all_fashions_ack_descriptor_ = file->message_type(308);
  static const int get_all_fashions_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_ack, fashions_p_wearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_ack, fashions_p_wardrobe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_ack, error_code_),
  };
  get_all_fashions_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_all_fashions_ack_descriptor_,
      get_all_fashions_ack::default_instance_,
      get_all_fashions_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_all_fashions_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_all_fashions_ack));
  wear_fashions_req_descriptor_ = file->message_type(309);
  static const int wear_fashions_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_req, uuid_s_),
  };
  wear_fashions_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wear_fashions_req_descriptor_,
      wear_fashions_req::default_instance_,
      wear_fashions_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wear_fashions_req));
  wear_fashions_ack_descriptor_ = file->message_type(310);
  static const int wear_fashions_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_ack, uuid_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_ack, error_code_),
  };
  wear_fashions_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wear_fashions_ack_descriptor_,
      wear_fashions_ack::default_instance_,
      wear_fashions_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wear_fashions_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wear_fashions_ack));
  get_other_role_fashion_cs_req_descriptor_ = file->message_type(311);
  static const int get_other_role_fashion_cs_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_req, role_id_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_req, role_name_s_),
  };
  get_other_role_fashion_cs_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_other_role_fashion_cs_req_descriptor_,
      get_other_role_fashion_cs_req::default_instance_,
      get_other_role_fashion_cs_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_other_role_fashion_cs_req));
  get_other_role_fashion_cs_ack_descriptor_ = file->message_type(312);
  static const int get_other_role_fashion_cs_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_ack, fashions_p_wearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_ack, error_code_),
  };
  get_other_role_fashion_cs_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      get_other_role_fashion_cs_ack_descriptor_,
      get_other_role_fashion_cs_ack::default_instance_,
      get_other_role_fashion_cs_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(get_other_role_fashion_cs_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(get_other_role_fashion_cs_ack));
  verify_config_version_req_descriptor_ = file->message_type(313);
  static const int verify_config_version_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_req, version_),
  };
  verify_config_version_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_config_version_req_descriptor_,
      verify_config_version_req::default_instance_,
      verify_config_version_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_config_version_req));
  verify_config_version_ack_descriptor_ = file->message_type(314);
  static const int verify_config_version_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_ack, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_ack, error_code_),
  };
  verify_config_version_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      verify_config_version_ack_descriptor_,
      verify_config_version_ack::default_instance_,
      verify_config_version_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(verify_config_version_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(verify_config_version_ack));
  debug_hero_attr_ntf_descriptor_ = file->message_type(315);
  static const int debug_hero_attr_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(debug_hero_attr_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(debug_hero_attr_ntf, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(debug_hero_attr_ntf, types_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(debug_hero_attr_ntf, values_),
  };
  debug_hero_attr_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      debug_hero_attr_ntf_descriptor_,
      debug_hero_attr_ntf::default_instance_,
      debug_hero_attr_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(debug_hero_attr_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(debug_hero_attr_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(debug_hero_attr_ntf));
  waiting_in_line_ntf_descriptor_ = file->message_type(316);
  static const int waiting_in_line_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(waiting_in_line_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(waiting_in_line_ntf, wait_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(waiting_in_line_ntf, left_mins_),
  };
  waiting_in_line_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      waiting_in_line_ntf_descriptor_,
      waiting_in_line_ntf::default_instance_,
      waiting_in_line_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(waiting_in_line_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(waiting_in_line_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(waiting_in_line_ntf));
  finish_in_line_ntf_descriptor_ = file->message_type(317);
  static const int finish_in_line_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_in_line_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_in_line_ntf, tm_),
  };
  finish_in_line_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      finish_in_line_ntf_descriptor_,
      finish_in_line_ntf::default_instance_,
      finish_in_line_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_in_line_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(finish_in_line_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(finish_in_line_ntf));
  exit_waiting_in_line_req_descriptor_ = file->message_type(318);
  static const int exit_waiting_in_line_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_req, protoid_),
  };
  exit_waiting_in_line_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_waiting_in_line_req_descriptor_,
      exit_waiting_in_line_req::default_instance_,
      exit_waiting_in_line_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_waiting_in_line_req));
  exit_waiting_in_line_ack_descriptor_ = file->message_type(319);
  static const int exit_waiting_in_line_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_ack, ret_),
  };
  exit_waiting_in_line_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      exit_waiting_in_line_ack_descriptor_,
      exit_waiting_in_line_ack::default_instance_,
      exit_waiting_in_line_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(exit_waiting_in_line_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(exit_waiting_in_line_ack));
  user_event_track_ntf_descriptor_ = file->message_type(320);
  static const int user_event_track_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ntf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ntf, int_data_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ntf, str_data_s_),
  };
  user_event_track_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      user_event_track_ntf_descriptor_,
      user_event_track_ntf::default_instance_,
      user_event_track_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(user_event_track_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(user_event_track_ntf));
  role_guide_info_descriptor_ = file->message_type(321);
  static const int role_guide_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_info, guide_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_info, step_ids_),
  };
  role_guide_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_guide_info_descriptor_,
      role_guide_info::default_instance_,
      role_guide_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_guide_info));
  role_guide_ntf_descriptor_ = file->message_type(322);
  static const int role_guide_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ntf, pass_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ntf, guide_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ntf, guide_ids_),
  };
  role_guide_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_guide_ntf_descriptor_,
      role_guide_ntf::default_instance_,
      role_guide_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_guide_ntf));
  role_guide_req_descriptor_ = file->message_type(323);
  static const int role_guide_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, guide_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, cur_guide_pass_),
  };
  role_guide_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_guide_req_descriptor_,
      role_guide_req::default_instance_,
      role_guide_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_guide_req));
  role_guide_ack_descriptor_ = file->message_type(324);
  static const int role_guide_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ack, guide_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ack, step_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ack, ret_),
  };
  role_guide_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_guide_ack_descriptor_,
      role_guide_ack::default_instance_,
      role_guide_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_guide_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_guide_ack));
  onekey_skip_guide_req_descriptor_ = file->message_type(325);
  static const int onekey_skip_guide_req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_req, protoid_),
  };
  onekey_skip_guide_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      onekey_skip_guide_req_descriptor_,
      onekey_skip_guide_req::default_instance_,
      onekey_skip_guide_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(onekey_skip_guide_req));
  onekey_skip_guide_ack_descriptor_ = file->message_type(326);
  static const int onekey_skip_guide_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_ack, ret_),
  };
  onekey_skip_guide_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      onekey_skip_guide_ack_descriptor_,
      onekey_skip_guide_ack::default_instance_,
      onekey_skip_guide_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(onekey_skip_guide_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(onekey_skip_guide_ack));
  plot_little_game_set_req_descriptor_ = file->message_type(327);
  static const int plot_little_game_set_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_req, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_req, state_),
  };
  plot_little_game_set_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_little_game_set_req_descriptor_,
      plot_little_game_set_req::default_instance_,
      plot_little_game_set_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_little_game_set_req));
  plot_little_game_set_ack_descriptor_ = file->message_type(328);
  static const int plot_little_game_set_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_ack, error_),
  };
  plot_little_game_set_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_little_game_set_ack_descriptor_,
      plot_little_game_set_ack::default_instance_,
      plot_little_game_set_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_set_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_little_game_set_ack));
  plot_little_game_get_req_descriptor_ = file->message_type(329);
  static const int plot_little_game_get_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_req, cfg_id_s_),
  };
  plot_little_game_get_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_little_game_get_req_descriptor_,
      plot_little_game_get_req::default_instance_,
      plot_little_game_get_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_little_game_get_req));
  plot_little_game_get_ack_descriptor_ = file->message_type(330);
  static const int plot_little_game_get_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_ack, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_ack, error_),
  };
  plot_little_game_get_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      plot_little_game_get_ack_descriptor_,
      plot_little_game_get_ack::default_instance_,
      plot_little_game_get_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(plot_little_game_get_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(plot_little_game_get_ack));
  pet_get_req_descriptor_ = file->message_type(331);
  static const int pet_get_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_req, ask_pet_id_s_),
  };
  pet_get_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_get_req_descriptor_,
      pet_get_req::default_instance_,
      pet_get_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_get_req));
  pet_get_ack_descriptor_ = file->message_type(332);
  static const int pet_get_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_ack, pet_pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_ack, cur_show_pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_ack, error_),
  };
  pet_get_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_get_ack_descriptor_,
      pet_get_ack::default_instance_,
      pet_get_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_get_ack));
  pet_change_name_req_descriptor_ = file->message_type(333);
  static const int pet_change_name_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_req, new_name_),
  };
  pet_change_name_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_change_name_req_descriptor_,
      pet_change_name_req::default_instance_,
      pet_change_name_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_change_name_req));
  pet_change_name_ack_descriptor_ = file->message_type(334);
  static const int pet_change_name_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_ack, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_ack, error_),
  };
  pet_change_name_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_change_name_ack_descriptor_,
      pet_change_name_ack::default_instance_,
      pet_change_name_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_change_name_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_change_name_ack));
  pet_do_action_req_descriptor_ = file->message_type(335);
  static const int pet_do_action_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_req, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_req, pet_id_),
  };
  pet_do_action_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_do_action_req_descriptor_,
      pet_do_action_req::default_instance_,
      pet_do_action_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_do_action_req));
  pet_do_action_ack_descriptor_ = file->message_type(336);
  static const int pet_do_action_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, pet_pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, error_),
  };
  pet_do_action_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_do_action_ack_descriptor_,
      pet_do_action_ack::default_instance_,
      pet_do_action_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_do_action_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_do_action_ack));
  pet_send_out_req_descriptor_ = file->message_type(337);
  static const int pet_send_out_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_req, out_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_req, pet_id_),
  };
  pet_send_out_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_send_out_req_descriptor_,
      pet_send_out_req::default_instance_,
      pet_send_out_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_send_out_req));
  pet_send_out_ack_descriptor_ = file->message_type(338);
  static const int pet_send_out_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, out_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, pet_pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, error_),
  };
  pet_send_out_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_send_out_ack_descriptor_,
      pet_send_out_ack::default_instance_,
      pet_send_out_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_send_out_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_send_out_ack));
  pet_get_out_award_req_descriptor_ = file->message_type(339);
  static const int pet_get_out_award_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_req, pet_id_),
  };
  pet_get_out_award_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_get_out_award_req_descriptor_,
      pet_get_out_award_req::default_instance_,
      pet_get_out_award_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_get_out_award_req));
  pet_get_out_award_ack_descriptor_ = file->message_type(340);
  static const int pet_get_out_award_ack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, pet_pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, rand_item_s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, get_item_s_),
  };
  pet_get_out_award_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_get_out_award_ack_descriptor_,
      pet_get_out_award_ack::default_instance_,
      pet_get_out_award_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_get_out_award_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_get_out_award_ack));
  pet_feed_food_req_descriptor_ = file->message_type(341);
  static const int pet_feed_food_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_req, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_req, item_id_),
  };
  pet_feed_food_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_feed_food_req_descriptor_,
      pet_feed_food_req::default_instance_,
      pet_feed_food_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_feed_food_req));
  pet_feed_food_ack_descriptor_ = file->message_type(342);
  static const int pet_feed_food_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, pet_pack_),
  };
  pet_feed_food_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_feed_food_ack_descriptor_,
      pet_feed_food_ack::default_instance_,
      pet_feed_food_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_feed_food_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_feed_food_ack));
  pet_set_show_pet_req_descriptor_ = file->message_type(343);
  static const int pet_set_show_pet_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_req, pet_id_),
  };
  pet_set_show_pet_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_set_show_pet_req_descriptor_,
      pet_set_show_pet_req::default_instance_,
      pet_set_show_pet_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_set_show_pet_req));
  pet_set_show_pet_ack_descriptor_ = file->message_type(344);
  static const int pet_set_show_pet_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_ack, error_),
  };
  pet_set_show_pet_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_set_show_pet_ack_descriptor_,
      pet_set_show_pet_ack::default_instance_,
      pet_set_show_pet_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_set_show_pet_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_set_show_pet_ack));
  pet_out_back_req_descriptor_ = file->message_type(345);
  static const int pet_out_back_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_req, pet_id_),
  };
  pet_out_back_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_out_back_req_descriptor_,
      pet_out_back_req::default_instance_,
      pet_out_back_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_out_back_req));
  pet_out_back_ack_descriptor_ = file->message_type(346);
  static const int pet_out_back_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_ack, pet_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_ack, error_),
  };
  pet_out_back_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pet_out_back_ack_descriptor_,
      pet_out_back_ack::default_instance_,
      pet_out_back_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pet_out_back_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pet_out_back_ack));
  eAchievementState_descriptor_ = file->enum_type(0);
  eDrawCardCoinType_descriptor_ = file->enum_type(1);
  EUserEventTrackType_descriptor_ = file->enum_type(2);
  EGUIDE_OPENCONDI_TYPE_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5frole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_check_in_req_descriptor_, &account_check_in_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_check_in_ack_descriptor_, &account_check_in_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_packet_seq_id_ntf_descriptor_, &sys_packet_seq_id_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_packet_seq_id_req_descriptor_, &sys_packet_seq_id_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sys_packet_seq_id_ack_descriptor_, &sys_packet_seq_id_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    uplink_packet_seq_error_ntf_descriptor_, &uplink_packet_seq_error_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_secret_key_req_descriptor_, &client_secret_key_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_secret_key_ack_descriptor_, &client_secret_key_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_secret_start_req_descriptor_, &client_secret_start_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_secret_start_ack_descriptor_, &client_secret_start_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    account_role_data_ack_descriptor_, &account_role_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_role_of_game_descriptor_, &create_role_of_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_role_of_game_ack_descriptor_, &create_role_of_game_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    switch_scene_req_descriptor_, &switch_scene_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_game_req_descriptor_, &enter_game_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_game_ack_descriptor_, &enter_game_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_unlock_req_descriptor_, &system_unlock_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_unlock_ack_descriptor_, &system_unlock_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    system_unlock_ntf_descriptor_, &system_unlock_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_info_ntf_descriptor_, &role_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_info_descriptor_, &item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_role_info_ntf_descriptor_, &update_role_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_common_base_ntf_descriptor_, &role_common_base_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_update_ntf_descriptor_, &soul_update_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_raise_req_descriptor_, &soul_raise_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_raise_ack_descriptor_, &soul_raise_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_bind_req_descriptor_, &soul_bind_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_bind_ack_descriptor_, &soul_bind_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_unbind_req_descriptor_, &soul_unbind_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_unbind_ack_descriptor_, &soul_unbind_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_lock_req_descriptor_, &soul_lock_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_lock_ack_descriptor_, &soul_lock_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_unlock_req_descriptor_, &soul_unlock_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_unlock_ack_descriptor_, &soul_unlock_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_sell_req_descriptor_, &soul_sell_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    soul_sell_ack_descriptor_, &soul_sell_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_packet_req_descriptor_, &item_packet_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_packet_ack_descriptor_, &item_packet_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_use_req_descriptor_, &item_use_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_use_ack_descriptor_, &item_use_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_sold_req_descriptor_, &item_sold_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_sold_ack_descriptor_, &item_sold_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bag_expand_req_descriptor_, &bag_expand_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bag_expand_ack_descriptor_, &bag_expand_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bag_capacity_not_enough_ntf_descriptor_, &bag_capacity_not_enough_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_list_data_ntf_descriptor_, &hero_list_data_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    add_hero_ntf_descriptor_, &add_hero_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    remove_hero_ntf_descriptor_, &remove_hero_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_info_change_ntf_descriptor_, &hero_info_change_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_upgrade_req_descriptor_, &hero_upgrade_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_upgrade_ack_descriptor_, &hero_upgrade_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_upstar_req_descriptor_, &hero_upstar_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_upstar_ack_descriptor_, &hero_upstar_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_awaken_req_descriptor_, &hero_awaken_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_awaken_ack_descriptor_, &hero_awaken_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_lock_req_descriptor_, &hero_lock_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_lock_ack_descriptor_, &hero_lock_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_compose_req_descriptor_, &hero_compose_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_compose_ack_descriptor_, &hero_compose_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_skin_active_req_descriptor_, &hero_skin_active_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_skin_active_ack_descriptor_, &hero_skin_active_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_change_name_req_descriptor_, &hero_change_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_change_name_ack_descriptor_, &hero_change_name_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_level_up_req_descriptor_, &hero_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_level_up_ack_descriptor_, &hero_level_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_quality_up_req_descriptor_, &hero_quality_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_quality_up_ack_descriptor_, &hero_quality_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_combine_req_descriptor_, &item_combine_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    item_combine_ack_descriptor_, &item_combine_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_star_up_req_descriptor_, &hero_star_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_star_up_ack_descriptor_, &hero_star_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_skill_up_req_descriptor_, &hero_skill_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_skill_up_ack_descriptor_, &hero_skill_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_req_descriptor_, &hero_equip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_ack_descriptor_, &hero_equip_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_unequip_req_descriptor_, &hero_unequip_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_unequip_ack_descriptor_, &hero_unequip_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_level_up_req_descriptor_, &hero_equip_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_level_up_ack_descriptor_, &hero_equip_level_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_onekey_level_up_req_descriptor_, &hero_equip_onekey_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_onekey_level_up_ack_descriptor_, &hero_equip_onekey_level_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_level_info_descriptor_, &hero_equip_level_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_all_level_up_req_descriptor_, &hero_equip_all_level_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_all_level_up_ack_descriptor_, &hero_equip_all_level_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_onekey_req_descriptor_, &hero_equip_onekey_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_equip_onekey_ack_descriptor_, &hero_equip_onekey_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_unequip_onekey_req_descriptor_, &hero_unequip_onekey_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_unequip_onekey_ack_descriptor_, &hero_unequip_onekey_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_operation_req_descriptor_, &gm_operation_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gm_operation_ack_descriptor_, &gm_operation_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    leave_game_req_descriptor_, &leave_game_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    kick_game_ntf_descriptor_, &kick_game_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    beat_heart_ntf_descriptor_, &beat_heart_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sync_time_ntf_descriptor_, &sync_time_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_heart_beat_req_descriptor_, &client_heart_beat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_heart_beat_ack_descriptor_, &client_heart_beat_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_info_ntf_descriptor_, &role_player_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_info_update_ntf_descriptor_, &role_player_info_update_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_fight_score_ntf_descriptor_, &role_fight_score_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_change_req_descriptor_, &role_player_change_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_change_ack_descriptor_, &role_player_change_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_active_skin_req_descriptor_, &role_player_active_skin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_active_skin_ack_descriptor_, &role_player_active_skin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_buy_skin_req_descriptor_, &role_player_buy_skin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_buy_skin_ack_descriptor_, &role_player_buy_skin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_wear_skin_req_descriptor_, &role_player_wear_skin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_wear_skin_ack_descriptor_, &role_player_wear_skin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_player_skillup_ntf_descriptor_, &role_player_skillup_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_buy_req_descriptor_, &role_buy_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_buy_ack_descriptor_, &role_buy_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_base_info_req_descriptor_, &role_show_base_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_base_info_ack_descriptor_, &role_show_base_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_get_like_req_descriptor_, &role_show_get_like_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_get_like_ack_descriptor_, &role_show_get_like_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_player_base_req_descriptor_, &role_show_player_base_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_player_base_ack_descriptor_, &role_show_player_base_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_like_req_descriptor_, &role_show_like_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_like_ack_descriptor_, &role_show_like_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_name_req_descriptor_, &role_show_change_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_name_ack_descriptor_, &role_show_change_name_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_position_req_descriptor_, &role_show_change_position_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_position_ack_descriptor_, &role_show_change_position_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_signature_req_descriptor_, &role_show_change_signature_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_signature_ack_descriptor_, &role_show_change_signature_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_age_req_descriptor_, &role_show_change_age_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_age_ack_descriptor_, &role_show_change_age_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_starsign_req_descriptor_, &role_show_change_starsign_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_starsign_ack_descriptor_, &role_show_change_starsign_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_birthday_req_descriptor_, &role_show_change_birthday_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_birthday_ack_descriptor_, &role_show_change_birthday_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_labels_req_descriptor_, &role_show_change_labels_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_change_labels_ack_descriptor_, &role_show_change_labels_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_get_emotion_req_descriptor_, &role_show_get_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_get_emotion_ack_descriptor_, &role_show_get_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_write_emotion_req_descriptor_, &role_show_write_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_write_emotion_ack_descriptor_, &role_show_write_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_like_emotion_req_descriptor_, &role_show_like_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_like_emotion_ack_descriptor_, &role_show_like_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_comment_emotion_req_descriptor_, &role_show_comment_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_comment_emotion_ack_descriptor_, &role_show_comment_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_remove_emotion_req_descriptor_, &role_show_remove_emotion_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_remove_emotion_ack_descriptor_, &role_show_remove_emotion_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_remove_comment_req_descriptor_, &role_show_remove_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_remove_comment_ack_descriptor_, &role_show_remove_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_set_hero_info_descriptor_, &role_show_set_hero_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_set_hero_req_descriptor_, &role_show_set_hero_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_set_hero_ack_descriptor_, &role_show_set_hero_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_set_border_req_descriptor_, &role_show_set_border_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_set_border_ack_descriptor_, &role_show_set_border_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_comment_req_descriptor_, &role_show_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_comment_ack_descriptor_, &role_show_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_delete_comment_req_descriptor_, &role_show_delete_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_delete_comment_ack_descriptor_, &role_show_delete_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_get_comment_req_descriptor_, &role_show_get_comment_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_show_get_comment_ack_descriptor_, &role_show_get_comment_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discover_info_ntf_descriptor_, &discover_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discover_show_boss_ntf_descriptor_, &discover_show_boss_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_discover_req_descriptor_, &enter_discover_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_discover_ack_descriptor_, &enter_discover_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_discover_req_descriptor_, &exit_discover_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_discover_ack_descriptor_, &exit_discover_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_mopping_req_descriptor_, &discovery_mopping_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_mopping_ack_rewards_descriptor_, &discovery_mopping_ack_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_mopping_ack_moppping_descriptor_, &discovery_mopping_ack_moppping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_mopping_ack_descriptor_, &discovery_mopping_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_buy_times_req_descriptor_, &discovery_buy_times_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_buy_times_ack_descriptor_, &discovery_buy_times_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_get_section_star_req_descriptor_, &discovery_get_section_star_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_get_section_star_ack_rewards_descriptor_, &discovery_get_section_star_ack_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    discovery_get_section_star_ack_descriptor_, &discovery_get_section_star_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_base_info_ntf_descriptor_, &royal_base_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_all_info_req_descriptor_, &royal_all_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_all_info_ack_descriptor_, &royal_all_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_refresh_req_descriptor_, &royal_refresh_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_refresh_ack_descriptor_, &royal_refresh_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_visit_req_descriptor_, &royal_visit_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_visit_ack_descriptor_, &royal_visit_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_reward_ntf_descriptor_, &royal_reward_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_royals_ntf_descriptor_, &all_royals_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_pro_update_ntf_descriptor_, &royal_pro_update_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_task_reward_draw_ntf_descriptor_, &royal_task_reward_draw_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_update_royal_task_ntf_descriptor_, &game_update_royal_task_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_intimacy_reward_req_descriptor_, &game_royal_intimacy_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_intimacy_reward_ack_descriptor_, &game_royal_intimacy_reward_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_draw_reward_req_descriptor_, &game_royal_draw_reward_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_draw_reward_ack_descriptor_, &game_royal_draw_reward_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_all_data_req_descriptor_, &game_royal_all_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_all_data_ack_descriptor_, &game_royal_all_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_refresh_data_req_descriptor_, &game_royal_refresh_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_refresh_data_ack_descriptor_, &game_royal_refresh_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_qingan_req_descriptor_, &game_royal_qingan_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_qingan_ack_descriptor_, &game_royal_qingan_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_unlock_req_descriptor_, &game_royal_unlock_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_unlock_ack_descriptor_, &game_royal_unlock_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_branch_task_fin_req_descriptor_, &game_branch_task_fin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_branch_task_fin_ack_descriptor_, &game_branch_task_fin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_chat_req_descriptor_, &game_royal_chat_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_chat_ack_descriptor_, &game_royal_chat_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_get_gifts_req_descriptor_, &game_royal_get_gifts_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_get_gifts_ack_descriptor_, &game_royal_get_gifts_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_give_gift_req_descriptor_, &game_royal_give_gift_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_give_gift_ack_descriptor_, &game_royal_give_gift_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_enter_scene_req_descriptor_, &game_royal_enter_scene_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_enter_scene_ack_descriptor_, &game_royal_enter_scene_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_event_fin_req_descriptor_, &game_royal_event_fin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    game_royal_event_fin_ack_descriptor_, &game_royal_event_fin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_data_req_descriptor_, &get_offical_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_data_ack_descriptor_, &get_offical_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_data_ntf_descriptor_, &offical_data_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_chest_ntf_descriptor_, &update_chest_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_role_chest_req_descriptor_, &get_role_chest_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_role_chest_ack_descriptor_, &get_role_chest_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_team_req_descriptor_, &create_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    create_team_ack_descriptor_, &create_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_team_req_descriptor_, &enter_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    enter_team_ack_descriptor_, &enter_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_team_req_descriptor_, &exit_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_team_ack_descriptor_, &exit_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_team_ntf_descriptor_, &update_team_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ready_team_req_descriptor_, &ready_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ready_team_ack_descriptor_, &ready_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_team_req_descriptor_, &update_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    update_team_ack_descriptor_, &update_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_teams_req_descriptor_, &get_teams_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_teams_ack_descriptor_, &get_teams_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_roles_enter_team_req_descriptor_, &invite_roles_enter_team_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_roles_enter_team_ack_descriptor_, &invite_roles_enter_team_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    invite_enter_team_ntf_descriptor_, &invite_enter_team_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_rank_req_descriptor_, &get_offical_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_rank_ack_descriptor_, &get_offical_rank_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_rank_info_req_descriptor_, &get_offical_rank_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_rank_info_ack_descriptor_, &get_offical_rank_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_formation_req_descriptor_, &get_offical_formation_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_offical_formation_ack_descriptor_, &get_offical_formation_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    challenge_offical_rank_req_descriptor_, &challenge_offical_rank_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    challenge_offical_rank_ack_descriptor_, &challenge_offical_rank_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_apply_battle_result_req_descriptor_, &offical_apply_battle_result_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    offical_apply_battle_result_ack_descriptor_, &offical_apply_battle_result_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_plot_upload_req_descriptor_, &role_plot_upload_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_plot_upload_ack_descriptor_, &role_plot_upload_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_plot_get_req_descriptor_, &role_plot_get_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_plot_get_ack_descriptor_, &role_plot_get_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_end_req_descriptor_, &plot_end_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_end_ack_descriptor_, &plot_end_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_chapter_end_req_descriptor_, &plot_chapter_end_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_chapter_end_ack_descriptor_, &plot_chapter_end_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_choose_branch_req_descriptor_, &plot_choose_branch_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_choose_branch_ack_descriptor_, &plot_choose_branch_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_trigger_action_req_descriptor_, &plot_trigger_action_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_trigger_action_ack_descriptor_, &plot_trigger_action_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_event_info_descriptor_, &all_event_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_event_msg_info_descriptor_, &client_event_msg_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_get_all_req_descriptor_, &event_msg_get_all_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_get_all_ack_descriptor_, &event_msg_get_all_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_read_req_descriptor_, &event_msg_read_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_read_ack_descriptor_, &event_msg_read_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_del_req_descriptor_, &event_msg_del_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_del_ack_descriptor_, &event_msg_del_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_nty_descriptor_, &event_msg_nty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_get_by_id_req_descriptor_, &event_msg_get_by_id_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    event_msg_get_by_id_ack_descriptor_, &event_msg_get_by_id_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_rank_data_req_descriptor_, &get_rank_data_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_rank_data_ack_descriptor_, &get_rank_data_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_uint_achievement_descriptor_, &role_uint_achievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_achievements_ntf_type_list_descriptor_, &role_achievements_ntf_type_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_achievements_ntf_descriptor_, &role_achievements_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_achievement_get_rewards_req_descriptor_, &role_achievement_get_rewards_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_achievement_get_rewards_ack_descriptor_, &role_achievement_get_rewards_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_achievement_point_rewards_req_descriptor_, &role_achievement_point_rewards_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_achievement_point_rewards_ack_descriptor_, &role_achievement_point_rewards_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_bag_nty_descriptor_, &flower_bag_nty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_bag_all_req_descriptor_, &flower_bag_all_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_bag_all_ack_descriptor_, &flower_bag_all_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_bag_all_nty_descriptor_, &flower_bag_all_nty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_send_req_descriptor_, &flower_send_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_send_ack_descriptor_, &flower_send_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    flower_receive_nty_descriptor_, &flower_receive_nty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_info_descriptor_, &role_draw_card_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_reward_item_descriptor_, &role_draw_card_reward_item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_rewards_descriptor_, &role_draw_card_rewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_info_req_descriptor_, &role_draw_card_info_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_info_ack_descriptor_, &role_draw_card_info_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_req_descriptor_, &role_draw_card_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_ack_descriptor_, &role_draw_card_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_ssr_req_descriptor_, &role_draw_card_ssr_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_ssr_ack_one_descriptor_, &role_draw_card_ssr_ack_one::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_draw_card_ssr_ack_descriptor_, &role_draw_card_ssr_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_talent_activate_req_descriptor_, &role_talent_activate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_talent_activate_ack_descriptor_, &role_talent_activate_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_role_talents_activate_req_descriptor_, &all_role_talents_activate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_role_talents_activate_ack_descriptor_, &all_role_talents_activate_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    switch_role_skill_req_descriptor_, &switch_role_skill_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    switch_role_skill_ack_descriptor_, &switch_role_skill_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_use_req_descriptor_, &talisman_use_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_use_ack_descriptor_, &talisman_use_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_un_use_req_descriptor_, &talisman_un_use_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_un_use_ack_descriptor_, &talisman_un_use_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_lv_up_req_descriptor_, &talisman_lv_up_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_lv_up_ack_descriptor_, &talisman_lv_up_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_break_req_descriptor_, &talisman_break_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_break_ack_descriptor_, &talisman_break_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talisman_change_ntf_descriptor_, &talisman_change_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    red_pt_req_descriptor_, &red_pt_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    red_pt_ack_descriptor_, &red_pt_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    red_pt_ntf_descriptor_, &red_pt_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_wearing_fashions_req_descriptor_, &get_wearing_fashions_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_wearing_fashions_ack_descriptor_, &get_wearing_fashions_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_all_fashions_req_descriptor_, &get_all_fashions_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_all_fashions_ack_descriptor_, &get_all_fashions_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wear_fashions_req_descriptor_, &wear_fashions_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wear_fashions_ack_descriptor_, &wear_fashions_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_other_role_fashion_cs_req_descriptor_, &get_other_role_fashion_cs_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    get_other_role_fashion_cs_ack_descriptor_, &get_other_role_fashion_cs_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_config_version_req_descriptor_, &verify_config_version_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    verify_config_version_ack_descriptor_, &verify_config_version_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    debug_hero_attr_ntf_descriptor_, &debug_hero_attr_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    waiting_in_line_ntf_descriptor_, &waiting_in_line_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    finish_in_line_ntf_descriptor_, &finish_in_line_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_waiting_in_line_req_descriptor_, &exit_waiting_in_line_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    exit_waiting_in_line_ack_descriptor_, &exit_waiting_in_line_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    user_event_track_ntf_descriptor_, &user_event_track_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_guide_info_descriptor_, &role_guide_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_guide_ntf_descriptor_, &role_guide_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_guide_req_descriptor_, &role_guide_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_guide_ack_descriptor_, &role_guide_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    onekey_skip_guide_req_descriptor_, &onekey_skip_guide_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    onekey_skip_guide_ack_descriptor_, &onekey_skip_guide_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_little_game_set_req_descriptor_, &plot_little_game_set_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_little_game_set_ack_descriptor_, &plot_little_game_set_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_little_game_get_req_descriptor_, &plot_little_game_get_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    plot_little_game_get_ack_descriptor_, &plot_little_game_get_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_get_req_descriptor_, &pet_get_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_get_ack_descriptor_, &pet_get_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_change_name_req_descriptor_, &pet_change_name_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_change_name_ack_descriptor_, &pet_change_name_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_do_action_req_descriptor_, &pet_do_action_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_do_action_ack_descriptor_, &pet_do_action_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_send_out_req_descriptor_, &pet_send_out_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_send_out_ack_descriptor_, &pet_send_out_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_get_out_award_req_descriptor_, &pet_get_out_award_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_get_out_award_ack_descriptor_, &pet_get_out_award_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_feed_food_req_descriptor_, &pet_feed_food_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_feed_food_ack_descriptor_, &pet_feed_food_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_set_show_pet_req_descriptor_, &pet_set_show_pet_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_set_show_pet_ack_descriptor_, &pet_set_show_pet_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_out_back_req_descriptor_, &pet_out_back_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pet_out_back_ack_descriptor_, &pet_out_back_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5frole_2eproto() {
  delete account_check_in_req::default_instance_;
  delete account_check_in_req_reflection_;
  delete account_check_in_ack::default_instance_;
  delete account_check_in_ack_reflection_;
  delete sys_packet_seq_id_ntf::default_instance_;
  delete sys_packet_seq_id_ntf_reflection_;
  delete sys_packet_seq_id_req::default_instance_;
  delete sys_packet_seq_id_req_reflection_;
  delete sys_packet_seq_id_ack::default_instance_;
  delete sys_packet_seq_id_ack_reflection_;
  delete uplink_packet_seq_error_ntf::default_instance_;
  delete uplink_packet_seq_error_ntf_reflection_;
  delete client_secret_key_req::default_instance_;
  delete client_secret_key_req_reflection_;
  delete client_secret_key_ack::default_instance_;
  delete client_secret_key_ack_reflection_;
  delete client_secret_start_req::default_instance_;
  delete client_secret_start_req_reflection_;
  delete client_secret_start_ack::default_instance_;
  delete client_secret_start_ack_reflection_;
  delete account_role_data_ack::default_instance_;
  delete account_role_data_ack_reflection_;
  delete create_role_of_game::default_instance_;
  delete create_role_of_game_reflection_;
  delete create_role_of_game_ack::default_instance_;
  delete create_role_of_game_ack_reflection_;
  delete switch_scene_req::default_instance_;
  delete switch_scene_req_reflection_;
  delete enter_game_req::default_instance_;
  delete enter_game_req_reflection_;
  delete enter_game_ack::default_instance_;
  delete enter_game_ack_reflection_;
  delete system_unlock_req::default_instance_;
  delete system_unlock_req_reflection_;
  delete system_unlock_ack::default_instance_;
  delete system_unlock_ack_reflection_;
  delete system_unlock_ntf::default_instance_;
  delete system_unlock_ntf_reflection_;
  delete role_info_ntf::default_instance_;
  delete role_info_ntf_reflection_;
  delete item_info::default_instance_;
  delete item_info_reflection_;
  delete update_role_info_ntf::default_instance_;
  delete update_role_info_ntf_reflection_;
  delete role_common_base_ntf::default_instance_;
  delete role_common_base_ntf_reflection_;
  delete soul_update_ntf::default_instance_;
  delete soul_update_ntf_reflection_;
  delete soul_raise_req::default_instance_;
  delete soul_raise_req_reflection_;
  delete soul_raise_ack::default_instance_;
  delete soul_raise_ack_reflection_;
  delete soul_bind_req::default_instance_;
  delete soul_bind_req_reflection_;
  delete soul_bind_ack::default_instance_;
  delete soul_bind_ack_reflection_;
  delete soul_unbind_req::default_instance_;
  delete soul_unbind_req_reflection_;
  delete soul_unbind_ack::default_instance_;
  delete soul_unbind_ack_reflection_;
  delete soul_lock_req::default_instance_;
  delete soul_lock_req_reflection_;
  delete soul_lock_ack::default_instance_;
  delete soul_lock_ack_reflection_;
  delete soul_unlock_req::default_instance_;
  delete soul_unlock_req_reflection_;
  delete soul_unlock_ack::default_instance_;
  delete soul_unlock_ack_reflection_;
  delete soul_sell_req::default_instance_;
  delete soul_sell_req_reflection_;
  delete soul_sell_ack::default_instance_;
  delete soul_sell_ack_reflection_;
  delete item_packet_req::default_instance_;
  delete item_packet_req_reflection_;
  delete item_packet_ack::default_instance_;
  delete item_packet_ack_reflection_;
  delete item_use_req::default_instance_;
  delete item_use_req_reflection_;
  delete item_use_ack::default_instance_;
  delete item_use_ack_reflection_;
  delete item_sold_req::default_instance_;
  delete item_sold_req_reflection_;
  delete item_sold_ack::default_instance_;
  delete item_sold_ack_reflection_;
  delete bag_expand_req::default_instance_;
  delete bag_expand_req_reflection_;
  delete bag_expand_ack::default_instance_;
  delete bag_expand_ack_reflection_;
  delete bag_capacity_not_enough_ntf::default_instance_;
  delete bag_capacity_not_enough_ntf_reflection_;
  delete hero_list_data_ntf::default_instance_;
  delete hero_list_data_ntf_reflection_;
  delete add_hero_ntf::default_instance_;
  delete add_hero_ntf_reflection_;
  delete remove_hero_ntf::default_instance_;
  delete remove_hero_ntf_reflection_;
  delete hero_info_change_ntf::default_instance_;
  delete hero_info_change_ntf_reflection_;
  delete hero_upgrade_req::default_instance_;
  delete hero_upgrade_req_reflection_;
  delete hero_upgrade_ack::default_instance_;
  delete hero_upgrade_ack_reflection_;
  delete hero_upstar_req::default_instance_;
  delete hero_upstar_req_reflection_;
  delete hero_upstar_ack::default_instance_;
  delete hero_upstar_ack_reflection_;
  delete hero_awaken_req::default_instance_;
  delete hero_awaken_req_reflection_;
  delete hero_awaken_ack::default_instance_;
  delete hero_awaken_ack_reflection_;
  delete hero_lock_req::default_instance_;
  delete hero_lock_req_reflection_;
  delete hero_lock_ack::default_instance_;
  delete hero_lock_ack_reflection_;
  delete hero_compose_req::default_instance_;
  delete hero_compose_req_reflection_;
  delete hero_compose_ack::default_instance_;
  delete hero_compose_ack_reflection_;
  delete hero_skin_active_req::default_instance_;
  delete hero_skin_active_req_reflection_;
  delete hero_skin_active_ack::default_instance_;
  delete hero_skin_active_ack_reflection_;
  delete hero_change_name_req::default_instance_;
  delete hero_change_name_req_reflection_;
  delete hero_change_name_ack::default_instance_;
  delete hero_change_name_ack_reflection_;
  delete hero_level_up_req::default_instance_;
  delete hero_level_up_req_reflection_;
  delete hero_level_up_ack::default_instance_;
  delete hero_level_up_ack_reflection_;
  delete hero_quality_up_req::default_instance_;
  delete hero_quality_up_req_reflection_;
  delete hero_quality_up_ack::default_instance_;
  delete hero_quality_up_ack_reflection_;
  delete item_combine_req::default_instance_;
  delete item_combine_req_reflection_;
  delete item_combine_ack::default_instance_;
  delete item_combine_ack_reflection_;
  delete hero_star_up_req::default_instance_;
  delete hero_star_up_req_reflection_;
  delete hero_star_up_ack::default_instance_;
  delete hero_star_up_ack_reflection_;
  delete hero_skill_up_req::default_instance_;
  delete hero_skill_up_req_reflection_;
  delete hero_skill_up_ack::default_instance_;
  delete hero_skill_up_ack_reflection_;
  delete hero_equip_req::default_instance_;
  delete hero_equip_req_reflection_;
  delete hero_equip_ack::default_instance_;
  delete hero_equip_ack_reflection_;
  delete hero_unequip_req::default_instance_;
  delete hero_unequip_req_reflection_;
  delete hero_unequip_ack::default_instance_;
  delete hero_unequip_ack_reflection_;
  delete hero_equip_level_up_req::default_instance_;
  delete hero_equip_level_up_req_reflection_;
  delete hero_equip_level_up_ack::default_instance_;
  delete hero_equip_level_up_ack_reflection_;
  delete hero_equip_onekey_level_up_req::default_instance_;
  delete hero_equip_onekey_level_up_req_reflection_;
  delete hero_equip_onekey_level_up_ack::default_instance_;
  delete hero_equip_onekey_level_up_ack_reflection_;
  delete hero_equip_level_info::default_instance_;
  delete hero_equip_level_info_reflection_;
  delete hero_equip_all_level_up_req::default_instance_;
  delete hero_equip_all_level_up_req_reflection_;
  delete hero_equip_all_level_up_ack::default_instance_;
  delete hero_equip_all_level_up_ack_reflection_;
  delete hero_equip_onekey_req::default_instance_;
  delete hero_equip_onekey_req_reflection_;
  delete hero_equip_onekey_ack::default_instance_;
  delete hero_equip_onekey_ack_reflection_;
  delete hero_unequip_onekey_req::default_instance_;
  delete hero_unequip_onekey_req_reflection_;
  delete hero_unequip_onekey_ack::default_instance_;
  delete hero_unequip_onekey_ack_reflection_;
  delete gm_operation_req::default_instance_;
  delete gm_operation_req_reflection_;
  delete gm_operation_ack::default_instance_;
  delete gm_operation_ack_reflection_;
  delete gm_operation_ack::_default_info_;
  delete leave_game_req::default_instance_;
  delete leave_game_req_reflection_;
  delete kick_game_ntf::default_instance_;
  delete kick_game_ntf_reflection_;
  delete beat_heart_ntf::default_instance_;
  delete beat_heart_ntf_reflection_;
  delete sync_time_ntf::default_instance_;
  delete sync_time_ntf_reflection_;
  delete client_heart_beat_req::default_instance_;
  delete client_heart_beat_req_reflection_;
  delete client_heart_beat_ack::default_instance_;
  delete client_heart_beat_ack_reflection_;
  delete role_player_info_ntf::default_instance_;
  delete role_player_info_ntf_reflection_;
  delete role_player_info_update_ntf::default_instance_;
  delete role_player_info_update_ntf_reflection_;
  delete role_fight_score_ntf::default_instance_;
  delete role_fight_score_ntf_reflection_;
  delete role_player_change_req::default_instance_;
  delete role_player_change_req_reflection_;
  delete role_player_change_ack::default_instance_;
  delete role_player_change_ack_reflection_;
  delete role_player_active_skin_req::default_instance_;
  delete role_player_active_skin_req_reflection_;
  delete role_player_active_skin_ack::default_instance_;
  delete role_player_active_skin_ack_reflection_;
  delete role_player_buy_skin_req::default_instance_;
  delete role_player_buy_skin_req_reflection_;
  delete role_player_buy_skin_ack::default_instance_;
  delete role_player_buy_skin_ack_reflection_;
  delete role_player_wear_skin_req::default_instance_;
  delete role_player_wear_skin_req_reflection_;
  delete role_player_wear_skin_ack::default_instance_;
  delete role_player_wear_skin_ack_reflection_;
  delete role_player_skillup_ntf::default_instance_;
  delete role_player_skillup_ntf_reflection_;
  delete role_buy_req::default_instance_;
  delete role_buy_req_reflection_;
  delete role_buy_ack::default_instance_;
  delete role_buy_ack_reflection_;
  delete role_show_base_info_req::default_instance_;
  delete role_show_base_info_req_reflection_;
  delete role_show_base_info_ack::default_instance_;
  delete role_show_base_info_ack_reflection_;
  delete role_show_get_like_req::default_instance_;
  delete role_show_get_like_req_reflection_;
  delete role_show_get_like_ack::default_instance_;
  delete role_show_get_like_ack_reflection_;
  delete role_show_player_base_req::default_instance_;
  delete role_show_player_base_req_reflection_;
  delete role_show_player_base_ack::default_instance_;
  delete role_show_player_base_ack_reflection_;
  delete role_show_like_req::default_instance_;
  delete role_show_like_req_reflection_;
  delete role_show_like_ack::default_instance_;
  delete role_show_like_ack_reflection_;
  delete role_show_change_name_req::default_instance_;
  delete role_show_change_name_req_reflection_;
  delete role_show_change_name_ack::default_instance_;
  delete role_show_change_name_ack_reflection_;
  delete role_show_change_position_req::default_instance_;
  delete role_show_change_position_req_reflection_;
  delete role_show_change_position_ack::default_instance_;
  delete role_show_change_position_ack_reflection_;
  delete role_show_change_signature_req::default_instance_;
  delete role_show_change_signature_req_reflection_;
  delete role_show_change_signature_ack::default_instance_;
  delete role_show_change_signature_ack_reflection_;
  delete role_show_change_age_req::default_instance_;
  delete role_show_change_age_req_reflection_;
  delete role_show_change_age_ack::default_instance_;
  delete role_show_change_age_ack_reflection_;
  delete role_show_change_starsign_req::default_instance_;
  delete role_show_change_starsign_req_reflection_;
  delete role_show_change_starsign_ack::default_instance_;
  delete role_show_change_starsign_ack_reflection_;
  delete role_show_change_birthday_req::default_instance_;
  delete role_show_change_birthday_req_reflection_;
  delete role_show_change_birthday_ack::default_instance_;
  delete role_show_change_birthday_ack_reflection_;
  delete role_show_change_labels_req::default_instance_;
  delete role_show_change_labels_req_reflection_;
  delete role_show_change_labels_ack::default_instance_;
  delete role_show_change_labels_ack_reflection_;
  delete role_show_get_emotion_req::default_instance_;
  delete role_show_get_emotion_req_reflection_;
  delete role_show_get_emotion_ack::default_instance_;
  delete role_show_get_emotion_ack_reflection_;
  delete role_show_write_emotion_req::default_instance_;
  delete role_show_write_emotion_req_reflection_;
  delete role_show_write_emotion_ack::default_instance_;
  delete role_show_write_emotion_ack_reflection_;
  delete role_show_like_emotion_req::default_instance_;
  delete role_show_like_emotion_req_reflection_;
  delete role_show_like_emotion_ack::default_instance_;
  delete role_show_like_emotion_ack_reflection_;
  delete role_show_comment_emotion_req::default_instance_;
  delete role_show_comment_emotion_req_reflection_;
  delete role_show_comment_emotion_ack::default_instance_;
  delete role_show_comment_emotion_ack_reflection_;
  delete role_show_remove_emotion_req::default_instance_;
  delete role_show_remove_emotion_req_reflection_;
  delete role_show_remove_emotion_ack::default_instance_;
  delete role_show_remove_emotion_ack_reflection_;
  delete role_show_remove_comment_req::default_instance_;
  delete role_show_remove_comment_req_reflection_;
  delete role_show_remove_comment_ack::default_instance_;
  delete role_show_remove_comment_ack_reflection_;
  delete role_show_set_hero_info::default_instance_;
  delete role_show_set_hero_info_reflection_;
  delete role_show_set_hero_req::default_instance_;
  delete role_show_set_hero_req_reflection_;
  delete role_show_set_hero_ack::default_instance_;
  delete role_show_set_hero_ack_reflection_;
  delete role_show_set_border_req::default_instance_;
  delete role_show_set_border_req_reflection_;
  delete role_show_set_border_ack::default_instance_;
  delete role_show_set_border_ack_reflection_;
  delete role_show_comment_req::default_instance_;
  delete role_show_comment_req_reflection_;
  delete role_show_comment_ack::default_instance_;
  delete role_show_comment_ack_reflection_;
  delete role_show_delete_comment_req::default_instance_;
  delete role_show_delete_comment_req_reflection_;
  delete role_show_delete_comment_ack::default_instance_;
  delete role_show_delete_comment_ack_reflection_;
  delete role_show_get_comment_req::default_instance_;
  delete role_show_get_comment_req_reflection_;
  delete role_show_get_comment_ack::default_instance_;
  delete role_show_get_comment_ack_reflection_;
  delete discover_info_ntf::default_instance_;
  delete discover_info_ntf_reflection_;
  delete discover_show_boss_ntf::default_instance_;
  delete discover_show_boss_ntf_reflection_;
  delete enter_discover_req::default_instance_;
  delete enter_discover_req_reflection_;
  delete enter_discover_ack::default_instance_;
  delete enter_discover_ack_reflection_;
  delete exit_discover_req::default_instance_;
  delete exit_discover_req_reflection_;
  delete exit_discover_ack::default_instance_;
  delete exit_discover_ack_reflection_;
  delete discovery_mopping_req::default_instance_;
  delete discovery_mopping_req_reflection_;
  delete discovery_mopping_ack_rewards::default_instance_;
  delete discovery_mopping_ack_rewards_reflection_;
  delete discovery_mopping_ack_moppping::default_instance_;
  delete discovery_mopping_ack_moppping_reflection_;
  delete discovery_mopping_ack::default_instance_;
  delete discovery_mopping_ack_reflection_;
  delete discovery_buy_times_req::default_instance_;
  delete discovery_buy_times_req_reflection_;
  delete discovery_buy_times_ack::default_instance_;
  delete discovery_buy_times_ack_reflection_;
  delete discovery_get_section_star_req::default_instance_;
  delete discovery_get_section_star_req_reflection_;
  delete discovery_get_section_star_ack_rewards::default_instance_;
  delete discovery_get_section_star_ack_rewards_reflection_;
  delete discovery_get_section_star_ack::default_instance_;
  delete discovery_get_section_star_ack_reflection_;
  delete royal_base_info_ntf::default_instance_;
  delete royal_base_info_ntf_reflection_;
  delete royal_all_info_req::default_instance_;
  delete royal_all_info_req_reflection_;
  delete royal_all_info_ack::default_instance_;
  delete royal_all_info_ack_reflection_;
  delete royal_refresh_req::default_instance_;
  delete royal_refresh_req_reflection_;
  delete royal_refresh_ack::default_instance_;
  delete royal_refresh_ack_reflection_;
  delete royal_visit_req::default_instance_;
  delete royal_visit_req_reflection_;
  delete royal_visit_ack::default_instance_;
  delete royal_visit_ack_reflection_;
  delete royal_reward_ntf::default_instance_;
  delete royal_reward_ntf_reflection_;
  delete all_royals_ntf::default_instance_;
  delete all_royals_ntf_reflection_;
  delete royal_pro_update_ntf::default_instance_;
  delete royal_pro_update_ntf_reflection_;
  delete royal_task_reward_draw_ntf::default_instance_;
  delete royal_task_reward_draw_ntf_reflection_;
  delete game_update_royal_task_ntf::default_instance_;
  delete game_update_royal_task_ntf_reflection_;
  delete game_royal_intimacy_reward_req::default_instance_;
  delete game_royal_intimacy_reward_req_reflection_;
  delete game_royal_intimacy_reward_ack::default_instance_;
  delete game_royal_intimacy_reward_ack_reflection_;
  delete game_royal_draw_reward_req::default_instance_;
  delete game_royal_draw_reward_req_reflection_;
  delete game_royal_draw_reward_ack::default_instance_;
  delete game_royal_draw_reward_ack_reflection_;
  delete game_royal_all_data_req::default_instance_;
  delete game_royal_all_data_req_reflection_;
  delete game_royal_all_data_ack::default_instance_;
  delete game_royal_all_data_ack_reflection_;
  delete game_royal_refresh_data_req::default_instance_;
  delete game_royal_refresh_data_req_reflection_;
  delete game_royal_refresh_data_ack::default_instance_;
  delete game_royal_refresh_data_ack_reflection_;
  delete game_royal_qingan_req::default_instance_;
  delete game_royal_qingan_req_reflection_;
  delete game_royal_qingan_ack::default_instance_;
  delete game_royal_qingan_ack_reflection_;
  delete game_royal_unlock_req::default_instance_;
  delete game_royal_unlock_req_reflection_;
  delete game_royal_unlock_ack::default_instance_;
  delete game_royal_unlock_ack_reflection_;
  delete game_branch_task_fin_req::default_instance_;
  delete game_branch_task_fin_req_reflection_;
  delete game_branch_task_fin_ack::default_instance_;
  delete game_branch_task_fin_ack_reflection_;
  delete game_royal_chat_req::default_instance_;
  delete game_royal_chat_req_reflection_;
  delete game_royal_chat_ack::default_instance_;
  delete game_royal_chat_ack_reflection_;
  delete game_royal_get_gifts_req::default_instance_;
  delete game_royal_get_gifts_req_reflection_;
  delete game_royal_get_gifts_ack::default_instance_;
  delete game_royal_get_gifts_ack_reflection_;
  delete game_royal_give_gift_req::default_instance_;
  delete game_royal_give_gift_req_reflection_;
  delete game_royal_give_gift_ack::default_instance_;
  delete game_royal_give_gift_ack_reflection_;
  delete game_royal_enter_scene_req::default_instance_;
  delete game_royal_enter_scene_req_reflection_;
  delete game_royal_enter_scene_ack::default_instance_;
  delete game_royal_enter_scene_ack_reflection_;
  delete game_royal_event_fin_req::default_instance_;
  delete game_royal_event_fin_req_reflection_;
  delete game_royal_event_fin_ack::default_instance_;
  delete game_royal_event_fin_ack_reflection_;
  delete get_offical_data_req::default_instance_;
  delete get_offical_data_req_reflection_;
  delete get_offical_data_ack::default_instance_;
  delete get_offical_data_ack_reflection_;
  delete offical_data_ntf::default_instance_;
  delete offical_data_ntf_reflection_;
  delete update_chest_ntf::default_instance_;
  delete update_chest_ntf_reflection_;
  delete get_role_chest_req::default_instance_;
  delete get_role_chest_req_reflection_;
  delete get_role_chest_ack::default_instance_;
  delete get_role_chest_ack_reflection_;
  delete create_team_req::default_instance_;
  delete create_team_req_reflection_;
  delete create_team_ack::default_instance_;
  delete create_team_ack_reflection_;
  delete enter_team_req::default_instance_;
  delete enter_team_req_reflection_;
  delete enter_team_ack::default_instance_;
  delete enter_team_ack_reflection_;
  delete exit_team_req::default_instance_;
  delete exit_team_req_reflection_;
  delete exit_team_ack::default_instance_;
  delete exit_team_ack_reflection_;
  delete update_team_ntf::default_instance_;
  delete update_team_ntf_reflection_;
  delete ready_team_req::default_instance_;
  delete ready_team_req_reflection_;
  delete ready_team_ack::default_instance_;
  delete ready_team_ack_reflection_;
  delete update_team_req::default_instance_;
  delete update_team_req_reflection_;
  delete update_team_ack::default_instance_;
  delete update_team_ack_reflection_;
  delete get_teams_req::default_instance_;
  delete get_teams_req_reflection_;
  delete get_teams_ack::default_instance_;
  delete get_teams_ack_reflection_;
  delete invite_roles_enter_team_req::default_instance_;
  delete invite_roles_enter_team_req_reflection_;
  delete invite_roles_enter_team_ack::default_instance_;
  delete invite_roles_enter_team_ack_reflection_;
  delete invite_enter_team_ntf::default_instance_;
  delete invite_enter_team_ntf_reflection_;
  delete get_offical_rank_req::default_instance_;
  delete get_offical_rank_req_reflection_;
  delete get_offical_rank_ack::default_instance_;
  delete get_offical_rank_ack_reflection_;
  delete get_offical_rank_info_req::default_instance_;
  delete get_offical_rank_info_req_reflection_;
  delete get_offical_rank_info_ack::default_instance_;
  delete get_offical_rank_info_ack_reflection_;
  delete get_offical_formation_req::default_instance_;
  delete get_offical_formation_req_reflection_;
  delete get_offical_formation_ack::default_instance_;
  delete get_offical_formation_ack_reflection_;
  delete challenge_offical_rank_req::default_instance_;
  delete challenge_offical_rank_req_reflection_;
  delete challenge_offical_rank_ack::default_instance_;
  delete challenge_offical_rank_ack_reflection_;
  delete offical_apply_battle_result_req::default_instance_;
  delete offical_apply_battle_result_req_reflection_;
  delete offical_apply_battle_result_ack::default_instance_;
  delete offical_apply_battle_result_ack_reflection_;
  delete role_plot_upload_req::default_instance_;
  delete role_plot_upload_req_reflection_;
  delete role_plot_upload_ack::default_instance_;
  delete role_plot_upload_ack_reflection_;
  delete role_plot_get_req::default_instance_;
  delete role_plot_get_req_reflection_;
  delete role_plot_get_ack::default_instance_;
  delete role_plot_get_ack_reflection_;
  delete plot_end_req::default_instance_;
  delete plot_end_req_reflection_;
  delete plot_end_ack::default_instance_;
  delete plot_end_ack_reflection_;
  delete plot_chapter_end_req::default_instance_;
  delete plot_chapter_end_req_reflection_;
  delete plot_chapter_end_ack::default_instance_;
  delete plot_chapter_end_ack_reflection_;
  delete plot_choose_branch_req::default_instance_;
  delete plot_choose_branch_req_reflection_;
  delete plot_choose_branch_ack::default_instance_;
  delete plot_choose_branch_ack_reflection_;
  delete plot_trigger_action_req::default_instance_;
  delete plot_trigger_action_req_reflection_;
  delete plot_trigger_action_ack::default_instance_;
  delete plot_trigger_action_ack_reflection_;
  delete all_event_info::default_instance_;
  delete all_event_info_reflection_;
  delete client_event_msg_info::default_instance_;
  delete client_event_msg_info_reflection_;
  delete event_msg_get_all_req::default_instance_;
  delete event_msg_get_all_req_reflection_;
  delete event_msg_get_all_ack::default_instance_;
  delete event_msg_get_all_ack_reflection_;
  delete event_msg_read_req::default_instance_;
  delete event_msg_read_req_reflection_;
  delete event_msg_read_ack::default_instance_;
  delete event_msg_read_ack_reflection_;
  delete event_msg_del_req::default_instance_;
  delete event_msg_del_req_reflection_;
  delete event_msg_del_ack::default_instance_;
  delete event_msg_del_ack_reflection_;
  delete event_msg_nty::default_instance_;
  delete event_msg_nty_reflection_;
  delete event_msg_get_by_id_req::default_instance_;
  delete event_msg_get_by_id_req_reflection_;
  delete event_msg_get_by_id_ack::default_instance_;
  delete event_msg_get_by_id_ack_reflection_;
  delete get_rank_data_req::default_instance_;
  delete get_rank_data_req_reflection_;
  delete get_rank_data_ack::default_instance_;
  delete get_rank_data_ack_reflection_;
  delete role_uint_achievement::default_instance_;
  delete role_uint_achievement_reflection_;
  delete role_achievements_ntf_type_list::default_instance_;
  delete role_achievements_ntf_type_list_reflection_;
  delete role_achievements_ntf::default_instance_;
  delete role_achievements_ntf_reflection_;
  delete role_achievement_get_rewards_req::default_instance_;
  delete role_achievement_get_rewards_req_reflection_;
  delete role_achievement_get_rewards_ack::default_instance_;
  delete role_achievement_get_rewards_ack_reflection_;
  delete role_achievement_point_rewards_req::default_instance_;
  delete role_achievement_point_rewards_req_reflection_;
  delete role_achievement_point_rewards_ack::default_instance_;
  delete role_achievement_point_rewards_ack_reflection_;
  delete flower_bag_nty::default_instance_;
  delete flower_bag_nty_reflection_;
  delete flower_bag_all_req::default_instance_;
  delete flower_bag_all_req_reflection_;
  delete flower_bag_all_ack::default_instance_;
  delete flower_bag_all_ack_reflection_;
  delete flower_bag_all_nty::default_instance_;
  delete flower_bag_all_nty_reflection_;
  delete flower_send_req::default_instance_;
  delete flower_send_req_reflection_;
  delete flower_send_ack::default_instance_;
  delete flower_send_ack_reflection_;
  delete flower_receive_nty::default_instance_;
  delete flower_receive_nty_reflection_;
  delete role_draw_card_info::default_instance_;
  delete role_draw_card_info_reflection_;
  delete role_draw_card_reward_item::default_instance_;
  delete role_draw_card_reward_item_reflection_;
  delete role_draw_card_rewards::default_instance_;
  delete role_draw_card_rewards_reflection_;
  delete role_draw_card_info_req::default_instance_;
  delete role_draw_card_info_req_reflection_;
  delete role_draw_card_info_ack::default_instance_;
  delete role_draw_card_info_ack_reflection_;
  delete role_draw_card_req::default_instance_;
  delete role_draw_card_req_reflection_;
  delete role_draw_card_ack::default_instance_;
  delete role_draw_card_ack_reflection_;
  delete role_draw_card_ssr_req::default_instance_;
  delete role_draw_card_ssr_req_reflection_;
  delete role_draw_card_ssr_ack_one::default_instance_;
  delete role_draw_card_ssr_ack_one_reflection_;
  delete role_draw_card_ssr_ack::default_instance_;
  delete role_draw_card_ssr_ack_reflection_;
  delete role_talent_activate_req::default_instance_;
  delete role_talent_activate_req_reflection_;
  delete role_talent_activate_ack::default_instance_;
  delete role_talent_activate_ack_reflection_;
  delete all_role_talents_activate_req::default_instance_;
  delete all_role_talents_activate_req_reflection_;
  delete all_role_talents_activate_ack::default_instance_;
  delete all_role_talents_activate_ack_reflection_;
  delete switch_role_skill_req::default_instance_;
  delete switch_role_skill_req_reflection_;
  delete switch_role_skill_ack::default_instance_;
  delete switch_role_skill_ack_reflection_;
  delete talisman_use_req::default_instance_;
  delete talisman_use_req_reflection_;
  delete talisman_use_ack::default_instance_;
  delete talisman_use_ack_reflection_;
  delete talisman_un_use_req::default_instance_;
  delete talisman_un_use_req_reflection_;
  delete talisman_un_use_ack::default_instance_;
  delete talisman_un_use_ack_reflection_;
  delete talisman_lv_up_req::default_instance_;
  delete talisman_lv_up_req_reflection_;
  delete talisman_lv_up_ack::default_instance_;
  delete talisman_lv_up_ack_reflection_;
  delete talisman_break_req::default_instance_;
  delete talisman_break_req_reflection_;
  delete talisman_break_ack::default_instance_;
  delete talisman_break_ack_reflection_;
  delete talisman_change_ntf::default_instance_;
  delete talisman_change_ntf_reflection_;
  delete red_pt_req::default_instance_;
  delete red_pt_req_reflection_;
  delete red_pt_ack::default_instance_;
  delete red_pt_ack_reflection_;
  delete red_pt_ntf::default_instance_;
  delete red_pt_ntf_reflection_;
  delete get_wearing_fashions_req::default_instance_;
  delete get_wearing_fashions_req_reflection_;
  delete get_wearing_fashions_ack::default_instance_;
  delete get_wearing_fashions_ack_reflection_;
  delete get_all_fashions_req::default_instance_;
  delete get_all_fashions_req_reflection_;
  delete get_all_fashions_ack::default_instance_;
  delete get_all_fashions_ack_reflection_;
  delete wear_fashions_req::default_instance_;
  delete wear_fashions_req_reflection_;
  delete wear_fashions_ack::default_instance_;
  delete wear_fashions_ack_reflection_;
  delete get_other_role_fashion_cs_req::default_instance_;
  delete get_other_role_fashion_cs_req_reflection_;
  delete get_other_role_fashion_cs_ack::default_instance_;
  delete get_other_role_fashion_cs_ack_reflection_;
  delete verify_config_version_req::default_instance_;
  delete verify_config_version_req_reflection_;
  delete verify_config_version_ack::default_instance_;
  delete verify_config_version_ack_reflection_;
  delete debug_hero_attr_ntf::default_instance_;
  delete debug_hero_attr_ntf_reflection_;
  delete waiting_in_line_ntf::default_instance_;
  delete waiting_in_line_ntf_reflection_;
  delete finish_in_line_ntf::default_instance_;
  delete finish_in_line_ntf_reflection_;
  delete exit_waiting_in_line_req::default_instance_;
  delete exit_waiting_in_line_req_reflection_;
  delete exit_waiting_in_line_ack::default_instance_;
  delete exit_waiting_in_line_ack_reflection_;
  delete user_event_track_ntf::default_instance_;
  delete user_event_track_ntf_reflection_;
  delete role_guide_info::default_instance_;
  delete role_guide_info_reflection_;
  delete role_guide_ntf::default_instance_;
  delete role_guide_ntf_reflection_;
  delete role_guide_req::default_instance_;
  delete role_guide_req_reflection_;
  delete role_guide_ack::default_instance_;
  delete role_guide_ack_reflection_;
  delete onekey_skip_guide_req::default_instance_;
  delete onekey_skip_guide_req_reflection_;
  delete onekey_skip_guide_ack::default_instance_;
  delete onekey_skip_guide_ack_reflection_;
  delete plot_little_game_set_req::default_instance_;
  delete plot_little_game_set_req_reflection_;
  delete plot_little_game_set_ack::default_instance_;
  delete plot_little_game_set_ack_reflection_;
  delete plot_little_game_get_req::default_instance_;
  delete plot_little_game_get_req_reflection_;
  delete plot_little_game_get_ack::default_instance_;
  delete plot_little_game_get_ack_reflection_;
  delete pet_get_req::default_instance_;
  delete pet_get_req_reflection_;
  delete pet_get_ack::default_instance_;
  delete pet_get_ack_reflection_;
  delete pet_change_name_req::default_instance_;
  delete pet_change_name_req_reflection_;
  delete pet_change_name_ack::default_instance_;
  delete pet_change_name_ack_reflection_;
  delete pet_do_action_req::default_instance_;
  delete pet_do_action_req_reflection_;
  delete pet_do_action_ack::default_instance_;
  delete pet_do_action_ack_reflection_;
  delete pet_send_out_req::default_instance_;
  delete pet_send_out_req_reflection_;
  delete pet_send_out_ack::default_instance_;
  delete pet_send_out_ack_reflection_;
  delete pet_get_out_award_req::default_instance_;
  delete pet_get_out_award_req_reflection_;
  delete pet_get_out_award_ack::default_instance_;
  delete pet_get_out_award_ack_reflection_;
  delete pet_feed_food_req::default_instance_;
  delete pet_feed_food_req_reflection_;
  delete pet_feed_food_ack::default_instance_;
  delete pet_feed_food_ack_reflection_;
  delete pet_set_show_pet_req::default_instance_;
  delete pet_set_show_pet_req_reflection_;
  delete pet_set_show_pet_ack::default_instance_;
  delete pet_set_show_pet_ack_reflection_;
  delete pet_out_back_req::default_instance_;
  delete pet_out_back_req_reflection_;
  delete pet_out_back_ack::default_instance_;
  delete pet_out_back_ack_reflection_;
}

void protobuf_AddDesc_cs_5frole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cm_5froletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5factivitytype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fsocialtype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcs_role.proto\022\013SProtoSpace\032\021cm_roletyp"
    "e.proto\032\023cm_battletype.proto\032\025cm_activit"
    "ytype.proto\032\023cm_socialtype.proto\032\020cs_pro"
    "toid.proto\032\022cs_errorcode.proto\"\231\001\n\024accou"
    "nt_check_in_req\022A\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\027account_check_in_req_"
    "id\022\017\n\007account\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022\016\n\006te"
    "mpid\030\004 \001(\r\022\016\n\006areaid\030\005 \001(\r\"w\n\024account_ch"
    "eck_in_ack\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\027account_check_in_ack_id\022\017\n"
    "\007account\030\002 \001(\t\022\013\n\003ret\030\003 \001(\005\"[\n\025sys_packe"
    "t_seq_id_ntf\022B\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\030sys_packet_seq_id_ntf_id"
    "\"t\n\025sys_packet_seq_id_req\022B\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\030sys_packet_"
    "seq_id_req_id\022\027\n\017downlink_seq_id\030\002 \001(\r\"r"
    "\n\025sys_packet_seq_id_ack\022B\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\030sys_packet_se"
    "q_id_ack_id\022\025\n\ruplink_seq_id\030\002 \001(\r\"{\n\033up"
    "link_packet_seq_error_ntf\022E\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\033sys_packet_"
    "seq_error_ntf_id\022\025\n\ruplink_seq_id\030\002 \001(\r\""
    "}\n\025client_secret_key_req\022B\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\030client_secre"
    "t_key_req_id\022\022\n\npublic_key\030\002 \001(\t\022\014\n\004seed"
    "\030\003 \001(\t\"o\n\025client_secret_key_ack\022B\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030clien"
    "t_secret_key_ack_id\022\022\n\nsecret_key\030\002 \001(\t\""
    "l\n\027client_secret_start_req\022D\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\032client_sec"
    "ret_start_req_id\022\013\n\003ret\030\002 \001(\r\"l\n\027client_"
    "secret_start_ack\022D\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\032client_secret_start_"
    "ack_id\022\013\n\003ret\030\002 \001(\r\"\226\001\n\025account_role_dat"
    "a_ack\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\030account_role_data_ack_id\022\013\n\003ret"
    "\030\002 \001(\005\022,\n\004data\030\003 \001(\0132\036.SProtoSpace.accou"
    "nt_role_data\"\213\001\n\023create_role_of_game\022@\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026"
    "create_role_of_game_id\022\017\n\007account\030\002 \001(\t\022"
    "\020\n\010rolename\030\003 \001(\t\022\017\n\007rolesex\030\004 \001(\005\"\262\001\n\027c"
    "reate_role_of_game_ack\022D\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\032create_role_of"
    "_game_ack_id\022\022\n\ncreate_ret\030\002 \001(\005\022\017\n\007acco"
    "unt\030\003 \001(\t\022,\n\004data\030\004 \001(\0132\036.SProtoSpace.ac"
    "count_role_data\"\210\001\n\020switch_scene_req\022=\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023"
    "switch_scene_req_id\022\020\n\010scene_id\030\002 \001(\r\022\022\n"
    "\nscene_type\030\003 \001(\r\022\017\n\007game_id\030\004 \001(\004\"m\n\016en"
    "ter_game_req\022;\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\021enter_game_req_id\022\016\n\006rol"
    "eid\030\002 \001(\004\022\016\n\006reason\030\003 \001(\r\"Z\n\016enter_game_"
    "ack\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\021enter_game_ack_id\022\013\n\003ret\030\002 \001(\005\"S\n"
    "\021system_unlock_req\022>\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\024system_unlock_req_"
    "id\"l\n\021system_unlock_ack\022>\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\024system_unlock"
    "_ack_id\022\027\n\017lock_module_ids\030\002 \003(\005\"n\n\021syst"
    "em_unlock_ntf\022>\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\024system_unlock_ntf_id\022\031\n"
    "\021unlock_module_ids\030\002 \003(\005\"\255\005\n\rrole_info_n"
    "tf\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\020role_info_ntf_id\022\017\n\007role_id\030\002 \002(\004\022"
    "\020\n\010rolename\030\003 \001(\t\022&\n\006soul_s\030\004 \003(\0132\026.SPro"
    "toSpace.soul_info\022&\n\006item_s\030\005 \003(\0132\026.SPro"
    "toSpace.item_info\022\n\n\002lv\030\007 \001(\005\022\013\n\003exp\030\010 \001"
    "(\005\022\013\n\003sex\030\t \001(\005\022\014\n\004gold\030\n \001(\005\022\014\n\004jade\030\013 "
    "\001(\005\022\r\n\005power\030\014 \001(\005\022\027\n\017buy_power_times\030\r "
    "\001(\005\022\r\n\005merit\030\016 \001(\005\022\r\n\005grade\030\017 \001(\005\022\016\n\006ten"
    "der\030\020 \001(\005\022\017\n\007treason\030\021 \001(\005\022\014\n\004wise\030\022 \001(\005"
    "\022\021\n\tadorkable\030\023 \001(\005\022\014\n\004good\030\024 \001(\005\022\020\n\010sch"
    "eming\030\025 \001(\005\022\024\n\014bag_capacity\030\026 \001(\r\022\025\n\rtas"
    "k_activity\030\027 \001(\005\022\026\n\016offical_salary\030\030 \001(\010"
    "\022\033\n\023first_offical_award\030\031 \001(\r\022\023\n\013skill_p"
    "oint\030\032 \001(\005\022\014\n\004wine\030\033 \001(\r\022\020\n\010wine_cup\030\034 \001"
    "(\r\022\025\n\rdaily_fortune\030\035 \001(\005\022\022\n\nadv_energy\030"
    "\036 \001(\005\022\021\n\tadv_times\030\037 \001(\005\022\024\n\014talent_point"
    "\030  \001(\005\022\030\n\020change_name_time\030! \001(\005\"0\n\titem"
    "_info\022\017\n\007item_id\030\001 \001(\005\022\022\n\nitem_count\030\002 \001"
    "(\005\"\362\003\n\024update_role_info_ntf\022A\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\027update_ro"
    "le_info_ntf_id\022\020\n\010rolename\030\002 \001(\t\022&\n\006item"
    "_s\030\003 \003(\0132\026.SProtoSpace.item_info\022\n\n\002lv\030\004"
    " \001(\005\022\013\n\003exp\030\005 \001(\005\022\014\n\004gold\030\006 \001(\005\022\014\n\004jade\030"
    "\007 \001(\005\022\r\n\005power\030\010 \001(\005\022\020\n\010plot_ids\030\t \003(\005\022\027"
    "\n\017buy_power_times\030\n \001(\005\022\r\n\005merit\030\013 \001(\005\022\r"
    "\n\005grade\030\014 \001(\005\022\016\n\006tender\030\r \001(\005\022\017\n\007treason"
    "\030\016 \001(\005\022\014\n\004wise\030\017 \001(\005\022\021\n\tadorkable\030\020 \001(\005\022"
    "\014\n\004good\030\021 \001(\005\022\020\n\010scheming\030\022 \001(\005\022\024\n\014bag_c"
    "apacity\030\023 \001(\r\022\025\n\rtask_activity\030\024 \001(\005\022\026\n\016"
    "offical_salary\030\025 \001(\010\022\023\n\013skill_point\030\026 \001("
    "\005\022\024\n\014talent_point\030\027 \001(\005\"\265\002\n\024role_common_"
    "base_ntf\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\027role_common_base_ntf_id\022\n\n\002l"
    "v\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\022\014\n\004gold\030\004 \001(\005\022\014\n\004ja"
    "de\030\005 \001(\005\022\r\n\005power\030\006 \001(\005\022\r\n\005merit\030\007 \001(\005\022\025"
    "\n\rtask_activity\030\010 \001(\005\022\023\n\013skill_point\030\t \001"
    "(\005\022\014\n\004wine\030\n \001(\r\022\020\n\010wine_cup\030\013 \001(\r\022\022\n\nad"
    "v_energy\030\014 \001(\005\022\021\n\tadv_times\030\r \001(\005\022\024\n\014tal"
    "ent_point\030\016 \001(\005\"\323\001\n\017soul_update_ntf\022<\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022s"
    "oul_update_ntf_id\022*\n\nadd_soul_s\030\002 \003(\0132\026."
    "SProtoSpace.soul_info\022*\n\ndel_soul_s\030\003 \003("
    "\0132\026.SProtoSpace.soul_info\022*\n\nfix_soul_s\030"
    "\004 \003(\0132\026.SProtoSpace.soul_info\"m\n\016soul_ra"
    "ise_req\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\021soul_raise_req_id\022\n\n\002id\030\002 \001(\004"
    "\022\022\n\nconsume_id\030\003 \003(\004\"i\n\016soul_raise_ack\022;"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\021soul_raise_ack_id\022\n\n\002id\030\002 \001(\004\022\016\n\003ret\030\003"
    " \001(\005:\0010\"i\n\rsoul_bind_req\022:\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\020soul_bind_re"
    "q_id\022\n\n\002id\030\002 \001(\004\022\020\n\010hero_uid\030\003 \001(\004\"y\n\rso"
    "ul_bind_ack\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\020soul_bind_ack_id\022\n\n\002id\030\002 "
    "\001(\004\022\020\n\010hero_uid\030\003 \001(\004\022\016\n\003ret\030\004 \001(\005:\0010\"m\n"
    "\017soul_unbind_req\022<\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\022soul_unbind_req_id\022\n"
    "\n\002id\030\002 \001(\004\022\020\n\010hero_uid\030\003 \001(\004\"k\n\017soul_unb"
    "ind_ack\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\022soul_unbind_ack_id\022\n\n\002id\030\002 \001("
    "\004\022\016\n\003ret\030\003 \001(\005:\0010\"W\n\rsoul_lock_req\022:\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020so"
    "ul_lock_req_id\022\n\n\002id\030\002 \001(\004\"g\n\rsoul_lock_"
    "ack\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\020soul_lock_ack_id\022\n\n\002id\030\002 \001(\004\022\016\n\003r"
    "et\030\003 \001(\005:\0010\"[\n\017soul_unlock_req\022<\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022soul_u"
    "nlock_req_id\022\n\n\002id\030\002 \001(\004\"k\n\017soul_unlock_"
    "ack\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\022soul_unlock_ack_id\022\n\n\002id\030\002 \001(\004\022\016\n"
    "\003ret\030\003 \001(\005:\0010\"]\n\rsoul_sell_req\022:\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020soul_s"
    "ell_req_id\022\020\n\010soul_ids\030\002 \003(\004\"X\n\rsoul_sel"
    "l_ack\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\020soul_sell_ack_id\022\013\n\003ret\030\002 \001(\005\"a"
    "\n\017item_packet_req\022<\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\022item_packet_req_id\022"
    "\020\n\010playerid\030\002 \002(\004\"\316\001\n\017item_packet_ack\022<\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\022item_packet_ack_id\022\013\n\003all\030\002 \001(\010\022.\n\tfix_"
    "items\030\003 \003(\0132\033.SProtoSpace.unit_item_data"
    "\022\021\n\tdel_items\030\004 \003(\004\022-\n\nerror_code\030\005 \001(\0162"
    "\031.SProtoSpace.MsgErrorType\"t\n\014item_use_r"
    "eq\0229\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\017item_use_req_id\022\013\n\003uid\030\002 \001(\004\022\r\n\005co"
    "unt\030\003 \001(\r\022\r\n\005index\030\004 \001(\r\"\202\001\n\014item_use_ac"
    "k\0229\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\017item_use_ack_id\022\016\n\006result\030\002 \001(\005\022\'\n\005"
    "items\030\003 \003(\0132\030.SProtoSpace.reward_item\"\232\001"
    "\n\ritem_sold_req\022:\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\020item_sold_req_id\022\020\n\010i"
    "s_batch\030\002 \001(\010\022\025\n\ritem_uid_list\030\003 \003(\004\022\020\n\010"
    "item_uid\030\004 \001(\004\022\022\n\nitem_count\030\005 \001(\r\"z\n\rit"
    "em_sold_ack\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\020item_sold_ack_id\022-\n\nerror"
    "_code\030\002 \001(\0162\031.SProtoSpace.MsgErrorType\"_"
    "\n\016bag_expand_req\022;\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\021bag_expand_req_id\022\020\n"
    "\010add_size\030\002 \001(\r\"|\n\016bag_expand_ack\022;\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021bag"
    "_expand_ack_id\022-\n\nerror_code\030\002 \001(\0162\031.SPr"
    "otoSpace.MsgErrorType\"g\n\033bag_capacity_no"
    "t_enough_ntf\022H\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\036bag_capacity_not_enough_"
    "ntf_id\"\202\001\n\022hero_list_data_ntf\022\?\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\025hero_li"
    "st_data_ntf_id\022+\n\006heroes\030\002 \003(\0132\033.SProtoS"
    "pace.hero_show_data\"v\n\014add_hero_ntf\0229\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\017a"
    "dd_hero_ntf_id\022+\n\006heroes\030\002 \003(\0132\033.SProtoS"
    "pace.hero_show_data\"\\\n\017remove_hero_ntf\022<"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\022remove_hero_ntf_id\022\013\n\003ids\030\002 \003(\004\"\217\004\n\024he"
    "ro_info_change_ntf\022A\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\027hero_info_change_n"
    "tf_id\022,\n\003tag\030\002 \002(\0162\037.SProtoSpace.EHeroIn"
    "foChangeTag\022\017\n\007hero_id\030\003 \002(\004\022\r\n\005level\030\004 "
    "\001(\005\022\014\n\004star\030\005 \001(\005\022\013\n\003exp\030\006 \001(\005\022-\n\005skill\030"
    "\007 \003(\0132\036.SProtoSpace.client_skill_data\022+\n"
    "\004soul\030\010 \003(\0132\035.SProtoSpace.client_soul_da"
    "ta\022\016\n\006awaken\030\t \001(\010\0221\n\013awaken_attr\030\n \003(\0132"
    "\034.SProtoSpace.hero_attr_value\022)\n\tskin_in"
    "fo\030\013 \001(\0132\026.SProtoSpace.skin_data\022\023\n\013figh"
    "t_power\030\014 \001(\003\022,\n\006equips\030\r \003(\0132\034.SProtoSp"
    "ace.hero_equip_data\022\017\n\007quality\030\016 \001(\005\022-\n\t"
    "talismans\030\017 \003(\0132\032.SProtoSpace.talisman_d"
    "ata\"u\n\020hero_upgrade_req\022=\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\023hero_upgrade_"
    "req_id\022\017\n\007hero_id\030\002 \002(\004\022\021\n\tmaterials\030\003 \003"
    "(\004\"\203\001\n\020hero_upgrade_ack\022=\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\023hero_upgrade_"
    "ack_id\022\017\n\007hero_id\030\002 \002(\004\022\022\n\nhero_level\030\003 "
    "\001(\005\022\013\n\003ret\030\004 \002(\005\"s\n\017hero_upstar_req\022<\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022h"
    "ero_upstar_req_id\022\017\n\007hero_id\030\002 \002(\004\022\021\n\tma"
    "terials\030\003 \003(\004\"\200\001\n\017hero_upstar_ack\022<\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022her"
    "o_upstar_ack_id\022\017\n\007hero_id\030\002 \002(\004\022\021\n\thero"
    "_star\030\003 \001(\005\022\013\n\003ret\030\004 \002(\005\"`\n\017hero_awaken_"
    "req\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\022hero_awaken_req_id\022\017\n\007hero_id\030\002 \002"
    "(\004\"m\n\017hero_awaken_ack\022<\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\022hero_awaken_ack"
    "_id\022\017\n\007hero_id\030\002 \002(\004\022\013\n\003ret\030\003 \002(\005\"j\n\rher"
    "o_lock_req\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\020hero_lock_req_id\022\017\n\007hero_i"
    "d\030\002 \002(\004\022\014\n\004lock\030\003 \002(\010\"w\n\rhero_lock_ack\022:"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\020hero_lock_ack_id\022\017\n\007hero_id\030\002 \002(\004\022\014\n\004l"
    "ock\030\003 \002(\010\022\013\n\003ret\030\004 \002(\005\"f\n\020hero_compose_r"
    "eq\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\023hero_compose_req_id\022\023\n\013template_id"
    "\030\002 \001(\005\"\204\001\n\020hero_compose_ack\022=\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\023hero_comp"
    "ose_ack_id\022\023\n\013template_id\030\002 \001(\005\022\017\n\007hero_"
    "id\030\003 \001(\004\022\013\n\003ret\030\004 \001(\005\"\177\n\024hero_skin_activ"
    "e_req\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\027hero_skin_active_req_id\022\017\n\007hero"
    "_id\030\002 \001(\004\022\023\n\013template_id\030\003 \001(\r\"\214\001\n\024hero_"
    "skin_active_ack\022A\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\027hero_skin_active_ack_"
    "id\022\017\n\007hero_id\030\002 \001(\004\022\023\n\013template_id\030\003 \001(\r"
    "\022\013\n\003ret\030\004 \001(\005\"\177\n\024hero_change_name_req\022A\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\027hero_change_name_req_id\022\017\n\007hero_id\030\002 \001("
    "\004\022\023\n\013change_name\030\003 \001(\t\"\217\001\n\024hero_change_n"
    "ame_ack\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\027hero_change_name_ack_id\022\016\n\006re"
    "sult\030\002 \001(\005\022\017\n\007hero_id\030\003 \001(\004\022\023\n\013change_na"
    "me\030\004 \001(\t\"\221\001\n\021hero_level_up_req\022>\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\024hero_l"
    "evel_up_req_id\022\017\n\007hero_id\030\002 \001(\004\022+\n\tmater"
    "ials\030\003 \003(\0132\030.SProtoSpace.reward_item\"\205\001\n"
    "\021hero_level_up_ack\022>\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\024hero_level_up_ack_"
    "id\022\017\n\007hero_id\030\002 \001(\004\022\022\n\nhero_level\030\003 \001(\005\022"
    "\013\n\003ret\030\004 \001(\005\"h\n\023hero_quality_up_req\022@\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026h"
    "ero_quality_up_req_id\022\017\n\007hero_id\030\002 \001(\004\"u"
    "\n\023hero_quality_up_ack\022@\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\026hero_quality_up"
    "_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007hero_id\030\003 \001(\004\"\225\001"
    "\n\020item_combine_req\022=\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\023item_combine_req_i"
    "d\022\026\n\016dest_equip_tid\030\002 \001(\r\022\023\n\013combine_num"
    "\030\003 \001(\r\022\025\n\rcost_item_uid\030\004 \003(\004\"\213\001\n\020item_c"
    "ombine_ack\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\023item_combine_ack_id\022\013\n\003ret"
    "\030\002 \001(\005\022\026\n\016dest_equip_tid\030\003 \001(\r\022\023\n\013combin"
    "e_num\030\004 \001(\r\"\217\001\n\020hero_star_up_req\022=\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023hero"
    "_star_up_req_id\022\017\n\007hero_id\030\002 \001(\004\022+\n\tmate"
    "rials\030\003 \003(\0132\030.SProtoSpace.reward_item\"\202\001"
    "\n\020hero_star_up_ack\022=\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\023hero_star_up_ack_i"
    "d\022\017\n\007hero_id\030\002 \001(\004\022\021\n\thero_star\030\003 \001(\005\022\013\n"
    "\003ret\030\004 \001(\005\"\243\001\n\021hero_skill_up_req\022>\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\024hero"
    "_skill_up_req_id\022\017\n\007hero_id\030\002 \001(\004\022\020\n\010ski"
    "ll_id\030\003 \001(\005\022+\n\tmaterials\030\004 \003(\0132\030.SProtoS"
    "pace.reward_item\"\252\001\n\021hero_skill_up_ack\022>"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\024hero_skill_up_ack_id\022\017\n\007hero_id\030\002 \001(\004\022"
    "\013\n\003ret\030\003 \001(\005\022\020\n\010skill_id\030\004 \001(\005\022\020\n\010skill_"
    "lv\030\005 \001(\005\022\023\n\013skill_point\030\006 \001(\005\"\241\001\n\016hero_e"
    "quip_req\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\021hero_equip_req_id\022\021\n\thero_uu"
    "id\030\002 \001(\004\022\021\n\titem_uuid\030\003 \001(\004\022,\n\007slot_id\030\004"
    " \001(\0162\033.SProtoSpace.EHeroEquipSlot\"\300\001\n\016he"
    "ro_equip_ack\022;\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\021hero_equip_ack_id\022\013\n\003ret"
    "\030\002 \001(\005\022\021\n\thero_uuid\030\003 \001(\004\022\021\n\titem_uuid\030\004"
    " \001(\004\022\020\n\010item_tid\030\005 \001(\005\022,\n\007slot_id\030\006 \001(\0162"
    "\033.SProtoSpace.EHeroEquipSlot\"\204\001\n\020hero_un"
    "equip_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\023hero_unequip_req_id\022\017\n\007hero"
    "_id\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\004\022\017\n\007slot_id\030\004 "
    "\001(\r\"\221\001\n\020hero_unequip_ack\022=\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\023hero_unequip"
    "_ack_id\022\013\n\003ret\030\002 \001(\005\022\017\n\007hero_id\030\003 \001(\004\022\017\n"
    "\007item_id\030\004 \001(\004\022\017\n\007slot_id\030\005 \001(\r\"p\n\027hero_"
    "equip_level_up_req\022D\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\032hero_equip_level_u"
    "p_req_id\022\017\n\007item_id\030\002 \001(\004\"}\n\027hero_equip_"
    "level_up_ack\022D\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\032hero_equip_level_up_ack_"
    "id\022\013\n\003ret\030\002 \001(\005\022\017\n\007item_id\030\003 \001(\004\"~\n\036hero"
    "_equip_onekey_level_up_req\022K\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:!hero_equip"
    "_onekey_level_up_req_id\022\017\n\007item_id\030\002 \001(\004"
    "\"\267\001\n\036hero_equip_onekey_level_up_ack\022K\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:!h"
    "ero_equip_onekey_level_up_ack_id\022\013\n\003ret\030"
    "\002 \001(\005\022\017\n\007item_id\030\003 \001(\004\022\r\n\005level\030\004 \001(\005\022\014\n"
    "\004crit\030\005 \001(\005\022\r\n\005money\030\006 \001(\005\"7\n\025hero_equip"
    "_level_info\022\017\n\007item_id\030\003 \001(\004\022\r\n\005level\030\004 "
    "\001(\005\"x\n\033hero_equip_all_level_up_req\022H\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036he"
    "ro_equip_all_level_up_req_id\022\017\n\007hero_id\030"
    "\002 \001(\004\"\325\001\n\033hero_equip_all_level_up_ack\022H\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\036hero_equip_all_level_up_ack_id\022\013\n\003ret\030\002"
    " \001(\005\022\017\n\007hero_id\030\003 \001(\004\0221\n\005items\030\004 \003(\0132\".S"
    "ProtoSpace.hero_equip_level_info\022\014\n\004crit"
    "\030\005 \001(\005\022\r\n\005money\030\006 \001(\005\"\232\001\n\025hero_equip_one"
    "key_req\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\030hero_equip_onekey_req_id\022\017\n\007h"
    "ero_id\030\002 \001(\004\022,\n\006equips\030\003 \003(\0132\034.SProtoSpa"
    "ce.hero_equip_data\"\247\001\n\025hero_equip_onekey"
    "_ack\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\030hero_equip_onekey_ack_id\022\013\n\003ret\030"
    "\002 \001(\005\022\017\n\007hero_id\030\003 \001(\004\022,\n\006equips\030\004 \003(\0132\034"
    ".SProtoSpace.hero_equip_data\"p\n\027hero_une"
    "quip_onekey_req\022D\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\032hero_unequip_onekey_r"
    "eq_id\022\017\n\007hero_id\030\002 \001(\004\"\253\001\n\027hero_unequip_"
    "onekey_ack\022D\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\032hero_unequip_onekey_ack_id"
    "\022\013\n\003ret\030\002 \001(\005\022\017\n\007hero_id\030\003 \001(\004\022,\n\006equips"
    "\030\004 \003(\0132\034.SProtoSpace.hero_equip_data\"^\n\020"
    "gm_operation_req\022=\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\023gm_operation_req_id\022"
    "\013\n\003cmd\030\002 \001(\t\"\210\001\n\020gm_operation_ack\022=\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023gm_"
    "operation_ack_id\022\016\n\003ret\030\002 \001(\005:\0010\022\017\n\004type"
    "\030\003 \001(\005:\0010\022\024\n\004info\030\004 \001(\t:\006Failed\"M\n\016leave"
    "_game_req\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\021leave_game_req_id\"x\n\rkick_g"
    "ame_ntf\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\020kick_game_ntf_id\022+\n\006reason\030\002 "
    "\002(\0162\033.SProtoSpace.eKickoutReason\"M\n\016beat"
    "_heart_ntf\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\021beat_heart_ntf_id\"Y\n\rsync_"
    "time_ntf\022:\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\020sync_time_ntf_id\022\014\n\004time\030\002 \002"
    "(\r\"n\n\025client_heart_beat_req\022B\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\030client_he"
    "art_beat_req_id\022\021\n\tcheck_sum\030\002 \001(\r\"n\n\025cl"
    "ient_heart_beat_ack\022B\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\030client_heart_beat"
    "_ack_id\022\021\n\tcheck_sum\030\002 \001(\r\"\236\002\n\024role_play"
    "er_info_ntf\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\027role_player_info_ntf_id\022)"
    "\n\003pro\030\002 \001(\0132\034.SProtoSpace.player_propert"
    "y\022&\n\004data\030\003 \001(\0132\030.SProtoSpace.player_dat"
    "a\022\022\n\nliked_list\030\004 \003(\004\022\016\n\006border\030\005 \001(\005\022\024\n"
    "\014talent_grade\030\006 \001(\005\0226\n\022fashions_p_wearin"
    "g\030\007 \001(\0132\032.SProtoSpace.fashions_pack\"\272\001\n\033"
    "role_player_info_update_ntf\022H\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\036role_play"
    "er_info_update_ntf_id\022&\n\004data\030\002 \001(\0132\030.SP"
    "rotoSpace.player_data\022)\n\003pro\030\003 \001(\0132\034.SPr"
    "otoSpace.player_property\"h\n\024role_fight_s"
    "core_ntf\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\027role_fight_score_ntf_id\022\r\n\005v"
    "alue\030\002 \001(\005\"s\n\026role_player_change_req\022C\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031"
    "role_player_change_req_id\022\024\n\014to_player_i"
    "d\030\002 \002(\005\"\233\001\n\026role_player_change_ack\022C\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031ro"
    "le_player_change_ack_id\022\016\n\006result\030\002 \002(\005\022"
    "\026\n\016from_player_id\030\003 \002(\005\022\024\n\014to_player_id\030"
    "\004 \002(\005\"\222\001\n\033role_player_active_skin_req\022H\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\036role_player_active_skin_req_id\022\021\n\tplaye"
    "r_id\030\002 \002(\005\022\026\n\016active_skin_id\030\003 \002(\005\"\242\001\n\033r"
    "ole_player_active_skin_ack\022H\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\036role_playe"
    "r_active_skin_ack_id\022\016\n\006result\030\002 \002(\005\022\021\n\t"
    "player_id\030\003 \002(\005\022\026\n\016active_skin_id\030\004 \002(\005\""
    "\205\001\n\030role_player_buy_skin_req\022E\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033role_pla"
    "yer_buy_skin_req_id\022\021\n\tplayer_id\030\002 \002(\005\022\017"
    "\n\007skin_id\030\003 \002(\005\"\225\001\n\030role_player_buy_skin"
    "_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\033role_player_buy_skin_ack_id\022\016\n\006r"
    "esult\030\002 \002(\005\022\021\n\tplayer_id\030\003 \002(\005\022\017\n\007skin_i"
    "d\030\004 \002(\005\"\207\001\n\031role_player_wear_skin_req\022F\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\034role_player_wear_skin_req_id\022\021\n\tplayer_"
    "id\030\002 \002(\005\022\017\n\007skin_id\030\003 \002(\005\"\227\001\n\031role_playe"
    "r_wear_skin_ack\022F\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\034role_player_wear_skin"
    "_ack_id\022\016\n\006result\030\002 \002(\005\022\021\n\tplayer_id\030\003 \002"
    "(\005\022\017\n\007skin_id\030\004 \002(\005\"\246\001\n\027role_player_skil"
    "lup_ntf\022D\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\032role_player_skillup_ntf_id\022\021\n"
    "\tplayer_id\030\002 \002(\005\0222\n\nskill_info\030\003 \002(\0132\036.S"
    "ProtoSpace.player_skill_info\"\226\001\n\014role_bu"
    "y_req\0229\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\017role_buy_req_id\022(\n\010buy_type\030\002 \002"
    "(\0162\026.SProtoSpace.EItemType\022\021\n\tbuy_count\030"
    "\003 \002(\005\022\016\n\006buy_id\030\004 \002(\005\"\246\001\n\014role_buy_ack\0229"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\017role_buy_ack_id\022\016\n\006result\030\002 \002(\005\022(\n\010buy"
    "_type\030\003 \002(\0162\026.SProtoSpace.EItemType\022\021\n\tb"
    "uy_count\030\004 \002(\005\022\016\n\006buy_id\030\005 \002(\005\"u\n\027role_s"
    "how_base_info_req\022D\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\032role_show_base_info"
    "_req_id\022\024\n\014show_role_id\030\002 \001(\004\"\267\001\n\027role_s"
    "how_base_info_ack\022D\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\032role_show_base_info"
    "_ack_id\022\016\n\006result\030\002 \001(\005\022\024\n\014show_role_id\030"
    "\003 \001(\004\0220\n\tshow_data\030\004 \001(\0132\035.SProtoSpace.s"
    "how_player_base\"s\n\026role_show_get_like_re"
    "q\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\031role_show_get_like_req_id\022\024\n\014show_r"
    "ole_id\030\002 \001(\004\"\222\001\n\026role_show_get_like_ack\022"
    "C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\031role_show_get_like_ack_id\022\016\n\006result\030\002"
    " \001(\005\022\024\n\014show_role_id\030\003 \001(\004\022\r\n\005likes\030\004 \001("
    "\005\"y\n\031role_show_player_base_req\022F\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\034role_s"
    "how_player_base_req_id\022\024\n\014show_role_id\030\002"
    " \001(\004\"\273\001\n\031role_show_player_base_ack\022F\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\034ro"
    "le_show_player_base_ack_id\022\016\n\006result\030\002 \001"
    "(\005\022\024\n\014show_role_id\030\003 \001(\004\0220\n\tshow_data\030\004 "
    "\001(\0132\035.SProtoSpace.show_player_base\"k\n\022ro"
    "le_show_like_req\022\?\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\025role_show_like_req_i"
    "d\022\024\n\014show_role_id\030\002 \001(\004\"{\n\022role_show_lik"
    "e_ack\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\025role_show_like_ack_id\022\016\n\006result"
    "\030\002 \001(\005\022\024\n\014show_role_id\030\003 \001(\004\"u\n\031role_sho"
    "w_change_name_req\022F\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\034role_show_change_na"
    "me_req_id\022\020\n\010new_name\030\002 \001(\t\"\237\001\n\031role_sho"
    "w_change_name_ack\022F\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\034role_show_change_na"
    "me_ack_id\022\016\n\006result\030\002 \001(\005\022\020\n\010new_name\030\003 "
    "\001(\t\022\030\n\020change_name_time\030\004 \001(\005\"\235\001\n\035role_s"
    "how_change_position_req\022J\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID: role_show_cha"
    "nge_position_req_id\0220\n\010position\030\002 \001(\0132\036."
    "SProtoSpace.lsg_position_info\"\255\001\n\035role_s"
    "how_change_position_ack\022J\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID: role_show_cha"
    "nge_position_ack_id\022\016\n\006result\030\002 \001(\005\0220\n\010p"
    "osition\030\003 \001(\0132\036.SProtoSpace.lsg_position"
    "_info\"\200\001\n\036role_show_change_signature_req"
    "\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:!role_show_change_signature_req_id\022\021\n"
    "\tsignature\030\002 \001(\t\"}\n\036role_show_change_sig"
    "nature_ack\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:!role_show_change_signature"
    "_ack_id\022\016\n\006result\030\002 \001(\005\"n\n\030role_show_cha"
    "nge_age_req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\033role_show_change_age_req_"
    "id\022\013\n\003age\030\002 \001(\r\"{\n\030role_show_change_age_"
    "ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\033role_show_change_age_ack_id\022\013\n\003re"
    "t\030\002 \001(\r\022\013\n\003age\030\003 \001(\r\"~\n\035role_show_change"
    "_starsign_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID: role_show_change_starsi"
    "gn_req_id\022\021\n\tstar_sign\030\002 \001(\r\"\213\001\n\035role_sh"
    "ow_change_starsign_ack\022J\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID: role_show_chan"
    "ge_starsign_ack_id\022\013\n\003ret\030\002 \001(\r\022\021\n\tstar_"
    "sign\030\003 \001(\r\"\207\001\n\035role_show_change_birthday"
    "_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID: role_show_change_birthday_req_id"
    "\022\r\n\005month\030\002 \001(\r\022\013\n\003day\030\003 \001(\r\"\247\001\n\035role_sh"
    "ow_change_birthday_ack\022J\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID: role_show_chan"
    "ge_birthday_ack_id\022\013\n\003ret\030\002 \001(\r\022\r\n\005month"
    "\030\003 \001(\r\022\013\n\003day\030\004 \001(\r\022\021\n\tstar_sign\030\005 \001(\r\"w"
    "\n\033role_show_change_labels_req\022H\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036role_sh"
    "ow_change_labels_req_id\022\016\n\006labels\030\002 \003(\r\""
    "\204\001\n\033role_show_change_labels_ack\022H\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036role_"
    "show_change_labels_ack_id\022\013\n\003ret\030\002 \001(\r\022\016"
    "\n\006labels\030\003 \003(\r\"\235\001\n\031role_show_get_emotion"
    "_req\022F\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\034role_show_get_emotion_req_id\022\024\n\014"
    "show_role_id\030\002 \001(\004\022\023\n\013start_index\030\003 \001(\r\022"
    "\r\n\005count\030\004 \001(\r\"\277\001\n\031role_show_get_emotion"
    "_ack\022F\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\034role_show_get_emotion_ack_id\022\013\n\003"
    "ret\030\002 \001(\005\022\024\n\014show_role_id\030\003 \001(\004\0227\n\013emoti"
    "on_all\030\004 \001(\0132\".SProtoSpace.show_emotion_"
    "all_info\"\272\001\n\033role_show_write_emotion_req"
    "\022H\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\036role_show_write_emotion_req_id\022\023\n\013ms"
    "g_content\030\002 \001(\t\022\020\n\010img_urls\030\003 \003(\t\022*\n\010msg"
    "_type\030\004 \001(\0162\030.SProtoSpace.EmotionType\"\360\001"
    "\n\033role_show_write_emotion_ack\022H\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\036role_sh"
    "ow_write_emotion_ack_id\022\013\n\003ret\030\002 \001(\r\022\022\n\n"
    "emotion_id\030\003 \001(\004\022\023\n\013msg_content\030\004 \001(\t\022\020\n"
    "\010img_urls\030\005 \003(\t\022*\n\010msg_type\030\006 \001(\0162\030.SPro"
    "toSpace.EmotionType\022\023\n\013create_time\030\007 \001(\004"
    "\"\263\001\n\032role_show_like_emotion_req\022G\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\035role_"
    "show_like_emotion_req_id\022\017\n\007role_id\030\002 \001("
    "\004\022\021\n\trole_name\030\003 \001(\t\022\022\n\nemotion_id\030\004 \001(\004"
    "\022\024\n\014show_role_id\030\005 \001(\004\"\300\001\n\032role_show_lik"
    "e_emotion_ack\022G\n\007protoid\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\035role_show_like_emotion_"
    "ack_id\022\017\n\007role_id\030\002 \001(\004\022\021\n\trole_name\030\003 \001"
    "(\t\022\022\n\nemotion_id\030\004 \001(\004\022\024\n\014show_role_id\030\005"
    " \001(\004\022\013\n\003ret\030\006 \001(\r\"\356\001\n\035role_show_comment_"
    "emotion_req\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID: role_show_comment_emotion"
    "_req_id\022\017\n\007from_id\030\002 \001(\004\022\021\n\tfrom_name\030\003 "
    "\001(\t\022\r\n\005to_id\030\004 \001(\004\022\017\n\007to_name\030\005 \001(\t\022\023\n\013m"
    "sg_content\030\006 \001(\t\022\024\n\014show_role_id\030\007 \001(\004\022\022"
    "\n\nemotion_id\030\010 \001(\004\"\217\002\n\035role_show_comment"
    "_emotion_ack\022J\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID: role_show_comment_emotio"
    "n_ack_id\022\017\n\007from_id\030\002 \001(\004\022\021\n\tfrom_name\030\003"
    " \001(\t\022\r\n\005to_id\030\004 \001(\004\022\017\n\007to_name\030\005 \001(\t\022\023\n\013"
    "msg_content\030\006 \001(\t\022\024\n\014show_role_id\030\007 \001(\004\022"
    "\022\n\nemotion_id\030\010 \001(\004\022\013\n\003ret\030\t \001(\r\022\022\n\ncomm"
    "ent_id\030\n \001(\004\"}\n\034role_show_remove_emotion"
    "_req\022I\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\037role_show_remove_emotion_req_id\022"
    "\022\n\nemotion_id\030\002 \001(\004\"\212\001\n\034role_show_remove"
    "_emotion_ack\022I\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\037role_show_remove_emotion"
    "_ack_id\022\022\n\nemotion_id\030\002 \001(\004\022\013\n\003ret\030\003 \001(\r"
    "\"\307\001\n\034role_show_remove_comment_req\022I\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\037rol"
    "e_show_remove_comment_req_id\022\017\n\007from_id\030"
    "\002 \001(\004\022\r\n\005to_id\030\003 \001(\004\022\024\n\014show_role_id\030\004 \001"
    "(\004\022\022\n\nemotion_id\030\005 \001(\004\022\022\n\ncomment_id\030\006 \001"
    "(\004\"\324\001\n\034role_show_remove_comment_ack\022I\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\037r"
    "ole_show_remove_comment_ack_id\022\017\n\007from_i"
    "d\030\002 \001(\004\022\r\n\005to_id\030\003 \001(\004\022\024\n\014show_role_id\030\004"
    " \001(\004\022\022\n\nemotion_id\030\005 \001(\004\022\022\n\ncomment_id\030\006"
    " \001(\004\022\013\n\003ret\030\007 \001(\r\"9\n\027role_show_set_hero_"
    "info\022\r\n\005index\030\001 \001(\005\022\017\n\007hero_id\030\002 \001(\003\"\221\001\n"
    "\026role_show_set_hero_req\022C\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\031role_show_set"
    "_hero_req_id\0222\n\004data\030\002 \003(\0132$.SProtoSpace"
    ".role_show_set_hero_info\"m\n\026role_show_se"
    "t_hero_ack\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\031role_show_set_hero_ack_id\022"
    "\016\n\006result\030\002 \001(\005\"t\n\030role_show_set_border_"
    "req\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\033role_show_set_border_req_id\022\021\n\tbo"
    "rder_id\030\002 \001(\005\"q\n\030role_show_set_border_ac"
    "k\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\033role_show_set_border_ack_id\022\016\n\006resu"
    "lt\030\002 \001(\005\"\235\001\n\025role_show_comment_req\022B\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030ro"
    "le_show_comment_req_id\022\024\n\014show_role_id\030\002"
    " \001(\004\022*\n\007comment\030\003 \001(\0132\031.SProtoSpace.comm"
    "ent_info\"\227\001\n\025role_show_comment_ack\022B\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030ro"
    "le_show_comment_ack_id\022\016\n\006result\030\002 \001(\005\022*"
    "\n\007comment\030\003 \001(\0132\031.SProtoSpace.comment_in"
    "fo\"\234\001\n\034role_show_delete_comment_req\022I\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\037r"
    "ole_show_delete_comment_req_id\022\017\n\007role_i"
    "d\030\002 \001(\004\022\022\n\nto_role_id\030\003 \001(\004\022\014\n\004time\030\004 \001("
    "\004\"y\n\034role_show_delete_comment_ack\022I\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\037rol"
    "e_show_delete_comment_ack_id\022\016\n\006result\030\002"
    " \001(\005\"y\n\031role_show_get_comment_req\022F\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\034rol"
    "e_show_get_comment_req_id\022\024\n\014show_role_i"
    "d\030\002 \001(\004\"\270\001\n\031role_show_get_comment_ack\022F\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\034role_show_get_comment_ack_id\022\016\n\006result\030"
    "\002 \001(\005\022\024\n\014show_role_id\030\003 \001(\004\022-\n\013comment_a"
    "ll\030\004 \001(\0132\030.SProtoSpace.comment_all\"\350\001\n\021d"
    "iscover_info_ntf\022>\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\024discover_info_ntf_id"
    "\022\014\n\004time\030\002 \001(\005\022\016\n\006update\030\003 \001(\010\022/\n\tchapte"
    "r_s\030\004 \003(\0132\034.SProtoSpace.dischapter_data\022"
    ".\n\ndiscover_s\030\005 \003(\0132\032.SProtoSpace.discov"
    "er_data\022\024\n\014star_box_ids\030\006 \003(\005\"z\n\026discove"
    "r_show_boss_ntf\022C\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\031discover_show_boss_nt"
    "f_id\022\n\n\002id\030\002 \001(\005\022\017\n\007boss_id\030\003 \001(\005\"a\n\022ent"
    "er_discover_req\022\?\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\025enter_discover_req_id"
    "\022\n\n\002id\030\002 \001(\005\"q\n\022enter_discover_ack\022\?\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\025en"
    "ter_discover_ack_id\022\016\n\006result\030\002 \001(\005\022\n\n\002i"
    "d\030\003 \001(\005\"_\n\021exit_discover_req\022>\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\024exit_dis"
    "cover_req_id\022\n\n\002id\030\002 \001(\005\"\267\001\n\021exit_discov"
    "er_ack\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\024exit_discover_ack_id\022\016\n\006result"
    "\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\022\016\n\006boxnum\030\004 \001(\005\022%\n\005it"
    "ems\030\005 \003(\0132\026.SProtoSpace.drop_data\022\017\n\007mon"
    "ster\030\006 \003(\005\"\341\001\n\025discovery_mopping_req\022B\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030"
    "discovery_mopping_req_id\0228\n\014mopping_type"
    "\030\002 \001(\0162\".SProtoSpace.eDiscoveryMoppingTy"
    "pe\022\r\n\005times\030\003 \001(\005\022\024\n\014discovery_id\030\004 \001(\005\022"
    "\017\n\007item_id\030\005 \001(\005\022\024\n\014item_add_num\030\006 \001(\005\"D"
    "\n\035discovery_mopping_ack_rewards\022\017\n\007item_"
    "id\030\001 \001(\005\022\022\n\nitem_count\030\002 \001(\005\"x\n\036discover"
    "y_mopping_ack_moppping\022\024\n\014mopping_time\030\001"
    " \001(\005\022@\n\014reward_items\030\002 \003(\0132*.SProtoSpace"
    ".discovery_mopping_ack_rewards\"\277\002\n\025disco"
    "very_mopping_ack\022B\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\030discovery_mopping_ac"
    "k_id\0228\n\014mopping_type\030\002 \001(\0162\".SProtoSpace"
    ".eDiscoveryMoppingType\022\r\n\005times\030\003 \001(\005\022&\n"
    "\003ret\030\004 \001(\0162\031.SProtoSpace.MsgErrorType\022=\n"
    "\010moppings\030\005 \003(\0132+.SProtoSpace.discovery_"
    "mopping_ack_moppping\022\034\n\024mopping_times_re"
    "main\030\006 \001(\005\022\024\n\014discovery_id\030\007 \001(\005\"u\n\027disc"
    "overy_buy_times_req\022D\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\032discovery_buy_tim"
    "es_req_id\022\024\n\014discovery_id\030\002 \001(\005\"\273\001\n\027disc"
    "overy_buy_times_ack\022D\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\032discovery_buy_tim"
    "es_ack_id\022\024\n\014discovery_id\030\002 \001(\005\022&\n\003ret\030\004"
    " \001(\0162\031.SProtoSpace.MsgErrorType\022\034\n\024moppi"
    "ng_times_remain\030\005 \001(\005\"\200\001\n\036discovery_get_"
    "section_star_req\022K\n\007protoid\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:!discovery_get_sectio"
    "n_star_req_id\022\021\n\treward_id\030\002 \001(\005\"M\n&disc"
    "overy_get_section_star_ack_rewards\022\017\n\007it"
    "em_id\030\001 \001(\005\022\022\n\nitem_count\030\002 \001(\005\"\354\001\n\036disc"
    "overy_get_section_star_ack\022K\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:!discovery_"
    "get_section_star_ack_id\022\021\n\treward_id\030\002 \001"
    "(\005\022B\n\005items\030\003 \003(\01323.SProtoSpace.discover"
    "y_get_section_star_ack_rewards\022&\n\003ret\030\004 "
    "\001(\0162\031.SProtoSpace.MsgErrorType\"\204\001\n\023royal"
    "_base_info_ntf\022A\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\026royal_base_info_ntf_i"
    "d\022*\n\004info\030\002 \001(\0132\034.SProtoSpace.royal_base"
    "_info\"V\n\022royal_all_info_req\022@\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\025royal_al"
    "l_info_req_id\"\253\001\n\022royal_all_info_ack\022@\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\025royal_all_info_ack_id\022\'\n\006royals\030\002 \003(\0132\027"
    ".SProtoSpace.royal_info\022*\n\004info\030\003 \001(\0132\034."
    "SProtoSpace.royal_base_info\"T\n\021royal_ref"
    "resh_req\022\?\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\024royal_refresh_req_id\"t\n\021roy"
    "al_refresh_ack\022\?\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\024royal_refresh_ack_id\022"
    "\013\n\003ret\030\002 \001(\005\022\021\n\troyal_ids\030\003 \003(\005\"b\n\017royal"
    "_visit_req\022=\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\022royal_visit_req_id\022\020\n\010roy"
    "al_id\030\002 \001(\005\"\253\001\n\017royal_visit_ack\022=\n\010proto"
    "_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\022roya"
    "l_visit_ack_id\022\020\n\010royal_id\030\002 \001(\005\022\020\n\010even"
    "t_id\030\003 \001(\005\022(\n\004data\030\004 \001(\0132\032.SProtoSpace.q"
    "uestion_data\022\013\n\003ret\030\005 \001(\005\"\266\001\n\020royal_rewa"
    "rd_ntf\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\023royal_reward_ntf_id\022\020\n\010event_i"
    "d\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\022\016\n\006is_win\030\004 \001(\010\022&\n"
    "\006reward\030\005 \003(\0132\026.SProtoSpace.item_info\022\013\n"
    "\003ret\030\006 \001(\005\"\243\001\n\016all_royals_ntf\022<\n\010proto_i"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021all_ro"
    "yals_ntf_id\022\'\n\006royals\030\002 \003(\0132\027.SProtoSpac"
    "e.royal_info\022*\n\004info\030\003 \001(\0132\034.SProtoSpace"
    ".royal_base_info\"\202\001\n\024royal_pro_update_nt"
    "f\022B\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\027royal_pro_update_ntf_id\022&\n\005royal\030\002"
    " \001(\0132\027.SProtoSpace.royal_info\"v\n\032royal_t"
    "ask_reward_draw_ntf\022H\n\010proto_id\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\035royal_task_rewar"
    "d_draw_ntf_id\022\016\n\003ret\030\002 \001(\r:\0010\"\217\001\n\032game_u"
    "pdate_royal_task_ntf\022H\n\010proto_id\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\035game_update_roy"
    "al_task_ntf_id\022\'\n\006royals\030\002 \003(\0132\027.SProtoS"
    "pace.royal_info\"\217\001\n\036game_royal_intimacy_"
    "reward_req\022L\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:!game_royal_intimacy_rewar"
    "d_req_id\022\020\n\010royal_id\030\002 \001(\r\022\r\n\005index\030\003 \001("
    "\r\"\234\001\n\036game_royal_intimacy_reward_ack\022L\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "!game_royal_intimacy_reward_ack_id\022\013\n\003re"
    "t\030\002 \001(\r\022\020\n\010royal_id\030\003 \001(\r\022\r\n\005index\030\004 \001(\r"
    "\"\235\001\n\032game_royal_draw_reward_req\022H\n\010proto"
    "_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\035game"
    "_royal_draw_reward_req_id\022\034\n\024royal_task_"
    "config_id\030\002 \001(\r\022\027\n\017royal_config_id\030\003 \001(\r"
    "\"v\n\032game_royal_draw_reward_ack\022H\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\035game_"
    "royal_draw_reward_ack_id\022\016\n\003ret\030\002 \001(\r:\0010"
    "\"s\n\027game_royal_all_data_req\022E\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\032game_roy"
    "al_all_data_req_id\022\021\n\tconfig_id\030\002 \003(\r\"\211\001"
    "\n\027game_royal_all_data_ack\022E\n\010proto_id\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\032game_royal"
    "_all_data_ack_id\022\'\n\006royals\030\002 \003(\0132\027.SProt"
    "oSpace.royal_info\"{\n\033game_royal_refresh_"
    "data_req\022I\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\036game_royal_refresh_data_req"
    "_id\022\021\n\tconfig_id\030\002 \003(\r\"\236\001\n\033game_royal_re"
    "fresh_data_ack\022I\n\010proto_id\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\036game_royal_refresh_da"
    "ta_ack_id\022\013\n\003ret\030\002 \001(\r\022\'\n\006royals\030\003 \003(\0132\027"
    ".SProtoSpace.royal_info\"|\n\025game_royal_qi"
    "ngan_req\022C\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\030game_royal_qingan_req_id\022\014\n"
    "\004uuid\030\002 \001(\004\022\020\n\010royal_id\030\003 \001(\r\"\222\001\n\025game_r"
    "oyal_qingan_ack\022C\n\010proto_id\030\001 \001(\0162\027.SPro"
    "toSpace.ECSProtoID:\030game_royal_qingan_ac"
    "k_id\022\013\n\003ret\030\002 \001(\r\022\'\n\006royals\030\003 \003(\0132\027.SPro"
    "toSpace.royal_info\"o\n\025game_royal_unlock_"
    "req\022C\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\030game_royal_unlock_req_id\022\021\n\tconf"
    "ig_id\030\002 \001(\r\"i\n\025game_royal_unlock_ack\022C\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\030game_royal_unlock_ack_id\022\013\n\003ret\030\002 \001(\r\"\205"
    "\001\n\030game_branch_task_fin_req\022F\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033game_bra"
    "nch_task_fin_req_id\022\020\n\010royal_id\030\002 \001(\r\022\017\n"
    "\007task_id\030\003 \001(\r\"o\n\030game_branch_task_fin_a"
    "ck\022F\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\033game_branch_task_fin_ack_id\022\013\n\003re"
    "t\030\002 \001(\r\"j\n\023game_royal_chat_req\022A\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026game_"
    "royal_chat_req_id\022\020\n\010royal_id\030\002 \001(\r\"v\n\023g"
    "ame_royal_chat_ack\022A\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\026game_royal_chat_a"
    "ck_id\022\013\n\003ret\030\002 \001(\r\022\017\n\007task_id\030\003 \001(\r\"b\n\030g"
    "ame_royal_get_gifts_req\022F\n\010proto_id\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\033game_royal_g"
    "et_gifts_req_id\"\241\001\n\030game_royal_get_gifts"
    "_ack\022F\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\033game_royal_get_gifts_ack_id\0220\n\n"
    "gift_infos\030\002 \003(\0132\034.SProtoSpace.royal_gif"
    "t_info\022\013\n\003ret\030\003 \001(\r\"\205\001\n\030game_royal_give_"
    "gift_req\022F\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\033game_royal_give_gift_req_id"
    "\022\020\n\010royal_id\030\002 \001(\r\022\017\n\007gift_id\030\003 \001(\r\"\200\001\n\030"
    "game_royal_give_gift_ack\022F\n\010proto_id\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\033game_royal_"
    "give_gift_ack_id\022\013\n\003ret\030\002 \001(\r\022\017\n\007gift_id"
    "\030\003 \001(\r\"x\n\032game_royal_enter_scene_req\022H\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\035game_royal_enter_scene_req_id\022\020\n\010scene_"
    "id\030\002 \001(\r\"\301\001\n\032game_royal_enter_scene_ack\022"
    "H\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\035game_royal_enter_scene_ack_id\022\013\n\003ret"
    "\030\002 \001(\r\022\017\n\007task_id\030\003 \001(\r\022\020\n\010scene_id\030\004 \001("
    "\r\022\020\n\010royal_id\030\005 \001(\r\022\027\n\010can_find\030\006 \001(\010:\005f"
    "alse\"\225\001\n\030game_royal_event_fin_req\022F\n\010pro"
    "to_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033ga"
    "me_royal_event_fin_req_id\022\017\n\007task_id\030\002 \001"
    "(\r\022\020\n\010royal_id\030\003 \001(\r\022\016\n\006result\030\004 \001(\r\"\242\001\n"
    "\030game_royal_event_fin_ack\022F\n\010proto_id\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\033game_royal"
    "_event_fin_ack_id\022\017\n\007task_id\030\002 \001(\r\022\020\n\010ro"
    "yal_id\030\003 \001(\r\022\016\n\006result\030\004 \001(\r\022\013\n\003ret\030\005 \001("
    "\r\"Z\n\024get_offical_data_req\022B\n\010proto_id\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\027get_offica"
    "l_data_req_id\"\350\002\n\024get_offical_data_ack\022B"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\027get_offical_data_ack_id\022\013\n\003ret\030\002 \001(\r\022"
    "\021\n\tcur_grade\030\003 \001(\r\022\021\n\tmax_grade\030\004 \001(\r\022\023\n"
    "\013apply_grade\030\005 \001(\r\022\022\n\napply_time\030\006 \001(\004\022\017"
    "\n\007is_draw\030\007 \001(\010\022\026\n\016last_draw_time\030\010 \001(\004\022"
    "\036\n\026daily_offical_chal_num\030\t \001(\005\022\022\n\nlast_"
    "grade\030\n \001(\r\022\r\n\005exist\030\013 \001(\010\022\022\n\nranking_id"
    "\030\014 \001(\005\0220\n\ttime_data\030\r \003(\0132\035.SProtoSpace."
    "grade_match_conf\"\370\001\n\020offical_data_ntf\022>\n"
    "\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\023offical_data_ntf_id\022\021\n\tcur_grade\030\002 \001(\005"
    "\022\021\n\tmax_grade\030\003 \001(\005\022\023\n\013apply_grade\030\004 \001(\005"
    "\022\014\n\004lock\030\005 \001(\010\022\022\n\napply_time\030\006 \001(\004\022\017\n\007is"
    "_draw\030\007 \001(\010\022\026\n\016last_draw_time\030\010 \001(\004\022\036\n\026d"
    "aily_offical_chal_num\030\t \001(\005\"z\n\020update_ch"
    "est_ntf\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\023update_chest_ntf_id\022\'\n\006chests"
    "\030\002 \003(\0132\027.SProtoSpace.role_chest\"h\n\022get_r"
    "ole_chest_req\022@\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\025get_role_chest_req_id\022"
    "\020\n\010chest_id\030\002 \001(\004\"u\n\022get_role_chest_ack\022"
    "@\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\025get_role_chest_ack_id\022\020\n\010chest_id\030\002 "
    "\001(\004\022\013\n\003ret\030\003 \001(\r\"\371\001\n\017create_team_req\022=\n\010"
    "proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\022create_team_req_id\022)\n\tteam_type\030\002 \001(\0162\026"
    ".SProtoSpace.eTeamType\022)\n\tteam_size\030\003 \001("
    "\0162\026.SProtoSpace.eTeamSize\022/\n\tteam_perm\030\004"
    " \001(\0162\034.SProtoSpace.eTeamPermission\022\021\n\tte"
    "am_name\030\005 \001(\t\022\r\n\005heros\030\006 \003(\004\"\206\002\n\017create_"
    "team_ack\022=\n\010proto_id\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\022create_team_ack_id\022)\n\tteam_"
    "type\030\002 \001(\0162\026.SProtoSpace.eTeamType\022)\n\tte"
    "am_size\030\003 \001(\0162\026.SProtoSpace.eTeamSize\022/\n"
    "\tteam_perm\030\004 \001(\0162\034.SProtoSpace.eTeamPerm"
    "ission\022\021\n\tteam_name\030\005 \001(\t\022\r\n\005heros\030\006 \003(\004"
    "\022\013\n\003ret\030\007 \001(\r\"n\n\016enter_team_req\022<\n\010proto"
    "_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021ente"
    "r_team_req_id\022\017\n\007team_id\030\002 \001(\004\022\r\n\005heros\030"
    "\003 \003(\004\"l\n\016enter_team_ack\022<\n\010proto_id\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\021enter_team_a"
    "ck_id\022\017\n\007team_id\030\002 \001(\004\022\013\n\003ret\030\003 \001(\r\"]\n\re"
    "xit_team_req\022;\n\010proto_id\030\001 \001(\0162\027.SProtoS"
    "pace.ECSProtoID:\020exit_team_req_id\022\017\n\007tea"
    "m_id\030\002 \001(\004\"j\n\rexit_team_ack\022;\n\010proto_id\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\020exit_tea"
    "m_ack_id\022\017\n\007team_id\030\002 \001(\004\022\013\n\003ret\030\003 \001(\r\"v"
    "\n\017update_team_ntf\022=\n\010proto_id\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\022update_team_ntf_id"
    "\022$\n\004team\030\002 \001(\0132\026.SProtoSpace.team_data\"_"
    "\n\016ready_team_req\022<\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\021ready_team_req_id\022\017"
    "\n\007team_id\030\002 \001(\004\"l\n\016ready_team_ack\022<\n\010pro"
    "to_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021re"
    "ady_team_ack_id\022\017\n\007team_id\030\002 \001(\004\022\013\n\003ret\030"
    "\003 \001(\r\"\203\001\n\017update_team_req\022=\n\010proto_id\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\022update_tea"
    "m_req_id\022\017\n\007team_id\030\002 \001(\004\022\017\n\007slot_id\030\003 \001"
    "(\r\022\017\n\007hero_id\030\004 \001(\004\"\220\001\n\017update_team_ack\022"
    "=\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\022update_team_ack_id\022\017\n\007team_id\030\002 \001(\004\022"
    "\017\n\007slot_id\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\004\022\013\n\003ret"
    "\030\005 \001(\r\"\342\001\n\rget_teams_req\022;\n\010proto_id\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\020get_teams_r"
    "eq_id\022)\n\tteam_type\030\002 \001(\0162\026.SProtoSpace.e"
    "TeamType\022)\n\tteam_size\030\003 \001(\0162\026.SProtoSpac"
    "e.eTeamSize\022/\n\tteam_perm\030\004 \001(\0162\034.SProtoS"
    "pace.eTeamPermission\022\r\n\005parms\030\005 \003(\005\"\201\001\n\r"
    "get_teams_ack\022;\n\010proto_id\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\020get_teams_ack_id\022\013\n\003re"
    "t\030\002 \001(\r\022&\n\005teams\030\003 \003(\0132\027.SProtoSpace.tea"
    "m_brief\"\210\001\n\033invite_roles_enter_team_req\022"
    "I\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\036invite_roles_enter_team_req_id\022\017\n\007te"
    "am_id\030\002 \001(\004\022\r\n\005roles\030\003 \003(\004\"\206\001\n\033invite_ro"
    "les_enter_team_ack\022I\n\010proto_id\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\036invite_roles_ente"
    "r_team_ack_id\022\017\n\007team_id\030\002 \001(\004\022\013\n\003ret\030\003 "
    "\001(\r\"\327\001\n\025invite_enter_team_ntf\022C\n\010proto_i"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030invite"
    "_enter_team_ntf_id\022\024\n\014dest_role_id\030\002 \001(\004"
    "\022\017\n\007team_id\030\003 \001(\004\022\021\n\tteam_name\030\004 \001(\t\022\021\n\t"
    "team_type\030\005 \001(\r\022\024\n\014sour_role_id\030\006 \001(\004\022\026\n"
    "\016sour_role_name\030\007 \001(\t\"\225\001\n\024get_offical_ra"
    "nk_req\022B\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\027get_offical_rank_req_id\022\021\n\tof"
    "fice_lv\030\002 \001(\005\022\023\n\013start_index\030\003 \001(\r\022\021\n\ten"
    "d_index\030\004 \001(\r\"\233\001\n\024get_offical_rank_ack\022B"
    "\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\027get_offical_rank_ack_id\022\013\n\003ret\030\002 \001(\r\022"
    "2\n\nrank_items\030\003 \003(\0132\036.SProtoSpace.offica"
    "l_item_data\"\247\001\n\031get_offical_rank_info_re"
    "q\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\034get_offical_rank_info_req_id\022\021\n\tof"
    "fice_lv\030\002 \001(\005\022\023\n\013start_index\030\003 \001(\005\022\013\n\003le"
    "n\030\004 \001(\005\022\014\n\004show\030\005 \001(\010\"\345\002\n\031get_offical_ra"
    "nk_info_ack\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\034get_offical_rank_info_ac"
    "k_id\022\013\n\003ret\030\002 \001(\r\022\035\n\025offical_challenge_n"
    "um\030\003 \001(\005\022\035\n\025offical_challenge_buy\030\004 \001(\005\022"
    "/\n\007my_item\030\005 \001(\0132\036.SProtoSpace.offical_i"
    "tem_data\022\024\n\014current_size\030\006 \001(\005\0222\n\nrank_i"
    "tems\030\007 \003(\0132\036.SProtoSpace.offical_item_da"
    "ta\0229\n\013equip_items\030\010 \003(\0132$.SProtoSpace.ro"
    "le_show_role_equipped\"u\n\031get_offical_for"
    "mation_req\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\034get_offical_formation_req"
    "_id\022\017\n\007role_id\030\002 \001(\004\"\200\002\n\031get_offical_for"
    "mation_ack\022G\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\034get_offical_formation_ack"
    "_id\022\013\n\003ret\030\002 \001(\r\022\017\n\007role_id\030\003 \001(\004\022\014\n\004nam"
    "e\030\004 \001(\t\022\013\n\003sex\030\005 \001(\005\022\014\n\004head\030\006 \001(\t\022\014\n\004bo"
    "rd\030\007 \001(\005\022\r\n\005grade\030\010 \001(\005\022\n\n\002lv\030\t \001(\005\022*\n\005h"
    "eros\030\n \003(\0132\033.SProtoSpace.hero_base_info\""
    "\217\001\n\032challenge_offical_rank_req\022H\n\010proto_"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\035chall"
    "enge_offical_rank_req_id\022\021\n\toffice_lv\030\002 "
    "\001(\005\022\024\n\014dest_role_id\030\003 \001(\004\"\252\003\n\032challenge_"
    "offical_rank_ack\022H\n\010proto_id\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\035challenge_offical_r"
    "ank_ack_id\022\013\n\003ret\030\002 \001(\r\022\021\n\toffice_lv\030\003 \001"
    "(\005\022\024\n\014dest_role_id\030\004 \001(\004\022\034\n\024dest_older_r"
    "ankingid\030\005 \001(\005\022\032\n\022dest_new_rankingid\030\006 \001"
    "(\005\022\024\n\014sour_role_id\030\007 \001(\004\022\034\n\024sour_older_r"
    "ankingid\030\010 \001(\005\022\032\n\022sour_new_rankingid\030\t \001"
    "(\005\022\021\n\tbattle_id\030\n \001(\004\022\013\n\003win\030\013 \001(\010\022\'\n\005it"
    "ems\030\014 \003(\0132\030.SProtoSpace.reward_item\022\r\n\005m"
    "erit\030\r \001(\005\022*\n\005heros\030\016 \003(\0132\033.SProtoSpace."
    "hero_base_info\"\203\001\n\037offical_apply_battle_"
    "result_req\022M\n\010proto_id\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\"offical_apply_battle_resu"
    "lt_req_id\022\021\n\toffice_lv\030\002 \001(\005\"\236\002\n\037offical"
    "_apply_battle_result_ack\022M\n\010proto_id\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\"offical_app"
    "ly_battle_result_ack_id\022\021\n\toffice_lv\030\002 \001"
    "(\005\022\014\n\004time\030\003 \001(\005\022.\n\004data\030\004 \003(\0132 .SProtoS"
    "pace.offical_member_data\0229\n\006mydata\030\005 \003(\013"
    "2).SProtoSpace.offical_apply_my_battle_d"
    "ata\022\023\n\013my_place_id\030\006 \001(\005\022\013\n\003ret\030\007 \001(\r\"\224\001"
    "\n\024role_plot_upload_req\022A\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\027role_plot_uplo"
    "ad_req_id\022\022\n\nchapter_id\030\002 \001(\r\022\021\n\tscreen_"
    "id\030\003 \001(\r\022\022\n\nsection_id\030\004 \001(\r\"l\n\024role_plo"
    "t_upload_ack\022A\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\027role_plot_upload_ack_id\022"
    "\021\n\006result\030\002 \001(\005:\0010\"\201\001\n\021role_plot_get_req"
    "\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:\024role_plot_get_req_id\022,\n\010get_type\030\002 \001"
    "(\0162\032.SProtoSpace.GET_PLOT_TYPE\"\276\001\n\021role_"
    "plot_get_ack\022>\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\024role_plot_get_ack_id\022\021\n\006"
    "result\030\002 \001(\005:\0010\0221\n\nplot_infos\030\003 \003(\0132\035.SP"
    "rotoSpace.plot_screen_info\022\022\n\nbranch_ids"
    "\030\004 \003(\r\022\017\n\007end_ids\030\005 \003(\r\"p\n\014plot_end_req\022"
    "9\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\017plot_end_req_id\022\022\n\nchapter_id\030\002 \001(\r\022\021"
    "\n\tscreen_id\030\003 \001(\r\"p\n\014plot_end_ack\0229\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\017plo"
    "t_end_ack_id\022\021\n\006result\030\002 \001(\005:\0010\022\022\n\nget_e"
    "nd_id\030\003 \003(\005\"\200\001\n\024plot_chapter_end_req\022A\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027"
    "plot_chapter_end_req_id\022\022\n\nchapter_id\030\002 "
    "\001(\r\022\021\n\tscreen_id\030\003 \001(\r\"l\n\024plot_chapter_e"
    "nd_ack\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\027plot_chapter_end_ack_id\022\021\n\006res"
    "ult\030\002 \001(\005:\0010\"\227\001\n\026plot_choose_branch_req\022"
    "C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\031plot_choose_branch_req_id\022\022\n\nchapter_"
    "id\030\002 \001(\r\022\021\n\tscreen_id\030\003 \001(\r\022\021\n\tbranch_id"
    "\030\004 \001(\r\"\334\002\n\026plot_choose_branch_ack\022C\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031plo"
    "t_choose_branch_ack_id\022\021\n\006result\030\002 \001(\005:\001"
    "0\022A\n\023add_character_infos\030\003 \003(\0132$.SProtoS"
    "pace.add_character_attr_info\022:\n\017add_roya"
    "l_infos\030\004 \003(\0132!.SProtoSpace.add_royal_va"
    "lue_info\0221\n\014reward_items\030\005 \003(\0132\033.SProtoS"
    "pace.itemid_and_num\022\022\n\nchapter_id\030\006 \001(\r\022"
    "\021\n\tscreen_id\030\007 \001(\r\022\021\n\tbranch_id\030\010 \001(\r\"\231\001"
    "\n\027plot_trigger_action_req\022D\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\032plot_trigge"
    "r_action_req_id\022\022\n\nchapter_id\030\002 \001(\r\022\021\n\ts"
    "creen_id\030\003 \001(\r\022\021\n\taction_id\030\004 \001(\r\"\245\001\n\027pl"
    "ot_trigger_action_ack\022D\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\032plot_trigger_ac"
    "tion_ack_id\022\021\n\006result\030\002 \001(\005:\0010\0221\n\014reward"
    "_items\030\003 \003(\0132\033.SProtoSpace.itemid_and_nu"
    "m\"\237\003\n\016all_event_info\0226\n\revent_offical\030\001 "
    "\001(\0132\037.SProtoSpace.event_offical_info\0224\n\014"
    "event_qingan\030\002 \001(\0132\036.SProtoSpace.event_q"
    "ingan_info\0220\n\nevent_slap\030\003 \001(\0132\034.SProtoS"
    "pace.event_slap_info\0226\n\revent_tribute\030\004 "
    "\001(\0132\037.SProtoSpace.event_tribute_info\022>\n\021"
    "event_send_flower\030\005 \001(\0132#.SProtoSpace.ev"
    "ent_flower_send_info\022<\n\024event_receive_fl"
    "ower\030\006 \001(\0132\036.SProtoSpace.event_flower_in"
    "fo\0227\n\014event_reduce\030\007 \001(\0132!.SProtoSpace.e"
    "vent_offical_reduce\"\211\002\n\025client_event_msg"
    "_info\022\017\n\007from_id\030\001 \001(\004\022\021\n\tfrom_name\030\002 \001("
    "\t\022\017\n\007from_lv\030\003 \001(\r\022\020\n\010from_sex\030\004 \001(\r\022\022\n\n"
    "from_grade\030\005 \001(\r\022\023\n\013from_border\030\006 \001(\005\022\022\n"
    "\nevent_type\030\007 \001(\r\022\020\n\010add_time\030\010 \001(\004\022\017\n\007i"
    "s_read\030\t \001(\010\022\027\n\017msg_template_id\030\n \001(\r\0220\n"
    "\013msg_content\030\013 \001(\0132\033.SProtoSpace.all_eve"
    "nt_info\"[\n\025event_msg_get_all_req\022B\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030even"
    "t_msg_get_all_req_id\"\240\001\n\025event_msg_get_a"
    "ll_ack\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\030event_msg_get_all_ack_id\022\021\n\006re"
    "sult\030\002 \001(\005:\0010\0220\n\004msgs\030\003 \003(\0132\".SProtoSpac"
    "e.client_event_msg_info\"i\n\022event_msg_rea"
    "d_req\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\025event_msg_read_req_id\022\022\n\nevent_"
    "type\030\002 \001(\r\"|\n\022event_msg_read_ack\022\?\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\025even"
    "t_msg_read_ack_id\022\021\n\006result\030\002 \001(\005:\0010\022\022\n\n"
    "event_type\030\003 \001(\r\"g\n\021event_msg_del_req\022>\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\024event_msg_del_req_id\022\022\n\nevent_type\030\002 \001("
    "\r\"z\n\021event_msg_del_ack\022>\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\024event_msg_del_"
    "ack_id\022\021\n\006result\030\002 \001(\005:\0010\022\022\n\nevent_type\030"
    "\003 \001(\r\"}\n\revent_msg_nty\022:\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\020event_msg_nty_"
    "id\0220\n\004msgs\030\002 \001(\0132\".SProtoSpace.client_ev"
    "ent_msg_info\"s\n\027event_msg_get_by_id_req\022"
    "D\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\032event_msg_get_by_id_req_id\022\022\n\nevent_u"
    "uid\030\002 \001(\004\"\243\001\n\027event_msg_get_by_id_ack\022D\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\032event_msg_get_by_id_ack_id\022\021\n\006result\030\002 "
    "\001(\005:\0010\022/\n\003msg\030\003 \001(\0132\".SProtoSpace.client"
    "_event_msg_info\"\241\001\n\021get_rank_data_req\022>\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\024get_rank_data_req_id\022$\n\004type\030\002 \001(\0162\026.SP"
    "rotoSpace.RANK_TYPE\022\023\n\013start_index\030\003 \001(\005"
    "\022\021\n\tend_index\030\004 \001(\005\"\214\002\n\021get_rank_data_ac"
    "k\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\024get_rank_data_ack_id\022\013\n\003ret\030\002 \001(\005\022$"
    "\n\004type\030\003 \001(\0162\026.SProtoSpace.RANK_TYPE\022\023\n\013"
    "start_index\030\004 \001(\005\022\021\n\tend_index\030\005 \001(\005\022.\n\007"
    "my_item\030\006 \001(\0132\035.SProtoSpace.rank_common_"
    "item\022,\n\005items\030\007 \003(\0132\035.SProtoSpace.rank_c"
    "ommon_item\"\251\001\n\025role_uint_achievement\022\026\n\016"
    "task_config_id\030\001 \001(\005\022(\n\005state\030\002 \001(\0162\031.SP"
    "rotoSpace.EQuestStatus\022\026\n\016state_utc_time"
    "\030\003 \001(\r\022\024\n\014current_step\030\004 \001(\r\022\020\n\010max_step"
    "\030\005 \001(\r\022\016\n\006is_new\030\006 \001(\010\"^\n\037role_achieveme"
    "nts_ntf_type_list\022\021\n\tbig_types\030\001 \001(\005\022\023\n\013"
    "small_types\030\002 \003(\005\022\023\n\013big_type_pt\030\003 \001(\r\"\217"
    "\002\n\025role_achievements_ntf\022B\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\030role_achieve"
    "ments_ntf_id\0228\n\014achievements\030\002 \003(\0132\".SPr"
    "otoSpace.role_uint_achievement\022 \n\030points"
    "_reward_getted_ids\030\003 \003(\005\022:\n\004list\030\004 \003(\0132,"
    ".SProtoSpace.role_achievements_ntf_type_"
    "list\022\032\n\022current_achieve_pt\030\005 \001(\r\"\211\001\n rol"
    "e_achievement_get_rewards_req\022M\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:#role_ac"
    "hievement_get_rewards_req_id\022\026\n\016task_con"
    "fig_id\030\002 \003(\005\"\342\001\n role_achievement_get_re"
    "wards_ack\022M\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:#role_achievement_get_reward"
    "s_ack_id\022\037\n\027succeed_get_award_tasks\030\002 \003("
    "\005\022\036\n\026failed_get_award_tasks\030\003 \003(\005\022.\n\013err"
    "or_codes\030\004 \003(\0162\031.SProtoSpace.MsgErrorTyp"
    "e\"\227\001\n\"role_achievement_point_rewards_req"
    "\022O\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProto"
    "ID:%role_achievement_point_rewards_req_i"
    "d\022 \n\030achievement_pt_reward_id\030\002 \003(\005\"\342\001\n\""
    "role_achievement_point_rewards_ack\022O\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:%ro"
    "le_achievement_point_rewards_ack_id\022\035\n\025s"
    "ucceed_get_award_ids\030\002 \003(\005\022\034\n\024failed_get"
    "_award_ids\030\003 \003(\005\022.\n\013error_codes\030\004 \003(\0162\031."
    "SProtoSpace.MsgErrorType\"w\n\016flower_bag_n"
    "ty\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\021flower_bag_nty_id\022(\n\006flower\030\002 \001(\0132"
    "\030.SProtoSpace.flower_info\"U\n\022flower_bag_"
    "all_req\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\025flower_bag_all_req_id\"\222\001\n\022flo"
    "wer_bag_all_ack\022\?\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\025flower_bag_all_ack_id"
    "\022\021\n\006result\030\002 \001(\005:\0010\022(\n\006flower\030\003 \003(\0132\030.SP"
    "rotoSpace.flower_info\"\177\n\022flower_bag_all_"
    "nty\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\025flower_bag_all_nty_id\022(\n\006flower\030\002"
    " \003(\0132\030.SProtoSpace.flower_info\"\201\001\n\017flowe"
    "r_send_req\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\022flower_send_req_id\0220\n\tsend"
    "_info\030\002 \001(\0132\035.SProtoSpace.flower_send_in"
    "fo\"b\n\017flower_send_ack\022<\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\022flower_send_ack"
    "_id\022\021\n\006result\030\002 \001(\005:\0010\"\265\001\n\022flower_receiv"
    "e_nty\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\025flower_receive_nty_id\022\024\n\014from_r"
    "ole_id\030\002 \001(\004\022\037\n\027send_flower_template_id\030"
    "\003 \001(\005\022\027\n\017send_flower_num\030\004 \001(\005\022\016\n\006remark"
    "\030\005 \001(\t\"\256\001\n\023role_draw_card_info\022\024\n\014draw_t"
    "ype_id\030\001 \001(\005\022\030\n\020now_remain_times\030\002 \001(\005\022\031"
    "\n\021remain_free_times\030\003 \001(\005\022\032\n\022remain_limi"
    "t_times\030\004 \001(\005\022\025\n\rnext_add_time\030\005 \001(\r\022\031\n\021"
    "next_sp_drop_time\030\006 \001(\005\"7\n\032role_draw_car"
    "d_reward_item\022\n\n\002id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005"
    "\"\247\001\n\026role_draw_card_rewards\022\r\n\005count\030\001 \001"
    "(\005\022\?\n\016random_results\030\002 \003(\0132\'.SProtoSpace"
    ".role_draw_card_reward_item\022=\n\014real_resu"
    "lts\030\003 \003(\0132\'.SProtoSpace.role_draw_card_r"
    "eward_item\"_\n\027role_draw_card_info_req\022D\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\032role_draw_card_info_req_id\"\220\001\n\027role_dra"
    "w_card_info_ack\022D\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:\032role_draw_card_info_a"
    "ck_id\022/\n\005lists\030\002 \003(\0132 .SProtoSpace.role_"
    "draw_card_info\"\243\001\n\022role_draw_card_req\022\?\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\025role_draw_card_req_id\022\024\n\014draw_type_id\030\002"
    " \001(\005\0226\n\016need_coin_type\030\003 \001(\0162\036.SProtoSpa"
    "ce.eDrawCardCoinType\"\271\002\n\022role_draw_card_"
    "ack\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\025role_draw_card_ack_id\022\024\n\014draw_typ"
    "e_id\030\002 \001(\005\0226\n\016need_coin_type\030\003 \001(\0162\036.SPr"
    "otoSpace.eDrawCardCoinType\0224\n\007results\030\004 "
    "\003(\0132#.SProtoSpace.role_draw_card_rewards"
    "\022/\n\005lists\030\005 \003(\0132 .SProtoSpace.role_draw_"
    "card_info\022-\n\nerror_code\030\006 \001(\0162\031.SProtoSp"
    "ace.MsgErrorType\"]\n\026role_draw_card_ssr_r"
    "eq\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\031role_draw_card_ssr_req_id\">\n\032role_"
    "draw_card_ssr_ack_one\022\017\n\007role_id\030\001 \001(\004\022\017"
    "\n\007item_id\030\002 \001(\005\"\227\001\n\026role_draw_card_ssr_a"
    "ck\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\031role_draw_card_ssr_ack_id\0228\n\007resul"
    "ts\030\002 \003(\0132\'.SProtoSpace.role_draw_card_ss"
    "r_ack_one\"m\n\030role_talent_activate_req\022E\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\033role_talent_activate_req_id\022\n\n\002id\030\002 \001(\005"
    "\"z\n\030role_talent_activate_ack\022E\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033role_tal"
    "ent_activate_ack_id\022\n\n\002id\030\002 \001(\005\022\013\n\003ret\030\004"
    " \001(\005\"k\n\035all_role_talents_activate_req\022J\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    " all_role_talents_activate_req_id\"\211\001\n\035al"
    "l_role_talents_activate_ack\022J\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID: all_role_"
    "talents_activate_ack_id\022\017\n\007id_list\030\002 \003(\005"
    "\022\013\n\003ret\030\003 \001(\005\"m\n\025switch_role_skill_req\022B"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\030switch_role_skill_req_id\022\020\n\010skill_id\030\002"
    " \001(\005\"z\n\025switch_role_skill_ack\022B\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030switch_"
    "role_skill_ack_id\022\020\n\010skill_id\030\002 \001(\005\022\013\n\003r"
    "et\030\003 \001(\005\"\333\001\n\020talisman_use_req\022=\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023talisma"
    "n_use_req_id\022,\n\004dest\030\002 \001(\0162\036.SProtoSpace"
    ".ETalismanDestType\022\025\n\rtalisman_uuid\030\003 \001("
    "\004\022\021\n\thero_uuid\030\004 \001(\004\0220\n\010use_slot\030\005 \001(\0162\036"
    ".SProtoSpace.EHeroTalismanSlot\"\350\001\n\020talis"
    "man_use_ack\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\023talisman_use_ack_id\022\013\n\003re"
    "t\030\002 \001(\005\022,\n\004dest\030\003 \001(\0162\036.SProtoSpace.ETal"
    "ismanDestType\022\025\n\rtalisman_uuid\030\004 \001(\004\022\021\n\t"
    "hero_uuid\030\005 \001(\004\0220\n\010use_slot\030\006 \001(\0162\036.SPro"
    "toSpace.EHeroTalismanSlot\"\315\001\n\023talisman_u"
    "n_use_req\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace"
    ".ECSProtoID:\026talisman_un_use_req_id\022,\n\004d"
    "est\030\002 \001(\0162\036.SProtoSpace.ETalismanDestTyp"
    "e\0223\n\013un_use_slot\030\003 \001(\0162\036.SProtoSpace.EHe"
    "roTalismanSlot\022\021\n\thero_uuid\030\004 \001(\004\"\332\001\n\023ta"
    "lisman_un_use_ack\022@\n\007protoid\030\001 \001(\0162\027.SPr"
    "otoSpace.ECSProtoID:\026talisman_un_use_ack"
    "_id\022\013\n\003ret\030\002 \001(\005\022,\n\004dest\030\003 \001(\0162\036.SProtoS"
    "pace.ETalismanDestType\0223\n\013un_use_slot\030\004 "
    "\001(\0162\036.SProtoSpace.EHeroTalismanSlot\022\021\n\th"
    "ero_uuid\030\005 \001(\004\"\301\001\n\022talisman_lv_up_req\022\?\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\025talisman_lv_up_req_id\022,\n\004dest\030\002 \001(\0162\036.S"
    "ProtoSpace.ETalismanDestType\022\021\n\thero_uui"
    "d\030\003 \001(\004\022\025\n\rtalisman_uuid\030\004 \001(\004\022\022\n\ncost_u"
    "uids\030\005 \003(\004\"\316\001\n\022talisman_lv_up_ack\022\?\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\025tal"
    "isman_lv_up_ack_id\022\013\n\003ret\030\002 \001(\005\022,\n\004dest\030"
    "\003 \001(\0162\036.SProtoSpace.ETalismanDestType\022\021\n"
    "\thero_uuid\030\004 \001(\004\022\025\n\rtalisman_uuid\030\005 \001(\004\022"
    "\022\n\ncost_uuids\030\006 \003(\004\"\255\001\n\022talisman_break_r"
    "eq\022\?\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\025talisman_break_req_id\022,\n\004dest\030\002 \001("
    "\0162\036.SProtoSpace.ETalismanDestType\022\021\n\ther"
    "o_uuid\030\003 \001(\004\022\025\n\rtalisman_uuid\030\004 \001(\004\"\272\001\n\022"
    "talisman_break_ack\022\?\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\025talisman_break_ack"
    "_id\022\013\n\003ret\030\002 \001(\005\022,\n\004dest\030\003 \001(\0162\036.SProtoS"
    "pace.ETalismanDestType\022\021\n\thero_uuid\030\004 \001("
    "\004\022\025\n\rtalisman_uuid\030\005 \001(\004\"\366\001\n\023talisman_ch"
    "ange_ntf\022@\n\007protoid\030\001 \001(\0162\027.SProtoSpace."
    "ECSProtoID:\026talisman_change_ntf_id\022.\n\004ty"
    "pe\030\002 \001(\0162 .SProtoSpace.ETalismanChangeTy"
    "pe\022,\n\004dest\030\003 \001(\0162\036.SProtoSpace.ETalisman"
    "DestType\022\021\n\thero_uuid\030\004 \001(\004\022,\n\010talisman\030"
    "\005 \001(\0132\032.SProtoSpace.talisman_data\"p\n\nred"
    "_pt_req\0227\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\rred_pt_req_id\022)\n\010sys_id_s\030\002 \003"
    "(\0162\027.SProtoSpace.eRedPtType\"o\n\nred_pt_ac"
    "k\0227\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\rred_pt_ack_id\022(\n\005infos\030\002 \001(\0132\031.SPro"
    "toSpace.red_pt_infos\"o\n\nred_pt_ntf\0227\n\007pr"
    "otoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\rre"
    "d_pt_ntf_id\022(\n\005infos\030\002 \001(\0132\031.SProtoSpace"
    ".red_pt_infos\"a\n\030get_wearing_fashions_re"
    "q\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProt"
    "oID:\033get_wearing_fashions_req_id\"\310\001\n\030get"
    "_wearing_fashions_ack\022E\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\033get_wearing_fas"
    "hions_ack_id\0226\n\022fashions_p_wearing\030\002 \001(\013"
    "2\032.SProtoSpace.fashions_pack\022-\n\nerror_co"
    "de\030\003 \001(\0162\031.SProtoSpace.MsgErrorType\"Y\n\024g"
    "et_all_fashions_req\022A\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\027get_all_fashions_"
    "req_id\"\371\001\n\024get_all_fashions_ack\022A\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027get_a"
    "ll_fashions_ack_id\0226\n\022fashions_p_wearing"
    "\030\002 \001(\0132\032.SProtoSpace.fashions_pack\0227\n\023fa"
    "shions_p_wardrobe\030\003 \001(\0132\032.SProtoSpace.fa"
    "shions_pack\022-\n\nerror_code\030\004 \001(\0162\031.SProto"
    "Space.MsgErrorType\"c\n\021wear_fashions_req\022"
    ">\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\024wear_fashions_req_id\022\016\n\006uuid_s\030\002 \003(\004\""
    "\222\001\n\021wear_fashions_ack\022>\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\024wear_fashions_a"
    "ck_id\022\016\n\006uuid_s\030\002 \003(\004\022-\n\nerror_code\030\003 \001("
    "\0162\031.SProtoSpace.MsgErrorType\"\223\001\n\035get_oth"
    "er_role_fashion_cs_req\022J\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID: get_other_role"
    "_fashion_cs_req_id\022\021\n\trole_id_s\030\002 \003(\004\022\023\n"
    "\013role_name_s\030\003 \003(\t\"\322\001\n\035get_other_role_fa"
    "shion_cs_ack\022J\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID: get_other_role_fashion_c"
    "s_ack_id\0226\n\022fashions_p_wearing\030\002 \001(\0132\032.S"
    "ProtoSpace.fashions_pack\022-\n\nerror_code\030\003"
    " \001(\0162\031.SProtoSpace.MsgErrorType\"t\n\031verif"
    "y_config_version_req\022F\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\034verify_config_ve"
    "rsion_req_id\022\017\n\007version\030\002 \001(\005\"\243\001\n\031verify"
    "_config_version_ack\022F\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\034verify_config_ver"
    "sion_ack_id\022\017\n\007version\030\002 \001(\005\022-\n\nerror_co"
    "de\030\003 \001(\0162\031.SProtoSpace.MsgErrorType\"\204\001\n\023"
    "debug_hero_attr_ntf\022@\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\026debug_hero_attr_n"
    "tf_id\022\014\n\004uuid\030\002 \001(\004\022\r\n\005types\030\003 \003(\t\022\016\n\006va"
    "lues\030\004 \003(\t\"|\n\023waiting_in_line_ntf\022@\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\026wai"
    "ting_in_line_ntf_id\022\020\n\010wait_pos\030\002 \001(\005\022\021\n"
    "\tleft_mins\030\003 \001(\005\"a\n\022finish_in_line_ntf\022\?"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\025finish_in_line_ntf_id\022\n\n\002tm\030\002 \001(\005\"a\n\030e"
    "xit_waiting_in_line_req\022E\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\033exit_waiting_"
    "in_line_req_id\"n\n\030exit_waiting_in_line_a"
    "ck\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\033exit_waiting_in_line_ack_id\022\013\n\003ret"
    "\030\002 \001(\005\"\261\001\n\024user_event_track_ntf\022A\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027user_"
    "event_track_ntf_id\022.\n\004type\030\002 \001(\0162 .SProt"
    "oSpace.EUserEventTrackType\022\022\n\nint_data_s"
    "\030\003 \003(\021\022\022\n\nstr_data_s\030\004 \003(\t\"5\n\017role_guide"
    "_info\022\020\n\010guide_id\030\001 \001(\005\022\020\n\010step_ids\030\002 \003("
    "\005\"\244\001\n\016role_guide_ntf\022;\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\021role_guide_ntf_i"
    "d\022\020\n\010pass_all\030\002 \001(\010\0220\n\nguide_data\030\003 \003(\0132"
    "\034.SProtoSpace.role_guide_info\022\021\n\tguide_i"
    "ds\030\004 \003(\005\"\226\001\n\016role_guide_req\022;\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\021role_guid"
    "e_req_id\022\020\n\010guide_id\030\002 \001(\005\022\017\n\007step_id\030\003 "
    "\001(\005\022\014\n\004skip\030\004 \001(\010\022\026\n\016cur_guide_pass\030\005 \001("
    "\010\"}\n\016role_guide_ack\022;\n\007protoid\030\001 \001(\0162\027.S"
    "ProtoSpace.ECSProtoID:\021role_guide_ack_id"
    "\022\020\n\010guide_id\030\002 \001(\005\022\017\n\007step_id\030\003 \001(\005\022\013\n\003r"
    "et\030\004 \001(\005\"[\n\025onekey_skip_guide_req\022B\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030one"
    "key_skip_guide_req_id\"h\n\025onekey_skip_gui"
    "de_ack\022B\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:\030onekey_skip_guide_ack_id\022\013\n\003re"
    "t\030\002 \001(\005\"\200\001\n\030plot_little_game_set_req\022E\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033"
    "plot_little_game_set_req_id\022\016\n\006cfg_id\030\002 "
    "\001(\005\022\r\n\005state\030\003 \001(\005\"\213\001\n\030plot_little_game_"
    "set_ack\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\033plot_little_game_set_ack_id\022("
    "\n\005error\030\002 \001(\0162\031.SProtoSpace.MsgErrorType"
    "\"s\n\030plot_little_game_get_req\022E\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\033plot_lit"
    "tle_game_get_req_id\022\020\n\010cfg_id_s\030\002 \003(\005\"\275\001"
    "\n\030plot_little_game_get_ack\022E\n\007protoid\030\001 "
    "\001(\0162\027.SProtoSpace.ECSProtoID:\033plot_littl"
    "e_game_get_ack_id\0220\n\004pack\030\002 \001(\0132\".SProto"
    "Space.pack_plot_little_game\022(\n\005error\030\003 \001"
    "(\0162\031.SProtoSpace.MsgErrorType\"]\n\013pet_get"
    "_req\0228\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\016pet_get_req_id\022\024\n\014ask_pet_id_s\030\002"
    " \003(\005\"\270\001\n\013pet_get_ack\0228\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\016pet_get_ack_id\022,"
    "\n\010pet_pack\030\002 \001(\0132\032.SProtoSpace.pet_pack_"
    "data\022\027\n\017cur_show_pet_id\030\003 \001(\005\022(\n\005error\030\004"
    " \001(\0162\031.SProtoSpace.MsgErrorType\"y\n\023pet_c"
    "hange_name_req\022@\n\007protoid\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:\026pet_change_name_req_id"
    "\022\016\n\006pet_id\030\002 \001(\005\022\020\n\010new_name\030\003 \001(\t\"\243\001\n\023p"
    "et_change_name_ack\022@\n\007protoid\030\001 \001(\0162\027.SP"
    "rotoSpace.ECSProtoID:\026pet_change_name_ac"
    "k_id\022\016\n\006pet_id\030\002 \001(\005\022\020\n\010new_name\030\003 \001(\t\022("
    "\n\005error\030\004 \001(\0162\031.SProtoSpace.MsgErrorType"
    "\"v\n\021pet_do_action_req\022>\n\007protoid\030\001 \001(\0162\027"
    ".SProtoSpace.ECSProtoID:\024pet_do_action_r"
    "eq_id\022\021\n\taction_id\030\002 \001(\005\022\016\n\006pet_id\030\003 \001(\005"
    "\"\316\001\n\021pet_do_action_ack\022>\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\024pet_do_action_"
    "ack_id\022\021\n\taction_id\030\002 \001(\005\022\016\n\006pet_id\030\003 \001("
    "\005\022,\n\010pet_pack\030\004 \001(\0132\032.SProtoSpace.pet_pa"
    "ck_data\022(\n\005error\030\005 \001(\0162\031.SProtoSpace.Msg"
    "ErrorType\"q\n\020pet_send_out_req\022=\n\007protoid"
    "\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023pet_sen"
    "d_out_req_id\022\016\n\006out_id\030\002 \001(\005\022\016\n\006pet_id\030\003"
    " \001(\005\"\311\001\n\020pet_send_out_ack\022=\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\023pet_send_ou"
    "t_ack_id\022\016\n\006out_id\030\002 \001(\005\022\016\n\006pet_id\030\003 \001(\005"
    "\022,\n\010pet_pack\030\004 \001(\0132\032.SProtoSpace.pet_pac"
    "k_data\022(\n\005error\030\005 \001(\0162\031.SProtoSpace.MsgE"
    "rrorType\"k\n\025pet_get_out_award_req\022B\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030pet"
    "_get_out_award_req_id\022\016\n\006pet_id\030\002 \001(\005\"\256\002"
    "\n\025pet_get_out_award_ack\022B\n\007protoid\030\001 \001(\016"
    "2\027.SProtoSpace.ECSProtoID:\030pet_get_out_a"
    "ward_ack_id\022\016\n\006pet_id\030\002 \001(\005\022,\n\010pet_pack\030"
    "\003 \001(\0132\032.SProtoSpace.pet_pack_data\022(\n\005err"
    "or\030\004 \001(\0162\031.SProtoSpace.MsgErrorType\0224\n\013r"
    "and_item_s\030\005 \003(\0132\037.SProtoSpace.pet_out_e"
    "vent_item\0223\n\nget_item_s\030\006 \003(\0132\037.SProtoSp"
    "ace.pet_out_event_item\"t\n\021pet_feed_food_"
    "req\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\024pet_feed_food_req_id\022\016\n\006pet_id\030\002 "
    "\001(\005\022\017\n\007item_id\030\003 \001(\005\"\314\001\n\021pet_feed_food_a"
    "ck\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPro"
    "toID:\024pet_feed_food_ack_id\022\016\n\006pet_id\030\002 \001"
    "(\005\022\017\n\007item_id\030\003 \001(\005\022(\n\005error\030\004 \001(\0162\031.SPr"
    "otoSpace.MsgErrorType\022,\n\010pet_pack\030\005 \001(\0132"
    "\032.SProtoSpace.pet_pack_data\"i\n\024pet_set_s"
    "how_pet_req\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpa"
    "ce.ECSProtoID:\027pet_set_show_pet_req_id\022\016"
    "\n\006pet_id\030\002 \001(\005\"\223\001\n\024pet_set_show_pet_ack\022"
    "A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\027pet_set_show_pet_ack_id\022\016\n\006pet_id\030\002 \001"
    "(\005\022(\n\005error\030\003 \001(\0162\031.SProtoSpace.MsgError"
    "Type\"a\n\020pet_out_back_req\022=\n\007protoid\030\001 \001("
    "\0162\027.SProtoSpace.ECSProtoID:\023pet_out_back"
    "_req_id\022\016\n\006pet_id\030\002 \001(\005\"\213\001\n\020pet_out_back"
    "_ack\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\023pet_out_back_ack_id\022\016\n\006pet_id\030\002 "
    "\001(\005\022(\n\005error\030\003 \001(\0162\031.SProtoSpace.MsgErro"
    "rType*\303\001\n\021eAchievementState\022\024\n\020ACHIEVEME"
    "NT_NONE\020\000\022\026\n\022ACHIEVEMENT_LOCKED\020\001\022\033\n\027ACH"
    "IEVEMENT_IN_PROGRESS\020\002\022\037\n\033ACHIEVEMENT_CO"
    "ULD_GET_AWARD\020\003\022!\n\035ACHIEVEMENT_ALREADY_G"
    "ET_AWARD\020\004\022\033\n\027ACHIEVEMENT_UNAVAILABLE\020\005\032"
    "\002\020\001*S\n\021eDrawCardCoinType\022\022\n\016DRAW_CARD_FR"
    "EE\020\000\022\024\n\020DRAW_CARD_COIN_1\020\001\022\024\n\020DRAW_CARD_"
    "COIN_2\020\002*,\n\023EUserEventTrackType\022\013\n\007NOTHI"
    "NG\020\000\022\010\n\004TEST\020\001*\216\002\n\025EGUIDE_OPENCONDI_TYPE"
    "\022!\n\035EGUIDE_OPENCONDI_TP_FIN_GUIDE\020\001\022 \n\034E"
    "GUIDE_OPENCONDI_TP_FIN_TASK\020\002\022%\n!EGUIDE_"
    "OPENCONDI_TP_UNLOCK_MODULE\020\003\022 \n\034EGUIDE_O"
    "PENCONDI_TP_FIN_PLOT\020\004\022!\n\035EGUIDE_OPENCON"
    "DI_TP_RECV_TASK\020\005\022 \n\034EGUIDE_OPENCONDI_TP"
    "_ITEM_NUM\020\006\022\"\n\036EGUIDE_OPENCONDI_TP_HERO_"
    "LEVEL\020\007", 53127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_role.proto", &protobuf_RegisterTypes);
  account_check_in_req::default_instance_ = new account_check_in_req();
  account_check_in_ack::default_instance_ = new account_check_in_ack();
  sys_packet_seq_id_ntf::default_instance_ = new sys_packet_seq_id_ntf();
  sys_packet_seq_id_req::default_instance_ = new sys_packet_seq_id_req();
  sys_packet_seq_id_ack::default_instance_ = new sys_packet_seq_id_ack();
  uplink_packet_seq_error_ntf::default_instance_ = new uplink_packet_seq_error_ntf();
  client_secret_key_req::default_instance_ = new client_secret_key_req();
  client_secret_key_ack::default_instance_ = new client_secret_key_ack();
  client_secret_start_req::default_instance_ = new client_secret_start_req();
  client_secret_start_ack::default_instance_ = new client_secret_start_ack();
  account_role_data_ack::default_instance_ = new account_role_data_ack();
  create_role_of_game::default_instance_ = new create_role_of_game();
  create_role_of_game_ack::default_instance_ = new create_role_of_game_ack();
  switch_scene_req::default_instance_ = new switch_scene_req();
  enter_game_req::default_instance_ = new enter_game_req();
  enter_game_ack::default_instance_ = new enter_game_ack();
  system_unlock_req::default_instance_ = new system_unlock_req();
  system_unlock_ack::default_instance_ = new system_unlock_ack();
  system_unlock_ntf::default_instance_ = new system_unlock_ntf();
  role_info_ntf::default_instance_ = new role_info_ntf();
  item_info::default_instance_ = new item_info();
  update_role_info_ntf::default_instance_ = new update_role_info_ntf();
  role_common_base_ntf::default_instance_ = new role_common_base_ntf();
  soul_update_ntf::default_instance_ = new soul_update_ntf();
  soul_raise_req::default_instance_ = new soul_raise_req();
  soul_raise_ack::default_instance_ = new soul_raise_ack();
  soul_bind_req::default_instance_ = new soul_bind_req();
  soul_bind_ack::default_instance_ = new soul_bind_ack();
  soul_unbind_req::default_instance_ = new soul_unbind_req();
  soul_unbind_ack::default_instance_ = new soul_unbind_ack();
  soul_lock_req::default_instance_ = new soul_lock_req();
  soul_lock_ack::default_instance_ = new soul_lock_ack();
  soul_unlock_req::default_instance_ = new soul_unlock_req();
  soul_unlock_ack::default_instance_ = new soul_unlock_ack();
  soul_sell_req::default_instance_ = new soul_sell_req();
  soul_sell_ack::default_instance_ = new soul_sell_ack();
  item_packet_req::default_instance_ = new item_packet_req();
  item_packet_ack::default_instance_ = new item_packet_ack();
  item_use_req::default_instance_ = new item_use_req();
  item_use_ack::default_instance_ = new item_use_ack();
  item_sold_req::default_instance_ = new item_sold_req();
  item_sold_ack::default_instance_ = new item_sold_ack();
  bag_expand_req::default_instance_ = new bag_expand_req();
  bag_expand_ack::default_instance_ = new bag_expand_ack();
  bag_capacity_not_enough_ntf::default_instance_ = new bag_capacity_not_enough_ntf();
  hero_list_data_ntf::default_instance_ = new hero_list_data_ntf();
  add_hero_ntf::default_instance_ = new add_hero_ntf();
  remove_hero_ntf::default_instance_ = new remove_hero_ntf();
  hero_info_change_ntf::default_instance_ = new hero_info_change_ntf();
  hero_upgrade_req::default_instance_ = new hero_upgrade_req();
  hero_upgrade_ack::default_instance_ = new hero_upgrade_ack();
  hero_upstar_req::default_instance_ = new hero_upstar_req();
  hero_upstar_ack::default_instance_ = new hero_upstar_ack();
  hero_awaken_req::default_instance_ = new hero_awaken_req();
  hero_awaken_ack::default_instance_ = new hero_awaken_ack();
  hero_lock_req::default_instance_ = new hero_lock_req();
  hero_lock_ack::default_instance_ = new hero_lock_ack();
  hero_compose_req::default_instance_ = new hero_compose_req();
  hero_compose_ack::default_instance_ = new hero_compose_ack();
  hero_skin_active_req::default_instance_ = new hero_skin_active_req();
  hero_skin_active_ack::default_instance_ = new hero_skin_active_ack();
  hero_change_name_req::default_instance_ = new hero_change_name_req();
  hero_change_name_ack::default_instance_ = new hero_change_name_ack();
  hero_level_up_req::default_instance_ = new hero_level_up_req();
  hero_level_up_ack::default_instance_ = new hero_level_up_ack();
  hero_quality_up_req::default_instance_ = new hero_quality_up_req();
  hero_quality_up_ack::default_instance_ = new hero_quality_up_ack();
  item_combine_req::default_instance_ = new item_combine_req();
  item_combine_ack::default_instance_ = new item_combine_ack();
  hero_star_up_req::default_instance_ = new hero_star_up_req();
  hero_star_up_ack::default_instance_ = new hero_star_up_ack();
  hero_skill_up_req::default_instance_ = new hero_skill_up_req();
  hero_skill_up_ack::default_instance_ = new hero_skill_up_ack();
  hero_equip_req::default_instance_ = new hero_equip_req();
  hero_equip_ack::default_instance_ = new hero_equip_ack();
  hero_unequip_req::default_instance_ = new hero_unequip_req();
  hero_unequip_ack::default_instance_ = new hero_unequip_ack();
  hero_equip_level_up_req::default_instance_ = new hero_equip_level_up_req();
  hero_equip_level_up_ack::default_instance_ = new hero_equip_level_up_ack();
  hero_equip_onekey_level_up_req::default_instance_ = new hero_equip_onekey_level_up_req();
  hero_equip_onekey_level_up_ack::default_instance_ = new hero_equip_onekey_level_up_ack();
  hero_equip_level_info::default_instance_ = new hero_equip_level_info();
  hero_equip_all_level_up_req::default_instance_ = new hero_equip_all_level_up_req();
  hero_equip_all_level_up_ack::default_instance_ = new hero_equip_all_level_up_ack();
  hero_equip_onekey_req::default_instance_ = new hero_equip_onekey_req();
  hero_equip_onekey_ack::default_instance_ = new hero_equip_onekey_ack();
  hero_unequip_onekey_req::default_instance_ = new hero_unequip_onekey_req();
  hero_unequip_onekey_ack::default_instance_ = new hero_unequip_onekey_ack();
  gm_operation_req::default_instance_ = new gm_operation_req();
  gm_operation_ack::_default_info_ =
      new ::std::string("Failed", 6);
  gm_operation_ack::default_instance_ = new gm_operation_ack();
  leave_game_req::default_instance_ = new leave_game_req();
  kick_game_ntf::default_instance_ = new kick_game_ntf();
  beat_heart_ntf::default_instance_ = new beat_heart_ntf();
  sync_time_ntf::default_instance_ = new sync_time_ntf();
  client_heart_beat_req::default_instance_ = new client_heart_beat_req();
  client_heart_beat_ack::default_instance_ = new client_heart_beat_ack();
  role_player_info_ntf::default_instance_ = new role_player_info_ntf();
  role_player_info_update_ntf::default_instance_ = new role_player_info_update_ntf();
  role_fight_score_ntf::default_instance_ = new role_fight_score_ntf();
  role_player_change_req::default_instance_ = new role_player_change_req();
  role_player_change_ack::default_instance_ = new role_player_change_ack();
  role_player_active_skin_req::default_instance_ = new role_player_active_skin_req();
  role_player_active_skin_ack::default_instance_ = new role_player_active_skin_ack();
  role_player_buy_skin_req::default_instance_ = new role_player_buy_skin_req();
  role_player_buy_skin_ack::default_instance_ = new role_player_buy_skin_ack();
  role_player_wear_skin_req::default_instance_ = new role_player_wear_skin_req();
  role_player_wear_skin_ack::default_instance_ = new role_player_wear_skin_ack();
  role_player_skillup_ntf::default_instance_ = new role_player_skillup_ntf();
  role_buy_req::default_instance_ = new role_buy_req();
  role_buy_ack::default_instance_ = new role_buy_ack();
  role_show_base_info_req::default_instance_ = new role_show_base_info_req();
  role_show_base_info_ack::default_instance_ = new role_show_base_info_ack();
  role_show_get_like_req::default_instance_ = new role_show_get_like_req();
  role_show_get_like_ack::default_instance_ = new role_show_get_like_ack();
  role_show_player_base_req::default_instance_ = new role_show_player_base_req();
  role_show_player_base_ack::default_instance_ = new role_show_player_base_ack();
  role_show_like_req::default_instance_ = new role_show_like_req();
  role_show_like_ack::default_instance_ = new role_show_like_ack();
  role_show_change_name_req::default_instance_ = new role_show_change_name_req();
  role_show_change_name_ack::default_instance_ = new role_show_change_name_ack();
  role_show_change_position_req::default_instance_ = new role_show_change_position_req();
  role_show_change_position_ack::default_instance_ = new role_show_change_position_ack();
  role_show_change_signature_req::default_instance_ = new role_show_change_signature_req();
  role_show_change_signature_ack::default_instance_ = new role_show_change_signature_ack();
  role_show_change_age_req::default_instance_ = new role_show_change_age_req();
  role_show_change_age_ack::default_instance_ = new role_show_change_age_ack();
  role_show_change_starsign_req::default_instance_ = new role_show_change_starsign_req();
  role_show_change_starsign_ack::default_instance_ = new role_show_change_starsign_ack();
  role_show_change_birthday_req::default_instance_ = new role_show_change_birthday_req();
  role_show_change_birthday_ack::default_instance_ = new role_show_change_birthday_ack();
  role_show_change_labels_req::default_instance_ = new role_show_change_labels_req();
  role_show_change_labels_ack::default_instance_ = new role_show_change_labels_ack();
  role_show_get_emotion_req::default_instance_ = new role_show_get_emotion_req();
  role_show_get_emotion_ack::default_instance_ = new role_show_get_emotion_ack();
  role_show_write_emotion_req::default_instance_ = new role_show_write_emotion_req();
  role_show_write_emotion_ack::default_instance_ = new role_show_write_emotion_ack();
  role_show_like_emotion_req::default_instance_ = new role_show_like_emotion_req();
  role_show_like_emotion_ack::default_instance_ = new role_show_like_emotion_ack();
  role_show_comment_emotion_req::default_instance_ = new role_show_comment_emotion_req();
  role_show_comment_emotion_ack::default_instance_ = new role_show_comment_emotion_ack();
  role_show_remove_emotion_req::default_instance_ = new role_show_remove_emotion_req();
  role_show_remove_emotion_ack::default_instance_ = new role_show_remove_emotion_ack();
  role_show_remove_comment_req::default_instance_ = new role_show_remove_comment_req();
  role_show_remove_comment_ack::default_instance_ = new role_show_remove_comment_ack();
  role_show_set_hero_info::default_instance_ = new role_show_set_hero_info();
  role_show_set_hero_req::default_instance_ = new role_show_set_hero_req();
  role_show_set_hero_ack::default_instance_ = new role_show_set_hero_ack();
  role_show_set_border_req::default_instance_ = new role_show_set_border_req();
  role_show_set_border_ack::default_instance_ = new role_show_set_border_ack();
  role_show_comment_req::default_instance_ = new role_show_comment_req();
  role_show_comment_ack::default_instance_ = new role_show_comment_ack();
  role_show_delete_comment_req::default_instance_ = new role_show_delete_comment_req();
  role_show_delete_comment_ack::default_instance_ = new role_show_delete_comment_ack();
  role_show_get_comment_req::default_instance_ = new role_show_get_comment_req();
  role_show_get_comment_ack::default_instance_ = new role_show_get_comment_ack();
  discover_info_ntf::default_instance_ = new discover_info_ntf();
  discover_show_boss_ntf::default_instance_ = new discover_show_boss_ntf();
  enter_discover_req::default_instance_ = new enter_discover_req();
  enter_discover_ack::default_instance_ = new enter_discover_ack();
  exit_discover_req::default_instance_ = new exit_discover_req();
  exit_discover_ack::default_instance_ = new exit_discover_ack();
  discovery_mopping_req::default_instance_ = new discovery_mopping_req();
  discovery_mopping_ack_rewards::default_instance_ = new discovery_mopping_ack_rewards();
  discovery_mopping_ack_moppping::default_instance_ = new discovery_mopping_ack_moppping();
  discovery_mopping_ack::default_instance_ = new discovery_mopping_ack();
  discovery_buy_times_req::default_instance_ = new discovery_buy_times_req();
  discovery_buy_times_ack::default_instance_ = new discovery_buy_times_ack();
  discovery_get_section_star_req::default_instance_ = new discovery_get_section_star_req();
  discovery_get_section_star_ack_rewards::default_instance_ = new discovery_get_section_star_ack_rewards();
  discovery_get_section_star_ack::default_instance_ = new discovery_get_section_star_ack();
  royal_base_info_ntf::default_instance_ = new royal_base_info_ntf();
  royal_all_info_req::default_instance_ = new royal_all_info_req();
  royal_all_info_ack::default_instance_ = new royal_all_info_ack();
  royal_refresh_req::default_instance_ = new royal_refresh_req();
  royal_refresh_ack::default_instance_ = new royal_refresh_ack();
  royal_visit_req::default_instance_ = new royal_visit_req();
  royal_visit_ack::default_instance_ = new royal_visit_ack();
  royal_reward_ntf::default_instance_ = new royal_reward_ntf();
  all_royals_ntf::default_instance_ = new all_royals_ntf();
  royal_pro_update_ntf::default_instance_ = new royal_pro_update_ntf();
  royal_task_reward_draw_ntf::default_instance_ = new royal_task_reward_draw_ntf();
  game_update_royal_task_ntf::default_instance_ = new game_update_royal_task_ntf();
  game_royal_intimacy_reward_req::default_instance_ = new game_royal_intimacy_reward_req();
  game_royal_intimacy_reward_ack::default_instance_ = new game_royal_intimacy_reward_ack();
  game_royal_draw_reward_req::default_instance_ = new game_royal_draw_reward_req();
  game_royal_draw_reward_ack::default_instance_ = new game_royal_draw_reward_ack();
  game_royal_all_data_req::default_instance_ = new game_royal_all_data_req();
  game_royal_all_data_ack::default_instance_ = new game_royal_all_data_ack();
  game_royal_refresh_data_req::default_instance_ = new game_royal_refresh_data_req();
  game_royal_refresh_data_ack::default_instance_ = new game_royal_refresh_data_ack();
  game_royal_qingan_req::default_instance_ = new game_royal_qingan_req();
  game_royal_qingan_ack::default_instance_ = new game_royal_qingan_ack();
  game_royal_unlock_req::default_instance_ = new game_royal_unlock_req();
  game_royal_unlock_ack::default_instance_ = new game_royal_unlock_ack();
  game_branch_task_fin_req::default_instance_ = new game_branch_task_fin_req();
  game_branch_task_fin_ack::default_instance_ = new game_branch_task_fin_ack();
  game_royal_chat_req::default_instance_ = new game_royal_chat_req();
  game_royal_chat_ack::default_instance_ = new game_royal_chat_ack();
  game_royal_get_gifts_req::default_instance_ = new game_royal_get_gifts_req();
  game_royal_get_gifts_ack::default_instance_ = new game_royal_get_gifts_ack();
  game_royal_give_gift_req::default_instance_ = new game_royal_give_gift_req();
  game_royal_give_gift_ack::default_instance_ = new game_royal_give_gift_ack();
  game_royal_enter_scene_req::default_instance_ = new game_royal_enter_scene_req();
  game_royal_enter_scene_ack::default_instance_ = new game_royal_enter_scene_ack();
  game_royal_event_fin_req::default_instance_ = new game_royal_event_fin_req();
  game_royal_event_fin_ack::default_instance_ = new game_royal_event_fin_ack();
  get_offical_data_req::default_instance_ = new get_offical_data_req();
  get_offical_data_ack::default_instance_ = new get_offical_data_ack();
  offical_data_ntf::default_instance_ = new offical_data_ntf();
  update_chest_ntf::default_instance_ = new update_chest_ntf();
  get_role_chest_req::default_instance_ = new get_role_chest_req();
  get_role_chest_ack::default_instance_ = new get_role_chest_ack();
  create_team_req::default_instance_ = new create_team_req();
  create_team_ack::default_instance_ = new create_team_ack();
  enter_team_req::default_instance_ = new enter_team_req();
  enter_team_ack::default_instance_ = new enter_team_ack();
  exit_team_req::default_instance_ = new exit_team_req();
  exit_team_ack::default_instance_ = new exit_team_ack();
  update_team_ntf::default_instance_ = new update_team_ntf();
  ready_team_req::default_instance_ = new ready_team_req();
  ready_team_ack::default_instance_ = new ready_team_ack();
  update_team_req::default_instance_ = new update_team_req();
  update_team_ack::default_instance_ = new update_team_ack();
  get_teams_req::default_instance_ = new get_teams_req();
  get_teams_ack::default_instance_ = new get_teams_ack();
  invite_roles_enter_team_req::default_instance_ = new invite_roles_enter_team_req();
  invite_roles_enter_team_ack::default_instance_ = new invite_roles_enter_team_ack();
  invite_enter_team_ntf::default_instance_ = new invite_enter_team_ntf();
  get_offical_rank_req::default_instance_ = new get_offical_rank_req();
  get_offical_rank_ack::default_instance_ = new get_offical_rank_ack();
  get_offical_rank_info_req::default_instance_ = new get_offical_rank_info_req();
  get_offical_rank_info_ack::default_instance_ = new get_offical_rank_info_ack();
  get_offical_formation_req::default_instance_ = new get_offical_formation_req();
  get_offical_formation_ack::default_instance_ = new get_offical_formation_ack();
  challenge_offical_rank_req::default_instance_ = new challenge_offical_rank_req();
  challenge_offical_rank_ack::default_instance_ = new challenge_offical_rank_ack();
  offical_apply_battle_result_req::default_instance_ = new offical_apply_battle_result_req();
  offical_apply_battle_result_ack::default_instance_ = new offical_apply_battle_result_ack();
  role_plot_upload_req::default_instance_ = new role_plot_upload_req();
  role_plot_upload_ack::default_instance_ = new role_plot_upload_ack();
  role_plot_get_req::default_instance_ = new role_plot_get_req();
  role_plot_get_ack::default_instance_ = new role_plot_get_ack();
  plot_end_req::default_instance_ = new plot_end_req();
  plot_end_ack::default_instance_ = new plot_end_ack();
  plot_chapter_end_req::default_instance_ = new plot_chapter_end_req();
  plot_chapter_end_ack::default_instance_ = new plot_chapter_end_ack();
  plot_choose_branch_req::default_instance_ = new plot_choose_branch_req();
  plot_choose_branch_ack::default_instance_ = new plot_choose_branch_ack();
  plot_trigger_action_req::default_instance_ = new plot_trigger_action_req();
  plot_trigger_action_ack::default_instance_ = new plot_trigger_action_ack();
  all_event_info::default_instance_ = new all_event_info();
  client_event_msg_info::default_instance_ = new client_event_msg_info();
  event_msg_get_all_req::default_instance_ = new event_msg_get_all_req();
  event_msg_get_all_ack::default_instance_ = new event_msg_get_all_ack();
  event_msg_read_req::default_instance_ = new event_msg_read_req();
  event_msg_read_ack::default_instance_ = new event_msg_read_ack();
  event_msg_del_req::default_instance_ = new event_msg_del_req();
  event_msg_del_ack::default_instance_ = new event_msg_del_ack();
  event_msg_nty::default_instance_ = new event_msg_nty();
  event_msg_get_by_id_req::default_instance_ = new event_msg_get_by_id_req();
  event_msg_get_by_id_ack::default_instance_ = new event_msg_get_by_id_ack();
  get_rank_data_req::default_instance_ = new get_rank_data_req();
  get_rank_data_ack::default_instance_ = new get_rank_data_ack();
  role_uint_achievement::default_instance_ = new role_uint_achievement();
  role_achievements_ntf_type_list::default_instance_ = new role_achievements_ntf_type_list();
  role_achievements_ntf::default_instance_ = new role_achievements_ntf();
  role_achievement_get_rewards_req::default_instance_ = new role_achievement_get_rewards_req();
  role_achievement_get_rewards_ack::default_instance_ = new role_achievement_get_rewards_ack();
  role_achievement_point_rewards_req::default_instance_ = new role_achievement_point_rewards_req();
  role_achievement_point_rewards_ack::default_instance_ = new role_achievement_point_rewards_ack();
  flower_bag_nty::default_instance_ = new flower_bag_nty();
  flower_bag_all_req::default_instance_ = new flower_bag_all_req();
  flower_bag_all_ack::default_instance_ = new flower_bag_all_ack();
  flower_bag_all_nty::default_instance_ = new flower_bag_all_nty();
  flower_send_req::default_instance_ = new flower_send_req();
  flower_send_ack::default_instance_ = new flower_send_ack();
  flower_receive_nty::default_instance_ = new flower_receive_nty();
  role_draw_card_info::default_instance_ = new role_draw_card_info();
  role_draw_card_reward_item::default_instance_ = new role_draw_card_reward_item();
  role_draw_card_rewards::default_instance_ = new role_draw_card_rewards();
  role_draw_card_info_req::default_instance_ = new role_draw_card_info_req();
  role_draw_card_info_ack::default_instance_ = new role_draw_card_info_ack();
  role_draw_card_req::default_instance_ = new role_draw_card_req();
  role_draw_card_ack::default_instance_ = new role_draw_card_ack();
  role_draw_card_ssr_req::default_instance_ = new role_draw_card_ssr_req();
  role_draw_card_ssr_ack_one::default_instance_ = new role_draw_card_ssr_ack_one();
  role_draw_card_ssr_ack::default_instance_ = new role_draw_card_ssr_ack();
  role_talent_activate_req::default_instance_ = new role_talent_activate_req();
  role_talent_activate_ack::default_instance_ = new role_talent_activate_ack();
  all_role_talents_activate_req::default_instance_ = new all_role_talents_activate_req();
  all_role_talents_activate_ack::default_instance_ = new all_role_talents_activate_ack();
  switch_role_skill_req::default_instance_ = new switch_role_skill_req();
  switch_role_skill_ack::default_instance_ = new switch_role_skill_ack();
  talisman_use_req::default_instance_ = new talisman_use_req();
  talisman_use_ack::default_instance_ = new talisman_use_ack();
  talisman_un_use_req::default_instance_ = new talisman_un_use_req();
  talisman_un_use_ack::default_instance_ = new talisman_un_use_ack();
  talisman_lv_up_req::default_instance_ = new talisman_lv_up_req();
  talisman_lv_up_ack::default_instance_ = new talisman_lv_up_ack();
  talisman_break_req::default_instance_ = new talisman_break_req();
  talisman_break_ack::default_instance_ = new talisman_break_ack();
  talisman_change_ntf::default_instance_ = new talisman_change_ntf();
  red_pt_req::default_instance_ = new red_pt_req();
  red_pt_ack::default_instance_ = new red_pt_ack();
  red_pt_ntf::default_instance_ = new red_pt_ntf();
  get_wearing_fashions_req::default_instance_ = new get_wearing_fashions_req();
  get_wearing_fashions_ack::default_instance_ = new get_wearing_fashions_ack();
  get_all_fashions_req::default_instance_ = new get_all_fashions_req();
  get_all_fashions_ack::default_instance_ = new get_all_fashions_ack();
  wear_fashions_req::default_instance_ = new wear_fashions_req();
  wear_fashions_ack::default_instance_ = new wear_fashions_ack();
  get_other_role_fashion_cs_req::default_instance_ = new get_other_role_fashion_cs_req();
  get_other_role_fashion_cs_ack::default_instance_ = new get_other_role_fashion_cs_ack();
  verify_config_version_req::default_instance_ = new verify_config_version_req();
  verify_config_version_ack::default_instance_ = new verify_config_version_ack();
  debug_hero_attr_ntf::default_instance_ = new debug_hero_attr_ntf();
  waiting_in_line_ntf::default_instance_ = new waiting_in_line_ntf();
  finish_in_line_ntf::default_instance_ = new finish_in_line_ntf();
  exit_waiting_in_line_req::default_instance_ = new exit_waiting_in_line_req();
  exit_waiting_in_line_ack::default_instance_ = new exit_waiting_in_line_ack();
  user_event_track_ntf::default_instance_ = new user_event_track_ntf();
  role_guide_info::default_instance_ = new role_guide_info();
  role_guide_ntf::default_instance_ = new role_guide_ntf();
  role_guide_req::default_instance_ = new role_guide_req();
  role_guide_ack::default_instance_ = new role_guide_ack();
  onekey_skip_guide_req::default_instance_ = new onekey_skip_guide_req();
  onekey_skip_guide_ack::default_instance_ = new onekey_skip_guide_ack();
  plot_little_game_set_req::default_instance_ = new plot_little_game_set_req();
  plot_little_game_set_ack::default_instance_ = new plot_little_game_set_ack();
  plot_little_game_get_req::default_instance_ = new plot_little_game_get_req();
  plot_little_game_get_ack::default_instance_ = new plot_little_game_get_ack();
  pet_get_req::default_instance_ = new pet_get_req();
  pet_get_ack::default_instance_ = new pet_get_ack();
  pet_change_name_req::default_instance_ = new pet_change_name_req();
  pet_change_name_ack::default_instance_ = new pet_change_name_ack();
  pet_do_action_req::default_instance_ = new pet_do_action_req();
  pet_do_action_ack::default_instance_ = new pet_do_action_ack();
  pet_send_out_req::default_instance_ = new pet_send_out_req();
  pet_send_out_ack::default_instance_ = new pet_send_out_ack();
  pet_get_out_award_req::default_instance_ = new pet_get_out_award_req();
  pet_get_out_award_ack::default_instance_ = new pet_get_out_award_ack();
  pet_feed_food_req::default_instance_ = new pet_feed_food_req();
  pet_feed_food_ack::default_instance_ = new pet_feed_food_ack();
  pet_set_show_pet_req::default_instance_ = new pet_set_show_pet_req();
  pet_set_show_pet_ack::default_instance_ = new pet_set_show_pet_ack();
  pet_out_back_req::default_instance_ = new pet_out_back_req();
  pet_out_back_ack::default_instance_ = new pet_out_back_ack();
  account_check_in_req::default_instance_->InitAsDefaultInstance();
  account_check_in_ack::default_instance_->InitAsDefaultInstance();
  sys_packet_seq_id_ntf::default_instance_->InitAsDefaultInstance();
  sys_packet_seq_id_req::default_instance_->InitAsDefaultInstance();
  sys_packet_seq_id_ack::default_instance_->InitAsDefaultInstance();
  uplink_packet_seq_error_ntf::default_instance_->InitAsDefaultInstance();
  client_secret_key_req::default_instance_->InitAsDefaultInstance();
  client_secret_key_ack::default_instance_->InitAsDefaultInstance();
  client_secret_start_req::default_instance_->InitAsDefaultInstance();
  client_secret_start_ack::default_instance_->InitAsDefaultInstance();
  account_role_data_ack::default_instance_->InitAsDefaultInstance();
  create_role_of_game::default_instance_->InitAsDefaultInstance();
  create_role_of_game_ack::default_instance_->InitAsDefaultInstance();
  switch_scene_req::default_instance_->InitAsDefaultInstance();
  enter_game_req::default_instance_->InitAsDefaultInstance();
  enter_game_ack::default_instance_->InitAsDefaultInstance();
  system_unlock_req::default_instance_->InitAsDefaultInstance();
  system_unlock_ack::default_instance_->InitAsDefaultInstance();
  system_unlock_ntf::default_instance_->InitAsDefaultInstance();
  role_info_ntf::default_instance_->InitAsDefaultInstance();
  item_info::default_instance_->InitAsDefaultInstance();
  update_role_info_ntf::default_instance_->InitAsDefaultInstance();
  role_common_base_ntf::default_instance_->InitAsDefaultInstance();
  soul_update_ntf::default_instance_->InitAsDefaultInstance();
  soul_raise_req::default_instance_->InitAsDefaultInstance();
  soul_raise_ack::default_instance_->InitAsDefaultInstance();
  soul_bind_req::default_instance_->InitAsDefaultInstance();
  soul_bind_ack::default_instance_->InitAsDefaultInstance();
  soul_unbind_req::default_instance_->InitAsDefaultInstance();
  soul_unbind_ack::default_instance_->InitAsDefaultInstance();
  soul_lock_req::default_instance_->InitAsDefaultInstance();
  soul_lock_ack::default_instance_->InitAsDefaultInstance();
  soul_unlock_req::default_instance_->InitAsDefaultInstance();
  soul_unlock_ack::default_instance_->InitAsDefaultInstance();
  soul_sell_req::default_instance_->InitAsDefaultInstance();
  soul_sell_ack::default_instance_->InitAsDefaultInstance();
  item_packet_req::default_instance_->InitAsDefaultInstance();
  item_packet_ack::default_instance_->InitAsDefaultInstance();
  item_use_req::default_instance_->InitAsDefaultInstance();
  item_use_ack::default_instance_->InitAsDefaultInstance();
  item_sold_req::default_instance_->InitAsDefaultInstance();
  item_sold_ack::default_instance_->InitAsDefaultInstance();
  bag_expand_req::default_instance_->InitAsDefaultInstance();
  bag_expand_ack::default_instance_->InitAsDefaultInstance();
  bag_capacity_not_enough_ntf::default_instance_->InitAsDefaultInstance();
  hero_list_data_ntf::default_instance_->InitAsDefaultInstance();
  add_hero_ntf::default_instance_->InitAsDefaultInstance();
  remove_hero_ntf::default_instance_->InitAsDefaultInstance();
  hero_info_change_ntf::default_instance_->InitAsDefaultInstance();
  hero_upgrade_req::default_instance_->InitAsDefaultInstance();
  hero_upgrade_ack::default_instance_->InitAsDefaultInstance();
  hero_upstar_req::default_instance_->InitAsDefaultInstance();
  hero_upstar_ack::default_instance_->InitAsDefaultInstance();
  hero_awaken_req::default_instance_->InitAsDefaultInstance();
  hero_awaken_ack::default_instance_->InitAsDefaultInstance();
  hero_lock_req::default_instance_->InitAsDefaultInstance();
  hero_lock_ack::default_instance_->InitAsDefaultInstance();
  hero_compose_req::default_instance_->InitAsDefaultInstance();
  hero_compose_ack::default_instance_->InitAsDefaultInstance();
  hero_skin_active_req::default_instance_->InitAsDefaultInstance();
  hero_skin_active_ack::default_instance_->InitAsDefaultInstance();
  hero_change_name_req::default_instance_->InitAsDefaultInstance();
  hero_change_name_ack::default_instance_->InitAsDefaultInstance();
  hero_level_up_req::default_instance_->InitAsDefaultInstance();
  hero_level_up_ack::default_instance_->InitAsDefaultInstance();
  hero_quality_up_req::default_instance_->InitAsDefaultInstance();
  hero_quality_up_ack::default_instance_->InitAsDefaultInstance();
  item_combine_req::default_instance_->InitAsDefaultInstance();
  item_combine_ack::default_instance_->InitAsDefaultInstance();
  hero_star_up_req::default_instance_->InitAsDefaultInstance();
  hero_star_up_ack::default_instance_->InitAsDefaultInstance();
  hero_skill_up_req::default_instance_->InitAsDefaultInstance();
  hero_skill_up_ack::default_instance_->InitAsDefaultInstance();
  hero_equip_req::default_instance_->InitAsDefaultInstance();
  hero_equip_ack::default_instance_->InitAsDefaultInstance();
  hero_unequip_req::default_instance_->InitAsDefaultInstance();
  hero_unequip_ack::default_instance_->InitAsDefaultInstance();
  hero_equip_level_up_req::default_instance_->InitAsDefaultInstance();
  hero_equip_level_up_ack::default_instance_->InitAsDefaultInstance();
  hero_equip_onekey_level_up_req::default_instance_->InitAsDefaultInstance();
  hero_equip_onekey_level_up_ack::default_instance_->InitAsDefaultInstance();
  hero_equip_level_info::default_instance_->InitAsDefaultInstance();
  hero_equip_all_level_up_req::default_instance_->InitAsDefaultInstance();
  hero_equip_all_level_up_ack::default_instance_->InitAsDefaultInstance();
  hero_equip_onekey_req::default_instance_->InitAsDefaultInstance();
  hero_equip_onekey_ack::default_instance_->InitAsDefaultInstance();
  hero_unequip_onekey_req::default_instance_->InitAsDefaultInstance();
  hero_unequip_onekey_ack::default_instance_->InitAsDefaultInstance();
  gm_operation_req::default_instance_->InitAsDefaultInstance();
  gm_operation_ack::default_instance_->InitAsDefaultInstance();
  leave_game_req::default_instance_->InitAsDefaultInstance();
  kick_game_ntf::default_instance_->InitAsDefaultInstance();
  beat_heart_ntf::default_instance_->InitAsDefaultInstance();
  sync_time_ntf::default_instance_->InitAsDefaultInstance();
  client_heart_beat_req::default_instance_->InitAsDefaultInstance();
  client_heart_beat_ack::default_instance_->InitAsDefaultInstance();
  role_player_info_ntf::default_instance_->InitAsDefaultInstance();
  role_player_info_update_ntf::default_instance_->InitAsDefaultInstance();
  role_fight_score_ntf::default_instance_->InitAsDefaultInstance();
  role_player_change_req::default_instance_->InitAsDefaultInstance();
  role_player_change_ack::default_instance_->InitAsDefaultInstance();
  role_player_active_skin_req::default_instance_->InitAsDefaultInstance();
  role_player_active_skin_ack::default_instance_->InitAsDefaultInstance();
  role_player_buy_skin_req::default_instance_->InitAsDefaultInstance();
  role_player_buy_skin_ack::default_instance_->InitAsDefaultInstance();
  role_player_wear_skin_req::default_instance_->InitAsDefaultInstance();
  role_player_wear_skin_ack::default_instance_->InitAsDefaultInstance();
  role_player_skillup_ntf::default_instance_->InitAsDefaultInstance();
  role_buy_req::default_instance_->InitAsDefaultInstance();
  role_buy_ack::default_instance_->InitAsDefaultInstance();
  role_show_base_info_req::default_instance_->InitAsDefaultInstance();
  role_show_base_info_ack::default_instance_->InitAsDefaultInstance();
  role_show_get_like_req::default_instance_->InitAsDefaultInstance();
  role_show_get_like_ack::default_instance_->InitAsDefaultInstance();
  role_show_player_base_req::default_instance_->InitAsDefaultInstance();
  role_show_player_base_ack::default_instance_->InitAsDefaultInstance();
  role_show_like_req::default_instance_->InitAsDefaultInstance();
  role_show_like_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_name_req::default_instance_->InitAsDefaultInstance();
  role_show_change_name_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_position_req::default_instance_->InitAsDefaultInstance();
  role_show_change_position_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_signature_req::default_instance_->InitAsDefaultInstance();
  role_show_change_signature_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_age_req::default_instance_->InitAsDefaultInstance();
  role_show_change_age_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_starsign_req::default_instance_->InitAsDefaultInstance();
  role_show_change_starsign_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_birthday_req::default_instance_->InitAsDefaultInstance();
  role_show_change_birthday_ack::default_instance_->InitAsDefaultInstance();
  role_show_change_labels_req::default_instance_->InitAsDefaultInstance();
  role_show_change_labels_ack::default_instance_->InitAsDefaultInstance();
  role_show_get_emotion_req::default_instance_->InitAsDefaultInstance();
  role_show_get_emotion_ack::default_instance_->InitAsDefaultInstance();
  role_show_write_emotion_req::default_instance_->InitAsDefaultInstance();
  role_show_write_emotion_ack::default_instance_->InitAsDefaultInstance();
  role_show_like_emotion_req::default_instance_->InitAsDefaultInstance();
  role_show_like_emotion_ack::default_instance_->InitAsDefaultInstance();
  role_show_comment_emotion_req::default_instance_->InitAsDefaultInstance();
  role_show_comment_emotion_ack::default_instance_->InitAsDefaultInstance();
  role_show_remove_emotion_req::default_instance_->InitAsDefaultInstance();
  role_show_remove_emotion_ack::default_instance_->InitAsDefaultInstance();
  role_show_remove_comment_req::default_instance_->InitAsDefaultInstance();
  role_show_remove_comment_ack::default_instance_->InitAsDefaultInstance();
  role_show_set_hero_info::default_instance_->InitAsDefaultInstance();
  role_show_set_hero_req::default_instance_->InitAsDefaultInstance();
  role_show_set_hero_ack::default_instance_->InitAsDefaultInstance();
  role_show_set_border_req::default_instance_->InitAsDefaultInstance();
  role_show_set_border_ack::default_instance_->InitAsDefaultInstance();
  role_show_comment_req::default_instance_->InitAsDefaultInstance();
  role_show_comment_ack::default_instance_->InitAsDefaultInstance();
  role_show_delete_comment_req::default_instance_->InitAsDefaultInstance();
  role_show_delete_comment_ack::default_instance_->InitAsDefaultInstance();
  role_show_get_comment_req::default_instance_->InitAsDefaultInstance();
  role_show_get_comment_ack::default_instance_->InitAsDefaultInstance();
  discover_info_ntf::default_instance_->InitAsDefaultInstance();
  discover_show_boss_ntf::default_instance_->InitAsDefaultInstance();
  enter_discover_req::default_instance_->InitAsDefaultInstance();
  enter_discover_ack::default_instance_->InitAsDefaultInstance();
  exit_discover_req::default_instance_->InitAsDefaultInstance();
  exit_discover_ack::default_instance_->InitAsDefaultInstance();
  discovery_mopping_req::default_instance_->InitAsDefaultInstance();
  discovery_mopping_ack_rewards::default_instance_->InitAsDefaultInstance();
  discovery_mopping_ack_moppping::default_instance_->InitAsDefaultInstance();
  discovery_mopping_ack::default_instance_->InitAsDefaultInstance();
  discovery_buy_times_req::default_instance_->InitAsDefaultInstance();
  discovery_buy_times_ack::default_instance_->InitAsDefaultInstance();
  discovery_get_section_star_req::default_instance_->InitAsDefaultInstance();
  discovery_get_section_star_ack_rewards::default_instance_->InitAsDefaultInstance();
  discovery_get_section_star_ack::default_instance_->InitAsDefaultInstance();
  royal_base_info_ntf::default_instance_->InitAsDefaultInstance();
  royal_all_info_req::default_instance_->InitAsDefaultInstance();
  royal_all_info_ack::default_instance_->InitAsDefaultInstance();
  royal_refresh_req::default_instance_->InitAsDefaultInstance();
  royal_refresh_ack::default_instance_->InitAsDefaultInstance();
  royal_visit_req::default_instance_->InitAsDefaultInstance();
  royal_visit_ack::default_instance_->InitAsDefaultInstance();
  royal_reward_ntf::default_instance_->InitAsDefaultInstance();
  all_royals_ntf::default_instance_->InitAsDefaultInstance();
  royal_pro_update_ntf::default_instance_->InitAsDefaultInstance();
  royal_task_reward_draw_ntf::default_instance_->InitAsDefaultInstance();
  game_update_royal_task_ntf::default_instance_->InitAsDefaultInstance();
  game_royal_intimacy_reward_req::default_instance_->InitAsDefaultInstance();
  game_royal_intimacy_reward_ack::default_instance_->InitAsDefaultInstance();
  game_royal_draw_reward_req::default_instance_->InitAsDefaultInstance();
  game_royal_draw_reward_ack::default_instance_->InitAsDefaultInstance();
  game_royal_all_data_req::default_instance_->InitAsDefaultInstance();
  game_royal_all_data_ack::default_instance_->InitAsDefaultInstance();
  game_royal_refresh_data_req::default_instance_->InitAsDefaultInstance();
  game_royal_refresh_data_ack::default_instance_->InitAsDefaultInstance();
  game_royal_qingan_req::default_instance_->InitAsDefaultInstance();
  game_royal_qingan_ack::default_instance_->InitAsDefaultInstance();
  game_royal_unlock_req::default_instance_->InitAsDefaultInstance();
  game_royal_unlock_ack::default_instance_->InitAsDefaultInstance();
  game_branch_task_fin_req::default_instance_->InitAsDefaultInstance();
  game_branch_task_fin_ack::default_instance_->InitAsDefaultInstance();
  game_royal_chat_req::default_instance_->InitAsDefaultInstance();
  game_royal_chat_ack::default_instance_->InitAsDefaultInstance();
  game_royal_get_gifts_req::default_instance_->InitAsDefaultInstance();
  game_royal_get_gifts_ack::default_instance_->InitAsDefaultInstance();
  game_royal_give_gift_req::default_instance_->InitAsDefaultInstance();
  game_royal_give_gift_ack::default_instance_->InitAsDefaultInstance();
  game_royal_enter_scene_req::default_instance_->InitAsDefaultInstance();
  game_royal_enter_scene_ack::default_instance_->InitAsDefaultInstance();
  game_royal_event_fin_req::default_instance_->InitAsDefaultInstance();
  game_royal_event_fin_ack::default_instance_->InitAsDefaultInstance();
  get_offical_data_req::default_instance_->InitAsDefaultInstance();
  get_offical_data_ack::default_instance_->InitAsDefaultInstance();
  offical_data_ntf::default_instance_->InitAsDefaultInstance();
  update_chest_ntf::default_instance_->InitAsDefaultInstance();
  get_role_chest_req::default_instance_->InitAsDefaultInstance();
  get_role_chest_ack::default_instance_->InitAsDefaultInstance();
  create_team_req::default_instance_->InitAsDefaultInstance();
  create_team_ack::default_instance_->InitAsDefaultInstance();
  enter_team_req::default_instance_->InitAsDefaultInstance();
  enter_team_ack::default_instance_->InitAsDefaultInstance();
  exit_team_req::default_instance_->InitAsDefaultInstance();
  exit_team_ack::default_instance_->InitAsDefaultInstance();
  update_team_ntf::default_instance_->InitAsDefaultInstance();
  ready_team_req::default_instance_->InitAsDefaultInstance();
  ready_team_ack::default_instance_->InitAsDefaultInstance();
  update_team_req::default_instance_->InitAsDefaultInstance();
  update_team_ack::default_instance_->InitAsDefaultInstance();
  get_teams_req::default_instance_->InitAsDefaultInstance();
  get_teams_ack::default_instance_->InitAsDefaultInstance();
  invite_roles_enter_team_req::default_instance_->InitAsDefaultInstance();
  invite_roles_enter_team_ack::default_instance_->InitAsDefaultInstance();
  invite_enter_team_ntf::default_instance_->InitAsDefaultInstance();
  get_offical_rank_req::default_instance_->InitAsDefaultInstance();
  get_offical_rank_ack::default_instance_->InitAsDefaultInstance();
  get_offical_rank_info_req::default_instance_->InitAsDefaultInstance();
  get_offical_rank_info_ack::default_instance_->InitAsDefaultInstance();
  get_offical_formation_req::default_instance_->InitAsDefaultInstance();
  get_offical_formation_ack::default_instance_->InitAsDefaultInstance();
  challenge_offical_rank_req::default_instance_->InitAsDefaultInstance();
  challenge_offical_rank_ack::default_instance_->InitAsDefaultInstance();
  offical_apply_battle_result_req::default_instance_->InitAsDefaultInstance();
  offical_apply_battle_result_ack::default_instance_->InitAsDefaultInstance();
  role_plot_upload_req::default_instance_->InitAsDefaultInstance();
  role_plot_upload_ack::default_instance_->InitAsDefaultInstance();
  role_plot_get_req::default_instance_->InitAsDefaultInstance();
  role_plot_get_ack::default_instance_->InitAsDefaultInstance();
  plot_end_req::default_instance_->InitAsDefaultInstance();
  plot_end_ack::default_instance_->InitAsDefaultInstance();
  plot_chapter_end_req::default_instance_->InitAsDefaultInstance();
  plot_chapter_end_ack::default_instance_->InitAsDefaultInstance();
  plot_choose_branch_req::default_instance_->InitAsDefaultInstance();
  plot_choose_branch_ack::default_instance_->InitAsDefaultInstance();
  plot_trigger_action_req::default_instance_->InitAsDefaultInstance();
  plot_trigger_action_ack::default_instance_->InitAsDefaultInstance();
  all_event_info::default_instance_->InitAsDefaultInstance();
  client_event_msg_info::default_instance_->InitAsDefaultInstance();
  event_msg_get_all_req::default_instance_->InitAsDefaultInstance();
  event_msg_get_all_ack::default_instance_->InitAsDefaultInstance();
  event_msg_read_req::default_instance_->InitAsDefaultInstance();
  event_msg_read_ack::default_instance_->InitAsDefaultInstance();
  event_msg_del_req::default_instance_->InitAsDefaultInstance();
  event_msg_del_ack::default_instance_->InitAsDefaultInstance();
  event_msg_nty::default_instance_->InitAsDefaultInstance();
  event_msg_get_by_id_req::default_instance_->InitAsDefaultInstance();
  event_msg_get_by_id_ack::default_instance_->InitAsDefaultInstance();
  get_rank_data_req::default_instance_->InitAsDefaultInstance();
  get_rank_data_ack::default_instance_->InitAsDefaultInstance();
  role_uint_achievement::default_instance_->InitAsDefaultInstance();
  role_achievements_ntf_type_list::default_instance_->InitAsDefaultInstance();
  role_achievements_ntf::default_instance_->InitAsDefaultInstance();
  role_achievement_get_rewards_req::default_instance_->InitAsDefaultInstance();
  role_achievement_get_rewards_ack::default_instance_->InitAsDefaultInstance();
  role_achievement_point_rewards_req::default_instance_->InitAsDefaultInstance();
  role_achievement_point_rewards_ack::default_instance_->InitAsDefaultInstance();
  flower_bag_nty::default_instance_->InitAsDefaultInstance();
  flower_bag_all_req::default_instance_->InitAsDefaultInstance();
  flower_bag_all_ack::default_instance_->InitAsDefaultInstance();
  flower_bag_all_nty::default_instance_->InitAsDefaultInstance();
  flower_send_req::default_instance_->InitAsDefaultInstance();
  flower_send_ack::default_instance_->InitAsDefaultInstance();
  flower_receive_nty::default_instance_->InitAsDefaultInstance();
  role_draw_card_info::default_instance_->InitAsDefaultInstance();
  role_draw_card_reward_item::default_instance_->InitAsDefaultInstance();
  role_draw_card_rewards::default_instance_->InitAsDefaultInstance();
  role_draw_card_info_req::default_instance_->InitAsDefaultInstance();
  role_draw_card_info_ack::default_instance_->InitAsDefaultInstance();
  role_draw_card_req::default_instance_->InitAsDefaultInstance();
  role_draw_card_ack::default_instance_->InitAsDefaultInstance();
  role_draw_card_ssr_req::default_instance_->InitAsDefaultInstance();
  role_draw_card_ssr_ack_one::default_instance_->InitAsDefaultInstance();
  role_draw_card_ssr_ack::default_instance_->InitAsDefaultInstance();
  role_talent_activate_req::default_instance_->InitAsDefaultInstance();
  role_talent_activate_ack::default_instance_->InitAsDefaultInstance();
  all_role_talents_activate_req::default_instance_->InitAsDefaultInstance();
  all_role_talents_activate_ack::default_instance_->InitAsDefaultInstance();
  switch_role_skill_req::default_instance_->InitAsDefaultInstance();
  switch_role_skill_ack::default_instance_->InitAsDefaultInstance();
  talisman_use_req::default_instance_->InitAsDefaultInstance();
  talisman_use_ack::default_instance_->InitAsDefaultInstance();
  talisman_un_use_req::default_instance_->InitAsDefaultInstance();
  talisman_un_use_ack::default_instance_->InitAsDefaultInstance();
  talisman_lv_up_req::default_instance_->InitAsDefaultInstance();
  talisman_lv_up_ack::default_instance_->InitAsDefaultInstance();
  talisman_break_req::default_instance_->InitAsDefaultInstance();
  talisman_break_ack::default_instance_->InitAsDefaultInstance();
  talisman_change_ntf::default_instance_->InitAsDefaultInstance();
  red_pt_req::default_instance_->InitAsDefaultInstance();
  red_pt_ack::default_instance_->InitAsDefaultInstance();
  red_pt_ntf::default_instance_->InitAsDefaultInstance();
  get_wearing_fashions_req::default_instance_->InitAsDefaultInstance();
  get_wearing_fashions_ack::default_instance_->InitAsDefaultInstance();
  get_all_fashions_req::default_instance_->InitAsDefaultInstance();
  get_all_fashions_ack::default_instance_->InitAsDefaultInstance();
  wear_fashions_req::default_instance_->InitAsDefaultInstance();
  wear_fashions_ack::default_instance_->InitAsDefaultInstance();
  get_other_role_fashion_cs_req::default_instance_->InitAsDefaultInstance();
  get_other_role_fashion_cs_ack::default_instance_->InitAsDefaultInstance();
  verify_config_version_req::default_instance_->InitAsDefaultInstance();
  verify_config_version_ack::default_instance_->InitAsDefaultInstance();
  debug_hero_attr_ntf::default_instance_->InitAsDefaultInstance();
  waiting_in_line_ntf::default_instance_->InitAsDefaultInstance();
  finish_in_line_ntf::default_instance_->InitAsDefaultInstance();
  exit_waiting_in_line_req::default_instance_->InitAsDefaultInstance();
  exit_waiting_in_line_ack::default_instance_->InitAsDefaultInstance();
  user_event_track_ntf::default_instance_->InitAsDefaultInstance();
  role_guide_info::default_instance_->InitAsDefaultInstance();
  role_guide_ntf::default_instance_->InitAsDefaultInstance();
  role_guide_req::default_instance_->InitAsDefaultInstance();
  role_guide_ack::default_instance_->InitAsDefaultInstance();
  onekey_skip_guide_req::default_instance_->InitAsDefaultInstance();
  onekey_skip_guide_ack::default_instance_->InitAsDefaultInstance();
  plot_little_game_set_req::default_instance_->InitAsDefaultInstance();
  plot_little_game_set_ack::default_instance_->InitAsDefaultInstance();
  plot_little_game_get_req::default_instance_->InitAsDefaultInstance();
  plot_little_game_get_ack::default_instance_->InitAsDefaultInstance();
  pet_get_req::default_instance_->InitAsDefaultInstance();
  pet_get_ack::default_instance_->InitAsDefaultInstance();
  pet_change_name_req::default_instance_->InitAsDefaultInstance();
  pet_change_name_ack::default_instance_->InitAsDefaultInstance();
  pet_do_action_req::default_instance_->InitAsDefaultInstance();
  pet_do_action_ack::default_instance_->InitAsDefaultInstance();
  pet_send_out_req::default_instance_->InitAsDefaultInstance();
  pet_send_out_ack::default_instance_->InitAsDefaultInstance();
  pet_get_out_award_req::default_instance_->InitAsDefaultInstance();
  pet_get_out_award_ack::default_instance_->InitAsDefaultInstance();
  pet_feed_food_req::default_instance_->InitAsDefaultInstance();
  pet_feed_food_ack::default_instance_->InitAsDefaultInstance();
  pet_set_show_pet_req::default_instance_->InitAsDefaultInstance();
  pet_set_show_pet_ack::default_instance_->InitAsDefaultInstance();
  pet_out_back_req::default_instance_->InitAsDefaultInstance();
  pet_out_back_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5frole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5frole_2eproto {
  StaticDescriptorInitializer_cs_5frole_2eproto() {
    protobuf_AddDesc_cs_5frole_2eproto();
  }
} static_descriptor_initializer_cs_5frole_2eproto_;
const ::google::protobuf::EnumDescriptor* eAchievementState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eAchievementState_descriptor_;
}
bool eAchievementState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eDrawCardCoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDrawCardCoinType_descriptor_;
}
bool eDrawCardCoinType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserEventTrackType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserEventTrackType_descriptor_;
}
bool EUserEventTrackType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGUIDE_OPENCONDI_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGUIDE_OPENCONDI_TYPE_descriptor_;
}
bool EGUIDE_OPENCONDI_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int account_check_in_req::kProtoidFieldNumber;
const int account_check_in_req::kAccountFieldNumber;
const int account_check_in_req::kTokenFieldNumber;
const int account_check_in_req::kTempidFieldNumber;
const int account_check_in_req::kAreaidFieldNumber;
#endif  // !_MSC_VER

account_check_in_req::account_check_in_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_check_in_req::InitAsDefaultInstance() {
}

account_check_in_req::account_check_in_req(const account_check_in_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_check_in_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5020;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tempid_ = 0u;
  areaid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_check_in_req::~account_check_in_req() {
  SharedDtor();
}

void account_check_in_req::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void account_check_in_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_check_in_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_check_in_req_descriptor_;
}

const account_check_in_req& account_check_in_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

account_check_in_req* account_check_in_req::default_instance_ = NULL;

account_check_in_req* account_check_in_req::New() const {
  return new account_check_in_req;
}

void account_check_in_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5020;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    tempid_ = 0u;
    areaid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_check_in_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tempid;
        break;
      }

      // optional uint32 tempid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_areaid;
        break;
      }

      // optional uint32 areaid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_check_in_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // optional uint32 tempid = 4;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tempid(), output);
  }

  // optional uint32 areaid = 5;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->areaid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_check_in_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional uint32 tempid = 4;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tempid(), target);
  }

  // optional uint32 areaid = 5;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->areaid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_check_in_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint32 tempid = 4;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tempid());
    }

    // optional uint32 areaid = 5;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_check_in_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_check_in_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_check_in_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_check_in_req::MergeFrom(const account_check_in_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_check_in_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_check_in_req::CopyFrom(const account_check_in_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_check_in_req::IsInitialized() const {

  return true;
}

void account_check_in_req::Swap(account_check_in_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(token_, other->token_);
    std::swap(tempid_, other->tempid_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_check_in_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_check_in_req_descriptor_;
  metadata.reflection = account_check_in_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int account_check_in_ack::kProtoidFieldNumber;
const int account_check_in_ack::kAccountFieldNumber;
const int account_check_in_ack::kRetFieldNumber;
#endif  // !_MSC_VER

account_check_in_ack::account_check_in_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_check_in_ack::InitAsDefaultInstance() {
}

account_check_in_ack::account_check_in_ack(const account_check_in_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_check_in_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5021;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_check_in_ack::~account_check_in_ack() {
  SharedDtor();
}

void account_check_in_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void account_check_in_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_check_in_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_check_in_ack_descriptor_;
}

const account_check_in_ack& account_check_in_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

account_check_in_ack* account_check_in_ack::default_instance_ = NULL;

account_check_in_ack* account_check_in_ack::New() const {
  return new account_check_in_ack;
}

void account_check_in_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5021;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_check_in_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_check_in_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_check_in_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_check_in_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_check_in_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_check_in_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_check_in_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_check_in_ack::MergeFrom(const account_check_in_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_check_in_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_check_in_ack::CopyFrom(const account_check_in_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_check_in_ack::IsInitialized() const {

  return true;
}

void account_check_in_ack::Swap(account_check_in_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_check_in_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_check_in_ack_descriptor_;
  metadata.reflection = account_check_in_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_packet_seq_id_ntf::kProtoidFieldNumber;
#endif  // !_MSC_VER

sys_packet_seq_id_ntf::sys_packet_seq_id_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_packet_seq_id_ntf::InitAsDefaultInstance() {
}

sys_packet_seq_id_ntf::sys_packet_seq_id_ntf(const sys_packet_seq_id_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_packet_seq_id_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5025;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_packet_seq_id_ntf::~sys_packet_seq_id_ntf() {
  SharedDtor();
}

void sys_packet_seq_id_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sys_packet_seq_id_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_packet_seq_id_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_packet_seq_id_ntf_descriptor_;
}

const sys_packet_seq_id_ntf& sys_packet_seq_id_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

sys_packet_seq_id_ntf* sys_packet_seq_id_ntf::default_instance_ = NULL;

sys_packet_seq_id_ntf* sys_packet_seq_id_ntf::New() const {
  return new sys_packet_seq_id_ntf;
}

void sys_packet_seq_id_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5025;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_packet_seq_id_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_packet_seq_id_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_packet_seq_id_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_packet_seq_id_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_packet_seq_id_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_packet_seq_id_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_packet_seq_id_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_packet_seq_id_ntf::MergeFrom(const sys_packet_seq_id_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_packet_seq_id_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_packet_seq_id_ntf::CopyFrom(const sys_packet_seq_id_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_packet_seq_id_ntf::IsInitialized() const {

  return true;
}

void sys_packet_seq_id_ntf::Swap(sys_packet_seq_id_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_packet_seq_id_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_packet_seq_id_ntf_descriptor_;
  metadata.reflection = sys_packet_seq_id_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_packet_seq_id_req::kProtoidFieldNumber;
const int sys_packet_seq_id_req::kDownlinkSeqIdFieldNumber;
#endif  // !_MSC_VER

sys_packet_seq_id_req::sys_packet_seq_id_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_packet_seq_id_req::InitAsDefaultInstance() {
}

sys_packet_seq_id_req::sys_packet_seq_id_req(const sys_packet_seq_id_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_packet_seq_id_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5022;
  downlink_seq_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_packet_seq_id_req::~sys_packet_seq_id_req() {
  SharedDtor();
}

void sys_packet_seq_id_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sys_packet_seq_id_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_packet_seq_id_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_packet_seq_id_req_descriptor_;
}

const sys_packet_seq_id_req& sys_packet_seq_id_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

sys_packet_seq_id_req* sys_packet_seq_id_req::default_instance_ = NULL;

sys_packet_seq_id_req* sys_packet_seq_id_req::New() const {
  return new sys_packet_seq_id_req;
}

void sys_packet_seq_id_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5022;
    downlink_seq_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_packet_seq_id_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_downlink_seq_id;
        break;
      }

      // optional uint32 downlink_seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downlink_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downlink_seq_id_)));
          set_has_downlink_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_packet_seq_id_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 downlink_seq_id = 2;
  if (has_downlink_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->downlink_seq_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_packet_seq_id_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 downlink_seq_id = 2;
  if (has_downlink_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->downlink_seq_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_packet_seq_id_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 downlink_seq_id = 2;
    if (has_downlink_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downlink_seq_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_packet_seq_id_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_packet_seq_id_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_packet_seq_id_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_packet_seq_id_req::MergeFrom(const sys_packet_seq_id_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_downlink_seq_id()) {
      set_downlink_seq_id(from.downlink_seq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_packet_seq_id_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_packet_seq_id_req::CopyFrom(const sys_packet_seq_id_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_packet_seq_id_req::IsInitialized() const {

  return true;
}

void sys_packet_seq_id_req::Swap(sys_packet_seq_id_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(downlink_seq_id_, other->downlink_seq_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_packet_seq_id_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_packet_seq_id_req_descriptor_;
  metadata.reflection = sys_packet_seq_id_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sys_packet_seq_id_ack::kProtoidFieldNumber;
const int sys_packet_seq_id_ack::kUplinkSeqIdFieldNumber;
#endif  // !_MSC_VER

sys_packet_seq_id_ack::sys_packet_seq_id_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sys_packet_seq_id_ack::InitAsDefaultInstance() {
}

sys_packet_seq_id_ack::sys_packet_seq_id_ack(const sys_packet_seq_id_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sys_packet_seq_id_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5023;
  uplink_seq_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sys_packet_seq_id_ack::~sys_packet_seq_id_ack() {
  SharedDtor();
}

void sys_packet_seq_id_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sys_packet_seq_id_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sys_packet_seq_id_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sys_packet_seq_id_ack_descriptor_;
}

const sys_packet_seq_id_ack& sys_packet_seq_id_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

sys_packet_seq_id_ack* sys_packet_seq_id_ack::default_instance_ = NULL;

sys_packet_seq_id_ack* sys_packet_seq_id_ack::New() const {
  return new sys_packet_seq_id_ack;
}

void sys_packet_seq_id_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5023;
    uplink_seq_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sys_packet_seq_id_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uplink_seq_id;
        break;
      }

      // optional uint32 uplink_seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uplink_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uplink_seq_id_)));
          set_has_uplink_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sys_packet_seq_id_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 uplink_seq_id = 2;
  if (has_uplink_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uplink_seq_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sys_packet_seq_id_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 uplink_seq_id = 2;
  if (has_uplink_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uplink_seq_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sys_packet_seq_id_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 uplink_seq_id = 2;
    if (has_uplink_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uplink_seq_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sys_packet_seq_id_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sys_packet_seq_id_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sys_packet_seq_id_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sys_packet_seq_id_ack::MergeFrom(const sys_packet_seq_id_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_uplink_seq_id()) {
      set_uplink_seq_id(from.uplink_seq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sys_packet_seq_id_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_packet_seq_id_ack::CopyFrom(const sys_packet_seq_id_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_packet_seq_id_ack::IsInitialized() const {

  return true;
}

void sys_packet_seq_id_ack::Swap(sys_packet_seq_id_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(uplink_seq_id_, other->uplink_seq_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sys_packet_seq_id_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sys_packet_seq_id_ack_descriptor_;
  metadata.reflection = sys_packet_seq_id_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int uplink_packet_seq_error_ntf::kProtoidFieldNumber;
const int uplink_packet_seq_error_ntf::kUplinkSeqIdFieldNumber;
#endif  // !_MSC_VER

uplink_packet_seq_error_ntf::uplink_packet_seq_error_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void uplink_packet_seq_error_ntf::InitAsDefaultInstance() {
}

uplink_packet_seq_error_ntf::uplink_packet_seq_error_ntf(const uplink_packet_seq_error_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void uplink_packet_seq_error_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5024;
  uplink_seq_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uplink_packet_seq_error_ntf::~uplink_packet_seq_error_ntf() {
  SharedDtor();
}

void uplink_packet_seq_error_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void uplink_packet_seq_error_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* uplink_packet_seq_error_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uplink_packet_seq_error_ntf_descriptor_;
}

const uplink_packet_seq_error_ntf& uplink_packet_seq_error_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

uplink_packet_seq_error_ntf* uplink_packet_seq_error_ntf::default_instance_ = NULL;

uplink_packet_seq_error_ntf* uplink_packet_seq_error_ntf::New() const {
  return new uplink_packet_seq_error_ntf;
}

void uplink_packet_seq_error_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5024;
    uplink_seq_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool uplink_packet_seq_error_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_error_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uplink_seq_id;
        break;
      }

      // optional uint32 uplink_seq_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uplink_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uplink_seq_id_)));
          set_has_uplink_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void uplink_packet_seq_error_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_error_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 uplink_seq_id = 2;
  if (has_uplink_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uplink_seq_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* uplink_packet_seq_error_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_error_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 uplink_seq_id = 2;
  if (has_uplink_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uplink_seq_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int uplink_packet_seq_error_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_error_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 uplink_seq_id = 2;
    if (has_uplink_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uplink_seq_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void uplink_packet_seq_error_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const uplink_packet_seq_error_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const uplink_packet_seq_error_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void uplink_packet_seq_error_ntf::MergeFrom(const uplink_packet_seq_error_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_uplink_seq_id()) {
      set_uplink_seq_id(from.uplink_seq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void uplink_packet_seq_error_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uplink_packet_seq_error_ntf::CopyFrom(const uplink_packet_seq_error_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uplink_packet_seq_error_ntf::IsInitialized() const {

  return true;
}

void uplink_packet_seq_error_ntf::Swap(uplink_packet_seq_error_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(uplink_seq_id_, other->uplink_seq_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata uplink_packet_seq_error_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = uplink_packet_seq_error_ntf_descriptor_;
  metadata.reflection = uplink_packet_seq_error_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_secret_key_req::kProtoidFieldNumber;
const int client_secret_key_req::kPublicKeyFieldNumber;
const int client_secret_key_req::kSeedFieldNumber;
#endif  // !_MSC_VER

client_secret_key_req::client_secret_key_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_secret_key_req::InitAsDefaultInstance() {
}

client_secret_key_req::client_secret_key_req(const client_secret_key_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_secret_key_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5060;
  public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_secret_key_req::~client_secret_key_req() {
  SharedDtor();
}

void client_secret_key_req::SharedDtor() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (this != default_instance_) {
  }
}

void client_secret_key_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_secret_key_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_secret_key_req_descriptor_;
}

const client_secret_key_req& client_secret_key_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_secret_key_req* client_secret_key_req::default_instance_ = NULL;

client_secret_key_req* client_secret_key_req::New() const {
  return new client_secret_key_req;
}

void client_secret_key_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5060;
    if (has_public_key()) {
      if (public_key_ != &::google::protobuf::internal::kEmptyString) {
        public_key_->clear();
      }
    }
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_secret_key_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_public_key;
        break;
      }

      // optional string public_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->public_key().data(), this->public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seed;
        break;
      }

      // optional string seed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_secret_key_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string public_key = 2;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->public_key(), output);
  }

  // optional string seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->seed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_secret_key_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string public_key = 2;
  if (has_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->public_key().data(), this->public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_key(), target);
  }

  // optional string seed = 3;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_secret_key_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string public_key = 2;
    if (has_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_key());
    }

    // optional string seed = 3;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_secret_key_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_secret_key_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_secret_key_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_secret_key_req::MergeFrom(const client_secret_key_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_public_key()) {
      set_public_key(from.public_key());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_secret_key_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_secret_key_req::CopyFrom(const client_secret_key_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_secret_key_req::IsInitialized() const {

  return true;
}

void client_secret_key_req::Swap(client_secret_key_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(public_key_, other->public_key_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_secret_key_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_secret_key_req_descriptor_;
  metadata.reflection = client_secret_key_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_secret_key_ack::kProtoidFieldNumber;
const int client_secret_key_ack::kSecretKeyFieldNumber;
#endif  // !_MSC_VER

client_secret_key_ack::client_secret_key_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_secret_key_ack::InitAsDefaultInstance() {
}

client_secret_key_ack::client_secret_key_ack(const client_secret_key_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_secret_key_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5061;
  secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_secret_key_ack::~client_secret_key_ack() {
  SharedDtor();
}

void client_secret_key_ack::SharedDtor() {
  if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_key_;
  }
  if (this != default_instance_) {
  }
}

void client_secret_key_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_secret_key_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_secret_key_ack_descriptor_;
}

const client_secret_key_ack& client_secret_key_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_secret_key_ack* client_secret_key_ack::default_instance_ = NULL;

client_secret_key_ack* client_secret_key_ack::New() const {
  return new client_secret_key_ack;
}

void client_secret_key_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5061;
    if (has_secret_key()) {
      if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
        secret_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_secret_key_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secret_key;
        break;
      }

      // optional string secret_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secret_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secret_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secret_key().data(), this->secret_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_secret_key_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string secret_key = 2;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->secret_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_secret_key_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string secret_key = 2;
  if (has_secret_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secret_key().data(), this->secret_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secret_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_secret_key_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string secret_key = 2;
    if (has_secret_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secret_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_secret_key_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_secret_key_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_secret_key_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_secret_key_ack::MergeFrom(const client_secret_key_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_secret_key()) {
      set_secret_key(from.secret_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_secret_key_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_secret_key_ack::CopyFrom(const client_secret_key_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_secret_key_ack::IsInitialized() const {

  return true;
}

void client_secret_key_ack::Swap(client_secret_key_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(secret_key_, other->secret_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_secret_key_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_secret_key_ack_descriptor_;
  metadata.reflection = client_secret_key_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_secret_start_req::kProtoidFieldNumber;
const int client_secret_start_req::kRetFieldNumber;
#endif  // !_MSC_VER

client_secret_start_req::client_secret_start_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_secret_start_req::InitAsDefaultInstance() {
}

client_secret_start_req::client_secret_start_req(const client_secret_start_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_secret_start_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5062;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_secret_start_req::~client_secret_start_req() {
  SharedDtor();
}

void client_secret_start_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_secret_start_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_secret_start_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_secret_start_req_descriptor_;
}

const client_secret_start_req& client_secret_start_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_secret_start_req* client_secret_start_req::default_instance_ = NULL;

client_secret_start_req* client_secret_start_req::New() const {
  return new client_secret_start_req;
}

void client_secret_start_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5062;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_secret_start_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_secret_start_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_secret_start_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_secret_start_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_secret_start_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_secret_start_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_secret_start_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_secret_start_req::MergeFrom(const client_secret_start_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_secret_start_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_secret_start_req::CopyFrom(const client_secret_start_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_secret_start_req::IsInitialized() const {

  return true;
}

void client_secret_start_req::Swap(client_secret_start_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_secret_start_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_secret_start_req_descriptor_;
  metadata.reflection = client_secret_start_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_secret_start_ack::kProtoidFieldNumber;
const int client_secret_start_ack::kRetFieldNumber;
#endif  // !_MSC_VER

client_secret_start_ack::client_secret_start_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_secret_start_ack::InitAsDefaultInstance() {
}

client_secret_start_ack::client_secret_start_ack(const client_secret_start_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_secret_start_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5063;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_secret_start_ack::~client_secret_start_ack() {
  SharedDtor();
}

void client_secret_start_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_secret_start_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_secret_start_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_secret_start_ack_descriptor_;
}

const client_secret_start_ack& client_secret_start_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_secret_start_ack* client_secret_start_ack::default_instance_ = NULL;

client_secret_start_ack* client_secret_start_ack::New() const {
  return new client_secret_start_ack;
}

void client_secret_start_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5063;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_secret_start_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_secret_start_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_secret_start_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_secret_start_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_secret_start_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_secret_start_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_secret_start_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_secret_start_ack::MergeFrom(const client_secret_start_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_secret_start_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_secret_start_ack::CopyFrom(const client_secret_start_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_secret_start_ack::IsInitialized() const {

  return true;
}

void client_secret_start_ack::Swap(client_secret_start_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_secret_start_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_secret_start_ack_descriptor_;
  metadata.reflection = client_secret_start_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int account_role_data_ack::kProtoidFieldNumber;
const int account_role_data_ack::kRetFieldNumber;
const int account_role_data_ack::kDataFieldNumber;
#endif  // !_MSC_VER

account_role_data_ack::account_role_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void account_role_data_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::account_role_data*>(&::SProtoSpace::account_role_data::default_instance());
}

account_role_data_ack::account_role_data_ack(const account_role_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void account_role_data_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5000;
  ret_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

account_role_data_ack::~account_role_data_ack() {
  SharedDtor();
}

void account_role_data_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void account_role_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* account_role_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return account_role_data_ack_descriptor_;
}

const account_role_data_ack& account_role_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

account_role_data_ack* account_role_data_ack::default_instance_ = NULL;

account_role_data_ack* account_role_data_ack::New() const {
  return new account_role_data_ack;
}

void account_role_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5000;
    ret_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool account_role_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_role_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.account_role_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void account_role_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_role_data_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.account_role_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* account_role_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_role_data_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.account_role_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int account_role_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_role_data_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .SProtoSpace.account_role_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void account_role_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const account_role_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const account_role_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void account_role_data_ack::MergeFrom(const account_role_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::account_role_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void account_role_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void account_role_data_ack::CopyFrom(const account_role_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool account_role_data_ack::IsInitialized() const {

  return true;
}

void account_role_data_ack::Swap(account_role_data_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata account_role_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = account_role_data_ack_descriptor_;
  metadata.reflection = account_role_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_role_of_game::kProtoidFieldNumber;
const int create_role_of_game::kAccountFieldNumber;
const int create_role_of_game::kRolenameFieldNumber;
const int create_role_of_game::kRolesexFieldNumber;
#endif  // !_MSC_VER

create_role_of_game::create_role_of_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_role_of_game::InitAsDefaultInstance() {
}

create_role_of_game::create_role_of_game(const create_role_of_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_role_of_game::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5001;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolesex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_role_of_game::~create_role_of_game() {
  SharedDtor();
}

void create_role_of_game::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void create_role_of_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_role_of_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_role_of_game_descriptor_;
}

const create_role_of_game& create_role_of_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

create_role_of_game* create_role_of_game::default_instance_ = NULL;

create_role_of_game* create_role_of_game::New() const {
  return new create_role_of_game;
}

void create_role_of_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5001;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    rolesex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_role_of_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rolename;
        break;
      }

      // optional string rolename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rolesex;
        break;
      }

      // optional int32 rolesex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rolesex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolesex_)));
          set_has_rolesex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_role_of_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }

  // optional int32 rolesex = 4;
  if (has_rolesex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rolesex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_role_of_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }

  // optional int32 rolesex = 4;
  if (has_rolesex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rolesex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_role_of_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string rolename = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 rolesex = 4;
    if (has_rolesex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolesex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_role_of_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_role_of_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_role_of_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_role_of_game::MergeFrom(const create_role_of_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_rolesex()) {
      set_rolesex(from.rolesex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_role_of_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_role_of_game::CopyFrom(const create_role_of_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_role_of_game::IsInitialized() const {

  return true;
}

void create_role_of_game::Swap(create_role_of_game* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(account_, other->account_);
    std::swap(rolename_, other->rolename_);
    std::swap(rolesex_, other->rolesex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_role_of_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_role_of_game_descriptor_;
  metadata.reflection = create_role_of_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_role_of_game_ack::kProtoidFieldNumber;
const int create_role_of_game_ack::kCreateRetFieldNumber;
const int create_role_of_game_ack::kAccountFieldNumber;
const int create_role_of_game_ack::kDataFieldNumber;
#endif  // !_MSC_VER

create_role_of_game_ack::create_role_of_game_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_role_of_game_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::account_role_data*>(&::SProtoSpace::account_role_data::default_instance());
}

create_role_of_game_ack::create_role_of_game_ack(const create_role_of_game_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_role_of_game_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5002;
  create_ret_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_role_of_game_ack::~create_role_of_game_ack() {
  SharedDtor();
}

void create_role_of_game_ack::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void create_role_of_game_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_role_of_game_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_role_of_game_ack_descriptor_;
}

const create_role_of_game_ack& create_role_of_game_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

create_role_of_game_ack* create_role_of_game_ack::default_instance_ = NULL;

create_role_of_game_ack* create_role_of_game_ack::New() const {
  return new create_role_of_game_ack;
}

void create_role_of_game_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5002;
    create_ret_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_role_of_game_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_create_ret;
        break;
      }

      // optional int32 create_ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &create_ret_)));
          set_has_create_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.account_role_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_role_of_game_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 create_ret = 2;
  if (has_create_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->create_ret(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional .SProtoSpace.account_role_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_role_of_game_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 create_ret = 2;
  if (has_create_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->create_ret(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional .SProtoSpace.account_role_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_role_of_game_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 create_ret = 2;
    if (has_create_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->create_ret());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional .SProtoSpace.account_role_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_role_of_game_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_role_of_game_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_role_of_game_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_role_of_game_ack::MergeFrom(const create_role_of_game_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_create_ret()) {
      set_create_ret(from.create_ret());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::account_role_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_role_of_game_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_role_of_game_ack::CopyFrom(const create_role_of_game_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_role_of_game_ack::IsInitialized() const {

  return true;
}

void create_role_of_game_ack::Swap(create_role_of_game_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(create_ret_, other->create_ret_);
    std::swap(account_, other->account_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_role_of_game_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_role_of_game_ack_descriptor_;
  metadata.reflection = create_role_of_game_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int switch_scene_req::kProtoidFieldNumber;
const int switch_scene_req::kSceneIdFieldNumber;
const int switch_scene_req::kSceneTypeFieldNumber;
const int switch_scene_req::kGameIdFieldNumber;
#endif  // !_MSC_VER

switch_scene_req::switch_scene_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void switch_scene_req::InitAsDefaultInstance() {
}

switch_scene_req::switch_scene_req(const switch_scene_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void switch_scene_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5003;
  scene_id_ = 0u;
  scene_type_ = 0u;
  game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

switch_scene_req::~switch_scene_req() {
  SharedDtor();
}

void switch_scene_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void switch_scene_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* switch_scene_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return switch_scene_req_descriptor_;
}

const switch_scene_req& switch_scene_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

switch_scene_req* switch_scene_req::default_instance_ = NULL;

switch_scene_req* switch_scene_req::New() const {
  return new switch_scene_req;
}

void switch_scene_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5003;
    scene_id_ = 0u;
    scene_type_ = 0u;
    game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool switch_scene_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_scene_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene_type;
        break;
      }

      // optional uint32 scene_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_type_)));
          set_has_scene_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game_id;
        break;
      }

      // optional uint64 game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void switch_scene_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_scene_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_type(), output);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* switch_scene_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_scene_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  // optional uint32 scene_type = 3;
  if (has_scene_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_type(), target);
  }

  // optional uint64 game_id = 4;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int switch_scene_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_scene_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 scene_type = 3;
    if (has_scene_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_type());
    }

    // optional uint64 game_id = 4;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void switch_scene_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const switch_scene_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const switch_scene_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void switch_scene_req::MergeFrom(const switch_scene_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_scene_type()) {
      set_scene_type(from.scene_type());
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void switch_scene_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void switch_scene_req::CopyFrom(const switch_scene_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool switch_scene_req::IsInitialized() const {

  return true;
}

void switch_scene_req::Swap(switch_scene_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(scene_type_, other->scene_type_);
    std::swap(game_id_, other->game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata switch_scene_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = switch_scene_req_descriptor_;
  metadata.reflection = switch_scene_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_game_req::kProtoidFieldNumber;
const int enter_game_req::kRoleidFieldNumber;
const int enter_game_req::kReasonFieldNumber;
#endif  // !_MSC_VER

enter_game_req::enter_game_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_game_req::InitAsDefaultInstance() {
}

enter_game_req::enter_game_req(const enter_game_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_game_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5005;
  roleid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_game_req::~enter_game_req() {
  SharedDtor();
}

void enter_game_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_game_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_game_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_game_req_descriptor_;
}

const enter_game_req& enter_game_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

enter_game_req* enter_game_req::default_instance_ = NULL;

enter_game_req* enter_game_req::New() const {
  return new enter_game_req;
}

void enter_game_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5005;
    roleid_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_game_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roleid;
        break;
      }

      // optional uint64 roleid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reason;
        break;
      }

      // optional uint32 reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_game_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 roleid = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->roleid(), output);
  }

  // optional uint32 reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_game_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 roleid = 2;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->roleid(), target);
  }

  // optional uint32 reason = 3;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_game_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 roleid = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional uint32 reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_game_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_game_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_game_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_game_req::MergeFrom(const enter_game_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_game_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_game_req::CopyFrom(const enter_game_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_game_req::IsInitialized() const {

  return true;
}

void enter_game_req::Swap(enter_game_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(roleid_, other->roleid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_game_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_game_req_descriptor_;
  metadata.reflection = enter_game_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_game_ack::kProtoidFieldNumber;
const int enter_game_ack::kRetFieldNumber;
#endif  // !_MSC_VER

enter_game_ack::enter_game_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_game_ack::InitAsDefaultInstance() {
}

enter_game_ack::enter_game_ack(const enter_game_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_game_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5009;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_game_ack::~enter_game_ack() {
  SharedDtor();
}

void enter_game_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_game_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_game_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_game_ack_descriptor_;
}

const enter_game_ack& enter_game_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

enter_game_ack* enter_game_ack::default_instance_ = NULL;

enter_game_ack* enter_game_ack::New() const {
  return new enter_game_ack;
}

void enter_game_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5009;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_game_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_game_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_game_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_game_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_game_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_game_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_game_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_game_ack::MergeFrom(const enter_game_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_game_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_game_ack::CopyFrom(const enter_game_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_game_ack::IsInitialized() const {

  return true;
}

void enter_game_ack::Swap(enter_game_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_game_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_game_ack_descriptor_;
  metadata.reflection = enter_game_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_unlock_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

system_unlock_req::system_unlock_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void system_unlock_req::InitAsDefaultInstance() {
}

system_unlock_req::system_unlock_req(const system_unlock_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void system_unlock_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7600;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_unlock_req::~system_unlock_req() {
  SharedDtor();
}

void system_unlock_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void system_unlock_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_unlock_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_unlock_req_descriptor_;
}

const system_unlock_req& system_unlock_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

system_unlock_req* system_unlock_req::default_instance_ = NULL;

system_unlock_req* system_unlock_req::New() const {
  return new system_unlock_req;
}

void system_unlock_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7600;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_unlock_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void system_unlock_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* system_unlock_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int system_unlock_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_unlock_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_unlock_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_unlock_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_unlock_req::MergeFrom(const system_unlock_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_unlock_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_unlock_req::CopyFrom(const system_unlock_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_unlock_req::IsInitialized() const {

  return true;
}

void system_unlock_req::Swap(system_unlock_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_unlock_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_unlock_req_descriptor_;
  metadata.reflection = system_unlock_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_unlock_ack::kProtoidFieldNumber;
const int system_unlock_ack::kLockModuleIdsFieldNumber;
#endif  // !_MSC_VER

system_unlock_ack::system_unlock_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void system_unlock_ack::InitAsDefaultInstance() {
}

system_unlock_ack::system_unlock_ack(const system_unlock_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void system_unlock_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7601;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_unlock_ack::~system_unlock_ack() {
  SharedDtor();
}

void system_unlock_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void system_unlock_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_unlock_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_unlock_ack_descriptor_;
}

const system_unlock_ack& system_unlock_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

system_unlock_ack* system_unlock_ack::default_instance_ = NULL;

system_unlock_ack* system_unlock_ack::New() const {
  return new system_unlock_ack;
}

void system_unlock_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7601;
  }
  lock_module_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_unlock_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_module_ids;
        break;
      }

      // repeated int32 lock_module_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_module_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_lock_module_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lock_module_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lock_module_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void system_unlock_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 lock_module_ids = 2;
  for (int i = 0; i < this->lock_module_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->lock_module_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* system_unlock_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 lock_module_ids = 2;
  for (int i = 0; i < this->lock_module_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->lock_module_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int system_unlock_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 lock_module_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->lock_module_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lock_module_ids(i));
    }
    total_size += 1 * this->lock_module_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_unlock_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_unlock_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_unlock_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_unlock_ack::MergeFrom(const system_unlock_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  lock_module_ids_.MergeFrom(from.lock_module_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_unlock_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_unlock_ack::CopyFrom(const system_unlock_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_unlock_ack::IsInitialized() const {

  return true;
}

void system_unlock_ack::Swap(system_unlock_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    lock_module_ids_.Swap(&other->lock_module_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_unlock_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_unlock_ack_descriptor_;
  metadata.reflection = system_unlock_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int system_unlock_ntf::kProtoidFieldNumber;
const int system_unlock_ntf::kUnlockModuleIdsFieldNumber;
#endif  // !_MSC_VER

system_unlock_ntf::system_unlock_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void system_unlock_ntf::InitAsDefaultInstance() {
}

system_unlock_ntf::system_unlock_ntf(const system_unlock_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void system_unlock_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7602;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

system_unlock_ntf::~system_unlock_ntf() {
  SharedDtor();
}

void system_unlock_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void system_unlock_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* system_unlock_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return system_unlock_ntf_descriptor_;
}

const system_unlock_ntf& system_unlock_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

system_unlock_ntf* system_unlock_ntf::default_instance_ = NULL;

system_unlock_ntf* system_unlock_ntf::New() const {
  return new system_unlock_ntf;
}

void system_unlock_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7602;
  }
  unlock_module_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool system_unlock_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlock_module_ids;
        break;
      }

      // repeated int32 unlock_module_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_module_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_unlock_module_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unlock_module_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlock_module_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void system_unlock_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 unlock_module_ids = 2;
  for (int i = 0; i < this->unlock_module_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->unlock_module_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* system_unlock_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 unlock_module_ids = 2;
  for (int i = 0; i < this->unlock_module_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->unlock_module_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int system_unlock_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 unlock_module_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlock_module_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unlock_module_ids(i));
    }
    total_size += 1 * this->unlock_module_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void system_unlock_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const system_unlock_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const system_unlock_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void system_unlock_ntf::MergeFrom(const system_unlock_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  unlock_module_ids_.MergeFrom(from.unlock_module_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void system_unlock_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void system_unlock_ntf::CopyFrom(const system_unlock_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool system_unlock_ntf::IsInitialized() const {

  return true;
}

void system_unlock_ntf::Swap(system_unlock_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    unlock_module_ids_.Swap(&other->unlock_module_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata system_unlock_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = system_unlock_ntf_descriptor_;
  metadata.reflection = system_unlock_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_info_ntf::kProtoidFieldNumber;
const int role_info_ntf::kRoleIdFieldNumber;
const int role_info_ntf::kRolenameFieldNumber;
const int role_info_ntf::kSoulSFieldNumber;
const int role_info_ntf::kItemSFieldNumber;
const int role_info_ntf::kLvFieldNumber;
const int role_info_ntf::kExpFieldNumber;
const int role_info_ntf::kSexFieldNumber;
const int role_info_ntf::kGoldFieldNumber;
const int role_info_ntf::kJadeFieldNumber;
const int role_info_ntf::kPowerFieldNumber;
const int role_info_ntf::kBuyPowerTimesFieldNumber;
const int role_info_ntf::kMeritFieldNumber;
const int role_info_ntf::kGradeFieldNumber;
const int role_info_ntf::kTenderFieldNumber;
const int role_info_ntf::kTreasonFieldNumber;
const int role_info_ntf::kWiseFieldNumber;
const int role_info_ntf::kAdorkableFieldNumber;
const int role_info_ntf::kGoodFieldNumber;
const int role_info_ntf::kSchemingFieldNumber;
const int role_info_ntf::kBagCapacityFieldNumber;
const int role_info_ntf::kTaskActivityFieldNumber;
const int role_info_ntf::kOfficalSalaryFieldNumber;
const int role_info_ntf::kFirstOfficalAwardFieldNumber;
const int role_info_ntf::kSkillPointFieldNumber;
const int role_info_ntf::kWineFieldNumber;
const int role_info_ntf::kWineCupFieldNumber;
const int role_info_ntf::kDailyFortuneFieldNumber;
const int role_info_ntf::kAdvEnergyFieldNumber;
const int role_info_ntf::kAdvTimesFieldNumber;
const int role_info_ntf::kTalentPointFieldNumber;
const int role_info_ntf::kChangeNameTimeFieldNumber;
#endif  // !_MSC_VER

role_info_ntf::role_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_info_ntf::InitAsDefaultInstance() {
}

role_info_ntf::role_info_ntf(const role_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5102;
  role_id_ = GOOGLE_ULONGLONG(0);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  exp_ = 0;
  sex_ = 0;
  gold_ = 0;
  jade_ = 0;
  power_ = 0;
  buy_power_times_ = 0;
  merit_ = 0;
  grade_ = 0;
  tender_ = 0;
  treason_ = 0;
  wise_ = 0;
  adorkable_ = 0;
  good_ = 0;
  scheming_ = 0;
  bag_capacity_ = 0u;
  task_activity_ = 0;
  offical_salary_ = false;
  first_offical_award_ = 0u;
  skill_point_ = 0;
  wine_ = 0u;
  wine_cup_ = 0u;
  daily_fortune_ = 0;
  adv_energy_ = 0;
  adv_times_ = 0;
  talent_point_ = 0;
  change_name_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_info_ntf::~role_info_ntf() {
  SharedDtor();
}

void role_info_ntf::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void role_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_info_ntf_descriptor_;
}

const role_info_ntf& role_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_info_ntf* role_info_ntf::default_instance_ = NULL;

role_info_ntf* role_info_ntf::New() const {
  return new role_info_ntf;
}

void role_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5102;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    lv_ = 0;
    exp_ = 0;
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gold_ = 0;
    jade_ = 0;
    power_ = 0;
    buy_power_times_ = 0;
    merit_ = 0;
    grade_ = 0;
    tender_ = 0;
    treason_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    wise_ = 0;
    adorkable_ = 0;
    good_ = 0;
    scheming_ = 0;
    bag_capacity_ = 0u;
    task_activity_ = 0;
    offical_salary_ = false;
    first_offical_award_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    skill_point_ = 0;
    wine_ = 0u;
    wine_cup_ = 0u;
    daily_fortune_ = 0;
    adv_energy_ = 0;
    adv_times_ = 0;
    talent_point_ = 0;
    change_name_time_ = 0;
  }
  soul_s_.Clear();
  item_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // required uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rolename;
        break;
      }

      // optional string rolename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soul_s;
        break;
      }

      // repeated .SProtoSpace.soul_info soul_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soul_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_soul_s;
        if (input->ExpectTag(42)) goto parse_item_s;
        break;
      }

      // repeated .SProtoSpace.item_info item_s = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_s;
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }

      // optional int32 lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // optional int32 sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional int32 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jade;
        break;
      }

      // optional int32 jade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jade_)));
          set_has_jade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_power;
        break;
      }

      // optional int32 power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buy_power_times;
        break;
      }

      // optional int32 buy_power_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_power_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_power_times_)));
          set_has_buy_power_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_merit;
        break;
      }

      // optional int32 merit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_grade;
        break;
      }

      // optional int32 grade = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tender;
        break;
      }

      // optional int32 tender = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tender_)));
          set_has_tender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_treason;
        break;
      }

      // optional int32 treason = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treason_)));
          set_has_treason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_wise;
        break;
      }

      // optional int32 wise = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wise_)));
          set_has_wise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_adorkable;
        break;
      }

      // optional int32 adorkable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adorkable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adorkable_)));
          set_has_adorkable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_good;
        break;
      }

      // optional int32 good = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_scheming;
        break;
      }

      // optional int32 scheming = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scheming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scheming_)));
          set_has_scheming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bag_capacity;
        break;
      }

      // optional uint32 bag_capacity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_capacity_)));
          set_has_bag_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_task_activity;
        break;
      }

      // optional int32 task_activity = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_activity_)));
          set_has_task_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_offical_salary;
        break;
      }

      // optional bool offical_salary = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offical_salary_)));
          set_has_offical_salary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_first_offical_award;
        break;
      }

      // optional uint32 first_offical_award = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_offical_award:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_offical_award_)));
          set_has_first_offical_award();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_skill_point;
        break;
      }

      // optional int32 skill_point = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_wine;
        break;
      }

      // optional uint32 wine = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wine_)));
          set_has_wine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_wine_cup;
        break;
      }

      // optional uint32 wine_cup = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine_cup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wine_cup_)));
          set_has_wine_cup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_daily_fortune;
        break;
      }

      // optional int32 daily_fortune = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_fortune:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_fortune_)));
          set_has_daily_fortune();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_adv_energy;
        break;
      }

      // optional int32 adv_energy = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_energy_)));
          set_has_adv_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_adv_times;
        break;
      }

      // optional int32 adv_times = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_times_)));
          set_has_adv_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_talent_point;
        break;
      }

      // optional int32 talent_point = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_point_)));
          set_has_talent_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_change_name_time;
        break;
      }

      // optional int32 change_name_time = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_name_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_name_time_)));
          set_has_change_name_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }

  // repeated .SProtoSpace.soul_info soul_s = 4;
  for (int i = 0; i < this->soul_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->soul_s(i), output);
  }

  // repeated .SProtoSpace.item_info item_s = 5;
  for (int i = 0; i < this->item_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_s(i), output);
  }

  // optional int32 lv = 7;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lv(), output);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sex(), output);
  }

  // optional int32 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gold(), output);
  }

  // optional int32 jade = 11;
  if (has_jade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jade(), output);
  }

  // optional int32 power = 12;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->power(), output);
  }

  // optional int32 buy_power_times = 13;
  if (has_buy_power_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->buy_power_times(), output);
  }

  // optional int32 merit = 14;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->merit(), output);
  }

  // optional int32 grade = 15;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->grade(), output);
  }

  // optional int32 tender = 16;
  if (has_tender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->tender(), output);
  }

  // optional int32 treason = 17;
  if (has_treason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->treason(), output);
  }

  // optional int32 wise = 18;
  if (has_wise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->wise(), output);
  }

  // optional int32 adorkable = 19;
  if (has_adorkable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->adorkable(), output);
  }

  // optional int32 good = 20;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->good(), output);
  }

  // optional int32 scheming = 21;
  if (has_scheming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->scheming(), output);
  }

  // optional uint32 bag_capacity = 22;
  if (has_bag_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->bag_capacity(), output);
  }

  // optional int32 task_activity = 23;
  if (has_task_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->task_activity(), output);
  }

  // optional bool offical_salary = 24;
  if (has_offical_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->offical_salary(), output);
  }

  // optional uint32 first_offical_award = 25;
  if (has_first_offical_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->first_offical_award(), output);
  }

  // optional int32 skill_point = 26;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->skill_point(), output);
  }

  // optional uint32 wine = 27;
  if (has_wine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->wine(), output);
  }

  // optional uint32 wine_cup = 28;
  if (has_wine_cup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->wine_cup(), output);
  }

  // optional int32 daily_fortune = 29;
  if (has_daily_fortune()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->daily_fortune(), output);
  }

  // optional int32 adv_energy = 30;
  if (has_adv_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->adv_energy(), output);
  }

  // optional int32 adv_times = 31;
  if (has_adv_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->adv_times(), output);
  }

  // optional int32 talent_point = 32;
  if (has_talent_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->talent_point(), output);
  }

  // optional int32 change_name_time = 33;
  if (has_change_name_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->change_name_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string rolename = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }

  // repeated .SProtoSpace.soul_info soul_s = 4;
  for (int i = 0; i < this->soul_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->soul_s(i), target);
  }

  // repeated .SProtoSpace.item_info item_s = 5;
  for (int i = 0; i < this->item_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_s(i), target);
  }

  // optional int32 lv = 7;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lv(), target);
  }

  // optional int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // optional int32 sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sex(), target);
  }

  // optional int32 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gold(), target);
  }

  // optional int32 jade = 11;
  if (has_jade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jade(), target);
  }

  // optional int32 power = 12;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->power(), target);
  }

  // optional int32 buy_power_times = 13;
  if (has_buy_power_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->buy_power_times(), target);
  }

  // optional int32 merit = 14;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->merit(), target);
  }

  // optional int32 grade = 15;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->grade(), target);
  }

  // optional int32 tender = 16;
  if (has_tender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->tender(), target);
  }

  // optional int32 treason = 17;
  if (has_treason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->treason(), target);
  }

  // optional int32 wise = 18;
  if (has_wise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->wise(), target);
  }

  // optional int32 adorkable = 19;
  if (has_adorkable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->adorkable(), target);
  }

  // optional int32 good = 20;
  if (has_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->good(), target);
  }

  // optional int32 scheming = 21;
  if (has_scheming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->scheming(), target);
  }

  // optional uint32 bag_capacity = 22;
  if (has_bag_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->bag_capacity(), target);
  }

  // optional int32 task_activity = 23;
  if (has_task_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->task_activity(), target);
  }

  // optional bool offical_salary = 24;
  if (has_offical_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->offical_salary(), target);
  }

  // optional uint32 first_offical_award = 25;
  if (has_first_offical_award()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->first_offical_award(), target);
  }

  // optional int32 skill_point = 26;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->skill_point(), target);
  }

  // optional uint32 wine = 27;
  if (has_wine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->wine(), target);
  }

  // optional uint32 wine_cup = 28;
  if (has_wine_cup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->wine_cup(), target);
  }

  // optional int32 daily_fortune = 29;
  if (has_daily_fortune()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->daily_fortune(), target);
  }

  // optional int32 adv_energy = 30;
  if (has_adv_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->adv_energy(), target);
  }

  // optional int32 adv_times = 31;
  if (has_adv_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->adv_times(), target);
  }

  // optional int32 talent_point = 32;
  if (has_talent_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->talent_point(), target);
  }

  // optional int32 change_name_time = 33;
  if (has_change_name_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->change_name_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string rolename = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 lv = 7;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 sex = 9;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 jade = 11;
    if (has_jade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jade());
    }

    // optional int32 power = 12;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 buy_power_times = 13;
    if (has_buy_power_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_power_times());
    }

    // optional int32 merit = 14;
    if (has_merit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

    // optional int32 grade = 15;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 tender = 16;
    if (has_tender()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tender());
    }

    // optional int32 treason = 17;
    if (has_treason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treason());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 wise = 18;
    if (has_wise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wise());
    }

    // optional int32 adorkable = 19;
    if (has_adorkable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adorkable());
    }

    // optional int32 good = 20;
    if (has_good()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good());
    }

    // optional int32 scheming = 21;
    if (has_scheming()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scheming());
    }

    // optional uint32 bag_capacity = 22;
    if (has_bag_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bag_capacity());
    }

    // optional int32 task_activity = 23;
    if (has_task_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_activity());
    }

    // optional bool offical_salary = 24;
    if (has_offical_salary()) {
      total_size += 2 + 1;
    }

    // optional uint32 first_offical_award = 25;
    if (has_first_offical_award()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_offical_award());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 skill_point = 26;
    if (has_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point());
    }

    // optional uint32 wine = 27;
    if (has_wine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wine());
    }

    // optional uint32 wine_cup = 28;
    if (has_wine_cup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wine_cup());
    }

    // optional int32 daily_fortune = 29;
    if (has_daily_fortune()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_fortune());
    }

    // optional int32 adv_energy = 30;
    if (has_adv_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_energy());
    }

    // optional int32 adv_times = 31;
    if (has_adv_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_times());
    }

    // optional int32 talent_point = 32;
    if (has_talent_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_point());
    }

    // optional int32 change_name_time = 33;
    if (has_change_name_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_name_time());
    }

  }
  // repeated .SProtoSpace.soul_info soul_s = 4;
  total_size += 1 * this->soul_s_size();
  for (int i = 0; i < this->soul_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soul_s(i));
  }

  // repeated .SProtoSpace.item_info item_s = 5;
  total_size += 1 * this->item_s_size();
  for (int i = 0; i < this->item_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_info_ntf::MergeFrom(const role_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  soul_s_.MergeFrom(from.soul_s_);
  item_s_.MergeFrom(from.item_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_jade()) {
      set_jade(from.jade());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_buy_power_times()) {
      set_buy_power_times(from.buy_power_times());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_tender()) {
      set_tender(from.tender());
    }
    if (from.has_treason()) {
      set_treason(from.treason());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wise()) {
      set_wise(from.wise());
    }
    if (from.has_adorkable()) {
      set_adorkable(from.adorkable());
    }
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_scheming()) {
      set_scheming(from.scheming());
    }
    if (from.has_bag_capacity()) {
      set_bag_capacity(from.bag_capacity());
    }
    if (from.has_task_activity()) {
      set_task_activity(from.task_activity());
    }
    if (from.has_offical_salary()) {
      set_offical_salary(from.offical_salary());
    }
    if (from.has_first_offical_award()) {
      set_first_offical_award(from.first_offical_award());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_wine()) {
      set_wine(from.wine());
    }
    if (from.has_wine_cup()) {
      set_wine_cup(from.wine_cup());
    }
    if (from.has_daily_fortune()) {
      set_daily_fortune(from.daily_fortune());
    }
    if (from.has_adv_energy()) {
      set_adv_energy(from.adv_energy());
    }
    if (from.has_adv_times()) {
      set_adv_times(from.adv_times());
    }
    if (from.has_talent_point()) {
      set_talent_point(from.talent_point());
    }
    if (from.has_change_name_time()) {
      set_change_name_time(from.change_name_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_info_ntf::CopyFrom(const role_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_info_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void role_info_ntf::Swap(role_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(rolename_, other->rolename_);
    soul_s_.Swap(&other->soul_s_);
    item_s_.Swap(&other->item_s_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(sex_, other->sex_);
    std::swap(gold_, other->gold_);
    std::swap(jade_, other->jade_);
    std::swap(power_, other->power_);
    std::swap(buy_power_times_, other->buy_power_times_);
    std::swap(merit_, other->merit_);
    std::swap(grade_, other->grade_);
    std::swap(tender_, other->tender_);
    std::swap(treason_, other->treason_);
    std::swap(wise_, other->wise_);
    std::swap(adorkable_, other->adorkable_);
    std::swap(good_, other->good_);
    std::swap(scheming_, other->scheming_);
    std::swap(bag_capacity_, other->bag_capacity_);
    std::swap(task_activity_, other->task_activity_);
    std::swap(offical_salary_, other->offical_salary_);
    std::swap(first_offical_award_, other->first_offical_award_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(wine_, other->wine_);
    std::swap(wine_cup_, other->wine_cup_);
    std::swap(daily_fortune_, other->daily_fortune_);
    std::swap(adv_energy_, other->adv_energy_);
    std::swap(adv_times_, other->adv_times_);
    std::swap(talent_point_, other->talent_point_);
    std::swap(change_name_time_, other->change_name_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_info_ntf_descriptor_;
  metadata.reflection = role_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_info::kItemIdFieldNumber;
const int item_info::kItemCountFieldNumber;
#endif  // !_MSC_VER

item_info::item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_info::InitAsDefaultInstance() {
}

item_info::item_info(const item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_info::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_info::~item_info() {
  SharedDtor();
}

void item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_info_descriptor_;
}

const item_info& item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_info* item_info::default_instance_ = NULL;

item_info* item_info::New() const {
  return new item_info;
}

void item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_info::MergeFrom(const item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_info::CopyFrom(const item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_info::IsInitialized() const {

  return true;
}

void item_info::Swap(item_info* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_info_descriptor_;
  metadata.reflection = item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_role_info_ntf::kProtoidFieldNumber;
const int update_role_info_ntf::kRolenameFieldNumber;
const int update_role_info_ntf::kItemSFieldNumber;
const int update_role_info_ntf::kLvFieldNumber;
const int update_role_info_ntf::kExpFieldNumber;
const int update_role_info_ntf::kGoldFieldNumber;
const int update_role_info_ntf::kJadeFieldNumber;
const int update_role_info_ntf::kPowerFieldNumber;
const int update_role_info_ntf::kPlotIdsFieldNumber;
const int update_role_info_ntf::kBuyPowerTimesFieldNumber;
const int update_role_info_ntf::kMeritFieldNumber;
const int update_role_info_ntf::kGradeFieldNumber;
const int update_role_info_ntf::kTenderFieldNumber;
const int update_role_info_ntf::kTreasonFieldNumber;
const int update_role_info_ntf::kWiseFieldNumber;
const int update_role_info_ntf::kAdorkableFieldNumber;
const int update_role_info_ntf::kGoodFieldNumber;
const int update_role_info_ntf::kSchemingFieldNumber;
const int update_role_info_ntf::kBagCapacityFieldNumber;
const int update_role_info_ntf::kTaskActivityFieldNumber;
const int update_role_info_ntf::kOfficalSalaryFieldNumber;
const int update_role_info_ntf::kSkillPointFieldNumber;
const int update_role_info_ntf::kTalentPointFieldNumber;
#endif  // !_MSC_VER

update_role_info_ntf::update_role_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_role_info_ntf::InitAsDefaultInstance() {
}

update_role_info_ntf::update_role_info_ntf(const update_role_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_role_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5100;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  exp_ = 0;
  gold_ = 0;
  jade_ = 0;
  power_ = 0;
  buy_power_times_ = 0;
  merit_ = 0;
  grade_ = 0;
  tender_ = 0;
  treason_ = 0;
  wise_ = 0;
  adorkable_ = 0;
  good_ = 0;
  scheming_ = 0;
  bag_capacity_ = 0u;
  task_activity_ = 0;
  offical_salary_ = false;
  skill_point_ = 0;
  talent_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_role_info_ntf::~update_role_info_ntf() {
  SharedDtor();
}

void update_role_info_ntf::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void update_role_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_role_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_role_info_ntf_descriptor_;
}

const update_role_info_ntf& update_role_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

update_role_info_ntf* update_role_info_ntf::default_instance_ = NULL;

update_role_info_ntf* update_role_info_ntf::New() const {
  return new update_role_info_ntf;
}

void update_role_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5100;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    lv_ = 0;
    exp_ = 0;
    gold_ = 0;
    jade_ = 0;
    power_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    buy_power_times_ = 0;
    merit_ = 0;
    grade_ = 0;
    tender_ = 0;
    treason_ = 0;
    wise_ = 0;
    adorkable_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    good_ = 0;
    scheming_ = 0;
    bag_capacity_ = 0u;
    task_activity_ = 0;
    offical_salary_ = false;
    skill_point_ = 0;
    talent_point_ = 0;
  }
  item_s_.Clear();
  plot_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_role_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_role_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rolename;
        break;
      }

      // optional string rolename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_s;
        break;
      }

      // repeated .SProtoSpace.item_info item_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_s;
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional int32 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jade;
        break;
      }

      // optional int32 jade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jade_)));
          set_has_jade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_power;
        break;
      }

      // optional int32 power = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_plot_ids;
        break;
      }

      // repeated int32 plot_ids = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plot_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_plot_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_plot_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_plot_ids;
        if (input->ExpectTag(80)) goto parse_buy_power_times;
        break;
      }

      // optional int32 buy_power_times = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_power_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_power_times_)));
          set_has_buy_power_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_merit;
        break;
      }

      // optional int32 merit = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_grade;
        break;
      }

      // optional int32 grade = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tender;
        break;
      }

      // optional int32 tender = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tender_)));
          set_has_tender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_treason;
        break;
      }

      // optional int32 treason = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treason_)));
          set_has_treason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_wise;
        break;
      }

      // optional int32 wise = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wise_)));
          set_has_wise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_adorkable;
        break;
      }

      // optional int32 adorkable = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adorkable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adorkable_)));
          set_has_adorkable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_good;
        break;
      }

      // optional int32 good = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_good:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &good_)));
          set_has_good();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_scheming;
        break;
      }

      // optional int32 scheming = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scheming:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scheming_)));
          set_has_scheming();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_bag_capacity;
        break;
      }

      // optional uint32 bag_capacity = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bag_capacity_)));
          set_has_bag_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_task_activity;
        break;
      }

      // optional int32 task_activity = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_activity_)));
          set_has_task_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_offical_salary;
        break;
      }

      // optional bool offical_salary = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offical_salary_)));
          set_has_offical_salary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_skill_point;
        break;
      }

      // optional int32 skill_point = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_talent_point;
        break;
      }

      // optional int32 talent_point = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_point_)));
          set_has_talent_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_role_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_role_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }

  // repeated .SProtoSpace.item_info item_s = 3;
  for (int i = 0; i < this->item_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_s(i), output);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  // optional int32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // optional int32 jade = 7;
  if (has_jade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->jade(), output);
  }

  // optional int32 power = 8;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->power(), output);
  }

  // repeated int32 plot_ids = 9;
  for (int i = 0; i < this->plot_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->plot_ids(i), output);
  }

  // optional int32 buy_power_times = 10;
  if (has_buy_power_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buy_power_times(), output);
  }

  // optional int32 merit = 11;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->merit(), output);
  }

  // optional int32 grade = 12;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->grade(), output);
  }

  // optional int32 tender = 13;
  if (has_tender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tender(), output);
  }

  // optional int32 treason = 14;
  if (has_treason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->treason(), output);
  }

  // optional int32 wise = 15;
  if (has_wise()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->wise(), output);
  }

  // optional int32 adorkable = 16;
  if (has_adorkable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->adorkable(), output);
  }

  // optional int32 good = 17;
  if (has_good()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->good(), output);
  }

  // optional int32 scheming = 18;
  if (has_scheming()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->scheming(), output);
  }

  // optional uint32 bag_capacity = 19;
  if (has_bag_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->bag_capacity(), output);
  }

  // optional int32 task_activity = 20;
  if (has_task_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->task_activity(), output);
  }

  // optional bool offical_salary = 21;
  if (has_offical_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->offical_salary(), output);
  }

  // optional int32 skill_point = 22;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->skill_point(), output);
  }

  // optional int32 talent_point = 23;
  if (has_talent_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->talent_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_role_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_role_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string rolename = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }

  // repeated .SProtoSpace.item_info item_s = 3;
  for (int i = 0; i < this->item_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item_s(i), target);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  // optional int32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // optional int32 jade = 7;
  if (has_jade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->jade(), target);
  }

  // optional int32 power = 8;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->power(), target);
  }

  // repeated int32 plot_ids = 9;
  for (int i = 0; i < this->plot_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->plot_ids(i), target);
  }

  // optional int32 buy_power_times = 10;
  if (has_buy_power_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buy_power_times(), target);
  }

  // optional int32 merit = 11;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->merit(), target);
  }

  // optional int32 grade = 12;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->grade(), target);
  }

  // optional int32 tender = 13;
  if (has_tender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tender(), target);
  }

  // optional int32 treason = 14;
  if (has_treason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->treason(), target);
  }

  // optional int32 wise = 15;
  if (has_wise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->wise(), target);
  }

  // optional int32 adorkable = 16;
  if (has_adorkable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->adorkable(), target);
  }

  // optional int32 good = 17;
  if (has_good()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->good(), target);
  }

  // optional int32 scheming = 18;
  if (has_scheming()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->scheming(), target);
  }

  // optional uint32 bag_capacity = 19;
  if (has_bag_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->bag_capacity(), target);
  }

  // optional int32 task_activity = 20;
  if (has_task_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->task_activity(), target);
  }

  // optional bool offical_salary = 21;
  if (has_offical_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->offical_salary(), target);
  }

  // optional int32 skill_point = 22;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->skill_point(), target);
  }

  // optional int32 talent_point = 23;
  if (has_talent_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->talent_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_role_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_role_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string rolename = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 jade = 7;
    if (has_jade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jade());
    }

    // optional int32 power = 8;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 buy_power_times = 10;
    if (has_buy_power_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_power_times());
    }

    // optional int32 merit = 11;
    if (has_merit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

    // optional int32 grade = 12;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 tender = 13;
    if (has_tender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tender());
    }

    // optional int32 treason = 14;
    if (has_treason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treason());
    }

    // optional int32 wise = 15;
    if (has_wise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wise());
    }

    // optional int32 adorkable = 16;
    if (has_adorkable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adorkable());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 good = 17;
    if (has_good()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->good());
    }

    // optional int32 scheming = 18;
    if (has_scheming()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scheming());
    }

    // optional uint32 bag_capacity = 19;
    if (has_bag_capacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bag_capacity());
    }

    // optional int32 task_activity = 20;
    if (has_task_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_activity());
    }

    // optional bool offical_salary = 21;
    if (has_offical_salary()) {
      total_size += 2 + 1;
    }

    // optional int32 skill_point = 22;
    if (has_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point());
    }

    // optional int32 talent_point = 23;
    if (has_talent_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_point());
    }

  }
  // repeated .SProtoSpace.item_info item_s = 3;
  total_size += 1 * this->item_s_size();
  for (int i = 0; i < this->item_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_s(i));
  }

  // repeated int32 plot_ids = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->plot_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->plot_ids(i));
    }
    total_size += 1 * this->plot_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_role_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_role_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_role_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_role_info_ntf::MergeFrom(const update_role_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_s_.MergeFrom(from.item_s_);
  plot_ids_.MergeFrom(from.plot_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_jade()) {
      set_jade(from.jade());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_buy_power_times()) {
      set_buy_power_times(from.buy_power_times());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_tender()) {
      set_tender(from.tender());
    }
    if (from.has_treason()) {
      set_treason(from.treason());
    }
    if (from.has_wise()) {
      set_wise(from.wise());
    }
    if (from.has_adorkable()) {
      set_adorkable(from.adorkable());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_good()) {
      set_good(from.good());
    }
    if (from.has_scheming()) {
      set_scheming(from.scheming());
    }
    if (from.has_bag_capacity()) {
      set_bag_capacity(from.bag_capacity());
    }
    if (from.has_task_activity()) {
      set_task_activity(from.task_activity());
    }
    if (from.has_offical_salary()) {
      set_offical_salary(from.offical_salary());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_talent_point()) {
      set_talent_point(from.talent_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_role_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_role_info_ntf::CopyFrom(const update_role_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_role_info_ntf::IsInitialized() const {

  return true;
}

void update_role_info_ntf::Swap(update_role_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rolename_, other->rolename_);
    item_s_.Swap(&other->item_s_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(jade_, other->jade_);
    std::swap(power_, other->power_);
    plot_ids_.Swap(&other->plot_ids_);
    std::swap(buy_power_times_, other->buy_power_times_);
    std::swap(merit_, other->merit_);
    std::swap(grade_, other->grade_);
    std::swap(tender_, other->tender_);
    std::swap(treason_, other->treason_);
    std::swap(wise_, other->wise_);
    std::swap(adorkable_, other->adorkable_);
    std::swap(good_, other->good_);
    std::swap(scheming_, other->scheming_);
    std::swap(bag_capacity_, other->bag_capacity_);
    std::swap(task_activity_, other->task_activity_);
    std::swap(offical_salary_, other->offical_salary_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(talent_point_, other->talent_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_role_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_role_info_ntf_descriptor_;
  metadata.reflection = update_role_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_common_base_ntf::kProtoidFieldNumber;
const int role_common_base_ntf::kLvFieldNumber;
const int role_common_base_ntf::kExpFieldNumber;
const int role_common_base_ntf::kGoldFieldNumber;
const int role_common_base_ntf::kJadeFieldNumber;
const int role_common_base_ntf::kPowerFieldNumber;
const int role_common_base_ntf::kMeritFieldNumber;
const int role_common_base_ntf::kTaskActivityFieldNumber;
const int role_common_base_ntf::kSkillPointFieldNumber;
const int role_common_base_ntf::kWineFieldNumber;
const int role_common_base_ntf::kWineCupFieldNumber;
const int role_common_base_ntf::kAdvEnergyFieldNumber;
const int role_common_base_ntf::kAdvTimesFieldNumber;
const int role_common_base_ntf::kTalentPointFieldNumber;
#endif  // !_MSC_VER

role_common_base_ntf::role_common_base_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_common_base_ntf::InitAsDefaultInstance() {
}

role_common_base_ntf::role_common_base_ntf(const role_common_base_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_common_base_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5103;
  lv_ = 0;
  exp_ = 0;
  gold_ = 0;
  jade_ = 0;
  power_ = 0;
  merit_ = 0;
  task_activity_ = 0;
  skill_point_ = 0;
  wine_ = 0u;
  wine_cup_ = 0u;
  adv_energy_ = 0;
  adv_times_ = 0;
  talent_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_common_base_ntf::~role_common_base_ntf() {
  SharedDtor();
}

void role_common_base_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_common_base_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_common_base_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_common_base_ntf_descriptor_;
}

const role_common_base_ntf& role_common_base_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_common_base_ntf* role_common_base_ntf::default_instance_ = NULL;

role_common_base_ntf* role_common_base_ntf::New() const {
  return new role_common_base_ntf;
}

void role_common_base_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5103;
    lv_ = 0;
    exp_ = 0;
    gold_ = 0;
    jade_ = 0;
    power_ = 0;
    merit_ = 0;
    task_activity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    skill_point_ = 0;
    wine_ = 0u;
    wine_cup_ = 0u;
    adv_energy_ = 0;
    adv_times_ = 0;
    talent_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_common_base_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_common_base_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gold;
        break;
      }

      // optional int32 gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jade;
        break;
      }

      // optional int32 jade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jade_)));
          set_has_jade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_power;
        break;
      }

      // optional int32 power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_merit;
        break;
      }

      // optional int32 merit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_task_activity;
        break;
      }

      // optional int32 task_activity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_activity_)));
          set_has_task_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_skill_point;
        break;
      }

      // optional int32 skill_point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_wine;
        break;
      }

      // optional uint32 wine = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wine_)));
          set_has_wine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wine_cup;
        break;
      }

      // optional uint32 wine_cup = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine_cup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wine_cup_)));
          set_has_wine_cup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_adv_energy;
        break;
      }

      // optional int32 adv_energy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_energy_)));
          set_has_adv_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_adv_times;
        break;
      }

      // optional int32 adv_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adv_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adv_times_)));
          set_has_adv_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_talent_point;
        break;
      }

      // optional int32 talent_point = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_point_)));
          set_has_talent_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_common_base_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_common_base_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold(), output);
  }

  // optional int32 jade = 5;
  if (has_jade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->jade(), output);
  }

  // optional int32 power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->power(), output);
  }

  // optional int32 merit = 7;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->merit(), output);
  }

  // optional int32 task_activity = 8;
  if (has_task_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->task_activity(), output);
  }

  // optional int32 skill_point = 9;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->skill_point(), output);
  }

  // optional uint32 wine = 10;
  if (has_wine()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wine(), output);
  }

  // optional uint32 wine_cup = 11;
  if (has_wine_cup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wine_cup(), output);
  }

  // optional int32 adv_energy = 12;
  if (has_adv_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->adv_energy(), output);
  }

  // optional int32 adv_times = 13;
  if (has_adv_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->adv_times(), output);
  }

  // optional int32 talent_point = 14;
  if (has_talent_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->talent_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_common_base_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_common_base_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 gold = 4;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold(), target);
  }

  // optional int32 jade = 5;
  if (has_jade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->jade(), target);
  }

  // optional int32 power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->power(), target);
  }

  // optional int32 merit = 7;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->merit(), target);
  }

  // optional int32 task_activity = 8;
  if (has_task_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->task_activity(), target);
  }

  // optional int32 skill_point = 9;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->skill_point(), target);
  }

  // optional uint32 wine = 10;
  if (has_wine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wine(), target);
  }

  // optional uint32 wine_cup = 11;
  if (has_wine_cup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wine_cup(), target);
  }

  // optional int32 adv_energy = 12;
  if (has_adv_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->adv_energy(), target);
  }

  // optional int32 adv_times = 13;
  if (has_adv_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->adv_times(), target);
  }

  // optional int32 talent_point = 14;
  if (has_talent_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->talent_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_common_base_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_common_base_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 jade = 5;
    if (has_jade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jade());
    }

    // optional int32 power = 6;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 merit = 7;
    if (has_merit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

    // optional int32 task_activity = 8;
    if (has_task_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_activity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 skill_point = 9;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point());
    }

    // optional uint32 wine = 10;
    if (has_wine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wine());
    }

    // optional uint32 wine_cup = 11;
    if (has_wine_cup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wine_cup());
    }

    // optional int32 adv_energy = 12;
    if (has_adv_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_energy());
    }

    // optional int32 adv_times = 13;
    if (has_adv_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adv_times());
    }

    // optional int32 talent_point = 14;
    if (has_talent_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_common_base_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_common_base_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_common_base_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_common_base_ntf::MergeFrom(const role_common_base_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_jade()) {
      set_jade(from.jade());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
    if (from.has_task_activity()) {
      set_task_activity(from.task_activity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
    if (from.has_wine()) {
      set_wine(from.wine());
    }
    if (from.has_wine_cup()) {
      set_wine_cup(from.wine_cup());
    }
    if (from.has_adv_energy()) {
      set_adv_energy(from.adv_energy());
    }
    if (from.has_adv_times()) {
      set_adv_times(from.adv_times());
    }
    if (from.has_talent_point()) {
      set_talent_point(from.talent_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_common_base_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_common_base_ntf::CopyFrom(const role_common_base_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_common_base_ntf::IsInitialized() const {

  return true;
}

void role_common_base_ntf::Swap(role_common_base_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(jade_, other->jade_);
    std::swap(power_, other->power_);
    std::swap(merit_, other->merit_);
    std::swap(task_activity_, other->task_activity_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(wine_, other->wine_);
    std::swap(wine_cup_, other->wine_cup_);
    std::swap(adv_energy_, other->adv_energy_);
    std::swap(adv_times_, other->adv_times_);
    std::swap(talent_point_, other->talent_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_common_base_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_common_base_ntf_descriptor_;
  metadata.reflection = role_common_base_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_update_ntf::kProtoidFieldNumber;
const int soul_update_ntf::kAddSoulSFieldNumber;
const int soul_update_ntf::kDelSoulSFieldNumber;
const int soul_update_ntf::kFixSoulSFieldNumber;
#endif  // !_MSC_VER

soul_update_ntf::soul_update_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_update_ntf::InitAsDefaultInstance() {
}

soul_update_ntf::soul_update_ntf(const soul_update_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_update_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5306;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_update_ntf::~soul_update_ntf() {
  SharedDtor();
}

void soul_update_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_update_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_update_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_update_ntf_descriptor_;
}

const soul_update_ntf& soul_update_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_update_ntf* soul_update_ntf::default_instance_ = NULL;

soul_update_ntf* soul_update_ntf::New() const {
  return new soul_update_ntf;
}

void soul_update_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5306;
  }
  add_soul_s_.Clear();
  del_soul_s_.Clear();
  fix_soul_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_update_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_update_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add_soul_s;
        break;
      }

      // repeated .SProtoSpace.soul_info add_soul_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_soul_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_soul_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_add_soul_s;
        if (input->ExpectTag(26)) goto parse_del_soul_s;
        break;
      }

      // repeated .SProtoSpace.soul_info del_soul_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del_soul_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_del_soul_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del_soul_s;
        if (input->ExpectTag(34)) goto parse_fix_soul_s;
        break;
      }

      // repeated .SProtoSpace.soul_info fix_soul_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_soul_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_soul_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fix_soul_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_update_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_update_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.soul_info add_soul_s = 2;
  for (int i = 0; i < this->add_soul_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->add_soul_s(i), output);
  }

  // repeated .SProtoSpace.soul_info del_soul_s = 3;
  for (int i = 0; i < this->del_soul_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del_soul_s(i), output);
  }

  // repeated .SProtoSpace.soul_info fix_soul_s = 4;
  for (int i = 0; i < this->fix_soul_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fix_soul_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_update_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_update_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.soul_info add_soul_s = 2;
  for (int i = 0; i < this->add_soul_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->add_soul_s(i), target);
  }

  // repeated .SProtoSpace.soul_info del_soul_s = 3;
  for (int i = 0; i < this->del_soul_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del_soul_s(i), target);
  }

  // repeated .SProtoSpace.soul_info fix_soul_s = 4;
  for (int i = 0; i < this->fix_soul_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fix_soul_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_update_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_update_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.soul_info add_soul_s = 2;
  total_size += 1 * this->add_soul_s_size();
  for (int i = 0; i < this->add_soul_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_soul_s(i));
  }

  // repeated .SProtoSpace.soul_info del_soul_s = 3;
  total_size += 1 * this->del_soul_s_size();
  for (int i = 0; i < this->del_soul_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->del_soul_s(i));
  }

  // repeated .SProtoSpace.soul_info fix_soul_s = 4;
  total_size += 1 * this->fix_soul_s_size();
  for (int i = 0; i < this->fix_soul_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_soul_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_update_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_update_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_update_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_update_ntf::MergeFrom(const soul_update_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_soul_s_.MergeFrom(from.add_soul_s_);
  del_soul_s_.MergeFrom(from.del_soul_s_);
  fix_soul_s_.MergeFrom(from.fix_soul_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_update_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_update_ntf::CopyFrom(const soul_update_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_update_ntf::IsInitialized() const {

  return true;
}

void soul_update_ntf::Swap(soul_update_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    add_soul_s_.Swap(&other->add_soul_s_);
    del_soul_s_.Swap(&other->del_soul_s_);
    fix_soul_s_.Swap(&other->fix_soul_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_update_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_update_ntf_descriptor_;
  metadata.reflection = soul_update_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_raise_req::kProtoidFieldNumber;
const int soul_raise_req::kIdFieldNumber;
const int soul_raise_req::kConsumeIdFieldNumber;
#endif  // !_MSC_VER

soul_raise_req::soul_raise_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_raise_req::InitAsDefaultInstance() {
}

soul_raise_req::soul_raise_req(const soul_raise_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_raise_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5300;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_raise_req::~soul_raise_req() {
  SharedDtor();
}

void soul_raise_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_raise_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_raise_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_raise_req_descriptor_;
}

const soul_raise_req& soul_raise_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_raise_req* soul_raise_req::default_instance_ = NULL;

soul_raise_req* soul_raise_req::New() const {
  return new soul_raise_req;
}

void soul_raise_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5300;
    id_ = GOOGLE_ULONGLONG(0);
  }
  consume_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_raise_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_id;
        break;
      }

      // repeated uint64 consume_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_consume_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_consume_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_consume_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_raise_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // repeated uint64 consume_id = 3;
  for (int i = 0; i < this->consume_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->consume_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_raise_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // repeated uint64 consume_id = 3;
  for (int i = 0; i < this->consume_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->consume_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_raise_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated uint64 consume_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->consume_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->consume_id(i));
    }
    total_size += 1 * this->consume_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_raise_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_raise_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_raise_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_raise_req::MergeFrom(const soul_raise_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  consume_id_.MergeFrom(from.consume_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_raise_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_raise_req::CopyFrom(const soul_raise_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_raise_req::IsInitialized() const {

  return true;
}

void soul_raise_req::Swap(soul_raise_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    consume_id_.Swap(&other->consume_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_raise_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_raise_req_descriptor_;
  metadata.reflection = soul_raise_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_raise_ack::kProtoidFieldNumber;
const int soul_raise_ack::kIdFieldNumber;
const int soul_raise_ack::kRetFieldNumber;
#endif  // !_MSC_VER

soul_raise_ack::soul_raise_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_raise_ack::InitAsDefaultInstance() {
}

soul_raise_ack::soul_raise_ack(const soul_raise_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_raise_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5301;
  id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_raise_ack::~soul_raise_ack() {
  SharedDtor();
}

void soul_raise_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_raise_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_raise_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_raise_ack_descriptor_;
}

const soul_raise_ack& soul_raise_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_raise_ack* soul_raise_ack::default_instance_ = NULL;

soul_raise_ack* soul_raise_ack::New() const {
  return new soul_raise_ack;
}

void soul_raise_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5301;
    id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_raise_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_raise_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_raise_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_raise_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 ret = 3 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_raise_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_raise_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_raise_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_raise_ack::MergeFrom(const soul_raise_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_raise_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_raise_ack::CopyFrom(const soul_raise_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_raise_ack::IsInitialized() const {

  return true;
}

void soul_raise_ack::Swap(soul_raise_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_raise_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_raise_ack_descriptor_;
  metadata.reflection = soul_raise_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_bind_req::kProtoidFieldNumber;
const int soul_bind_req::kIdFieldNumber;
const int soul_bind_req::kHeroUidFieldNumber;
#endif  // !_MSC_VER

soul_bind_req::soul_bind_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_bind_req::InitAsDefaultInstance() {
}

soul_bind_req::soul_bind_req(const soul_bind_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_bind_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5302;
  id_ = GOOGLE_ULONGLONG(0);
  hero_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_bind_req::~soul_bind_req() {
  SharedDtor();
}

void soul_bind_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_bind_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_bind_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_bind_req_descriptor_;
}

const soul_bind_req& soul_bind_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_bind_req* soul_bind_req::default_instance_ = NULL;

soul_bind_req* soul_bind_req::New() const {
  return new soul_bind_req;
}

void soul_bind_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5302;
    id_ = GOOGLE_ULONGLONG(0);
    hero_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_bind_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uid;
        break;
      }

      // optional uint64 hero_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uid_)));
          set_has_hero_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_bind_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 hero_uid = 3;
  if (has_hero_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_bind_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 hero_uid = 3;
  if (has_hero_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_bind_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 hero_uid = 3;
    if (has_hero_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_bind_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_bind_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_bind_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_bind_req::MergeFrom(const soul_bind_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_uid()) {
      set_hero_uid(from.hero_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_bind_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_bind_req::CopyFrom(const soul_bind_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_bind_req::IsInitialized() const {

  return true;
}

void soul_bind_req::Swap(soul_bind_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(hero_uid_, other->hero_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_bind_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_bind_req_descriptor_;
  metadata.reflection = soul_bind_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_bind_ack::kProtoidFieldNumber;
const int soul_bind_ack::kIdFieldNumber;
const int soul_bind_ack::kHeroUidFieldNumber;
const int soul_bind_ack::kRetFieldNumber;
#endif  // !_MSC_VER

soul_bind_ack::soul_bind_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_bind_ack::InitAsDefaultInstance() {
}

soul_bind_ack::soul_bind_ack(const soul_bind_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_bind_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5303;
  id_ = GOOGLE_ULONGLONG(0);
  hero_uid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_bind_ack::~soul_bind_ack() {
  SharedDtor();
}

void soul_bind_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_bind_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_bind_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_bind_ack_descriptor_;
}

const soul_bind_ack& soul_bind_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_bind_ack* soul_bind_ack::default_instance_ = NULL;

soul_bind_ack* soul_bind_ack::New() const {
  return new soul_bind_ack;
}

void soul_bind_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5303;
    id_ = GOOGLE_ULONGLONG(0);
    hero_uid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_bind_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uid;
        break;
      }

      // optional uint64 hero_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uid_)));
          set_has_hero_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_bind_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 hero_uid = 3;
  if (has_hero_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uid(), output);
  }

  // optional int32 ret = 4 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_bind_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 hero_uid = 3;
  if (has_hero_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uid(), target);
  }

  // optional int32 ret = 4 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_bind_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 hero_uid = 3;
    if (has_hero_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uid());
    }

    // optional int32 ret = 4 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_bind_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_bind_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_bind_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_bind_ack::MergeFrom(const soul_bind_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_uid()) {
      set_hero_uid(from.hero_uid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_bind_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_bind_ack::CopyFrom(const soul_bind_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_bind_ack::IsInitialized() const {

  return true;
}

void soul_bind_ack::Swap(soul_bind_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(hero_uid_, other->hero_uid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_bind_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_bind_ack_descriptor_;
  metadata.reflection = soul_bind_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_unbind_req::kProtoidFieldNumber;
const int soul_unbind_req::kIdFieldNumber;
const int soul_unbind_req::kHeroUidFieldNumber;
#endif  // !_MSC_VER

soul_unbind_req::soul_unbind_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_unbind_req::InitAsDefaultInstance() {
}

soul_unbind_req::soul_unbind_req(const soul_unbind_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_unbind_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5304;
  id_ = GOOGLE_ULONGLONG(0);
  hero_uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_unbind_req::~soul_unbind_req() {
  SharedDtor();
}

void soul_unbind_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_unbind_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_unbind_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_unbind_req_descriptor_;
}

const soul_unbind_req& soul_unbind_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_unbind_req* soul_unbind_req::default_instance_ = NULL;

soul_unbind_req* soul_unbind_req::New() const {
  return new soul_unbind_req;
}

void soul_unbind_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5304;
    id_ = GOOGLE_ULONGLONG(0);
    hero_uid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_unbind_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uid;
        break;
      }

      // optional uint64 hero_uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uid_)));
          set_has_hero_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_unbind_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 hero_uid = 3;
  if (has_hero_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_unbind_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 hero_uid = 3;
  if (has_hero_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_unbind_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 hero_uid = 3;
    if (has_hero_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_unbind_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_unbind_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_unbind_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_unbind_req::MergeFrom(const soul_unbind_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hero_uid()) {
      set_hero_uid(from.hero_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_unbind_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_unbind_req::CopyFrom(const soul_unbind_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_unbind_req::IsInitialized() const {

  return true;
}

void soul_unbind_req::Swap(soul_unbind_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(hero_uid_, other->hero_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_unbind_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_unbind_req_descriptor_;
  metadata.reflection = soul_unbind_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_unbind_ack::kProtoidFieldNumber;
const int soul_unbind_ack::kIdFieldNumber;
const int soul_unbind_ack::kRetFieldNumber;
#endif  // !_MSC_VER

soul_unbind_ack::soul_unbind_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_unbind_ack::InitAsDefaultInstance() {
}

soul_unbind_ack::soul_unbind_ack(const soul_unbind_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_unbind_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5305;
  id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_unbind_ack::~soul_unbind_ack() {
  SharedDtor();
}

void soul_unbind_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_unbind_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_unbind_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_unbind_ack_descriptor_;
}

const soul_unbind_ack& soul_unbind_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_unbind_ack* soul_unbind_ack::default_instance_ = NULL;

soul_unbind_ack* soul_unbind_ack::New() const {
  return new soul_unbind_ack;
}

void soul_unbind_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5305;
    id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_unbind_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_unbind_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_unbind_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_unbind_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 ret = 3 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_unbind_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_unbind_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_unbind_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_unbind_ack::MergeFrom(const soul_unbind_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_unbind_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_unbind_ack::CopyFrom(const soul_unbind_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_unbind_ack::IsInitialized() const {

  return true;
}

void soul_unbind_ack::Swap(soul_unbind_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_unbind_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_unbind_ack_descriptor_;
  metadata.reflection = soul_unbind_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_lock_req::kProtoidFieldNumber;
const int soul_lock_req::kIdFieldNumber;
#endif  // !_MSC_VER

soul_lock_req::soul_lock_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_lock_req::InitAsDefaultInstance() {
}

soul_lock_req::soul_lock_req(const soul_lock_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_lock_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5307;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_lock_req::~soul_lock_req() {
  SharedDtor();
}

void soul_lock_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_lock_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_lock_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_lock_req_descriptor_;
}

const soul_lock_req& soul_lock_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_lock_req* soul_lock_req::default_instance_ = NULL;

soul_lock_req* soul_lock_req::New() const {
  return new soul_lock_req;
}

void soul_lock_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5307;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_lock_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_lock_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_lock_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_lock_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_lock_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_lock_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_lock_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_lock_req::MergeFrom(const soul_lock_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_lock_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_lock_req::CopyFrom(const soul_lock_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_lock_req::IsInitialized() const {

  return true;
}

void soul_lock_req::Swap(soul_lock_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_lock_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_lock_req_descriptor_;
  metadata.reflection = soul_lock_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_lock_ack::kProtoidFieldNumber;
const int soul_lock_ack::kIdFieldNumber;
const int soul_lock_ack::kRetFieldNumber;
#endif  // !_MSC_VER

soul_lock_ack::soul_lock_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_lock_ack::InitAsDefaultInstance() {
}

soul_lock_ack::soul_lock_ack(const soul_lock_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_lock_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5308;
  id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_lock_ack::~soul_lock_ack() {
  SharedDtor();
}

void soul_lock_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_lock_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_lock_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_lock_ack_descriptor_;
}

const soul_lock_ack& soul_lock_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_lock_ack* soul_lock_ack::default_instance_ = NULL;

soul_lock_ack* soul_lock_ack::New() const {
  return new soul_lock_ack;
}

void soul_lock_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5308;
    id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_lock_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_lock_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_lock_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_lock_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 ret = 3 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_lock_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_lock_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_lock_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_lock_ack::MergeFrom(const soul_lock_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_lock_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_lock_ack::CopyFrom(const soul_lock_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_lock_ack::IsInitialized() const {

  return true;
}

void soul_lock_ack::Swap(soul_lock_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_lock_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_lock_ack_descriptor_;
  metadata.reflection = soul_lock_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_unlock_req::kProtoidFieldNumber;
const int soul_unlock_req::kIdFieldNumber;
#endif  // !_MSC_VER

soul_unlock_req::soul_unlock_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_unlock_req::InitAsDefaultInstance() {
}

soul_unlock_req::soul_unlock_req(const soul_unlock_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_unlock_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5309;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_unlock_req::~soul_unlock_req() {
  SharedDtor();
}

void soul_unlock_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_unlock_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_unlock_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_unlock_req_descriptor_;
}

const soul_unlock_req& soul_unlock_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_unlock_req* soul_unlock_req::default_instance_ = NULL;

soul_unlock_req* soul_unlock_req::New() const {
  return new soul_unlock_req;
}

void soul_unlock_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5309;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_unlock_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_unlock_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_unlock_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_unlock_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_unlock_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_unlock_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_unlock_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_unlock_req::MergeFrom(const soul_unlock_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_unlock_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_unlock_req::CopyFrom(const soul_unlock_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_unlock_req::IsInitialized() const {

  return true;
}

void soul_unlock_req::Swap(soul_unlock_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_unlock_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_unlock_req_descriptor_;
  metadata.reflection = soul_unlock_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_unlock_ack::kProtoidFieldNumber;
const int soul_unlock_ack::kIdFieldNumber;
const int soul_unlock_ack::kRetFieldNumber;
#endif  // !_MSC_VER

soul_unlock_ack::soul_unlock_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_unlock_ack::InitAsDefaultInstance() {
}

soul_unlock_ack::soul_unlock_ack(const soul_unlock_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_unlock_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5310;
  id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_unlock_ack::~soul_unlock_ack() {
  SharedDtor();
}

void soul_unlock_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_unlock_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_unlock_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_unlock_ack_descriptor_;
}

const soul_unlock_ack& soul_unlock_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_unlock_ack* soul_unlock_ack::default_instance_ = NULL;

soul_unlock_ack* soul_unlock_ack::New() const {
  return new soul_unlock_ack;
}

void soul_unlock_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5310;
    id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_unlock_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_unlock_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_unlock_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional int32 ret = 3 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_unlock_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional int32 ret = 3 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_unlock_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_unlock_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_unlock_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_unlock_ack::MergeFrom(const soul_unlock_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_unlock_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_unlock_ack::CopyFrom(const soul_unlock_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_unlock_ack::IsInitialized() const {

  return true;
}

void soul_unlock_ack::Swap(soul_unlock_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_unlock_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_unlock_ack_descriptor_;
  metadata.reflection = soul_unlock_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_sell_req::kProtoidFieldNumber;
const int soul_sell_req::kSoulIdsFieldNumber;
#endif  // !_MSC_VER

soul_sell_req::soul_sell_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_sell_req::InitAsDefaultInstance() {
}

soul_sell_req::soul_sell_req(const soul_sell_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_sell_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5311;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_sell_req::~soul_sell_req() {
  SharedDtor();
}

void soul_sell_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_sell_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_sell_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_sell_req_descriptor_;
}

const soul_sell_req& soul_sell_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_sell_req* soul_sell_req::default_instance_ = NULL;

soul_sell_req* soul_sell_req::New() const {
  return new soul_sell_req;
}

void soul_sell_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5311;
  }
  soul_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_sell_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soul_ids;
        break;
      }

      // repeated uint64 soul_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_soul_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_soul_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soul_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_sell_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 soul_ids = 2;
  for (int i = 0; i < this->soul_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->soul_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_sell_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 soul_ids = 2;
  for (int i = 0; i < this->soul_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->soul_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_sell_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 soul_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->soul_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->soul_ids(i));
    }
    total_size += 1 * this->soul_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_sell_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_sell_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_sell_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_sell_req::MergeFrom(const soul_sell_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  soul_ids_.MergeFrom(from.soul_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_sell_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_sell_req::CopyFrom(const soul_sell_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_sell_req::IsInitialized() const {

  return true;
}

void soul_sell_req::Swap(soul_sell_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    soul_ids_.Swap(&other->soul_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_sell_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_sell_req_descriptor_;
  metadata.reflection = soul_sell_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int soul_sell_ack::kProtoidFieldNumber;
const int soul_sell_ack::kRetFieldNumber;
#endif  // !_MSC_VER

soul_sell_ack::soul_sell_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void soul_sell_ack::InitAsDefaultInstance() {
}

soul_sell_ack::soul_sell_ack(const soul_sell_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void soul_sell_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5312;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

soul_sell_ack::~soul_sell_ack() {
  SharedDtor();
}

void soul_sell_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void soul_sell_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* soul_sell_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return soul_sell_ack_descriptor_;
}

const soul_sell_ack& soul_sell_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

soul_sell_ack* soul_sell_ack::default_instance_ = NULL;

soul_sell_ack* soul_sell_ack::New() const {
  return new soul_sell_ack;
}

void soul_sell_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5312;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool soul_sell_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void soul_sell_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* soul_sell_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int soul_sell_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void soul_sell_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const soul_sell_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const soul_sell_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void soul_sell_ack::MergeFrom(const soul_sell_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void soul_sell_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void soul_sell_ack::CopyFrom(const soul_sell_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool soul_sell_ack::IsInitialized() const {

  return true;
}

void soul_sell_ack::Swap(soul_sell_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata soul_sell_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = soul_sell_ack_descriptor_;
  metadata.reflection = soul_sell_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_packet_req::kProtoidFieldNumber;
const int item_packet_req::kPlayeridFieldNumber;
#endif  // !_MSC_VER

item_packet_req::item_packet_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_packet_req::InitAsDefaultInstance() {
}

item_packet_req::item_packet_req(const item_packet_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_packet_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5110;
  playerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_packet_req::~item_packet_req() {
  SharedDtor();
}

void item_packet_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_packet_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_packet_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_packet_req_descriptor_;
}

const item_packet_req& item_packet_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_packet_req* item_packet_req::default_instance_ = NULL;

item_packet_req* item_packet_req::New() const {
  return new item_packet_req;
}

void item_packet_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5110;
    playerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_packet_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playerid;
        break;
      }

      // required uint64 playerid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_packet_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 playerid = 2;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_packet_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 playerid = 2;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_packet_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_packet_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_packet_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_packet_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_packet_req::MergeFrom(const item_packet_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_packet_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_packet_req::CopyFrom(const item_packet_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_packet_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void item_packet_req::Swap(item_packet_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_packet_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_packet_req_descriptor_;
  metadata.reflection = item_packet_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_packet_ack::kProtoidFieldNumber;
const int item_packet_ack::kAllFieldNumber;
const int item_packet_ack::kFixItemsFieldNumber;
const int item_packet_ack::kDelItemsFieldNumber;
const int item_packet_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

item_packet_ack::item_packet_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_packet_ack::InitAsDefaultInstance() {
}

item_packet_ack::item_packet_ack(const item_packet_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_packet_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5111;
  all_ = false;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_packet_ack::~item_packet_ack() {
  SharedDtor();
}

void item_packet_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_packet_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_packet_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_packet_ack_descriptor_;
}

const item_packet_ack& item_packet_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_packet_ack* item_packet_ack::default_instance_ = NULL;

item_packet_ack* item_packet_ack::New() const {
  return new item_packet_ack;
}

void item_packet_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5111;
    all_ = false;
    error_code_ = 0;
  }
  fix_items_.Clear();
  del_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_packet_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all;
        break;
      }

      // optional bool all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
          set_has_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fix_items;
        break;
      }

      // repeated .SProtoSpace.unit_item_data fix_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fix_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fix_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fix_items;
        if (input->ExpectTag(32)) goto parse_del_items;
        break;
      }

      // repeated uint64 del_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_items:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_del_items())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_items())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_del_items;
        if (input->ExpectTag(40)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_packet_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bool all = 2;
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->all(), output);
  }

  // repeated .SProtoSpace.unit_item_data fix_items = 3;
  for (int i = 0; i < this->fix_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fix_items(i), output);
  }

  // repeated uint64 del_items = 4;
  for (int i = 0; i < this->del_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->del_items(i), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 5;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_packet_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bool all = 2;
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->all(), target);
  }

  // repeated .SProtoSpace.unit_item_data fix_items = 3;
  for (int i = 0; i < this->fix_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fix_items(i), target);
  }

  // repeated uint64 del_items = 4;
  for (int i = 0; i < this->del_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->del_items(i), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 5;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_packet_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool all = 2;
    if (has_all()) {
      total_size += 1 + 1;
    }

    // optional .SProtoSpace.MsgErrorType error_code = 5;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  // repeated .SProtoSpace.unit_item_data fix_items = 3;
  total_size += 1 * this->fix_items_size();
  for (int i = 0; i < this->fix_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fix_items(i));
  }

  // repeated uint64 del_items = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_items_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_items(i));
    }
    total_size += 1 * this->del_items_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_packet_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_packet_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_packet_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_packet_ack::MergeFrom(const item_packet_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  fix_items_.MergeFrom(from.fix_items_);
  del_items_.MergeFrom(from.del_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_all()) {
      set_all(from.all());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_packet_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_packet_ack::CopyFrom(const item_packet_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_packet_ack::IsInitialized() const {

  return true;
}

void item_packet_ack::Swap(item_packet_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(all_, other->all_);
    fix_items_.Swap(&other->fix_items_);
    del_items_.Swap(&other->del_items_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_packet_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_packet_ack_descriptor_;
  metadata.reflection = item_packet_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_use_req::kProtoidFieldNumber;
const int item_use_req::kUidFieldNumber;
const int item_use_req::kCountFieldNumber;
const int item_use_req::kIndexFieldNumber;
#endif  // !_MSC_VER

item_use_req::item_use_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_use_req::InitAsDefaultInstance() {
}

item_use_req::item_use_req(const item_use_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_use_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5112;
  uid_ = GOOGLE_ULONGLONG(0);
  count_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_use_req::~item_use_req() {
  SharedDtor();
}

void item_use_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_use_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_use_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_use_req_descriptor_;
}

const item_use_req& item_use_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_use_req* item_use_req::default_instance_ = NULL;

item_use_req* item_use_req::New() const {
  return new item_use_req;
}

void item_use_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5112;
    uid_ = GOOGLE_ULONGLONG(0);
    count_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_use_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint64 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_use_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_use_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_use_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_use_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_use_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_use_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_use_req::MergeFrom(const item_use_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_use_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_use_req::CopyFrom(const item_use_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_use_req::IsInitialized() const {

  return true;
}

void item_use_req::Swap(item_use_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(uid_, other->uid_);
    std::swap(count_, other->count_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_use_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_use_req_descriptor_;
  metadata.reflection = item_use_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_use_ack::kProtoidFieldNumber;
const int item_use_ack::kResultFieldNumber;
const int item_use_ack::kItemsFieldNumber;
#endif  // !_MSC_VER

item_use_ack::item_use_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_use_ack::InitAsDefaultInstance() {
}

item_use_ack::item_use_ack(const item_use_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_use_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5113;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_use_ack::~item_use_ack() {
  SharedDtor();
}

void item_use_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_use_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_use_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_use_ack_descriptor_;
}

const item_use_ack& item_use_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_use_ack* item_use_ack::default_instance_ = NULL;

item_use_ack* item_use_ack::New() const {
  return new item_use_ack;
}

void item_use_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5113;
    result_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_use_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.reward_item items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_use_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SProtoSpace.reward_item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_use_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SProtoSpace.reward_item items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_use_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .SProtoSpace.reward_item items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_use_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_use_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_use_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_use_ack::MergeFrom(const item_use_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_use_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_use_ack::CopyFrom(const item_use_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_use_ack::IsInitialized() const {

  return true;
}

void item_use_ack::Swap(item_use_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_use_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_use_ack_descriptor_;
  metadata.reflection = item_use_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_sold_req::kProtoidFieldNumber;
const int item_sold_req::kIsBatchFieldNumber;
const int item_sold_req::kItemUidListFieldNumber;
const int item_sold_req::kItemUidFieldNumber;
const int item_sold_req::kItemCountFieldNumber;
#endif  // !_MSC_VER

item_sold_req::item_sold_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_sold_req::InitAsDefaultInstance() {
}

item_sold_req::item_sold_req(const item_sold_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_sold_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5114;
  is_batch_ = false;
  item_uid_ = GOOGLE_ULONGLONG(0);
  item_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_sold_req::~item_sold_req() {
  SharedDtor();
}

void item_sold_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_sold_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_sold_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_sold_req_descriptor_;
}

const item_sold_req& item_sold_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_sold_req* item_sold_req::default_instance_ = NULL;

item_sold_req* item_sold_req::New() const {
  return new item_sold_req;
}

void item_sold_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5114;
    is_batch_ = false;
    item_uid_ = GOOGLE_ULONGLONG(0);
    item_count_ = 0u;
  }
  item_uid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_sold_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_batch;
        break;
      }

      // optional bool is_batch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_batch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_batch_)));
          set_has_is_batch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_uid_list;
        break;
      }

      // repeated uint64 item_uid_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_item_uid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_uid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_uid_list;
        if (input->ExpectTag(32)) goto parse_item_uid;
        break;
      }

      // optional uint64 item_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uid_)));
          set_has_item_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_count;
        break;
      }

      // optional uint32 item_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_sold_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bool is_batch = 2;
  if (has_is_batch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_batch(), output);
  }

  // repeated uint64 item_uid_list = 3;
  for (int i = 0; i < this->item_uid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->item_uid_list(i), output);
  }

  // optional uint64 item_uid = 4;
  if (has_item_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_uid(), output);
  }

  // optional uint32 item_count = 5;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_sold_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bool is_batch = 2;
  if (has_is_batch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_batch(), target);
  }

  // repeated uint64 item_uid_list = 3;
  for (int i = 0; i < this->item_uid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->item_uid_list(i), target);
  }

  // optional uint64 item_uid = 4;
  if (has_item_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_uid(), target);
  }

  // optional uint32 item_count = 5;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_sold_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool is_batch = 2;
    if (has_is_batch()) {
      total_size += 1 + 1;
    }

    // optional uint64 item_uid = 4;
    if (has_item_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uid());
    }

    // optional uint32 item_count = 5;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_count());
    }

  }
  // repeated uint64 item_uid_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_uid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_uid_list(i));
    }
    total_size += 1 * this->item_uid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_sold_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_sold_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_sold_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_sold_req::MergeFrom(const item_sold_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_uid_list_.MergeFrom(from.item_uid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_is_batch()) {
      set_is_batch(from.is_batch());
    }
    if (from.has_item_uid()) {
      set_item_uid(from.item_uid());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_sold_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_sold_req::CopyFrom(const item_sold_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_sold_req::IsInitialized() const {

  return true;
}

void item_sold_req::Swap(item_sold_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(is_batch_, other->is_batch_);
    item_uid_list_.Swap(&other->item_uid_list_);
    std::swap(item_uid_, other->item_uid_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_sold_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_sold_req_descriptor_;
  metadata.reflection = item_sold_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_sold_ack::kProtoidFieldNumber;
const int item_sold_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

item_sold_ack::item_sold_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_sold_ack::InitAsDefaultInstance() {
}

item_sold_ack::item_sold_ack(const item_sold_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_sold_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5115;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_sold_ack::~item_sold_ack() {
  SharedDtor();
}

void item_sold_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_sold_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_sold_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_sold_ack_descriptor_;
}

const item_sold_ack& item_sold_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_sold_ack* item_sold_ack::default_instance_ = NULL;

item_sold_ack* item_sold_ack::New() const {
  return new item_sold_ack;
}

void item_sold_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5115;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_sold_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_sold_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_sold_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_sold_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_sold_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_sold_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_sold_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_sold_ack::MergeFrom(const item_sold_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_sold_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_sold_ack::CopyFrom(const item_sold_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_sold_ack::IsInitialized() const {

  return true;
}

void item_sold_ack::Swap(item_sold_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_sold_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_sold_ack_descriptor_;
  metadata.reflection = item_sold_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bag_expand_req::kProtoidFieldNumber;
const int bag_expand_req::kAddSizeFieldNumber;
#endif  // !_MSC_VER

bag_expand_req::bag_expand_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bag_expand_req::InitAsDefaultInstance() {
}

bag_expand_req::bag_expand_req(const bag_expand_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bag_expand_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5116;
  add_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bag_expand_req::~bag_expand_req() {
  SharedDtor();
}

void bag_expand_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bag_expand_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bag_expand_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bag_expand_req_descriptor_;
}

const bag_expand_req& bag_expand_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

bag_expand_req* bag_expand_req::default_instance_ = NULL;

bag_expand_req* bag_expand_req::New() const {
  return new bag_expand_req;
}

void bag_expand_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5116;
    add_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bag_expand_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_add_size;
        break;
      }

      // optional uint32 add_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_size_)));
          set_has_add_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bag_expand_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 add_size = 2;
  if (has_add_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->add_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bag_expand_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 add_size = 2;
  if (has_add_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->add_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bag_expand_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 add_size = 2;
    if (has_add_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->add_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bag_expand_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bag_expand_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bag_expand_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bag_expand_req::MergeFrom(const bag_expand_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_add_size()) {
      set_add_size(from.add_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bag_expand_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bag_expand_req::CopyFrom(const bag_expand_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bag_expand_req::IsInitialized() const {

  return true;
}

void bag_expand_req::Swap(bag_expand_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(add_size_, other->add_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bag_expand_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bag_expand_req_descriptor_;
  metadata.reflection = bag_expand_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bag_expand_ack::kProtoidFieldNumber;
const int bag_expand_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

bag_expand_ack::bag_expand_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bag_expand_ack::InitAsDefaultInstance() {
}

bag_expand_ack::bag_expand_ack(const bag_expand_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bag_expand_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5117;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bag_expand_ack::~bag_expand_ack() {
  SharedDtor();
}

void bag_expand_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bag_expand_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bag_expand_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bag_expand_ack_descriptor_;
}

const bag_expand_ack& bag_expand_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

bag_expand_ack* bag_expand_ack::default_instance_ = NULL;

bag_expand_ack* bag_expand_ack::New() const {
  return new bag_expand_ack;
}

void bag_expand_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5117;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bag_expand_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bag_expand_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bag_expand_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bag_expand_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bag_expand_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bag_expand_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bag_expand_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bag_expand_ack::MergeFrom(const bag_expand_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bag_expand_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bag_expand_ack::CopyFrom(const bag_expand_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bag_expand_ack::IsInitialized() const {

  return true;
}

void bag_expand_ack::Swap(bag_expand_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bag_expand_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bag_expand_ack_descriptor_;
  metadata.reflection = bag_expand_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bag_capacity_not_enough_ntf::kProtoidFieldNumber;
#endif  // !_MSC_VER

bag_capacity_not_enough_ntf::bag_capacity_not_enough_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void bag_capacity_not_enough_ntf::InitAsDefaultInstance() {
}

bag_capacity_not_enough_ntf::bag_capacity_not_enough_ntf(const bag_capacity_not_enough_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void bag_capacity_not_enough_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5118;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bag_capacity_not_enough_ntf::~bag_capacity_not_enough_ntf() {
  SharedDtor();
}

void bag_capacity_not_enough_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bag_capacity_not_enough_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bag_capacity_not_enough_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bag_capacity_not_enough_ntf_descriptor_;
}

const bag_capacity_not_enough_ntf& bag_capacity_not_enough_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

bag_capacity_not_enough_ntf* bag_capacity_not_enough_ntf::default_instance_ = NULL;

bag_capacity_not_enough_ntf* bag_capacity_not_enough_ntf::New() const {
  return new bag_capacity_not_enough_ntf;
}

void bag_capacity_not_enough_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5118;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bag_capacity_not_enough_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_capacity_not_enough_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void bag_capacity_not_enough_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_capacity_not_enough_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* bag_capacity_not_enough_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_capacity_not_enough_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int bag_capacity_not_enough_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_capacity_not_enough_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bag_capacity_not_enough_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bag_capacity_not_enough_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bag_capacity_not_enough_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bag_capacity_not_enough_ntf::MergeFrom(const bag_capacity_not_enough_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bag_capacity_not_enough_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bag_capacity_not_enough_ntf::CopyFrom(const bag_capacity_not_enough_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bag_capacity_not_enough_ntf::IsInitialized() const {

  return true;
}

void bag_capacity_not_enough_ntf::Swap(bag_capacity_not_enough_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bag_capacity_not_enough_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bag_capacity_not_enough_ntf_descriptor_;
  metadata.reflection = bag_capacity_not_enough_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_list_data_ntf::kProtoidFieldNumber;
const int hero_list_data_ntf::kHeroesFieldNumber;
#endif  // !_MSC_VER

hero_list_data_ntf::hero_list_data_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_list_data_ntf::InitAsDefaultInstance() {
}

hero_list_data_ntf::hero_list_data_ntf(const hero_list_data_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_list_data_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5400;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_list_data_ntf::~hero_list_data_ntf() {
  SharedDtor();
}

void hero_list_data_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_list_data_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_list_data_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_list_data_ntf_descriptor_;
}

const hero_list_data_ntf& hero_list_data_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_list_data_ntf* hero_list_data_ntf::default_instance_ = NULL;

hero_list_data_ntf* hero_list_data_ntf::New() const {
  return new hero_list_data_ntf;
}

void hero_list_data_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5400;
  }
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_list_data_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_list_data_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heroes;
        break;
      }

      // repeated .SProtoSpace.hero_show_data heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heroes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_list_data_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_list_data_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.hero_show_data heroes = 2;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_list_data_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_list_data_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.hero_show_data heroes = 2;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_list_data_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_list_data_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.hero_show_data heroes = 2;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_list_data_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_list_data_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_list_data_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_list_data_ntf::MergeFrom(const hero_list_data_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_list_data_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_list_data_ntf::CopyFrom(const hero_list_data_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_list_data_ntf::IsInitialized() const {

  for (int i = 0; i < heroes_size(); i++) {
    if (!this->heroes(i).IsInitialized()) return false;
  }
  return true;
}

void hero_list_data_ntf::Swap(hero_list_data_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    heroes_.Swap(&other->heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_list_data_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_list_data_ntf_descriptor_;
  metadata.reflection = hero_list_data_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int add_hero_ntf::kProtoidFieldNumber;
const int add_hero_ntf::kHeroesFieldNumber;
#endif  // !_MSC_VER

add_hero_ntf::add_hero_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void add_hero_ntf::InitAsDefaultInstance() {
}

add_hero_ntf::add_hero_ntf(const add_hero_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void add_hero_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5401;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

add_hero_ntf::~add_hero_ntf() {
  SharedDtor();
}

void add_hero_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void add_hero_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* add_hero_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return add_hero_ntf_descriptor_;
}

const add_hero_ntf& add_hero_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

add_hero_ntf* add_hero_ntf::default_instance_ = NULL;

add_hero_ntf* add_hero_ntf::New() const {
  return new add_hero_ntf;
}

void add_hero_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5401;
  }
  heroes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool add_hero_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_hero_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heroes;
        break;
      }

      // repeated .SProtoSpace.hero_show_data heroes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heroes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_heroes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void add_hero_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_hero_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.hero_show_data heroes = 2;
  for (int i = 0; i < this->heroes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heroes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* add_hero_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_hero_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.hero_show_data heroes = 2;
  for (int i = 0; i < this->heroes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heroes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int add_hero_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_hero_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.hero_show_data heroes = 2;
  total_size += 1 * this->heroes_size();
  for (int i = 0; i < this->heroes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heroes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void add_hero_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const add_hero_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const add_hero_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void add_hero_ntf::MergeFrom(const add_hero_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroes_.MergeFrom(from.heroes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void add_hero_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void add_hero_ntf::CopyFrom(const add_hero_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool add_hero_ntf::IsInitialized() const {

  for (int i = 0; i < heroes_size(); i++) {
    if (!this->heroes(i).IsInitialized()) return false;
  }
  return true;
}

void add_hero_ntf::Swap(add_hero_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    heroes_.Swap(&other->heroes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata add_hero_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = add_hero_ntf_descriptor_;
  metadata.reflection = add_hero_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int remove_hero_ntf::kProtoidFieldNumber;
const int remove_hero_ntf::kIdsFieldNumber;
#endif  // !_MSC_VER

remove_hero_ntf::remove_hero_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void remove_hero_ntf::InitAsDefaultInstance() {
}

remove_hero_ntf::remove_hero_ntf(const remove_hero_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void remove_hero_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5402;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

remove_hero_ntf::~remove_hero_ntf() {
  SharedDtor();
}

void remove_hero_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void remove_hero_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* remove_hero_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return remove_hero_ntf_descriptor_;
}

const remove_hero_ntf& remove_hero_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

remove_hero_ntf* remove_hero_ntf::default_instance_ = NULL;

remove_hero_ntf* remove_hero_ntf::New() const {
  return new remove_hero_ntf;
}

void remove_hero_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5402;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool remove_hero_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = remove_hero_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        break;
      }

      // repeated uint64 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void remove_hero_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = remove_hero_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* remove_hero_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = remove_hero_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int remove_hero_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = remove_hero_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void remove_hero_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const remove_hero_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const remove_hero_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void remove_hero_ntf::MergeFrom(const remove_hero_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void remove_hero_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void remove_hero_ntf::CopyFrom(const remove_hero_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool remove_hero_ntf::IsInitialized() const {

  return true;
}

void remove_hero_ntf::Swap(remove_hero_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata remove_hero_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = remove_hero_ntf_descriptor_;
  metadata.reflection = remove_hero_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_info_change_ntf::kProtoidFieldNumber;
const int hero_info_change_ntf::kTagFieldNumber;
const int hero_info_change_ntf::kHeroIdFieldNumber;
const int hero_info_change_ntf::kLevelFieldNumber;
const int hero_info_change_ntf::kStarFieldNumber;
const int hero_info_change_ntf::kExpFieldNumber;
const int hero_info_change_ntf::kSkillFieldNumber;
const int hero_info_change_ntf::kSoulFieldNumber;
const int hero_info_change_ntf::kAwakenFieldNumber;
const int hero_info_change_ntf::kAwakenAttrFieldNumber;
const int hero_info_change_ntf::kSkinInfoFieldNumber;
const int hero_info_change_ntf::kFightPowerFieldNumber;
const int hero_info_change_ntf::kEquipsFieldNumber;
const int hero_info_change_ntf::kQualityFieldNumber;
const int hero_info_change_ntf::kTalismansFieldNumber;
#endif  // !_MSC_VER

hero_info_change_ntf::hero_info_change_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_info_change_ntf::InitAsDefaultInstance() {
  skin_info_ = const_cast< ::SProtoSpace::skin_data*>(&::SProtoSpace::skin_data::default_instance());
}

hero_info_change_ntf::hero_info_change_ntf(const hero_info_change_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_info_change_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5407;
  tag_ = 1;
  hero_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  star_ = 0;
  exp_ = 0;
  awaken_ = false;
  skin_info_ = NULL;
  fight_power_ = GOOGLE_LONGLONG(0);
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_info_change_ntf::~hero_info_change_ntf() {
  SharedDtor();
}

void hero_info_change_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete skin_info_;
  }
}

void hero_info_change_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_info_change_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_info_change_ntf_descriptor_;
}

const hero_info_change_ntf& hero_info_change_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_info_change_ntf* hero_info_change_ntf::default_instance_ = NULL;

hero_info_change_ntf* hero_info_change_ntf::New() const {
  return new hero_info_change_ntf;
}

void hero_info_change_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5407;
    tag_ = 1;
    hero_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    star_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    awaken_ = false;
    if (has_skin_info()) {
      if (skin_info_ != NULL) skin_info_->::SProtoSpace::skin_data::Clear();
    }
    fight_power_ = GOOGLE_LONGLONG(0);
    quality_ = 0;
  }
  skill_.Clear();
  soul_.Clear();
  awaken_attr_.Clear();
  equips_.Clear();
  talismans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_info_change_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_info_change_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tag;
        break;
      }

      // required .SProtoSpace.EHeroInfoChangeTag tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroInfoChangeTag_IsValid(value)) {
            set_tag(static_cast< ::SProtoSpace::EHeroInfoChangeTag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill;
        break;
      }

      // repeated .SProtoSpace.client_skill_data skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill;
        if (input->ExpectTag(66)) goto parse_soul;
        break;
      }

      // repeated .SProtoSpace.client_soul_data soul = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_soul;
        if (input->ExpectTag(72)) goto parse_awaken;
        break;
      }

      // optional bool awaken = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &awaken_)));
          set_has_awaken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_awaken_attr;
        break;
      }

      // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awaken_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_awaken_attr;
        if (input->ExpectTag(90)) goto parse_skin_info;
        break;
      }

      // optional .SProtoSpace.skin_data skin_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skin_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skin_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fight_power;
        break;
      }

      // optional int64 fight_power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_power_)));
          set_has_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.hero_equip_data equips = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_equips;
        if (input->ExpectTag(112)) goto parse_quality;
        break;
      }

      // optional int32 quality = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_talismans;
        break;
      }

      // repeated .SProtoSpace.talisman_data talismans = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talismans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talismans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_talismans;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_info_change_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_info_change_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required .SProtoSpace.EHeroInfoChangeTag tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->tag(), output);
  }

  // required uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exp(), output);
  }

  // repeated .SProtoSpace.client_skill_data skill = 7;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill(i), output);
  }

  // repeated .SProtoSpace.client_soul_data soul = 8;
  for (int i = 0; i < this->soul_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->soul(i), output);
  }

  // optional bool awaken = 9;
  if (has_awaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->awaken(), output);
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->awaken_attr(i), output);
  }

  // optional .SProtoSpace.skin_data skin_info = 11;
  if (has_skin_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->skin_info(), output);
  }

  // optional int64 fight_power = 12;
  if (has_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->fight_power(), output);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 13;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->equips(i), output);
  }

  // optional int32 quality = 14;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->quality(), output);
  }

  // repeated .SProtoSpace.talisman_data talismans = 15;
  for (int i = 0; i < this->talismans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->talismans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_info_change_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_info_change_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required .SProtoSpace.EHeroInfoChangeTag tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->tag(), target);
  }

  // required uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  // optional int32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exp(), target);
  }

  // repeated .SProtoSpace.client_skill_data skill = 7;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill(i), target);
  }

  // repeated .SProtoSpace.client_soul_data soul = 8;
  for (int i = 0; i < this->soul_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->soul(i), target);
  }

  // optional bool awaken = 9;
  if (has_awaken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->awaken(), target);
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->awaken_attr(i), target);
  }

  // optional .SProtoSpace.skin_data skin_info = 11;
  if (has_skin_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->skin_info(), target);
  }

  // optional int64 fight_power = 12;
  if (has_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->fight_power(), target);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 13;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->equips(i), target);
  }

  // optional int32 quality = 14;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->quality(), target);
  }

  // repeated .SProtoSpace.talisman_data talismans = 15;
  for (int i = 0; i < this->talismans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->talismans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_info_change_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_info_change_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required .SProtoSpace.EHeroInfoChangeTag tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag());
    }

    // required uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool awaken = 9;
    if (has_awaken()) {
      total_size += 1 + 1;
    }

    // optional .SProtoSpace.skin_data skin_info = 11;
    if (has_skin_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skin_info());
    }

    // optional int64 fight_power = 12;
    if (has_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight_power());
    }

    // optional int32 quality = 14;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  // repeated .SProtoSpace.client_skill_data skill = 7;
  total_size += 1 * this->skill_size();
  for (int i = 0; i < this->skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill(i));
  }

  // repeated .SProtoSpace.client_soul_data soul = 8;
  total_size += 1 * this->soul_size();
  for (int i = 0; i < this->soul_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soul(i));
  }

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  total_size += 1 * this->awaken_attr_size();
  for (int i = 0; i < this->awaken_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awaken_attr(i));
  }

  // repeated .SProtoSpace.hero_equip_data equips = 13;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  // repeated .SProtoSpace.talisman_data talismans = 15;
  total_size += 1 * this->talismans_size();
  for (int i = 0; i < this->talismans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talismans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_info_change_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_info_change_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_info_change_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_info_change_ntf::MergeFrom(const hero_info_change_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  soul_.MergeFrom(from.soul_);
  awaken_attr_.MergeFrom(from.awaken_attr_);
  equips_.MergeFrom(from.equips_);
  talismans_.MergeFrom(from.talismans_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_awaken()) {
      set_awaken(from.awaken());
    }
    if (from.has_skin_info()) {
      mutable_skin_info()->::SProtoSpace::skin_data::MergeFrom(from.skin_info());
    }
    if (from.has_fight_power()) {
      set_fight_power(from.fight_power());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_info_change_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_info_change_ntf::CopyFrom(const hero_info_change_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_info_change_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < awaken_attr_size(); i++) {
    if (!this->awaken_attr(i).IsInitialized()) return false;
  }
  return true;
}

void hero_info_change_ntf::Swap(hero_info_change_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tag_, other->tag_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(level_, other->level_);
    std::swap(star_, other->star_);
    std::swap(exp_, other->exp_);
    skill_.Swap(&other->skill_);
    soul_.Swap(&other->soul_);
    std::swap(awaken_, other->awaken_);
    awaken_attr_.Swap(&other->awaken_attr_);
    std::swap(skin_info_, other->skin_info_);
    std::swap(fight_power_, other->fight_power_);
    equips_.Swap(&other->equips_);
    std::swap(quality_, other->quality_);
    talismans_.Swap(&other->talismans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_info_change_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_info_change_ntf_descriptor_;
  metadata.reflection = hero_info_change_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_upgrade_req::kProtoidFieldNumber;
const int hero_upgrade_req::kHeroIdFieldNumber;
const int hero_upgrade_req::kMaterialsFieldNumber;
#endif  // !_MSC_VER

hero_upgrade_req::hero_upgrade_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_upgrade_req::InitAsDefaultInstance() {
}

hero_upgrade_req::hero_upgrade_req(const hero_upgrade_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_upgrade_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5403;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_upgrade_req::~hero_upgrade_req() {
  SharedDtor();
}

void hero_upgrade_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_upgrade_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_upgrade_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_upgrade_req_descriptor_;
}

const hero_upgrade_req& hero_upgrade_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_upgrade_req* hero_upgrade_req::default_instance_ = NULL;

hero_upgrade_req* hero_upgrade_req::New() const {
  return new hero_upgrade_req;
}

void hero_upgrade_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5403;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_upgrade_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        break;
      }

      // repeated uint64 materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_materials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_materials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_upgrade_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // repeated uint64 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_upgrade_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // repeated uint64 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_upgrade_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated uint64 materials = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->materials_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->materials(i));
    }
    total_size += 1 * this->materials_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_upgrade_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_upgrade_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_upgrade_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_upgrade_req::MergeFrom(const hero_upgrade_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_upgrade_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_upgrade_req::CopyFrom(const hero_upgrade_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_upgrade_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void hero_upgrade_req::Swap(hero_upgrade_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_upgrade_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_upgrade_req_descriptor_;
  metadata.reflection = hero_upgrade_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_upgrade_ack::kProtoidFieldNumber;
const int hero_upgrade_ack::kHeroIdFieldNumber;
const int hero_upgrade_ack::kHeroLevelFieldNumber;
const int hero_upgrade_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_upgrade_ack::hero_upgrade_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_upgrade_ack::InitAsDefaultInstance() {
}

hero_upgrade_ack::hero_upgrade_ack(const hero_upgrade_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_upgrade_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5404;
  hero_id_ = GOOGLE_ULONGLONG(0);
  hero_level_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_upgrade_ack::~hero_upgrade_ack() {
  SharedDtor();
}

void hero_upgrade_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_upgrade_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_upgrade_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_upgrade_ack_descriptor_;
}

const hero_upgrade_ack& hero_upgrade_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_upgrade_ack* hero_upgrade_ack::default_instance_ = NULL;

hero_upgrade_ack* hero_upgrade_ack::New() const {
  return new hero_upgrade_ack;
}

void hero_upgrade_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5404;
    hero_id_ = GOOGLE_ULONGLONG(0);
    hero_level_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_upgrade_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_level;
        break;
      }

      // optional int32 hero_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_level_)));
          set_has_hero_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_upgrade_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional int32 hero_level = 3;
  if (has_hero_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_level(), output);
  }

  // required int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_upgrade_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional int32 hero_level = 3;
  if (has_hero_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_level(), target);
  }

  // required int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_upgrade_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 hero_level = 3;
    if (has_hero_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_level());
    }

    // required int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_upgrade_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_upgrade_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_upgrade_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_upgrade_ack::MergeFrom(const hero_upgrade_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_level()) {
      set_hero_level(from.hero_level());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_upgrade_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_upgrade_ack::CopyFrom(const hero_upgrade_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_upgrade_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  return true;
}

void hero_upgrade_ack::Swap(hero_upgrade_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_level_, other->hero_level_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_upgrade_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_upgrade_ack_descriptor_;
  metadata.reflection = hero_upgrade_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_upstar_req::kProtoidFieldNumber;
const int hero_upstar_req::kHeroIdFieldNumber;
const int hero_upstar_req::kMaterialsFieldNumber;
#endif  // !_MSC_VER

hero_upstar_req::hero_upstar_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_upstar_req::InitAsDefaultInstance() {
}

hero_upstar_req::hero_upstar_req(const hero_upstar_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_upstar_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5405;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_upstar_req::~hero_upstar_req() {
  SharedDtor();
}

void hero_upstar_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_upstar_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_upstar_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_upstar_req_descriptor_;
}

const hero_upstar_req& hero_upstar_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_upstar_req* hero_upstar_req::default_instance_ = NULL;

hero_upstar_req* hero_upstar_req::New() const {
  return new hero_upstar_req;
}

void hero_upstar_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5405;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_upstar_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        break;
      }

      // repeated uint64 materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_materials())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_materials())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_upstar_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // repeated uint64 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_upstar_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // repeated uint64 materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_upstar_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated uint64 materials = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->materials_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->materials(i));
    }
    total_size += 1 * this->materials_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_upstar_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_upstar_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_upstar_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_upstar_req::MergeFrom(const hero_upstar_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_upstar_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_upstar_req::CopyFrom(const hero_upstar_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_upstar_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void hero_upstar_req::Swap(hero_upstar_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_upstar_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_upstar_req_descriptor_;
  metadata.reflection = hero_upstar_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_upstar_ack::kProtoidFieldNumber;
const int hero_upstar_ack::kHeroIdFieldNumber;
const int hero_upstar_ack::kHeroStarFieldNumber;
const int hero_upstar_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_upstar_ack::hero_upstar_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_upstar_ack::InitAsDefaultInstance() {
}

hero_upstar_ack::hero_upstar_ack(const hero_upstar_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_upstar_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5406;
  hero_id_ = GOOGLE_ULONGLONG(0);
  hero_star_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_upstar_ack::~hero_upstar_ack() {
  SharedDtor();
}

void hero_upstar_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_upstar_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_upstar_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_upstar_ack_descriptor_;
}

const hero_upstar_ack& hero_upstar_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_upstar_ack* hero_upstar_ack::default_instance_ = NULL;

hero_upstar_ack* hero_upstar_ack::New() const {
  return new hero_upstar_ack;
}

void hero_upstar_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5406;
    hero_id_ = GOOGLE_ULONGLONG(0);
    hero_star_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_upstar_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_star;
        break;
      }

      // optional int32 hero_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_star_)));
          set_has_hero_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_upstar_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional int32 hero_star = 3;
  if (has_hero_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_star(), output);
  }

  // required int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_upstar_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional int32 hero_star = 3;
  if (has_hero_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_star(), target);
  }

  // required int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_upstar_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 hero_star = 3;
    if (has_hero_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_star());
    }

    // required int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_upstar_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_upstar_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_upstar_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_upstar_ack::MergeFrom(const hero_upstar_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_star()) {
      set_hero_star(from.hero_star());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_upstar_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_upstar_ack::CopyFrom(const hero_upstar_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_upstar_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;

  return true;
}

void hero_upstar_ack::Swap(hero_upstar_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_star_, other->hero_star_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_upstar_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_upstar_ack_descriptor_;
  metadata.reflection = hero_upstar_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_awaken_req::kProtoidFieldNumber;
const int hero_awaken_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

hero_awaken_req::hero_awaken_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_awaken_req::InitAsDefaultInstance() {
}

hero_awaken_req::hero_awaken_req(const hero_awaken_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_awaken_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5408;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_awaken_req::~hero_awaken_req() {
  SharedDtor();
}

void hero_awaken_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_awaken_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_awaken_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_awaken_req_descriptor_;
}

const hero_awaken_req& hero_awaken_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_awaken_req* hero_awaken_req::default_instance_ = NULL;

hero_awaken_req* hero_awaken_req::New() const {
  return new hero_awaken_req;
}

void hero_awaken_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5408;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_awaken_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_awaken_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_awaken_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_awaken_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_awaken_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_awaken_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_awaken_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_awaken_req::MergeFrom(const hero_awaken_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_awaken_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_awaken_req::CopyFrom(const hero_awaken_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_awaken_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void hero_awaken_req::Swap(hero_awaken_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_awaken_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_awaken_req_descriptor_;
  metadata.reflection = hero_awaken_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_awaken_ack::kProtoidFieldNumber;
const int hero_awaken_ack::kHeroIdFieldNumber;
const int hero_awaken_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_awaken_ack::hero_awaken_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_awaken_ack::InitAsDefaultInstance() {
}

hero_awaken_ack::hero_awaken_ack(const hero_awaken_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_awaken_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5409;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_awaken_ack::~hero_awaken_ack() {
  SharedDtor();
}

void hero_awaken_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_awaken_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_awaken_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_awaken_ack_descriptor_;
}

const hero_awaken_ack& hero_awaken_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_awaken_ack* hero_awaken_ack::default_instance_ = NULL;

hero_awaken_ack* hero_awaken_ack::New() const {
  return new hero_awaken_ack;
}

void hero_awaken_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5409;
    hero_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_awaken_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_awaken_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_awaken_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_awaken_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // required int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_awaken_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_awaken_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_awaken_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_awaken_ack::MergeFrom(const hero_awaken_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_awaken_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_awaken_ack::CopyFrom(const hero_awaken_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_awaken_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void hero_awaken_ack::Swap(hero_awaken_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_awaken_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_awaken_ack_descriptor_;
  metadata.reflection = hero_awaken_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_lock_req::kProtoidFieldNumber;
const int hero_lock_req::kHeroIdFieldNumber;
const int hero_lock_req::kLockFieldNumber;
#endif  // !_MSC_VER

hero_lock_req::hero_lock_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_lock_req::InitAsDefaultInstance() {
}

hero_lock_req::hero_lock_req(const hero_lock_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_lock_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5410;
  hero_id_ = GOOGLE_ULONGLONG(0);
  lock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_lock_req::~hero_lock_req() {
  SharedDtor();
}

void hero_lock_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_lock_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_lock_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_lock_req_descriptor_;
}

const hero_lock_req& hero_lock_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_lock_req* hero_lock_req::default_instance_ = NULL;

hero_lock_req* hero_lock_req::New() const {
  return new hero_lock_req;
}

void hero_lock_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5410;
    hero_id_ = GOOGLE_ULONGLONG(0);
    lock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_lock_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock;
        break;
      }

      // required bool lock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_lock_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // required bool lock = 3;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_lock_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // required bool lock = 3;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_lock_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // required bool lock = 3;
    if (has_lock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_lock_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_lock_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_lock_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_lock_req::MergeFrom(const hero_lock_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_lock_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_lock_req::CopyFrom(const hero_lock_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_lock_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void hero_lock_req::Swap(hero_lock_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(lock_, other->lock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_lock_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_lock_req_descriptor_;
  metadata.reflection = hero_lock_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_lock_ack::kProtoidFieldNumber;
const int hero_lock_ack::kHeroIdFieldNumber;
const int hero_lock_ack::kLockFieldNumber;
const int hero_lock_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_lock_ack::hero_lock_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_lock_ack::InitAsDefaultInstance() {
}

hero_lock_ack::hero_lock_ack(const hero_lock_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_lock_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5411;
  hero_id_ = GOOGLE_ULONGLONG(0);
  lock_ = false;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_lock_ack::~hero_lock_ack() {
  SharedDtor();
}

void hero_lock_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_lock_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_lock_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_lock_ack_descriptor_;
}

const hero_lock_ack& hero_lock_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_lock_ack* hero_lock_ack::default_instance_ = NULL;

hero_lock_ack* hero_lock_ack::New() const {
  return new hero_lock_ack;
}

void hero_lock_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5411;
    hero_id_ = GOOGLE_ULONGLONG(0);
    lock_ = false;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_lock_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // required uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock;
        break;
      }

      // required bool lock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // required int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_lock_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // required bool lock = 3;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->lock(), output);
  }

  // required int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_lock_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // required bool lock = 3;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lock(), target);
  }

  // required int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_lock_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // required bool lock = 3;
    if (has_lock()) {
      total_size += 1 + 1;
    }

    // required int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_lock_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_lock_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_lock_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_lock_ack::MergeFrom(const hero_lock_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_lock_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_lock_ack::CopyFrom(const hero_lock_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_lock_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void hero_lock_ack::Swap(hero_lock_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(lock_, other->lock_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_lock_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_lock_ack_descriptor_;
  metadata.reflection = hero_lock_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_compose_req::kProtoidFieldNumber;
const int hero_compose_req::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

hero_compose_req::hero_compose_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_compose_req::InitAsDefaultInstance() {
}

hero_compose_req::hero_compose_req(const hero_compose_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_compose_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5412;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_compose_req::~hero_compose_req() {
  SharedDtor();
}

void hero_compose_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_compose_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_compose_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_compose_req_descriptor_;
}

const hero_compose_req& hero_compose_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_compose_req* hero_compose_req::default_instance_ = NULL;

hero_compose_req* hero_compose_req::New() const {
  return new hero_compose_req;
}

void hero_compose_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5412;
    template_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_compose_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_compose_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_compose_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_compose_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_compose_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_compose_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_compose_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_compose_req::MergeFrom(const hero_compose_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_compose_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_compose_req::CopyFrom(const hero_compose_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_compose_req::IsInitialized() const {

  return true;
}

void hero_compose_req::Swap(hero_compose_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_compose_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_compose_req_descriptor_;
  metadata.reflection = hero_compose_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_compose_ack::kProtoidFieldNumber;
const int hero_compose_ack::kTemplateIdFieldNumber;
const int hero_compose_ack::kHeroIdFieldNumber;
const int hero_compose_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_compose_ack::hero_compose_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_compose_ack::InitAsDefaultInstance() {
}

hero_compose_ack::hero_compose_ack(const hero_compose_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_compose_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5413;
  template_id_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_compose_ack::~hero_compose_ack() {
  SharedDtor();
}

void hero_compose_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_compose_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_compose_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_compose_ack_descriptor_;
}

const hero_compose_ack& hero_compose_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_compose_ack* hero_compose_ack::default_instance_ = NULL;

hero_compose_ack* hero_compose_ack::New() const {
  return new hero_compose_ack;
}

void hero_compose_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5413;
    template_id_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_compose_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // optional int32 template_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_compose_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_compose_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_compose_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_compose_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_compose_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_compose_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_compose_ack::MergeFrom(const hero_compose_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_compose_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_compose_ack::CopyFrom(const hero_compose_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_compose_ack::IsInitialized() const {

  return true;
}

void hero_compose_ack::Swap(hero_compose_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(template_id_, other->template_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_compose_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_compose_ack_descriptor_;
  metadata.reflection = hero_compose_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_skin_active_req::kProtoidFieldNumber;
const int hero_skin_active_req::kHeroIdFieldNumber;
const int hero_skin_active_req::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

hero_skin_active_req::hero_skin_active_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_skin_active_req::InitAsDefaultInstance() {
}

hero_skin_active_req::hero_skin_active_req(const hero_skin_active_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_skin_active_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5414;
  hero_id_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_skin_active_req::~hero_skin_active_req() {
  SharedDtor();
}

void hero_skin_active_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_skin_active_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_skin_active_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_skin_active_req_descriptor_;
}

const hero_skin_active_req& hero_skin_active_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_skin_active_req* hero_skin_active_req::default_instance_ = NULL;

hero_skin_active_req* hero_skin_active_req::New() const {
  return new hero_skin_active_req;
}

void hero_skin_active_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5414;
    hero_id_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_skin_active_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_skin_active_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_skin_active_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_skin_active_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional uint32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_skin_active_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_skin_active_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_skin_active_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_skin_active_req::MergeFrom(const hero_skin_active_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_skin_active_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_skin_active_req::CopyFrom(const hero_skin_active_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_skin_active_req::IsInitialized() const {

  return true;
}

void hero_skin_active_req::Swap(hero_skin_active_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_skin_active_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_skin_active_req_descriptor_;
  metadata.reflection = hero_skin_active_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_skin_active_ack::kProtoidFieldNumber;
const int hero_skin_active_ack::kHeroIdFieldNumber;
const int hero_skin_active_ack::kTemplateIdFieldNumber;
const int hero_skin_active_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_skin_active_ack::hero_skin_active_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_skin_active_ack::InitAsDefaultInstance() {
}

hero_skin_active_ack::hero_skin_active_ack(const hero_skin_active_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_skin_active_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5415;
  hero_id_ = GOOGLE_ULONGLONG(0);
  template_id_ = 0u;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_skin_active_ack::~hero_skin_active_ack() {
  SharedDtor();
}

void hero_skin_active_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_skin_active_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_skin_active_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_skin_active_ack_descriptor_;
}

const hero_skin_active_ack& hero_skin_active_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_skin_active_ack* hero_skin_active_ack::default_instance_ = NULL;

hero_skin_active_ack* hero_skin_active_ack::New() const {
  return new hero_skin_active_ack;
}

void hero_skin_active_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5415;
    hero_id_ = GOOGLE_ULONGLONG(0);
    template_id_ = 0u;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_skin_active_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional uint32 template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_skin_active_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->template_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_skin_active_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional uint32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->template_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_skin_active_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional uint32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->template_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_skin_active_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_skin_active_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_skin_active_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_skin_active_ack::MergeFrom(const hero_skin_active_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_skin_active_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_skin_active_ack::CopyFrom(const hero_skin_active_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_skin_active_ack::IsInitialized() const {

  return true;
}

void hero_skin_active_ack::Swap(hero_skin_active_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(template_id_, other->template_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_skin_active_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_skin_active_ack_descriptor_;
  metadata.reflection = hero_skin_active_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_change_name_req::kProtoidFieldNumber;
const int hero_change_name_req::kHeroIdFieldNumber;
const int hero_change_name_req::kChangeNameFieldNumber;
#endif  // !_MSC_VER

hero_change_name_req::hero_change_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_change_name_req::InitAsDefaultInstance() {
}

hero_change_name_req::hero_change_name_req(const hero_change_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_change_name_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5419;
  hero_id_ = GOOGLE_ULONGLONG(0);
  change_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_change_name_req::~hero_change_name_req() {
  SharedDtor();
}

void hero_change_name_req::SharedDtor() {
  if (change_name_ != &::google::protobuf::internal::kEmptyString) {
    delete change_name_;
  }
  if (this != default_instance_) {
  }
}

void hero_change_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_change_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_change_name_req_descriptor_;
}

const hero_change_name_req& hero_change_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_change_name_req* hero_change_name_req::default_instance_ = NULL;

hero_change_name_req* hero_change_name_req::New() const {
  return new hero_change_name_req;
}

void hero_change_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5419;
    hero_id_ = GOOGLE_ULONGLONG(0);
    if (has_change_name()) {
      if (change_name_ != &::google::protobuf::internal::kEmptyString) {
        change_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_change_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_change_name;
        break;
      }

      // optional string change_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->change_name().data(), this->change_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_change_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional string change_name = 3;
  if (has_change_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->change_name().data(), this->change_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->change_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_change_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional string change_name = 3;
  if (has_change_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->change_name().data(), this->change_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->change_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_change_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional string change_name = 3;
    if (has_change_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_change_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_change_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_change_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_change_name_req::MergeFrom(const hero_change_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_change_name()) {
      set_change_name(from.change_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_change_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_change_name_req::CopyFrom(const hero_change_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_change_name_req::IsInitialized() const {

  return true;
}

void hero_change_name_req::Swap(hero_change_name_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(change_name_, other->change_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_change_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_change_name_req_descriptor_;
  metadata.reflection = hero_change_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_change_name_ack::kProtoidFieldNumber;
const int hero_change_name_ack::kResultFieldNumber;
const int hero_change_name_ack::kHeroIdFieldNumber;
const int hero_change_name_ack::kChangeNameFieldNumber;
#endif  // !_MSC_VER

hero_change_name_ack::hero_change_name_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_change_name_ack::InitAsDefaultInstance() {
}

hero_change_name_ack::hero_change_name_ack(const hero_change_name_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_change_name_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5420;
  result_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  change_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_change_name_ack::~hero_change_name_ack() {
  SharedDtor();
}

void hero_change_name_ack::SharedDtor() {
  if (change_name_ != &::google::protobuf::internal::kEmptyString) {
    delete change_name_;
  }
  if (this != default_instance_) {
  }
}

void hero_change_name_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_change_name_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_change_name_ack_descriptor_;
}

const hero_change_name_ack& hero_change_name_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_change_name_ack* hero_change_name_ack::default_instance_ = NULL;

hero_change_name_ack* hero_change_name_ack::New() const {
  return new hero_change_name_ack;
}

void hero_change_name_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5420;
    result_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
    if (has_change_name()) {
      if (change_name_ != &::google::protobuf::internal::kEmptyString) {
        change_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_change_name_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_change_name;
        break;
      }

      // optional string change_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_change_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_change_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->change_name().data(), this->change_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_change_name_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // optional string change_name = 4;
  if (has_change_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->change_name().data(), this->change_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->change_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_change_name_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // optional string change_name = 4;
  if (has_change_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->change_name().data(), this->change_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->change_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_change_name_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional string change_name = 4;
    if (has_change_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->change_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_change_name_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_change_name_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_change_name_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_change_name_ack::MergeFrom(const hero_change_name_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_change_name()) {
      set_change_name(from.change_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_change_name_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_change_name_ack::CopyFrom(const hero_change_name_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_change_name_ack::IsInitialized() const {

  return true;
}

void hero_change_name_ack::Swap(hero_change_name_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(change_name_, other->change_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_change_name_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_change_name_ack_descriptor_;
  metadata.reflection = hero_change_name_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_level_up_req::kProtoidFieldNumber;
const int hero_level_up_req::kHeroIdFieldNumber;
const int hero_level_up_req::kMaterialsFieldNumber;
#endif  // !_MSC_VER

hero_level_up_req::hero_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_level_up_req::InitAsDefaultInstance() {
}

hero_level_up_req::hero_level_up_req(const hero_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5421;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_level_up_req::~hero_level_up_req() {
  SharedDtor();
}

void hero_level_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_level_up_req_descriptor_;
}

const hero_level_up_req& hero_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_level_up_req* hero_level_up_req::default_instance_ = NULL;

hero_level_up_req* hero_level_up_req::New() const {
  return new hero_level_up_req;
}

void hero_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5421;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        break;
      }

      // repeated .SProtoSpace.reward_item materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // repeated .SProtoSpace.reward_item materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // repeated .SProtoSpace.reward_item materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated .SProtoSpace.reward_item materials = 3;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_level_up_req::MergeFrom(const hero_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_level_up_req::CopyFrom(const hero_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_level_up_req::IsInitialized() const {

  return true;
}

void hero_level_up_req::Swap(hero_level_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_level_up_req_descriptor_;
  metadata.reflection = hero_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_level_up_ack::kProtoidFieldNumber;
const int hero_level_up_ack::kHeroIdFieldNumber;
const int hero_level_up_ack::kHeroLevelFieldNumber;
const int hero_level_up_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_level_up_ack::hero_level_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_level_up_ack::InitAsDefaultInstance() {
}

hero_level_up_ack::hero_level_up_ack(const hero_level_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_level_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5422;
  hero_id_ = GOOGLE_ULONGLONG(0);
  hero_level_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_level_up_ack::~hero_level_up_ack() {
  SharedDtor();
}

void hero_level_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_level_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_level_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_level_up_ack_descriptor_;
}

const hero_level_up_ack& hero_level_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_level_up_ack* hero_level_up_ack::default_instance_ = NULL;

hero_level_up_ack* hero_level_up_ack::New() const {
  return new hero_level_up_ack;
}

void hero_level_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5422;
    hero_id_ = GOOGLE_ULONGLONG(0);
    hero_level_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_level_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_level;
        break;
      }

      // optional int32 hero_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_level_)));
          set_has_hero_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_level_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional int32 hero_level = 3;
  if (has_hero_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_level(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_level_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional int32 hero_level = 3;
  if (has_hero_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_level(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_level_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 hero_level = 3;
    if (has_hero_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_level());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_level_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_level_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_level_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_level_up_ack::MergeFrom(const hero_level_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_level()) {
      set_hero_level(from.hero_level());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_level_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_level_up_ack::CopyFrom(const hero_level_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_level_up_ack::IsInitialized() const {

  return true;
}

void hero_level_up_ack::Swap(hero_level_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_level_, other->hero_level_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_level_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_level_up_ack_descriptor_;
  metadata.reflection = hero_level_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_quality_up_req::kProtoidFieldNumber;
const int hero_quality_up_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

hero_quality_up_req::hero_quality_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_quality_up_req::InitAsDefaultInstance() {
}

hero_quality_up_req::hero_quality_up_req(const hero_quality_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_quality_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5445;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_quality_up_req::~hero_quality_up_req() {
  SharedDtor();
}

void hero_quality_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_quality_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_quality_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_quality_up_req_descriptor_;
}

const hero_quality_up_req& hero_quality_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_quality_up_req* hero_quality_up_req::default_instance_ = NULL;

hero_quality_up_req* hero_quality_up_req::New() const {
  return new hero_quality_up_req;
}

void hero_quality_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5445;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_quality_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_quality_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_quality_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_quality_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_quality_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_quality_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_quality_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_quality_up_req::MergeFrom(const hero_quality_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_quality_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_quality_up_req::CopyFrom(const hero_quality_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_quality_up_req::IsInitialized() const {

  return true;
}

void hero_quality_up_req::Swap(hero_quality_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_quality_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_quality_up_req_descriptor_;
  metadata.reflection = hero_quality_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_quality_up_ack::kProtoidFieldNumber;
const int hero_quality_up_ack::kRetFieldNumber;
const int hero_quality_up_ack::kHeroIdFieldNumber;
#endif  // !_MSC_VER

hero_quality_up_ack::hero_quality_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_quality_up_ack::InitAsDefaultInstance() {
}

hero_quality_up_ack::hero_quality_up_ack(const hero_quality_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_quality_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5446;
  ret_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_quality_up_ack::~hero_quality_up_ack() {
  SharedDtor();
}

void hero_quality_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_quality_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_quality_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_quality_up_ack_descriptor_;
}

const hero_quality_up_ack& hero_quality_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_quality_up_ack* hero_quality_up_ack::default_instance_ = NULL;

hero_quality_up_ack* hero_quality_up_ack::New() const {
  return new hero_quality_up_ack;
}

void hero_quality_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5446;
    ret_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_quality_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_quality_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_quality_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_quality_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_quality_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_quality_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_quality_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_quality_up_ack::MergeFrom(const hero_quality_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_quality_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_quality_up_ack::CopyFrom(const hero_quality_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_quality_up_ack::IsInitialized() const {

  return true;
}

void hero_quality_up_ack::Swap(hero_quality_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_quality_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_quality_up_ack_descriptor_;
  metadata.reflection = hero_quality_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_combine_req::kProtoidFieldNumber;
const int item_combine_req::kDestEquipTidFieldNumber;
const int item_combine_req::kCombineNumFieldNumber;
const int item_combine_req::kCostItemUidFieldNumber;
#endif  // !_MSC_VER

item_combine_req::item_combine_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_combine_req::InitAsDefaultInstance() {
}

item_combine_req::item_combine_req(const item_combine_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_combine_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5447;
  dest_equip_tid_ = 0u;
  combine_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_combine_req::~item_combine_req() {
  SharedDtor();
}

void item_combine_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_combine_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_combine_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_combine_req_descriptor_;
}

const item_combine_req& item_combine_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_combine_req* item_combine_req::default_instance_ = NULL;

item_combine_req* item_combine_req::New() const {
  return new item_combine_req;
}

void item_combine_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5447;
    dest_equip_tid_ = 0u;
    combine_num_ = 0u;
  }
  cost_item_uid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_combine_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_equip_tid;
        break;
      }

      // optional uint32 dest_equip_tid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_equip_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_equip_tid_)));
          set_has_dest_equip_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combine_num;
        break;
      }

      // optional uint32 combine_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combine_num_)));
          set_has_combine_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_item_uid;
        break;
      }

      // repeated uint64 cost_item_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_item_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_cost_item_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cost_item_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_item_uid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_combine_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 dest_equip_tid = 2;
  if (has_dest_equip_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dest_equip_tid(), output);
  }

  // optional uint32 combine_num = 3;
  if (has_combine_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->combine_num(), output);
  }

  // repeated uint64 cost_item_uid = 4;
  for (int i = 0; i < this->cost_item_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->cost_item_uid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_combine_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 dest_equip_tid = 2;
  if (has_dest_equip_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dest_equip_tid(), target);
  }

  // optional uint32 combine_num = 3;
  if (has_combine_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->combine_num(), target);
  }

  // repeated uint64 cost_item_uid = 4;
  for (int i = 0; i < this->cost_item_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->cost_item_uid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_combine_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 dest_equip_tid = 2;
    if (has_dest_equip_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_equip_tid());
    }

    // optional uint32 combine_num = 3;
    if (has_combine_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combine_num());
    }

  }
  // repeated uint64 cost_item_uid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_item_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cost_item_uid(i));
    }
    total_size += 1 * this->cost_item_uid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_combine_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_combine_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_combine_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_combine_req::MergeFrom(const item_combine_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_item_uid_.MergeFrom(from.cost_item_uid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_dest_equip_tid()) {
      set_dest_equip_tid(from.dest_equip_tid());
    }
    if (from.has_combine_num()) {
      set_combine_num(from.combine_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_combine_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_combine_req::CopyFrom(const item_combine_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_combine_req::IsInitialized() const {

  return true;
}

void item_combine_req::Swap(item_combine_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(dest_equip_tid_, other->dest_equip_tid_);
    std::swap(combine_num_, other->combine_num_);
    cost_item_uid_.Swap(&other->cost_item_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_combine_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_combine_req_descriptor_;
  metadata.reflection = item_combine_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int item_combine_ack::kProtoidFieldNumber;
const int item_combine_ack::kRetFieldNumber;
const int item_combine_ack::kDestEquipTidFieldNumber;
const int item_combine_ack::kCombineNumFieldNumber;
#endif  // !_MSC_VER

item_combine_ack::item_combine_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void item_combine_ack::InitAsDefaultInstance() {
}

item_combine_ack::item_combine_ack(const item_combine_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void item_combine_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5448;
  ret_ = 0;
  dest_equip_tid_ = 0u;
  combine_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

item_combine_ack::~item_combine_ack() {
  SharedDtor();
}

void item_combine_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void item_combine_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* item_combine_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return item_combine_ack_descriptor_;
}

const item_combine_ack& item_combine_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

item_combine_ack* item_combine_ack::default_instance_ = NULL;

item_combine_ack* item_combine_ack::New() const {
  return new item_combine_ack;
}

void item_combine_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5448;
    ret_ = 0;
    dest_equip_tid_ = 0u;
    combine_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool item_combine_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_equip_tid;
        break;
      }

      // optional uint32 dest_equip_tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_equip_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_equip_tid_)));
          set_has_dest_equip_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_combine_num;
        break;
      }

      // optional uint32 combine_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combine_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combine_num_)));
          set_has_combine_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void item_combine_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint32 dest_equip_tid = 3;
  if (has_dest_equip_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dest_equip_tid(), output);
  }

  // optional uint32 combine_num = 4;
  if (has_combine_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->combine_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* item_combine_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 dest_equip_tid = 3;
  if (has_dest_equip_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dest_equip_tid(), target);
  }

  // optional uint32 combine_num = 4;
  if (has_combine_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->combine_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int item_combine_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 dest_equip_tid = 3;
    if (has_dest_equip_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_equip_tid());
    }

    // optional uint32 combine_num = 4;
    if (has_combine_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combine_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void item_combine_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const item_combine_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const item_combine_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void item_combine_ack::MergeFrom(const item_combine_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dest_equip_tid()) {
      set_dest_equip_tid(from.dest_equip_tid());
    }
    if (from.has_combine_num()) {
      set_combine_num(from.combine_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void item_combine_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void item_combine_ack::CopyFrom(const item_combine_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool item_combine_ack::IsInitialized() const {

  return true;
}

void item_combine_ack::Swap(item_combine_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(dest_equip_tid_, other->dest_equip_tid_);
    std::swap(combine_num_, other->combine_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata item_combine_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = item_combine_ack_descriptor_;
  metadata.reflection = item_combine_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_star_up_req::kProtoidFieldNumber;
const int hero_star_up_req::kHeroIdFieldNumber;
const int hero_star_up_req::kMaterialsFieldNumber;
#endif  // !_MSC_VER

hero_star_up_req::hero_star_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_star_up_req::InitAsDefaultInstance() {
}

hero_star_up_req::hero_star_up_req(const hero_star_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_star_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5423;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_star_up_req::~hero_star_up_req() {
  SharedDtor();
}

void hero_star_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_star_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_star_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_star_up_req_descriptor_;
}

const hero_star_up_req& hero_star_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_star_up_req* hero_star_up_req::default_instance_ = NULL;

hero_star_up_req* hero_star_up_req::New() const {
  return new hero_star_up_req;
}

void hero_star_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5423;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_star_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        break;
      }

      // repeated .SProtoSpace.reward_item materials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_star_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // repeated .SProtoSpace.reward_item materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_star_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // repeated .SProtoSpace.reward_item materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_star_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated .SProtoSpace.reward_item materials = 3;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_star_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_star_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_star_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_star_up_req::MergeFrom(const hero_star_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_star_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_star_up_req::CopyFrom(const hero_star_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_star_up_req::IsInitialized() const {

  return true;
}

void hero_star_up_req::Swap(hero_star_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_star_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_star_up_req_descriptor_;
  metadata.reflection = hero_star_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_star_up_ack::kProtoidFieldNumber;
const int hero_star_up_ack::kHeroIdFieldNumber;
const int hero_star_up_ack::kHeroStarFieldNumber;
const int hero_star_up_ack::kRetFieldNumber;
#endif  // !_MSC_VER

hero_star_up_ack::hero_star_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_star_up_ack::InitAsDefaultInstance() {
}

hero_star_up_ack::hero_star_up_ack(const hero_star_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_star_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5424;
  hero_id_ = GOOGLE_ULONGLONG(0);
  hero_star_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_star_up_ack::~hero_star_up_ack() {
  SharedDtor();
}

void hero_star_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_star_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_star_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_star_up_ack_descriptor_;
}

const hero_star_up_ack& hero_star_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_star_up_ack* hero_star_up_ack::default_instance_ = NULL;

hero_star_up_ack* hero_star_up_ack::New() const {
  return new hero_star_up_ack;
}

void hero_star_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5424;
    hero_id_ = GOOGLE_ULONGLONG(0);
    hero_star_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_star_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_star;
        break;
      }

      // optional int32 hero_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_star_)));
          set_has_hero_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_star_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional int32 hero_star = 3;
  if (has_hero_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_star(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_star_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional int32 hero_star = 3;
  if (has_hero_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_star(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_star_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 hero_star = 3;
    if (has_hero_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_star());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_star_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_star_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_star_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_star_up_ack::MergeFrom(const hero_star_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_star()) {
      set_hero_star(from.hero_star());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_star_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_star_up_ack::CopyFrom(const hero_star_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_star_up_ack::IsInitialized() const {

  return true;
}

void hero_star_up_ack::Swap(hero_star_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_star_, other->hero_star_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_star_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_star_up_ack_descriptor_;
  metadata.reflection = hero_star_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_skill_up_req::kProtoidFieldNumber;
const int hero_skill_up_req::kHeroIdFieldNumber;
const int hero_skill_up_req::kSkillIdFieldNumber;
const int hero_skill_up_req::kMaterialsFieldNumber;
#endif  // !_MSC_VER

hero_skill_up_req::hero_skill_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_skill_up_req::InitAsDefaultInstance() {
}

hero_skill_up_req::hero_skill_up_req(const hero_skill_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_skill_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5425;
  hero_id_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_skill_up_req::~hero_skill_up_req() {
  SharedDtor();
}

void hero_skill_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_skill_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_skill_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_skill_up_req_descriptor_;
}

const hero_skill_up_req& hero_skill_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_skill_up_req* hero_skill_up_req::default_instance_ = NULL;

hero_skill_up_req* hero_skill_up_req::New() const {
  return new hero_skill_up_req;
}

void hero_skill_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5425;
    hero_id_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
  }
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_skill_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_materials;
        break;
      }

      // repeated .SProtoSpace.reward_item materials = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_materials;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_skill_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional int32 skill_id = 3;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_id(), output);
  }

  // repeated .SProtoSpace.reward_item materials = 4;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_skill_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional int32 skill_id = 3;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_id(), target);
  }

  // repeated .SProtoSpace.reward_item materials = 4;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_skill_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 skill_id = 3;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  // repeated .SProtoSpace.reward_item materials = 4;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_skill_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_skill_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_skill_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_skill_up_req::MergeFrom(const hero_skill_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_skill_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_skill_up_req::CopyFrom(const hero_skill_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_skill_up_req::IsInitialized() const {

  return true;
}

void hero_skill_up_req::Swap(hero_skill_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(skill_id_, other->skill_id_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_skill_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_skill_up_req_descriptor_;
  metadata.reflection = hero_skill_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_skill_up_ack::kProtoidFieldNumber;
const int hero_skill_up_ack::kHeroIdFieldNumber;
const int hero_skill_up_ack::kRetFieldNumber;
const int hero_skill_up_ack::kSkillIdFieldNumber;
const int hero_skill_up_ack::kSkillLvFieldNumber;
const int hero_skill_up_ack::kSkillPointFieldNumber;
#endif  // !_MSC_VER

hero_skill_up_ack::hero_skill_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_skill_up_ack::InitAsDefaultInstance() {
}

hero_skill_up_ack::hero_skill_up_ack(const hero_skill_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_skill_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5426;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  skill_id_ = 0;
  skill_lv_ = 0;
  skill_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_skill_up_ack::~hero_skill_up_ack() {
  SharedDtor();
}

void hero_skill_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_skill_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_skill_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_skill_up_ack_descriptor_;
}

const hero_skill_up_ack& hero_skill_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_skill_up_ack* hero_skill_up_ack::default_instance_ = NULL;

hero_skill_up_ack* hero_skill_up_ack::New() const {
  return new hero_skill_up_ack;
}

void hero_skill_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5426;
    hero_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
    skill_id_ = 0;
    skill_lv_ = 0;
    skill_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_skill_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_lv;
        break;
      }

      // optional int32 skill_lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_lv_)));
          set_has_skill_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_point;
        break;
      }

      // optional int32 skill_point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_)));
          set_has_skill_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_skill_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }

  // optional int32 skill_lv = 5;
  if (has_skill_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_lv(), output);
  }

  // optional int32 skill_point = 6;
  if (has_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skill_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_skill_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }

  // optional int32 skill_lv = 5;
  if (has_skill_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_lv(), target);
  }

  // optional int32 skill_point = 6;
  if (has_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skill_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_skill_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 skill_lv = 5;
    if (has_skill_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_lv());
    }

    // optional int32 skill_point = 6;
    if (has_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_skill_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_skill_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_skill_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_skill_up_ack::MergeFrom(const hero_skill_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lv()) {
      set_skill_lv(from.skill_lv());
    }
    if (from.has_skill_point()) {
      set_skill_point(from.skill_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_skill_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_skill_up_ack::CopyFrom(const hero_skill_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_skill_up_ack::IsInitialized() const {

  return true;
}

void hero_skill_up_ack::Swap(hero_skill_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(ret_, other->ret_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lv_, other->skill_lv_);
    std::swap(skill_point_, other->skill_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_skill_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_skill_up_ack_descriptor_;
  metadata.reflection = hero_skill_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_req::kProtoidFieldNumber;
const int hero_equip_req::kHeroUuidFieldNumber;
const int hero_equip_req::kItemUuidFieldNumber;
const int hero_equip_req::kSlotIdFieldNumber;
#endif  // !_MSC_VER

hero_equip_req::hero_equip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_req::InitAsDefaultInstance() {
}

hero_equip_req::hero_equip_req(const hero_equip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5431;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  item_uuid_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_req::~hero_equip_req() {
  SharedDtor();
}

void hero_equip_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_req_descriptor_;
}

const hero_equip_req& hero_equip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_req* hero_equip_req::default_instance_ = NULL;

hero_equip_req* hero_equip_req::New() const {
  return new hero_equip_req;
}

void hero_equip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5431;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    item_uuid_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_uuid;
        break;
      }

      // optional uint64 item_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uuid_)));
          set_has_item_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_id;
        break;
      }

      // optional .SProtoSpace.EHeroEquipSlot slot_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroEquipSlot_IsValid(value)) {
            set_slot_id(static_cast< ::SProtoSpace::EHeroEquipSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_uuid = 2;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_uuid(), output);
  }

  // optional uint64 item_uuid = 3;
  if (has_item_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_uuid(), output);
  }

  // optional .SProtoSpace.EHeroEquipSlot slot_id = 4;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->slot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_uuid = 2;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_uuid(), target);
  }

  // optional uint64 item_uuid = 3;
  if (has_item_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_uuid(), target);
  }

  // optional .SProtoSpace.EHeroEquipSlot slot_id = 4;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->slot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_uuid = 2;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional uint64 item_uuid = 3;
    if (has_item_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uuid());
    }

    // optional .SProtoSpace.EHeroEquipSlot slot_id = 4;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_req::MergeFrom(const hero_equip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_item_uuid()) {
      set_item_uuid(from.item_uuid());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_req::CopyFrom(const hero_equip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_req::IsInitialized() const {

  return true;
}

void hero_equip_req::Swap(hero_equip_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(item_uuid_, other->item_uuid_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_req_descriptor_;
  metadata.reflection = hero_equip_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_ack::kProtoidFieldNumber;
const int hero_equip_ack::kRetFieldNumber;
const int hero_equip_ack::kHeroUuidFieldNumber;
const int hero_equip_ack::kItemUuidFieldNumber;
const int hero_equip_ack::kItemTidFieldNumber;
const int hero_equip_ack::kSlotIdFieldNumber;
#endif  // !_MSC_VER

hero_equip_ack::hero_equip_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_ack::InitAsDefaultInstance() {
}

hero_equip_ack::hero_equip_ack(const hero_equip_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5432;
  ret_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  item_uuid_ = GOOGLE_ULONGLONG(0);
  item_tid_ = 0;
  slot_id_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_ack::~hero_equip_ack() {
  SharedDtor();
}

void hero_equip_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_ack_descriptor_;
}

const hero_equip_ack& hero_equip_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_ack* hero_equip_ack::default_instance_ = NULL;

hero_equip_ack* hero_equip_ack::New() const {
  return new hero_equip_ack;
}

void hero_equip_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5432;
    ret_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    item_uuid_ = GOOGLE_ULONGLONG(0);
    item_tid_ = 0;
    slot_id_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_uuid;
        break;
      }

      // optional uint64 item_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_uuid_)));
          set_has_item_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_tid;
        break;
      }

      // optional int32 item_tid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_tid_)));
          set_has_item_tid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slot_id;
        break;
      }

      // optional .SProtoSpace.EHeroEquipSlot slot_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroEquipSlot_IsValid(value)) {
            set_slot_id(static_cast< ::SProtoSpace::EHeroEquipSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 hero_uuid = 3;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uuid(), output);
  }

  // optional uint64 item_uuid = 4;
  if (has_item_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_uuid(), output);
  }

  // optional int32 item_tid = 5;
  if (has_item_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_tid(), output);
  }

  // optional .SProtoSpace.EHeroEquipSlot slot_id = 6;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->slot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 hero_uuid = 3;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uuid(), target);
  }

  // optional uint64 item_uuid = 4;
  if (has_item_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_uuid(), target);
  }

  // optional int32 item_tid = 5;
  if (has_item_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_tid(), target);
  }

  // optional .SProtoSpace.EHeroEquipSlot slot_id = 6;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->slot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 hero_uuid = 3;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional uint64 item_uuid = 4;
    if (has_item_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_uuid());
    }

    // optional int32 item_tid = 5;
    if (has_item_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_tid());
    }

    // optional .SProtoSpace.EHeroEquipSlot slot_id = 6;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_ack::MergeFrom(const hero_equip_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_item_uuid()) {
      set_item_uuid(from.item_uuid());
    }
    if (from.has_item_tid()) {
      set_item_tid(from.item_tid());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_ack::CopyFrom(const hero_equip_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_ack::IsInitialized() const {

  return true;
}

void hero_equip_ack::Swap(hero_equip_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(item_uuid_, other->item_uuid_);
    std::swap(item_tid_, other->item_tid_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_ack_descriptor_;
  metadata.reflection = hero_equip_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_unequip_req::kProtoidFieldNumber;
const int hero_unequip_req::kHeroIdFieldNumber;
const int hero_unequip_req::kItemIdFieldNumber;
const int hero_unequip_req::kSlotIdFieldNumber;
#endif  // !_MSC_VER

hero_unequip_req::hero_unequip_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_unequip_req::InitAsDefaultInstance() {
}

hero_unequip_req::hero_unequip_req(const hero_unequip_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_unequip_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5433;
  hero_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_unequip_req::~hero_unequip_req() {
  SharedDtor();
}

void hero_unequip_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_unequip_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_unequip_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_unequip_req_descriptor_;
}

const hero_unequip_req& hero_unequip_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_unequip_req* hero_unequip_req::default_instance_ = NULL;

hero_unequip_req* hero_unequip_req::New() const {
  return new hero_unequip_req;
}

void hero_unequip_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5433;
    hero_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_unequip_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_unequip_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // optional uint64 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  // optional uint32 slot_id = 4;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->slot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_unequip_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // optional uint64 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  // optional uint32 slot_id = 4;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->slot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_unequip_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 slot_id = 4;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_unequip_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_unequip_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_unequip_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_unequip_req::MergeFrom(const hero_unequip_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_unequip_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_unequip_req::CopyFrom(const hero_unequip_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_unequip_req::IsInitialized() const {

  return true;
}

void hero_unequip_req::Swap(hero_unequip_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_unequip_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_unequip_req_descriptor_;
  metadata.reflection = hero_unequip_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_unequip_ack::kProtoidFieldNumber;
const int hero_unequip_ack::kRetFieldNumber;
const int hero_unequip_ack::kHeroIdFieldNumber;
const int hero_unequip_ack::kItemIdFieldNumber;
const int hero_unequip_ack::kSlotIdFieldNumber;
#endif  // !_MSC_VER

hero_unequip_ack::hero_unequip_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_unequip_ack::InitAsDefaultInstance() {
}

hero_unequip_ack::hero_unequip_ack(const hero_unequip_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_unequip_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5434;
  ret_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_unequip_ack::~hero_unequip_ack() {
  SharedDtor();
}

void hero_unequip_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_unequip_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_unequip_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_unequip_ack_descriptor_;
}

const hero_unequip_ack& hero_unequip_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_unequip_ack* hero_unequip_ack::default_instance_ = NULL;

hero_unequip_ack* hero_unequip_ack::New() const {
  return new hero_unequip_ack;
}

void hero_unequip_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5434;
    ret_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_unequip_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_unequip_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // optional uint64 item_id = 4;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->item_id(), output);
  }

  // optional uint32 slot_id = 5;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->slot_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_unequip_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // optional uint64 item_id = 4;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->item_id(), target);
  }

  // optional uint32 slot_id = 5;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->slot_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_unequip_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional uint64 item_id = 4;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 slot_id = 5;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_unequip_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_unequip_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_unequip_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_unequip_ack::MergeFrom(const hero_unequip_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_unequip_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_unequip_ack::CopyFrom(const hero_unequip_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_unequip_ack::IsInitialized() const {

  return true;
}

void hero_unequip_ack::Swap(hero_unequip_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_unequip_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_unequip_ack_descriptor_;
  metadata.reflection = hero_unequip_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_level_up_req::kProtoidFieldNumber;
const int hero_equip_level_up_req::kItemIdFieldNumber;
#endif  // !_MSC_VER

hero_equip_level_up_req::hero_equip_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_level_up_req::InitAsDefaultInstance() {
}

hero_equip_level_up_req::hero_equip_level_up_req(const hero_equip_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5435;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_level_up_req::~hero_equip_level_up_req() {
  SharedDtor();
}

void hero_equip_level_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_level_up_req_descriptor_;
}

const hero_equip_level_up_req& hero_equip_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_level_up_req* hero_equip_level_up_req::default_instance_ = NULL;

hero_equip_level_up_req* hero_equip_level_up_req::New() const {
  return new hero_equip_level_up_req;
}

void hero_equip_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5435;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_level_up_req::MergeFrom(const hero_equip_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_level_up_req::CopyFrom(const hero_equip_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_level_up_req::IsInitialized() const {

  return true;
}

void hero_equip_level_up_req::Swap(hero_equip_level_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_level_up_req_descriptor_;
  metadata.reflection = hero_equip_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_level_up_ack::kProtoidFieldNumber;
const int hero_equip_level_up_ack::kRetFieldNumber;
const int hero_equip_level_up_ack::kItemIdFieldNumber;
#endif  // !_MSC_VER

hero_equip_level_up_ack::hero_equip_level_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_level_up_ack::InitAsDefaultInstance() {
}

hero_equip_level_up_ack::hero_equip_level_up_ack(const hero_equip_level_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_level_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5436;
  ret_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_level_up_ack::~hero_equip_level_up_ack() {
  SharedDtor();
}

void hero_equip_level_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_level_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_level_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_level_up_ack_descriptor_;
}

const hero_equip_level_up_ack& hero_equip_level_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_level_up_ack* hero_equip_level_up_ack::default_instance_ = NULL;

hero_equip_level_up_ack* hero_equip_level_up_ack::New() const {
  return new hero_equip_level_up_ack;
}

void hero_equip_level_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5436;
    ret_ = 0;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_level_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_level_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_level_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_level_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_level_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_level_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_level_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_level_up_ack::MergeFrom(const hero_equip_level_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_level_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_level_up_ack::CopyFrom(const hero_equip_level_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_level_up_ack::IsInitialized() const {

  return true;
}

void hero_equip_level_up_ack::Swap(hero_equip_level_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_level_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_level_up_ack_descriptor_;
  metadata.reflection = hero_equip_level_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_onekey_level_up_req::kProtoidFieldNumber;
const int hero_equip_onekey_level_up_req::kItemIdFieldNumber;
#endif  // !_MSC_VER

hero_equip_onekey_level_up_req::hero_equip_onekey_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_onekey_level_up_req::InitAsDefaultInstance() {
}

hero_equip_onekey_level_up_req::hero_equip_onekey_level_up_req(const hero_equip_onekey_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_onekey_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5437;
  item_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_onekey_level_up_req::~hero_equip_onekey_level_up_req() {
  SharedDtor();
}

void hero_equip_onekey_level_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_onekey_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_onekey_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_onekey_level_up_req_descriptor_;
}

const hero_equip_onekey_level_up_req& hero_equip_onekey_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_onekey_level_up_req* hero_equip_onekey_level_up_req::default_instance_ = NULL;

hero_equip_onekey_level_up_req* hero_equip_onekey_level_up_req::New() const {
  return new hero_equip_onekey_level_up_req;
}

void hero_equip_onekey_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5437;
    item_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_onekey_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_onekey_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_onekey_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_onekey_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_onekey_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_onekey_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_onekey_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_onekey_level_up_req::MergeFrom(const hero_equip_onekey_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_onekey_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_onekey_level_up_req::CopyFrom(const hero_equip_onekey_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_onekey_level_up_req::IsInitialized() const {

  return true;
}

void hero_equip_onekey_level_up_req::Swap(hero_equip_onekey_level_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_onekey_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_onekey_level_up_req_descriptor_;
  metadata.reflection = hero_equip_onekey_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_onekey_level_up_ack::kProtoidFieldNumber;
const int hero_equip_onekey_level_up_ack::kRetFieldNumber;
const int hero_equip_onekey_level_up_ack::kItemIdFieldNumber;
const int hero_equip_onekey_level_up_ack::kLevelFieldNumber;
const int hero_equip_onekey_level_up_ack::kCritFieldNumber;
const int hero_equip_onekey_level_up_ack::kMoneyFieldNumber;
#endif  // !_MSC_VER

hero_equip_onekey_level_up_ack::hero_equip_onekey_level_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_onekey_level_up_ack::InitAsDefaultInstance() {
}

hero_equip_onekey_level_up_ack::hero_equip_onekey_level_up_ack(const hero_equip_onekey_level_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_onekey_level_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5438;
  ret_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  crit_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_onekey_level_up_ack::~hero_equip_onekey_level_up_ack() {
  SharedDtor();
}

void hero_equip_onekey_level_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_onekey_level_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_onekey_level_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_onekey_level_up_ack_descriptor_;
}

const hero_equip_onekey_level_up_ack& hero_equip_onekey_level_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_onekey_level_up_ack* hero_equip_onekey_level_up_ack::default_instance_ = NULL;

hero_equip_onekey_level_up_ack* hero_equip_onekey_level_up_ack::New() const {
  return new hero_equip_onekey_level_up_ack;
}

void hero_equip_onekey_level_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5438;
    ret_ = 0;
    item_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    crit_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_onekey_level_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // optional int32 crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // optional int32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_onekey_level_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->crit(), output);
  }

  // optional int32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_onekey_level_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->crit(), target);
  }

  // optional int32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_onekey_level_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 crit = 5;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_onekey_level_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_onekey_level_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_onekey_level_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_onekey_level_up_ack::MergeFrom(const hero_equip_onekey_level_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_onekey_level_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_onekey_level_up_ack::CopyFrom(const hero_equip_onekey_level_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_onekey_level_up_ack::IsInitialized() const {

  return true;
}

void hero_equip_onekey_level_up_ack::Swap(hero_equip_onekey_level_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(item_id_, other->item_id_);
    std::swap(level_, other->level_);
    std::swap(crit_, other->crit_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_onekey_level_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_onekey_level_up_ack_descriptor_;
  metadata.reflection = hero_equip_onekey_level_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_level_info::kItemIdFieldNumber;
const int hero_equip_level_info::kLevelFieldNumber;
#endif  // !_MSC_VER

hero_equip_level_info::hero_equip_level_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_level_info::InitAsDefaultInstance() {
}

hero_equip_level_info::hero_equip_level_info(const hero_equip_level_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_level_info::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_level_info::~hero_equip_level_info() {
  SharedDtor();
}

void hero_equip_level_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_level_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_level_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_level_info_descriptor_;
}

const hero_equip_level_info& hero_equip_level_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_level_info* hero_equip_level_info::default_instance_ = NULL;

hero_equip_level_info* hero_equip_level_info::New() const {
  return new hero_equip_level_info;
}

void hero_equip_level_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_level_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_level_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_level_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_level_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_level_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_level_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_level_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_level_info::MergeFrom(const hero_equip_level_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_level_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_level_info::CopyFrom(const hero_equip_level_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_level_info::IsInitialized() const {

  return true;
}

void hero_equip_level_info::Swap(hero_equip_level_info* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_level_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_level_info_descriptor_;
  metadata.reflection = hero_equip_level_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_all_level_up_req::kProtoidFieldNumber;
const int hero_equip_all_level_up_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

hero_equip_all_level_up_req::hero_equip_all_level_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_all_level_up_req::InitAsDefaultInstance() {
}

hero_equip_all_level_up_req::hero_equip_all_level_up_req(const hero_equip_all_level_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_all_level_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5439;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_all_level_up_req::~hero_equip_all_level_up_req() {
  SharedDtor();
}

void hero_equip_all_level_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_all_level_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_all_level_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_all_level_up_req_descriptor_;
}

const hero_equip_all_level_up_req& hero_equip_all_level_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_all_level_up_req* hero_equip_all_level_up_req::default_instance_ = NULL;

hero_equip_all_level_up_req* hero_equip_all_level_up_req::New() const {
  return new hero_equip_all_level_up_req;
}

void hero_equip_all_level_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5439;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_all_level_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_all_level_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_all_level_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_all_level_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_all_level_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_all_level_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_all_level_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_all_level_up_req::MergeFrom(const hero_equip_all_level_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_all_level_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_all_level_up_req::CopyFrom(const hero_equip_all_level_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_all_level_up_req::IsInitialized() const {

  return true;
}

void hero_equip_all_level_up_req::Swap(hero_equip_all_level_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_all_level_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_all_level_up_req_descriptor_;
  metadata.reflection = hero_equip_all_level_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_all_level_up_ack::kProtoidFieldNumber;
const int hero_equip_all_level_up_ack::kRetFieldNumber;
const int hero_equip_all_level_up_ack::kHeroIdFieldNumber;
const int hero_equip_all_level_up_ack::kItemsFieldNumber;
const int hero_equip_all_level_up_ack::kCritFieldNumber;
const int hero_equip_all_level_up_ack::kMoneyFieldNumber;
#endif  // !_MSC_VER

hero_equip_all_level_up_ack::hero_equip_all_level_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_all_level_up_ack::InitAsDefaultInstance() {
}

hero_equip_all_level_up_ack::hero_equip_all_level_up_ack(const hero_equip_all_level_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_all_level_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5440;
  ret_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  crit_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_all_level_up_ack::~hero_equip_all_level_up_ack() {
  SharedDtor();
}

void hero_equip_all_level_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_all_level_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_all_level_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_all_level_up_ack_descriptor_;
}

const hero_equip_all_level_up_ack& hero_equip_all_level_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_all_level_up_ack* hero_equip_all_level_up_ack::default_instance_ = NULL;

hero_equip_all_level_up_ack* hero_equip_all_level_up_ack::New() const {
  return new hero_equip_all_level_up_ack;
}

void hero_equip_all_level_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5440;
    ret_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
    crit_ = 0;
    money_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_all_level_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.hero_equip_level_info items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_crit;
        break;
      }

      // optional int32 crit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // optional int32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_all_level_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // repeated .SProtoSpace.hero_equip_level_info items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // optional int32 crit = 5;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->crit(), output);
  }

  // optional int32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_all_level_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // repeated .SProtoSpace.hero_equip_level_info items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // optional int32 crit = 5;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->crit(), target);
  }

  // optional int32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_all_level_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 crit = 5;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  // repeated .SProtoSpace.hero_equip_level_info items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_all_level_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_all_level_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_all_level_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_all_level_up_ack::MergeFrom(const hero_equip_all_level_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_all_level_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_all_level_up_ack::CopyFrom(const hero_equip_all_level_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_all_level_up_ack::IsInitialized() const {

  return true;
}

void hero_equip_all_level_up_ack::Swap(hero_equip_all_level_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(hero_id_, other->hero_id_);
    items_.Swap(&other->items_);
    std::swap(crit_, other->crit_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_all_level_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_all_level_up_ack_descriptor_;
  metadata.reflection = hero_equip_all_level_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_onekey_req::kProtoidFieldNumber;
const int hero_equip_onekey_req::kHeroIdFieldNumber;
const int hero_equip_onekey_req::kEquipsFieldNumber;
#endif  // !_MSC_VER

hero_equip_onekey_req::hero_equip_onekey_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_onekey_req::InitAsDefaultInstance() {
}

hero_equip_onekey_req::hero_equip_onekey_req(const hero_equip_onekey_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_onekey_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5441;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_onekey_req::~hero_equip_onekey_req() {
  SharedDtor();
}

void hero_equip_onekey_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_onekey_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_onekey_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_onekey_req_descriptor_;
}

const hero_equip_onekey_req& hero_equip_onekey_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_onekey_req* hero_equip_onekey_req::default_instance_ = NULL;

hero_equip_onekey_req* hero_equip_onekey_req::New() const {
  return new hero_equip_onekey_req;
}

void hero_equip_onekey_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5441;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_onekey_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.hero_equip_data equips = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_onekey_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 3;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_onekey_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 3;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_onekey_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated .SProtoSpace.hero_equip_data equips = 3;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_onekey_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_onekey_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_onekey_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_onekey_req::MergeFrom(const hero_equip_onekey_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_onekey_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_onekey_req::CopyFrom(const hero_equip_onekey_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_onekey_req::IsInitialized() const {

  return true;
}

void hero_equip_onekey_req::Swap(hero_equip_onekey_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_onekey_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_onekey_req_descriptor_;
  metadata.reflection = hero_equip_onekey_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_equip_onekey_ack::kProtoidFieldNumber;
const int hero_equip_onekey_ack::kRetFieldNumber;
const int hero_equip_onekey_ack::kHeroIdFieldNumber;
const int hero_equip_onekey_ack::kEquipsFieldNumber;
#endif  // !_MSC_VER

hero_equip_onekey_ack::hero_equip_onekey_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_equip_onekey_ack::InitAsDefaultInstance() {
}

hero_equip_onekey_ack::hero_equip_onekey_ack(const hero_equip_onekey_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_equip_onekey_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5442;
  ret_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_equip_onekey_ack::~hero_equip_onekey_ack() {
  SharedDtor();
}

void hero_equip_onekey_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_equip_onekey_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_equip_onekey_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_equip_onekey_ack_descriptor_;
}

const hero_equip_onekey_ack& hero_equip_onekey_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_equip_onekey_ack* hero_equip_onekey_ack::default_instance_ = NULL;

hero_equip_onekey_ack* hero_equip_onekey_ack::New() const {
  return new hero_equip_onekey_ack;
}

void hero_equip_onekey_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5442;
    ret_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_equip_onekey_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.hero_equip_data equips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_equip_onekey_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_equip_onekey_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_equip_onekey_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated .SProtoSpace.hero_equip_data equips = 4;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_equip_onekey_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_equip_onekey_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_equip_onekey_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_equip_onekey_ack::MergeFrom(const hero_equip_onekey_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_equip_onekey_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_equip_onekey_ack::CopyFrom(const hero_equip_onekey_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_equip_onekey_ack::IsInitialized() const {

  return true;
}

void hero_equip_onekey_ack::Swap(hero_equip_onekey_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(hero_id_, other->hero_id_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_equip_onekey_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_equip_onekey_ack_descriptor_;
  metadata.reflection = hero_equip_onekey_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_unequip_onekey_req::kProtoidFieldNumber;
const int hero_unequip_onekey_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

hero_unequip_onekey_req::hero_unequip_onekey_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_unequip_onekey_req::InitAsDefaultInstance() {
}

hero_unequip_onekey_req::hero_unequip_onekey_req(const hero_unequip_onekey_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_unequip_onekey_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5443;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_unequip_onekey_req::~hero_unequip_onekey_req() {
  SharedDtor();
}

void hero_unequip_onekey_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_unequip_onekey_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_unequip_onekey_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_unequip_onekey_req_descriptor_;
}

const hero_unequip_onekey_req& hero_unequip_onekey_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_unequip_onekey_req* hero_unequip_onekey_req::default_instance_ = NULL;

hero_unequip_onekey_req* hero_unequip_onekey_req::New() const {
  return new hero_unequip_onekey_req;
}

void hero_unequip_onekey_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5443;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_unequip_onekey_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_unequip_onekey_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_unequip_onekey_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_unequip_onekey_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_unequip_onekey_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_unequip_onekey_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_unequip_onekey_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_unequip_onekey_req::MergeFrom(const hero_unequip_onekey_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_unequip_onekey_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_unequip_onekey_req::CopyFrom(const hero_unequip_onekey_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_unequip_onekey_req::IsInitialized() const {

  return true;
}

void hero_unequip_onekey_req::Swap(hero_unequip_onekey_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_unequip_onekey_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_unequip_onekey_req_descriptor_;
  metadata.reflection = hero_unequip_onekey_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_unequip_onekey_ack::kProtoidFieldNumber;
const int hero_unequip_onekey_ack::kRetFieldNumber;
const int hero_unequip_onekey_ack::kHeroIdFieldNumber;
const int hero_unequip_onekey_ack::kEquipsFieldNumber;
#endif  // !_MSC_VER

hero_unequip_onekey_ack::hero_unequip_onekey_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_unequip_onekey_ack::InitAsDefaultInstance() {
}

hero_unequip_onekey_ack::hero_unequip_onekey_ack(const hero_unequip_onekey_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_unequip_onekey_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5444;
  ret_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_unequip_onekey_ack::~hero_unequip_onekey_ack() {
  SharedDtor();
}

void hero_unequip_onekey_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_unequip_onekey_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_unequip_onekey_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_unequip_onekey_ack_descriptor_;
}

const hero_unequip_onekey_ack& hero_unequip_onekey_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

hero_unequip_onekey_ack* hero_unequip_onekey_ack::default_instance_ = NULL;

hero_unequip_onekey_ack* hero_unequip_onekey_ack::New() const {
  return new hero_unequip_onekey_ack;
}

void hero_unequip_onekey_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5444;
    ret_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_unequip_onekey_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equips;
        break;
      }

      // repeated .SProtoSpace.hero_equip_data equips = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_unequip_onekey_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_id(), output);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_unequip_onekey_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 hero_id = 3;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_id(), target);
  }

  // repeated .SProtoSpace.hero_equip_data equips = 4;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_unequip_onekey_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  // repeated .SProtoSpace.hero_equip_data equips = 4;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_unequip_onekey_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_unequip_onekey_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_unequip_onekey_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_unequip_onekey_ack::MergeFrom(const hero_unequip_onekey_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_unequip_onekey_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_unequip_onekey_ack::CopyFrom(const hero_unequip_onekey_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_unequip_onekey_ack::IsInitialized() const {

  return true;
}

void hero_unequip_onekey_ack::Swap(hero_unequip_onekey_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(hero_id_, other->hero_id_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_unequip_onekey_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_unequip_onekey_ack_descriptor_;
  metadata.reflection = hero_unequip_onekey_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gm_operation_req::kProtoidFieldNumber;
const int gm_operation_req::kCmdFieldNumber;
#endif  // !_MSC_VER

gm_operation_req::gm_operation_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_operation_req::InitAsDefaultInstance() {
}

gm_operation_req::gm_operation_req(const gm_operation_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_operation_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5014;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_operation_req::~gm_operation_req() {
  SharedDtor();
}

void gm_operation_req::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void gm_operation_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_operation_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_operation_req_descriptor_;
}

const gm_operation_req& gm_operation_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

gm_operation_req* gm_operation_req::default_instance_ = NULL;

gm_operation_req* gm_operation_req::New() const {
  return new gm_operation_req;
}

void gm_operation_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5014;
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_operation_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cmd;
        break;
      }

      // optional string cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_operation_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_operation_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_operation_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_operation_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_operation_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_operation_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_operation_req::MergeFrom(const gm_operation_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_operation_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_operation_req::CopyFrom(const gm_operation_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_operation_req::IsInitialized() const {

  return true;
}

void gm_operation_req::Swap(gm_operation_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_operation_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_operation_req_descriptor_;
  metadata.reflection = gm_operation_req_reflection_;
  return metadata;
}


// ===================================================================

::std::string* gm_operation_ack::_default_info_ = NULL;
#ifndef _MSC_VER
const int gm_operation_ack::kProtoidFieldNumber;
const int gm_operation_ack::kRetFieldNumber;
const int gm_operation_ack::kTypeFieldNumber;
const int gm_operation_ack::kInfoFieldNumber;
#endif  // !_MSC_VER

gm_operation_ack::gm_operation_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gm_operation_ack::InitAsDefaultInstance() {
}

gm_operation_ack::gm_operation_ack(const gm_operation_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gm_operation_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5015;
  ret_ = 0;
  type_ = 0;
  info_ = const_cast< ::std::string*>(_default_info_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gm_operation_ack::~gm_operation_ack() {
  SharedDtor();
}

void gm_operation_ack::SharedDtor() {
  if (info_ != _default_info_) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void gm_operation_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gm_operation_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gm_operation_ack_descriptor_;
}

const gm_operation_ack& gm_operation_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

gm_operation_ack* gm_operation_ack::default_instance_ = NULL;

gm_operation_ack* gm_operation_ack::New() const {
  return new gm_operation_ack;
}

void gm_operation_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5015;
    ret_ = 0;
    type_ = 0;
    if (has_info()) {
      if (info_ != _default_info_) {
        info_->assign(*_default_info_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gm_operation_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional string info = 4 [default = "Failed"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gm_operation_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional string info = 4 [default = "Failed"];
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gm_operation_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional string info = 4 [default = "Failed"];
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gm_operation_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string info = 4 [default = "Failed"];
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gm_operation_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gm_operation_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gm_operation_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gm_operation_ack::MergeFrom(const gm_operation_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gm_operation_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gm_operation_ack::CopyFrom(const gm_operation_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gm_operation_ack::IsInitialized() const {

  return true;
}

void gm_operation_ack::Swap(gm_operation_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gm_operation_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gm_operation_ack_descriptor_;
  metadata.reflection = gm_operation_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int leave_game_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

leave_game_req::leave_game_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void leave_game_req::InitAsDefaultInstance() {
}

leave_game_req::leave_game_req(const leave_game_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void leave_game_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5010;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

leave_game_req::~leave_game_req() {
  SharedDtor();
}

void leave_game_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void leave_game_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* leave_game_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return leave_game_req_descriptor_;
}

const leave_game_req& leave_game_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

leave_game_req* leave_game_req::default_instance_ = NULL;

leave_game_req* leave_game_req::New() const {
  return new leave_game_req;
}

void leave_game_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5010;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool leave_game_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = leave_game_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void leave_game_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = leave_game_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* leave_game_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = leave_game_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int leave_game_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = leave_game_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void leave_game_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const leave_game_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const leave_game_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void leave_game_req::MergeFrom(const leave_game_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void leave_game_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void leave_game_req::CopyFrom(const leave_game_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool leave_game_req::IsInitialized() const {

  return true;
}

void leave_game_req::Swap(leave_game_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata leave_game_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = leave_game_req_descriptor_;
  metadata.reflection = leave_game_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int kick_game_ntf::kProtoidFieldNumber;
const int kick_game_ntf::kReasonFieldNumber;
#endif  // !_MSC_VER

kick_game_ntf::kick_game_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void kick_game_ntf::InitAsDefaultInstance() {
}

kick_game_ntf::kick_game_ntf(const kick_game_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void kick_game_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5016;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

kick_game_ntf::~kick_game_ntf() {
  SharedDtor();
}

void kick_game_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void kick_game_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* kick_game_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return kick_game_ntf_descriptor_;
}

const kick_game_ntf& kick_game_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

kick_game_ntf* kick_game_ntf::default_instance_ = NULL;

kick_game_ntf* kick_game_ntf::New() const {
  return new kick_game_ntf;
}

void kick_game_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5016;
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool kick_game_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = kick_game_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required .SProtoSpace.eKickoutReason reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eKickoutReason_IsValid(value)) {
            set_reason(static_cast< ::SProtoSpace::eKickoutReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void kick_game_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = kick_game_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required .SProtoSpace.eKickoutReason reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* kick_game_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = kick_game_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required .SProtoSpace.eKickoutReason reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int kick_game_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = kick_game_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required .SProtoSpace.eKickoutReason reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void kick_game_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const kick_game_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const kick_game_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void kick_game_ntf::MergeFrom(const kick_game_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void kick_game_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void kick_game_ntf::CopyFrom(const kick_game_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool kick_game_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void kick_game_ntf::Swap(kick_game_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata kick_game_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = kick_game_ntf_descriptor_;
  metadata.reflection = kick_game_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int beat_heart_ntf::kProtoidFieldNumber;
#endif  // !_MSC_VER

beat_heart_ntf::beat_heart_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void beat_heart_ntf::InitAsDefaultInstance() {
}

beat_heart_ntf::beat_heart_ntf(const beat_heart_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void beat_heart_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5017;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

beat_heart_ntf::~beat_heart_ntf() {
  SharedDtor();
}

void beat_heart_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void beat_heart_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* beat_heart_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return beat_heart_ntf_descriptor_;
}

const beat_heart_ntf& beat_heart_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

beat_heart_ntf* beat_heart_ntf::default_instance_ = NULL;

beat_heart_ntf* beat_heart_ntf::New() const {
  return new beat_heart_ntf;
}

void beat_heart_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5017;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool beat_heart_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = beat_heart_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void beat_heart_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = beat_heart_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* beat_heart_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = beat_heart_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int beat_heart_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = beat_heart_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void beat_heart_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const beat_heart_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const beat_heart_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void beat_heart_ntf::MergeFrom(const beat_heart_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void beat_heart_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void beat_heart_ntf::CopyFrom(const beat_heart_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool beat_heart_ntf::IsInitialized() const {

  return true;
}

void beat_heart_ntf::Swap(beat_heart_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata beat_heart_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = beat_heart_ntf_descriptor_;
  metadata.reflection = beat_heart_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int sync_time_ntf::kProtoidFieldNumber;
const int sync_time_ntf::kTimeFieldNumber;
#endif  // !_MSC_VER

sync_time_ntf::sync_time_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sync_time_ntf::InitAsDefaultInstance() {
}

sync_time_ntf::sync_time_ntf(const sync_time_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sync_time_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5018;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sync_time_ntf::~sync_time_ntf() {
  SharedDtor();
}

void sync_time_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void sync_time_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sync_time_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sync_time_ntf_descriptor_;
}

const sync_time_ntf& sync_time_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

sync_time_ntf* sync_time_ntf::default_instance_ = NULL;

sync_time_ntf* sync_time_ntf::New() const {
  return new sync_time_ntf;
}

void sync_time_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5018;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sync_time_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_time_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sync_time_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_time_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sync_time_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_time_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sync_time_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_time_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sync_time_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sync_time_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sync_time_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sync_time_ntf::MergeFrom(const sync_time_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sync_time_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sync_time_ntf::CopyFrom(const sync_time_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sync_time_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void sync_time_ntf::Swap(sync_time_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sync_time_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sync_time_ntf_descriptor_;
  metadata.reflection = sync_time_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_heart_beat_req::kProtoidFieldNumber;
const int client_heart_beat_req::kCheckSumFieldNumber;
#endif  // !_MSC_VER

client_heart_beat_req::client_heart_beat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_heart_beat_req::InitAsDefaultInstance() {
}

client_heart_beat_req::client_heart_beat_req(const client_heart_beat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_heart_beat_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5050;
  check_sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_heart_beat_req::~client_heart_beat_req() {
  SharedDtor();
}

void client_heart_beat_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_heart_beat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_heart_beat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_heart_beat_req_descriptor_;
}

const client_heart_beat_req& client_heart_beat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_heart_beat_req* client_heart_beat_req::default_instance_ = NULL;

client_heart_beat_req* client_heart_beat_req::New() const {
  return new client_heart_beat_req;
}

void client_heart_beat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5050;
    check_sum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_heart_beat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_check_sum;
        break;
      }

      // optional uint32 check_sum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_sum_)));
          set_has_check_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_heart_beat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 check_sum = 2;
  if (has_check_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->check_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_heart_beat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 check_sum = 2;
  if (has_check_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->check_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_heart_beat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 check_sum = 2;
    if (has_check_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_heart_beat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_heart_beat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_heart_beat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_heart_beat_req::MergeFrom(const client_heart_beat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_check_sum()) {
      set_check_sum(from.check_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_heart_beat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_heart_beat_req::CopyFrom(const client_heart_beat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_heart_beat_req::IsInitialized() const {

  return true;
}

void client_heart_beat_req::Swap(client_heart_beat_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_heart_beat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_heart_beat_req_descriptor_;
  metadata.reflection = client_heart_beat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_heart_beat_ack::kProtoidFieldNumber;
const int client_heart_beat_ack::kCheckSumFieldNumber;
#endif  // !_MSC_VER

client_heart_beat_ack::client_heart_beat_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_heart_beat_ack::InitAsDefaultInstance() {
}

client_heart_beat_ack::client_heart_beat_ack(const client_heart_beat_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_heart_beat_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5051;
  check_sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_heart_beat_ack::~client_heart_beat_ack() {
  SharedDtor();
}

void client_heart_beat_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_heart_beat_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_heart_beat_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_heart_beat_ack_descriptor_;
}

const client_heart_beat_ack& client_heart_beat_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_heart_beat_ack* client_heart_beat_ack::default_instance_ = NULL;

client_heart_beat_ack* client_heart_beat_ack::New() const {
  return new client_heart_beat_ack;
}

void client_heart_beat_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5051;
    check_sum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_heart_beat_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_check_sum;
        break;
      }

      // optional uint32 check_sum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &check_sum_)));
          set_has_check_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_heart_beat_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 check_sum = 2;
  if (has_check_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->check_sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_heart_beat_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 check_sum = 2;
  if (has_check_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->check_sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_heart_beat_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 check_sum = 2;
    if (has_check_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->check_sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_heart_beat_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_heart_beat_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_heart_beat_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_heart_beat_ack::MergeFrom(const client_heart_beat_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_check_sum()) {
      set_check_sum(from.check_sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_heart_beat_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_heart_beat_ack::CopyFrom(const client_heart_beat_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_heart_beat_ack::IsInitialized() const {

  return true;
}

void client_heart_beat_ack::Swap(client_heart_beat_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(check_sum_, other->check_sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_heart_beat_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_heart_beat_ack_descriptor_;
  metadata.reflection = client_heart_beat_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_info_ntf::kProtoidFieldNumber;
const int role_player_info_ntf::kProFieldNumber;
const int role_player_info_ntf::kDataFieldNumber;
const int role_player_info_ntf::kLikedListFieldNumber;
const int role_player_info_ntf::kBorderFieldNumber;
const int role_player_info_ntf::kTalentGradeFieldNumber;
const int role_player_info_ntf::kFashionsPWearingFieldNumber;
#endif  // !_MSC_VER

role_player_info_ntf::role_player_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_info_ntf::InitAsDefaultInstance() {
  pro_ = const_cast< ::SProtoSpace::player_property*>(&::SProtoSpace::player_property::default_instance());
  data_ = const_cast< ::SProtoSpace::player_data*>(&::SProtoSpace::player_data::default_instance());
  fashions_p_wearing_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
}

role_player_info_ntf::role_player_info_ntf(const role_player_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5200;
  pro_ = NULL;
  data_ = NULL;
  border_ = 0;
  talent_grade_ = 0;
  fashions_p_wearing_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_info_ntf::~role_player_info_ntf() {
  SharedDtor();
}

void role_player_info_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete pro_;
    delete data_;
    delete fashions_p_wearing_;
  }
}

void role_player_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_info_ntf_descriptor_;
}

const role_player_info_ntf& role_player_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_info_ntf* role_player_info_ntf::default_instance_ = NULL;

role_player_info_ntf* role_player_info_ntf::New() const {
  return new role_player_info_ntf;
}

void role_player_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5200;
    if (has_pro()) {
      if (pro_ != NULL) pro_->::SProtoSpace::player_property::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::player_data::Clear();
    }
    border_ = 0;
    talent_grade_ = 0;
    if (has_fashions_p_wearing()) {
      if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
    }
  }
  liked_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pro;
        break;
      }

      // optional .SProtoSpace.player_property pro = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.player_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_liked_list;
        break;
      }

      // repeated uint64 liked_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_liked_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_liked_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_liked_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_liked_list;
        if (input->ExpectTag(40)) goto parse_border;
        break;
      }

      // optional int32 border = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_)));
          set_has_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_talent_grade;
        break;
      }

      // optional int32 talent_grade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talent_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talent_grade_)));
          set_has_talent_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fashions_p_wearing;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashions_p_wearing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions_p_wearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashions_p_wearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.player_property pro = 2;
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pro(), output);
  }

  // optional .SProtoSpace.player_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // repeated uint64 liked_list = 4;
  for (int i = 0; i < this->liked_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->liked_list(i), output);
  }

  // optional int32 border = 5;
  if (has_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->border(), output);
  }

  // optional int32 talent_grade = 6;
  if (has_talent_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->talent_grade(), output);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 7;
  if (has_fashions_p_wearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fashions_p_wearing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.player_property pro = 2;
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pro(), target);
  }

  // optional .SProtoSpace.player_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // repeated uint64 liked_list = 4;
  for (int i = 0; i < this->liked_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->liked_list(i), target);
  }

  // optional int32 border = 5;
  if (has_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->border(), target);
  }

  // optional int32 talent_grade = 6;
  if (has_talent_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->talent_grade(), target);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 7;
  if (has_fashions_p_wearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fashions_p_wearing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.player_property pro = 2;
    if (has_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pro());
    }

    // optional .SProtoSpace.player_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 border = 5;
    if (has_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border());
    }

    // optional int32 talent_grade = 6;
    if (has_talent_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talent_grade());
    }

    // optional .SProtoSpace.fashions_pack fashions_p_wearing = 7;
    if (has_fashions_p_wearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashions_p_wearing());
    }

  }
  // repeated uint64 liked_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->liked_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->liked_list(i));
    }
    total_size += 1 * this->liked_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_info_ntf::MergeFrom(const role_player_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  liked_list_.MergeFrom(from.liked_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pro()) {
      mutable_pro()->::SProtoSpace::player_property::MergeFrom(from.pro());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::player_data::MergeFrom(from.data());
    }
    if (from.has_border()) {
      set_border(from.border());
    }
    if (from.has_talent_grade()) {
      set_talent_grade(from.talent_grade());
    }
    if (from.has_fashions_p_wearing()) {
      mutable_fashions_p_wearing()->::SProtoSpace::fashions_pack::MergeFrom(from.fashions_p_wearing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_info_ntf::CopyFrom(const role_player_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_info_ntf::IsInitialized() const {

  if (has_pro()) {
    if (!this->pro().IsInitialized()) return false;
  }
  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void role_player_info_ntf::Swap(role_player_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pro_, other->pro_);
    std::swap(data_, other->data_);
    liked_list_.Swap(&other->liked_list_);
    std::swap(border_, other->border_);
    std::swap(talent_grade_, other->talent_grade_);
    std::swap(fashions_p_wearing_, other->fashions_p_wearing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_info_ntf_descriptor_;
  metadata.reflection = role_player_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_info_update_ntf::kProtoidFieldNumber;
const int role_player_info_update_ntf::kDataFieldNumber;
const int role_player_info_update_ntf::kProFieldNumber;
#endif  // !_MSC_VER

role_player_info_update_ntf::role_player_info_update_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_info_update_ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::player_data*>(&::SProtoSpace::player_data::default_instance());
  pro_ = const_cast< ::SProtoSpace::player_property*>(&::SProtoSpace::player_property::default_instance());
}

role_player_info_update_ntf::role_player_info_update_ntf(const role_player_info_update_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_info_update_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5201;
  data_ = NULL;
  pro_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_info_update_ntf::~role_player_info_update_ntf() {
  SharedDtor();
}

void role_player_info_update_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
    delete pro_;
  }
}

void role_player_info_update_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_info_update_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_info_update_ntf_descriptor_;
}

const role_player_info_update_ntf& role_player_info_update_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_info_update_ntf* role_player_info_update_ntf::default_instance_ = NULL;

role_player_info_update_ntf* role_player_info_update_ntf::New() const {
  return new role_player_info_update_ntf;
}

void role_player_info_update_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5201;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::player_data::Clear();
    }
    if (has_pro()) {
      if (pro_ != NULL) pro_->::SProtoSpace::player_property::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_info_update_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_update_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.player_data data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pro;
        break;
      }

      // optional .SProtoSpace.player_property pro = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_info_update_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_update_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.player_data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional .SProtoSpace.player_property pro = 3;
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_info_update_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_update_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.player_data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional .SProtoSpace.player_property pro = 3;
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_info_update_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_update_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.player_data data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional .SProtoSpace.player_property pro = 3;
    if (has_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pro());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_info_update_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_info_update_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_info_update_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_info_update_ntf::MergeFrom(const role_player_info_update_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::player_data::MergeFrom(from.data());
    }
    if (from.has_pro()) {
      mutable_pro()->::SProtoSpace::player_property::MergeFrom(from.pro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_info_update_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_info_update_ntf::CopyFrom(const role_player_info_update_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_info_update_ntf::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  if (has_pro()) {
    if (!this->pro().IsInitialized()) return false;
  }
  return true;
}

void role_player_info_update_ntf::Swap(role_player_info_update_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(data_, other->data_);
    std::swap(pro_, other->pro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_info_update_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_info_update_ntf_descriptor_;
  metadata.reflection = role_player_info_update_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_fight_score_ntf::kProtoidFieldNumber;
const int role_fight_score_ntf::kValueFieldNumber;
#endif  // !_MSC_VER

role_fight_score_ntf::role_fight_score_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_fight_score_ntf::InitAsDefaultInstance() {
}

role_fight_score_ntf::role_fight_score_ntf(const role_fight_score_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_fight_score_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7206;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_fight_score_ntf::~role_fight_score_ntf() {
  SharedDtor();
}

void role_fight_score_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_fight_score_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_fight_score_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_fight_score_ntf_descriptor_;
}

const role_fight_score_ntf& role_fight_score_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_fight_score_ntf* role_fight_score_ntf::default_instance_ = NULL;

role_fight_score_ntf* role_fight_score_ntf::New() const {
  return new role_fight_score_ntf;
}

void role_fight_score_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7206;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_fight_score_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_fight_score_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_fight_score_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_fight_score_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_fight_score_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_fight_score_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_fight_score_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_fight_score_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_fight_score_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_fight_score_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_fight_score_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_fight_score_ntf::MergeFrom(const role_fight_score_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_fight_score_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_fight_score_ntf::CopyFrom(const role_fight_score_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_fight_score_ntf::IsInitialized() const {

  return true;
}

void role_fight_score_ntf::Swap(role_fight_score_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_fight_score_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_fight_score_ntf_descriptor_;
  metadata.reflection = role_fight_score_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_change_req::kProtoidFieldNumber;
const int role_player_change_req::kToPlayerIdFieldNumber;
#endif  // !_MSC_VER

role_player_change_req::role_player_change_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_change_req::InitAsDefaultInstance() {
}

role_player_change_req::role_player_change_req(const role_player_change_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_change_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5202;
  to_player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_change_req::~role_player_change_req() {
  SharedDtor();
}

void role_player_change_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_change_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_change_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_change_req_descriptor_;
}

const role_player_change_req& role_player_change_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_change_req* role_player_change_req::default_instance_ = NULL;

role_player_change_req* role_player_change_req::New() const {
  return new role_player_change_req;
}

void role_player_change_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5202;
    to_player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_change_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_to_player_id;
        break;
      }

      // required int32 to_player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_player_id_)));
          set_has_to_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_change_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 to_player_id = 2;
  if (has_to_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_change_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 to_player_id = 2;
  if (has_to_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_change_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 to_player_id = 2;
    if (has_to_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_change_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_change_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_change_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_change_req::MergeFrom(const role_player_change_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_to_player_id()) {
      set_to_player_id(from.to_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_change_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_change_req::CopyFrom(const role_player_change_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_change_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void role_player_change_req::Swap(role_player_change_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(to_player_id_, other->to_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_change_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_change_req_descriptor_;
  metadata.reflection = role_player_change_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_change_ack::kProtoidFieldNumber;
const int role_player_change_ack::kResultFieldNumber;
const int role_player_change_ack::kFromPlayerIdFieldNumber;
const int role_player_change_ack::kToPlayerIdFieldNumber;
#endif  // !_MSC_VER

role_player_change_ack::role_player_change_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_change_ack::InitAsDefaultInstance() {
}

role_player_change_ack::role_player_change_ack(const role_player_change_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_change_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5203;
  result_ = 0;
  from_player_id_ = 0;
  to_player_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_change_ack::~role_player_change_ack() {
  SharedDtor();
}

void role_player_change_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_change_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_change_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_change_ack_descriptor_;
}

const role_player_change_ack& role_player_change_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_change_ack* role_player_change_ack::default_instance_ = NULL;

role_player_change_ack* role_player_change_ack::New() const {
  return new role_player_change_ack;
}

void role_player_change_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5203;
    result_ = 0;
    from_player_id_ = 0;
    to_player_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_change_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player_id;
        break;
      }

      // required int32 from_player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_player_id_)));
          set_has_from_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_player_id;
        break;
      }

      // required int32 to_player_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_player_id_)));
          set_has_to_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_change_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 from_player_id = 3;
  if (has_from_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->from_player_id(), output);
  }

  // required int32 to_player_id = 4;
  if (has_to_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->to_player_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_change_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int32 from_player_id = 3;
  if (has_from_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->from_player_id(), target);
  }

  // required int32 to_player_id = 4;
  if (has_to_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->to_player_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_change_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 from_player_id = 3;
    if (has_from_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_player_id());
    }

    // required int32 to_player_id = 4;
    if (has_to_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->to_player_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_change_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_change_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_change_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_change_ack::MergeFrom(const role_player_change_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_from_player_id()) {
      set_from_player_id(from.from_player_id());
    }
    if (from.has_to_player_id()) {
      set_to_player_id(from.to_player_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_change_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_change_ack::CopyFrom(const role_player_change_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_change_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void role_player_change_ack::Swap(role_player_change_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(from_player_id_, other->from_player_id_);
    std::swap(to_player_id_, other->to_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_change_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_change_ack_descriptor_;
  metadata.reflection = role_player_change_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_active_skin_req::kProtoidFieldNumber;
const int role_player_active_skin_req::kPlayerIdFieldNumber;
const int role_player_active_skin_req::kActiveSkinIdFieldNumber;
#endif  // !_MSC_VER

role_player_active_skin_req::role_player_active_skin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_active_skin_req::InitAsDefaultInstance() {
}

role_player_active_skin_req::role_player_active_skin_req(const role_player_active_skin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_active_skin_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5204;
  player_id_ = 0;
  active_skin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_active_skin_req::~role_player_active_skin_req() {
  SharedDtor();
}

void role_player_active_skin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_active_skin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_active_skin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_active_skin_req_descriptor_;
}

const role_player_active_skin_req& role_player_active_skin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_active_skin_req* role_player_active_skin_req::default_instance_ = NULL;

role_player_active_skin_req* role_player_active_skin_req::New() const {
  return new role_player_active_skin_req;
}

void role_player_active_skin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5204;
    player_id_ = 0;
    active_skin_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_active_skin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_skin_id;
        break;
      }

      // required int32 active_skin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_skin_id_)));
          set_has_active_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_active_skin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // required int32 active_skin_id = 3;
  if (has_active_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_skin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_active_skin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // required int32 active_skin_id = 3;
  if (has_active_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->active_skin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_active_skin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 active_skin_id = 3;
    if (has_active_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_skin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_active_skin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_active_skin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_active_skin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_active_skin_req::MergeFrom(const role_player_active_skin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_active_skin_id()) {
      set_active_skin_id(from.active_skin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_active_skin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_active_skin_req::CopyFrom(const role_player_active_skin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_active_skin_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void role_player_active_skin_req::Swap(role_player_active_skin_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(player_id_, other->player_id_);
    std::swap(active_skin_id_, other->active_skin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_active_skin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_active_skin_req_descriptor_;
  metadata.reflection = role_player_active_skin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_active_skin_ack::kProtoidFieldNumber;
const int role_player_active_skin_ack::kResultFieldNumber;
const int role_player_active_skin_ack::kPlayerIdFieldNumber;
const int role_player_active_skin_ack::kActiveSkinIdFieldNumber;
#endif  // !_MSC_VER

role_player_active_skin_ack::role_player_active_skin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_active_skin_ack::InitAsDefaultInstance() {
}

role_player_active_skin_ack::role_player_active_skin_ack(const role_player_active_skin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_active_skin_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5205;
  result_ = 0;
  player_id_ = 0;
  active_skin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_active_skin_ack::~role_player_active_skin_ack() {
  SharedDtor();
}

void role_player_active_skin_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_active_skin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_active_skin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_active_skin_ack_descriptor_;
}

const role_player_active_skin_ack& role_player_active_skin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_active_skin_ack* role_player_active_skin_ack::default_instance_ = NULL;

role_player_active_skin_ack* role_player_active_skin_ack::New() const {
  return new role_player_active_skin_ack;
}

void role_player_active_skin_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5205;
    result_ = 0;
    player_id_ = 0;
    active_skin_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_active_skin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_active_skin_id;
        break;
      }

      // required int32 active_skin_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_skin_id_)));
          set_has_active_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_active_skin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // required int32 active_skin_id = 4;
  if (has_active_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->active_skin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_active_skin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // required int32 active_skin_id = 4;
  if (has_active_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->active_skin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_active_skin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 active_skin_id = 4;
    if (has_active_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_skin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_active_skin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_active_skin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_active_skin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_active_skin_ack::MergeFrom(const role_player_active_skin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_active_skin_id()) {
      set_active_skin_id(from.active_skin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_active_skin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_active_skin_ack::CopyFrom(const role_player_active_skin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_active_skin_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void role_player_active_skin_ack::Swap(role_player_active_skin_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(active_skin_id_, other->active_skin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_active_skin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_active_skin_ack_descriptor_;
  metadata.reflection = role_player_active_skin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_buy_skin_req::kProtoidFieldNumber;
const int role_player_buy_skin_req::kPlayerIdFieldNumber;
const int role_player_buy_skin_req::kSkinIdFieldNumber;
#endif  // !_MSC_VER

role_player_buy_skin_req::role_player_buy_skin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_buy_skin_req::InitAsDefaultInstance() {
}

role_player_buy_skin_req::role_player_buy_skin_req(const role_player_buy_skin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_buy_skin_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5206;
  player_id_ = 0;
  skin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_buy_skin_req::~role_player_buy_skin_req() {
  SharedDtor();
}

void role_player_buy_skin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_buy_skin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_buy_skin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_buy_skin_req_descriptor_;
}

const role_player_buy_skin_req& role_player_buy_skin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_buy_skin_req* role_player_buy_skin_req::default_instance_ = NULL;

role_player_buy_skin_req* role_player_buy_skin_req::New() const {
  return new role_player_buy_skin_req;
}

void role_player_buy_skin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5206;
    player_id_ = 0;
    skin_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_buy_skin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skin_id;
        break;
      }

      // required int32 skin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_id_)));
          set_has_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_buy_skin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // required int32 skin_id = 3;
  if (has_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_buy_skin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // required int32 skin_id = 3;
  if (has_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_buy_skin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 skin_id = 3;
    if (has_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_buy_skin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_buy_skin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_buy_skin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_buy_skin_req::MergeFrom(const role_player_buy_skin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_skin_id()) {
      set_skin_id(from.skin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_buy_skin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_buy_skin_req::CopyFrom(const role_player_buy_skin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_buy_skin_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void role_player_buy_skin_req::Swap(role_player_buy_skin_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(player_id_, other->player_id_);
    std::swap(skin_id_, other->skin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_buy_skin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_buy_skin_req_descriptor_;
  metadata.reflection = role_player_buy_skin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_buy_skin_ack::kProtoidFieldNumber;
const int role_player_buy_skin_ack::kResultFieldNumber;
const int role_player_buy_skin_ack::kPlayerIdFieldNumber;
const int role_player_buy_skin_ack::kSkinIdFieldNumber;
#endif  // !_MSC_VER

role_player_buy_skin_ack::role_player_buy_skin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_buy_skin_ack::InitAsDefaultInstance() {
}

role_player_buy_skin_ack::role_player_buy_skin_ack(const role_player_buy_skin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_buy_skin_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5207;
  result_ = 0;
  player_id_ = 0;
  skin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_buy_skin_ack::~role_player_buy_skin_ack() {
  SharedDtor();
}

void role_player_buy_skin_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_buy_skin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_buy_skin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_buy_skin_ack_descriptor_;
}

const role_player_buy_skin_ack& role_player_buy_skin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_buy_skin_ack* role_player_buy_skin_ack::default_instance_ = NULL;

role_player_buy_skin_ack* role_player_buy_skin_ack::New() const {
  return new role_player_buy_skin_ack;
}

void role_player_buy_skin_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5207;
    result_ = 0;
    player_id_ = 0;
    skin_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_buy_skin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skin_id;
        break;
      }

      // required int32 skin_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_id_)));
          set_has_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_buy_skin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // required int32 skin_id = 4;
  if (has_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_buy_skin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // required int32 skin_id = 4;
  if (has_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_buy_skin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 skin_id = 4;
    if (has_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_buy_skin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_buy_skin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_buy_skin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_buy_skin_ack::MergeFrom(const role_player_buy_skin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_skin_id()) {
      set_skin_id(from.skin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_buy_skin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_buy_skin_ack::CopyFrom(const role_player_buy_skin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_buy_skin_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void role_player_buy_skin_ack::Swap(role_player_buy_skin_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(skin_id_, other->skin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_buy_skin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_buy_skin_ack_descriptor_;
  metadata.reflection = role_player_buy_skin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_wear_skin_req::kProtoidFieldNumber;
const int role_player_wear_skin_req::kPlayerIdFieldNumber;
const int role_player_wear_skin_req::kSkinIdFieldNumber;
#endif  // !_MSC_VER

role_player_wear_skin_req::role_player_wear_skin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_wear_skin_req::InitAsDefaultInstance() {
}

role_player_wear_skin_req::role_player_wear_skin_req(const role_player_wear_skin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_wear_skin_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5208;
  player_id_ = 0;
  skin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_wear_skin_req::~role_player_wear_skin_req() {
  SharedDtor();
}

void role_player_wear_skin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_wear_skin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_wear_skin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_wear_skin_req_descriptor_;
}

const role_player_wear_skin_req& role_player_wear_skin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_wear_skin_req* role_player_wear_skin_req::default_instance_ = NULL;

role_player_wear_skin_req* role_player_wear_skin_req::New() const {
  return new role_player_wear_skin_req;
}

void role_player_wear_skin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5208;
    player_id_ = 0;
    skin_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_wear_skin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skin_id;
        break;
      }

      // required int32 skin_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_id_)));
          set_has_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_wear_skin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // required int32 skin_id = 3;
  if (has_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_wear_skin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // required int32 skin_id = 3;
  if (has_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_wear_skin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 skin_id = 3;
    if (has_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_wear_skin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_wear_skin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_wear_skin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_wear_skin_req::MergeFrom(const role_player_wear_skin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_skin_id()) {
      set_skin_id(from.skin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_wear_skin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_wear_skin_req::CopyFrom(const role_player_wear_skin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_wear_skin_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void role_player_wear_skin_req::Swap(role_player_wear_skin_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(player_id_, other->player_id_);
    std::swap(skin_id_, other->skin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_wear_skin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_wear_skin_req_descriptor_;
  metadata.reflection = role_player_wear_skin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_wear_skin_ack::kProtoidFieldNumber;
const int role_player_wear_skin_ack::kResultFieldNumber;
const int role_player_wear_skin_ack::kPlayerIdFieldNumber;
const int role_player_wear_skin_ack::kSkinIdFieldNumber;
#endif  // !_MSC_VER

role_player_wear_skin_ack::role_player_wear_skin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_wear_skin_ack::InitAsDefaultInstance() {
}

role_player_wear_skin_ack::role_player_wear_skin_ack(const role_player_wear_skin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_wear_skin_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5209;
  result_ = 0;
  player_id_ = 0;
  skin_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_wear_skin_ack::~role_player_wear_skin_ack() {
  SharedDtor();
}

void role_player_wear_skin_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_player_wear_skin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_wear_skin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_wear_skin_ack_descriptor_;
}

const role_player_wear_skin_ack& role_player_wear_skin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_wear_skin_ack* role_player_wear_skin_ack::default_instance_ = NULL;

role_player_wear_skin_ack* role_player_wear_skin_ack::New() const {
  return new role_player_wear_skin_ack;
}

void role_player_wear_skin_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5209;
    result_ = 0;
    player_id_ = 0;
    skin_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_wear_skin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skin_id;
        break;
      }

      // required int32 skin_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skin_id_)));
          set_has_skin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_wear_skin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required int32 player_id = 3;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_id(), output);
  }

  // required int32 skin_id = 4;
  if (has_skin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skin_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_wear_skin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required int32 player_id = 3;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_id(), target);
  }

  // required int32 skin_id = 4;
  if (has_skin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skin_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_wear_skin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 player_id = 3;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required int32 skin_id = 4;
    if (has_skin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skin_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_wear_skin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_wear_skin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_wear_skin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_wear_skin_ack::MergeFrom(const role_player_wear_skin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_skin_id()) {
      set_skin_id(from.skin_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_wear_skin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_wear_skin_ack::CopyFrom(const role_player_wear_skin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_wear_skin_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void role_player_wear_skin_ack::Swap(role_player_wear_skin_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(player_id_, other->player_id_);
    std::swap(skin_id_, other->skin_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_wear_skin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_wear_skin_ack_descriptor_;
  metadata.reflection = role_player_wear_skin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_player_skillup_ntf::kProtoidFieldNumber;
const int role_player_skillup_ntf::kPlayerIdFieldNumber;
const int role_player_skillup_ntf::kSkillInfoFieldNumber;
#endif  // !_MSC_VER

role_player_skillup_ntf::role_player_skillup_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_player_skillup_ntf::InitAsDefaultInstance() {
  skill_info_ = const_cast< ::SProtoSpace::player_skill_info*>(&::SProtoSpace::player_skill_info::default_instance());
}

role_player_skillup_ntf::role_player_skillup_ntf(const role_player_skillup_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_player_skillup_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5210;
  player_id_ = 0;
  skill_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_player_skillup_ntf::~role_player_skillup_ntf() {
  SharedDtor();
}

void role_player_skillup_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete skill_info_;
  }
}

void role_player_skillup_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_player_skillup_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_player_skillup_ntf_descriptor_;
}

const role_player_skillup_ntf& role_player_skillup_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_player_skillup_ntf* role_player_skillup_ntf::default_instance_ = NULL;

role_player_skillup_ntf* role_player_skillup_ntf::New() const {
  return new role_player_skillup_ntf;
}

void role_player_skillup_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5210;
    player_id_ = 0;
    if (has_skill_info()) {
      if (skill_info_ != NULL) skill_info_->::SProtoSpace::player_skill_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_player_skillup_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_skillup_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_player_id;
        break;
      }

      // required int32 player_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skill_info;
        break;
      }

      // required .SProtoSpace.player_skill_info skill_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_player_skillup_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_skillup_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // required .SProtoSpace.player_skill_info skill_info = 3;
  if (has_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_player_skillup_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_skillup_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // required .SProtoSpace.player_skill_info skill_info = 3;
  if (has_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skill_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_player_skillup_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_skillup_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // required .SProtoSpace.player_skill_info skill_info = 3;
    if (has_skill_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_player_skillup_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_player_skillup_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_player_skillup_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_player_skillup_ntf::MergeFrom(const role_player_skillup_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_skill_info()) {
      mutable_skill_info()->::SProtoSpace::player_skill_info::MergeFrom(from.skill_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_player_skillup_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_player_skillup_ntf::CopyFrom(const role_player_skillup_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_player_skillup_ntf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void role_player_skillup_ntf::Swap(role_player_skillup_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(player_id_, other->player_id_);
    std::swap(skill_info_, other->skill_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_player_skillup_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_player_skillup_ntf_descriptor_;
  metadata.reflection = role_player_skillup_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_buy_req::kProtoidFieldNumber;
const int role_buy_req::kBuyTypeFieldNumber;
const int role_buy_req::kBuyCountFieldNumber;
const int role_buy_req::kBuyIdFieldNumber;
#endif  // !_MSC_VER

role_buy_req::role_buy_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_buy_req::InitAsDefaultInstance() {
}

role_buy_req::role_buy_req(const role_buy_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_buy_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5213;
  buy_type_ = 0;
  buy_count_ = 0;
  buy_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_buy_req::~role_buy_req() {
  SharedDtor();
}

void role_buy_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_buy_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_buy_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_buy_req_descriptor_;
}

const role_buy_req& role_buy_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_buy_req* role_buy_req::default_instance_ = NULL;

role_buy_req* role_buy_req::New() const {
  return new role_buy_req;
}

void role_buy_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5213;
    buy_type_ = 0;
    buy_count_ = 0;
    buy_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_buy_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_type;
        break;
      }

      // required .SProtoSpace.EItemType buy_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EItemType_IsValid(value)) {
            set_buy_type(static_cast< ::SProtoSpace::EItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_count;
        break;
      }

      // required int32 buy_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_id;
        break;
      }

      // required int32 buy_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_id_)));
          set_has_buy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_buy_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required .SProtoSpace.EItemType buy_type = 2;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->buy_type(), output);
  }

  // required int32 buy_count = 3;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy_count(), output);
  }

  // required int32 buy_id = 4;
  if (has_buy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_buy_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required .SProtoSpace.EItemType buy_type = 2;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->buy_type(), target);
  }

  // required int32 buy_count = 3;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy_count(), target);
  }

  // required int32 buy_id = 4;
  if (has_buy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_buy_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required .SProtoSpace.EItemType buy_type = 2;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_type());
    }

    // required int32 buy_count = 3;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

    // required int32 buy_id = 4;
    if (has_buy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_buy_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_buy_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_buy_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_buy_req::MergeFrom(const role_buy_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_buy_id()) {
      set_buy_id(from.buy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_buy_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_buy_req::CopyFrom(const role_buy_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_buy_req::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  return true;
}

void role_buy_req::Swap(role_buy_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(buy_type_, other->buy_type_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(buy_id_, other->buy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_buy_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_buy_req_descriptor_;
  metadata.reflection = role_buy_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_buy_ack::kProtoidFieldNumber;
const int role_buy_ack::kResultFieldNumber;
const int role_buy_ack::kBuyTypeFieldNumber;
const int role_buy_ack::kBuyCountFieldNumber;
const int role_buy_ack::kBuyIdFieldNumber;
#endif  // !_MSC_VER

role_buy_ack::role_buy_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_buy_ack::InitAsDefaultInstance() {
}

role_buy_ack::role_buy_ack(const role_buy_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_buy_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5214;
  result_ = 0;
  buy_type_ = 0;
  buy_count_ = 0;
  buy_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_buy_ack::~role_buy_ack() {
  SharedDtor();
}

void role_buy_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_buy_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_buy_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_buy_ack_descriptor_;
}

const role_buy_ack& role_buy_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_buy_ack* role_buy_ack::default_instance_ = NULL;

role_buy_ack* role_buy_ack::New() const {
  return new role_buy_ack;
}

void role_buy_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5214;
    result_ = 0;
    buy_type_ = 0;
    buy_count_ = 0;
    buy_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_buy_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_type;
        break;
      }

      // required .SProtoSpace.EItemType buy_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EItemType_IsValid(value)) {
            set_buy_type(static_cast< ::SProtoSpace::EItemType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_count;
        break;
      }

      // required int32 buy_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_id;
        break;
      }

      // required int32 buy_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_id_)));
          set_has_buy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_buy_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // required int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // required .SProtoSpace.EItemType buy_type = 3;
  if (has_buy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->buy_type(), output);
  }

  // required int32 buy_count = 4;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buy_count(), output);
  }

  // required int32 buy_id = 5;
  if (has_buy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_buy_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // required int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // required .SProtoSpace.EItemType buy_type = 3;
  if (has_buy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->buy_type(), target);
  }

  // required int32 buy_count = 4;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buy_count(), target);
  }

  // required int32 buy_id = 5;
  if (has_buy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_buy_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // required int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required .SProtoSpace.EItemType buy_type = 3;
    if (has_buy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_type());
    }

    // required int32 buy_count = 4;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

    // required int32 buy_id = 5;
    if (has_buy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_buy_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_buy_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_buy_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_buy_ack::MergeFrom(const role_buy_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_buy_type()) {
      set_buy_type(from.buy_type());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_buy_id()) {
      set_buy_id(from.buy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_buy_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_buy_ack::CopyFrom(const role_buy_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_buy_ack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void role_buy_ack::Swap(role_buy_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(buy_type_, other->buy_type_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(buy_id_, other->buy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_buy_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_buy_ack_descriptor_;
  metadata.reflection = role_buy_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_base_info_req::kProtoidFieldNumber;
const int role_show_base_info_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_base_info_req::role_show_base_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_base_info_req::InitAsDefaultInstance() {
}

role_show_base_info_req::role_show_base_info_req(const role_show_base_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_base_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5235;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_base_info_req::~role_show_base_info_req() {
  SharedDtor();
}

void role_show_base_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_base_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_base_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_base_info_req_descriptor_;
}

const role_show_base_info_req& role_show_base_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_base_info_req* role_show_base_info_req::default_instance_ = NULL;

role_show_base_info_req* role_show_base_info_req::New() const {
  return new role_show_base_info_req;
}

void role_show_base_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5235;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_base_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_base_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_base_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_base_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_base_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_base_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_base_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_base_info_req::MergeFrom(const role_show_base_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_base_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_base_info_req::CopyFrom(const role_show_base_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_base_info_req::IsInitialized() const {

  return true;
}

void role_show_base_info_req::Swap(role_show_base_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_base_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_base_info_req_descriptor_;
  metadata.reflection = role_show_base_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_base_info_ack::kProtoidFieldNumber;
const int role_show_base_info_ack::kResultFieldNumber;
const int role_show_base_info_ack::kShowRoleIdFieldNumber;
const int role_show_base_info_ack::kShowDataFieldNumber;
#endif  // !_MSC_VER

role_show_base_info_ack::role_show_base_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_base_info_ack::InitAsDefaultInstance() {
  show_data_ = const_cast< ::SProtoSpace::show_player_base*>(&::SProtoSpace::show_player_base::default_instance());
}

role_show_base_info_ack::role_show_base_info_ack(const role_show_base_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_base_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5236;
  result_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  show_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_base_info_ack::~role_show_base_info_ack() {
  SharedDtor();
}

void role_show_base_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete show_data_;
  }
}

void role_show_base_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_base_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_base_info_ack_descriptor_;
}

const role_show_base_info_ack& role_show_base_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_base_info_ack* role_show_base_info_ack::default_instance_ = NULL;

role_show_base_info_ack* role_show_base_info_ack::New() const {
  return new role_show_base_info_ack;
}

void role_show_base_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5236;
    result_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_show_data()) {
      if (show_data_ != NULL) show_data_->::SProtoSpace::show_player_base::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_base_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_show_data;
        break;
      }

      // optional .SProtoSpace.show_player_base show_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_base_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional .SProtoSpace.show_player_base show_data = 4;
  if (has_show_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->show_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_base_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional .SProtoSpace.show_player_base show_data = 4;
  if (has_show_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->show_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_base_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.show_player_base show_data = 4;
    if (has_show_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_base_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_base_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_base_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_base_info_ack::MergeFrom(const role_show_base_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_show_data()) {
      mutable_show_data()->::SProtoSpace::show_player_base::MergeFrom(from.show_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_base_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_base_info_ack::CopyFrom(const role_show_base_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_base_info_ack::IsInitialized() const {

  return true;
}

void role_show_base_info_ack::Swap(role_show_base_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(show_data_, other->show_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_base_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_base_info_ack_descriptor_;
  metadata.reflection = role_show_base_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_get_like_req::kProtoidFieldNumber;
const int role_show_get_like_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_get_like_req::role_show_get_like_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_get_like_req::InitAsDefaultInstance() {
}

role_show_get_like_req::role_show_get_like_req(const role_show_get_like_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_get_like_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 246;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_get_like_req::~role_show_get_like_req() {
  SharedDtor();
}

void role_show_get_like_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_get_like_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_get_like_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_get_like_req_descriptor_;
}

const role_show_get_like_req& role_show_get_like_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_get_like_req* role_show_get_like_req::default_instance_ = NULL;

role_show_get_like_req* role_show_get_like_req::New() const {
  return new role_show_get_like_req;
}

void role_show_get_like_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 246;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_get_like_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_get_like_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_get_like_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_get_like_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_get_like_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_get_like_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_get_like_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_get_like_req::MergeFrom(const role_show_get_like_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_get_like_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_get_like_req::CopyFrom(const role_show_get_like_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_get_like_req::IsInitialized() const {

  return true;
}

void role_show_get_like_req::Swap(role_show_get_like_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_get_like_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_get_like_req_descriptor_;
  metadata.reflection = role_show_get_like_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_get_like_ack::kProtoidFieldNumber;
const int role_show_get_like_ack::kResultFieldNumber;
const int role_show_get_like_ack::kShowRoleIdFieldNumber;
const int role_show_get_like_ack::kLikesFieldNumber;
#endif  // !_MSC_VER

role_show_get_like_ack::role_show_get_like_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_get_like_ack::InitAsDefaultInstance() {
}

role_show_get_like_ack::role_show_get_like_ack(const role_show_get_like_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_get_like_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 247;
  result_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  likes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_get_like_ack::~role_show_get_like_ack() {
  SharedDtor();
}

void role_show_get_like_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_get_like_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_get_like_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_get_like_ack_descriptor_;
}

const role_show_get_like_ack& role_show_get_like_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_get_like_ack* role_show_get_like_ack::default_instance_ = NULL;

role_show_get_like_ack* role_show_get_like_ack::New() const {
  return new role_show_get_like_ack;
}

void role_show_get_like_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 247;
    result_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    likes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_get_like_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_likes;
        break;
      }

      // optional int32 likes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_likes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &likes_)));
          set_has_likes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_get_like_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional int32 likes = 4;
  if (has_likes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->likes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_get_like_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional int32 likes = 4;
  if (has_likes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->likes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_get_like_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional int32 likes = 4;
    if (has_likes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->likes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_get_like_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_get_like_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_get_like_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_get_like_ack::MergeFrom(const role_show_get_like_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_likes()) {
      set_likes(from.likes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_get_like_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_get_like_ack::CopyFrom(const role_show_get_like_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_get_like_ack::IsInitialized() const {

  return true;
}

void role_show_get_like_ack::Swap(role_show_get_like_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(likes_, other->likes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_get_like_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_get_like_ack_descriptor_;
  metadata.reflection = role_show_get_like_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_player_base_req::kProtoidFieldNumber;
const int role_show_player_base_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_player_base_req::role_show_player_base_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_player_base_req::InitAsDefaultInstance() {
}

role_show_player_base_req::role_show_player_base_req(const role_show_player_base_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_player_base_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5215;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_player_base_req::~role_show_player_base_req() {
  SharedDtor();
}

void role_show_player_base_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_player_base_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_player_base_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_player_base_req_descriptor_;
}

const role_show_player_base_req& role_show_player_base_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_player_base_req* role_show_player_base_req::default_instance_ = NULL;

role_show_player_base_req* role_show_player_base_req::New() const {
  return new role_show_player_base_req;
}

void role_show_player_base_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5215;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_player_base_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_player_base_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_player_base_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_player_base_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_player_base_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_player_base_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_player_base_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_player_base_req::MergeFrom(const role_show_player_base_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_player_base_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_player_base_req::CopyFrom(const role_show_player_base_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_player_base_req::IsInitialized() const {

  return true;
}

void role_show_player_base_req::Swap(role_show_player_base_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_player_base_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_player_base_req_descriptor_;
  metadata.reflection = role_show_player_base_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_player_base_ack::kProtoidFieldNumber;
const int role_show_player_base_ack::kResultFieldNumber;
const int role_show_player_base_ack::kShowRoleIdFieldNumber;
const int role_show_player_base_ack::kShowDataFieldNumber;
#endif  // !_MSC_VER

role_show_player_base_ack::role_show_player_base_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_player_base_ack::InitAsDefaultInstance() {
  show_data_ = const_cast< ::SProtoSpace::show_player_base*>(&::SProtoSpace::show_player_base::default_instance());
}

role_show_player_base_ack::role_show_player_base_ack(const role_show_player_base_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_player_base_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5216;
  result_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  show_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_player_base_ack::~role_show_player_base_ack() {
  SharedDtor();
}

void role_show_player_base_ack::SharedDtor() {
  if (this != default_instance_) {
    delete show_data_;
  }
}

void role_show_player_base_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_player_base_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_player_base_ack_descriptor_;
}

const role_show_player_base_ack& role_show_player_base_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_player_base_ack* role_show_player_base_ack::default_instance_ = NULL;

role_show_player_base_ack* role_show_player_base_ack::New() const {
  return new role_show_player_base_ack;
}

void role_show_player_base_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5216;
    result_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_show_data()) {
      if (show_data_ != NULL) show_data_->::SProtoSpace::show_player_base::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_player_base_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_show_data;
        break;
      }

      // optional .SProtoSpace.show_player_base show_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_show_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_show_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_player_base_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional .SProtoSpace.show_player_base show_data = 4;
  if (has_show_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->show_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_player_base_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional .SProtoSpace.show_player_base show_data = 4;
  if (has_show_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->show_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_player_base_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.show_player_base show_data = 4;
    if (has_show_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_player_base_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_player_base_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_player_base_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_player_base_ack::MergeFrom(const role_show_player_base_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_show_data()) {
      mutable_show_data()->::SProtoSpace::show_player_base::MergeFrom(from.show_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_player_base_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_player_base_ack::CopyFrom(const role_show_player_base_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_player_base_ack::IsInitialized() const {

  return true;
}

void role_show_player_base_ack::Swap(role_show_player_base_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(show_data_, other->show_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_player_base_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_player_base_ack_descriptor_;
  metadata.reflection = role_show_player_base_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_like_req::kProtoidFieldNumber;
const int role_show_like_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_like_req::role_show_like_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_like_req::InitAsDefaultInstance() {
}

role_show_like_req::role_show_like_req(const role_show_like_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_like_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5217;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_like_req::~role_show_like_req() {
  SharedDtor();
}

void role_show_like_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_like_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_like_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_like_req_descriptor_;
}

const role_show_like_req& role_show_like_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_like_req* role_show_like_req::default_instance_ = NULL;

role_show_like_req* role_show_like_req::New() const {
  return new role_show_like_req;
}

void role_show_like_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5217;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_like_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_like_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_like_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_like_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_like_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_like_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_like_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_like_req::MergeFrom(const role_show_like_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_like_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_like_req::CopyFrom(const role_show_like_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_like_req::IsInitialized() const {

  return true;
}

void role_show_like_req::Swap(role_show_like_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_like_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_like_req_descriptor_;
  metadata.reflection = role_show_like_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_like_ack::kProtoidFieldNumber;
const int role_show_like_ack::kResultFieldNumber;
const int role_show_like_ack::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_like_ack::role_show_like_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_like_ack::InitAsDefaultInstance() {
}

role_show_like_ack::role_show_like_ack(const role_show_like_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_like_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5218;
  result_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_like_ack::~role_show_like_ack() {
  SharedDtor();
}

void role_show_like_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_like_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_like_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_like_ack_descriptor_;
}

const role_show_like_ack& role_show_like_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_like_ack* role_show_like_ack::default_instance_ = NULL;

role_show_like_ack* role_show_like_ack::New() const {
  return new role_show_like_ack;
}

void role_show_like_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5218;
    result_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_like_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_like_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_like_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_like_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_like_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_like_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_like_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_like_ack::MergeFrom(const role_show_like_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_like_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_like_ack::CopyFrom(const role_show_like_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_like_ack::IsInitialized() const {

  return true;
}

void role_show_like_ack::Swap(role_show_like_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_like_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_like_ack_descriptor_;
  metadata.reflection = role_show_like_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_name_req::kProtoidFieldNumber;
const int role_show_change_name_req::kNewNameFieldNumber;
#endif  // !_MSC_VER

role_show_change_name_req::role_show_change_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_name_req::InitAsDefaultInstance() {
}

role_show_change_name_req::role_show_change_name_req(const role_show_change_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_name_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5219;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_name_req::~role_show_change_name_req() {
  SharedDtor();
}

void role_show_change_name_req::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void role_show_change_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_name_req_descriptor_;
}

const role_show_change_name_req& role_show_change_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_name_req* role_show_change_name_req::default_instance_ = NULL;

role_show_change_name_req* role_show_change_name_req::New() const {
  return new role_show_change_name_req;
}

void role_show_change_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5219;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_name;
        break;
      }

      // optional string new_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string new_name = 2;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string new_name = 2;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_name_req::MergeFrom(const role_show_change_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_name_req::CopyFrom(const role_show_change_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_name_req::IsInitialized() const {

  return true;
}

void role_show_change_name_req::Swap(role_show_change_name_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_name_req_descriptor_;
  metadata.reflection = role_show_change_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_name_ack::kProtoidFieldNumber;
const int role_show_change_name_ack::kResultFieldNumber;
const int role_show_change_name_ack::kNewNameFieldNumber;
const int role_show_change_name_ack::kChangeNameTimeFieldNumber;
#endif  // !_MSC_VER

role_show_change_name_ack::role_show_change_name_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_name_ack::InitAsDefaultInstance() {
}

role_show_change_name_ack::role_show_change_name_ack(const role_show_change_name_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_name_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5220;
  result_ = 0;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  change_name_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_name_ack::~role_show_change_name_ack() {
  SharedDtor();
}

void role_show_change_name_ack::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void role_show_change_name_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_name_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_name_ack_descriptor_;
}

const role_show_change_name_ack& role_show_change_name_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_name_ack* role_show_change_name_ack::default_instance_ = NULL;

role_show_change_name_ack* role_show_change_name_ack::New() const {
  return new role_show_change_name_ack;
}

void role_show_change_name_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5220;
    result_ = 0;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
    change_name_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_name_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_name;
        break;
      }

      // optional string new_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change_name_time;
        break;
      }

      // optional int32 change_name_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change_name_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_name_time_)));
          set_has_change_name_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_name_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional string new_name = 3;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_name(), output);
  }

  // optional int32 change_name_time = 4;
  if (has_change_name_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->change_name_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_name_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional string new_name = 3;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_name(), target);
  }

  // optional int32 change_name_time = 4;
  if (has_change_name_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->change_name_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_name_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional string new_name = 3;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

    // optional int32 change_name_time = 4;
    if (has_change_name_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_name_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_name_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_name_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_name_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_name_ack::MergeFrom(const role_show_change_name_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
    if (from.has_change_name_time()) {
      set_change_name_time(from.change_name_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_name_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_name_ack::CopyFrom(const role_show_change_name_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_name_ack::IsInitialized() const {

  return true;
}

void role_show_change_name_ack::Swap(role_show_change_name_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(new_name_, other->new_name_);
    std::swap(change_name_time_, other->change_name_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_name_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_name_ack_descriptor_;
  metadata.reflection = role_show_change_name_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_position_req::kProtoidFieldNumber;
const int role_show_change_position_req::kPositionFieldNumber;
#endif  // !_MSC_VER

role_show_change_position_req::role_show_change_position_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_position_req::InitAsDefaultInstance() {
  position_ = const_cast< ::SProtoSpace::lsg_position_info*>(&::SProtoSpace::lsg_position_info::default_instance());
}

role_show_change_position_req::role_show_change_position_req(const role_show_change_position_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_position_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5221;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_position_req::~role_show_change_position_req() {
  SharedDtor();
}

void role_show_change_position_req::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void role_show_change_position_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_position_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_position_req_descriptor_;
}

const role_show_change_position_req& role_show_change_position_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_position_req* role_show_change_position_req::default_instance_ = NULL;

role_show_change_position_req* role_show_change_position_req::New() const {
  return new role_show_change_position_req;
}

void role_show_change_position_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5221;
    if (has_position()) {
      if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_position_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .SProtoSpace.lsg_position_info position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_position_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.lsg_position_info position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_position_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.lsg_position_info position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_position_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.lsg_position_info position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_position_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_position_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_position_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_position_req::MergeFrom(const role_show_change_position_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_position()) {
      mutable_position()->::SProtoSpace::lsg_position_info::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_position_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_position_req::CopyFrom(const role_show_change_position_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_position_req::IsInitialized() const {

  return true;
}

void role_show_change_position_req::Swap(role_show_change_position_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_position_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_position_req_descriptor_;
  metadata.reflection = role_show_change_position_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_position_ack::kProtoidFieldNumber;
const int role_show_change_position_ack::kResultFieldNumber;
const int role_show_change_position_ack::kPositionFieldNumber;
#endif  // !_MSC_VER

role_show_change_position_ack::role_show_change_position_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_position_ack::InitAsDefaultInstance() {
  position_ = const_cast< ::SProtoSpace::lsg_position_info*>(&::SProtoSpace::lsg_position_info::default_instance());
}

role_show_change_position_ack::role_show_change_position_ack(const role_show_change_position_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_position_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5222;
  result_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_position_ack::~role_show_change_position_ack() {
  SharedDtor();
}

void role_show_change_position_ack::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void role_show_change_position_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_position_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_position_ack_descriptor_;
}

const role_show_change_position_ack& role_show_change_position_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_position_ack* role_show_change_position_ack::default_instance_ = NULL;

role_show_change_position_ack* role_show_change_position_ack::New() const {
  return new role_show_change_position_ack;
}

void role_show_change_position_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5222;
    result_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_position_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // optional .SProtoSpace.lsg_position_info position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_position_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .SProtoSpace.lsg_position_info position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_position_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .SProtoSpace.lsg_position_info position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_position_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .SProtoSpace.lsg_position_info position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_position_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_position_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_position_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_position_ack::MergeFrom(const role_show_change_position_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_position()) {
      mutable_position()->::SProtoSpace::lsg_position_info::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_position_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_position_ack::CopyFrom(const role_show_change_position_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_position_ack::IsInitialized() const {

  return true;
}

void role_show_change_position_ack::Swap(role_show_change_position_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_position_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_position_ack_descriptor_;
  metadata.reflection = role_show_change_position_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_signature_req::kProtoidFieldNumber;
const int role_show_change_signature_req::kSignatureFieldNumber;
#endif  // !_MSC_VER

role_show_change_signature_req::role_show_change_signature_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_signature_req::InitAsDefaultInstance() {
}

role_show_change_signature_req::role_show_change_signature_req(const role_show_change_signature_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_signature_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5223;
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_signature_req::~role_show_change_signature_req() {
  SharedDtor();
}

void role_show_change_signature_req::SharedDtor() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void role_show_change_signature_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_signature_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_signature_req_descriptor_;
}

const role_show_change_signature_req& role_show_change_signature_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_signature_req* role_show_change_signature_req::default_instance_ = NULL;

role_show_change_signature_req* role_show_change_signature_req::New() const {
  return new role_show_change_signature_req;
}

void role_show_change_signature_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5223;
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_signature_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // optional string signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_signature_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_signature_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_signature_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_signature_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_signature_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_signature_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_signature_req::MergeFrom(const role_show_change_signature_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_signature_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_signature_req::CopyFrom(const role_show_change_signature_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_signature_req::IsInitialized() const {

  return true;
}

void role_show_change_signature_req::Swap(role_show_change_signature_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_signature_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_signature_req_descriptor_;
  metadata.reflection = role_show_change_signature_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_signature_ack::kProtoidFieldNumber;
const int role_show_change_signature_ack::kResultFieldNumber;
#endif  // !_MSC_VER

role_show_change_signature_ack::role_show_change_signature_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_signature_ack::InitAsDefaultInstance() {
}

role_show_change_signature_ack::role_show_change_signature_ack(const role_show_change_signature_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_signature_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5224;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_signature_ack::~role_show_change_signature_ack() {
  SharedDtor();
}

void role_show_change_signature_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_signature_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_signature_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_signature_ack_descriptor_;
}

const role_show_change_signature_ack& role_show_change_signature_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_signature_ack* role_show_change_signature_ack::default_instance_ = NULL;

role_show_change_signature_ack* role_show_change_signature_ack::New() const {
  return new role_show_change_signature_ack;
}

void role_show_change_signature_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5224;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_signature_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_signature_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_signature_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_signature_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_signature_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_signature_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_signature_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_signature_ack::MergeFrom(const role_show_change_signature_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_signature_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_signature_ack::CopyFrom(const role_show_change_signature_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_signature_ack::IsInitialized() const {

  return true;
}

void role_show_change_signature_ack::Swap(role_show_change_signature_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_signature_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_signature_ack_descriptor_;
  metadata.reflection = role_show_change_signature_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_age_req::kProtoidFieldNumber;
const int role_show_change_age_req::kAgeFieldNumber;
#endif  // !_MSC_VER

role_show_change_age_req::role_show_change_age_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_age_req::InitAsDefaultInstance() {
}

role_show_change_age_req::role_show_change_age_req(const role_show_change_age_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_age_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5237;
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_age_req::~role_show_change_age_req() {
  SharedDtor();
}

void role_show_change_age_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_age_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_age_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_age_req_descriptor_;
}

const role_show_change_age_req& role_show_change_age_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_age_req* role_show_change_age_req::default_instance_ = NULL;

role_show_change_age_req* role_show_change_age_req::New() const {
  return new role_show_change_age_req;
}

void role_show_change_age_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5237;
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_age_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }

      // optional uint32 age = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_age_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 age = 2;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_age_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 age = 2;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_age_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 age = 2;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_age_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_age_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_age_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_age_req::MergeFrom(const role_show_change_age_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_age_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_age_req::CopyFrom(const role_show_change_age_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_age_req::IsInitialized() const {

  return true;
}

void role_show_change_age_req::Swap(role_show_change_age_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_age_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_age_req_descriptor_;
  metadata.reflection = role_show_change_age_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_age_ack::kProtoidFieldNumber;
const int role_show_change_age_ack::kRetFieldNumber;
const int role_show_change_age_ack::kAgeFieldNumber;
#endif  // !_MSC_VER

role_show_change_age_ack::role_show_change_age_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_age_ack::InitAsDefaultInstance() {
}

role_show_change_age_ack::role_show_change_age_ack(const role_show_change_age_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_age_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5238;
  ret_ = 0u;
  age_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_age_ack::~role_show_change_age_ack() {
  SharedDtor();
}

void role_show_change_age_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_age_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_age_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_age_ack_descriptor_;
}

const role_show_change_age_ack& role_show_change_age_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_age_ack* role_show_change_age_ack::default_instance_ = NULL;

role_show_change_age_ack* role_show_change_age_ack::New() const {
  return new role_show_change_age_ack;
}

void role_show_change_age_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5238;
    ret_ = 0u;
    age_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_age_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }

      // optional uint32 age = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_age_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 age = 3;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_age_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 age = 3;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_age_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_age_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_age_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_age_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_age_ack::MergeFrom(const role_show_change_age_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_age_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_age_ack::CopyFrom(const role_show_change_age_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_age_ack::IsInitialized() const {

  return true;
}

void role_show_change_age_ack::Swap(role_show_change_age_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_age_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_age_ack_descriptor_;
  metadata.reflection = role_show_change_age_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_starsign_req::kProtoidFieldNumber;
const int role_show_change_starsign_req::kStarSignFieldNumber;
#endif  // !_MSC_VER

role_show_change_starsign_req::role_show_change_starsign_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_starsign_req::InitAsDefaultInstance() {
}

role_show_change_starsign_req::role_show_change_starsign_req(const role_show_change_starsign_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_starsign_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5239;
  star_sign_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_starsign_req::~role_show_change_starsign_req() {
  SharedDtor();
}

void role_show_change_starsign_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_starsign_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_starsign_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_starsign_req_descriptor_;
}

const role_show_change_starsign_req& role_show_change_starsign_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_starsign_req* role_show_change_starsign_req::default_instance_ = NULL;

role_show_change_starsign_req* role_show_change_starsign_req::New() const {
  return new role_show_change_starsign_req;
}

void role_show_change_starsign_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5239;
    star_sign_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_starsign_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_sign;
        break;
      }

      // optional uint32 star_sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_sign_)));
          set_has_star_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_starsign_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 star_sign = 2;
  if (has_star_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_starsign_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 star_sign = 2;
  if (has_star_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_starsign_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 star_sign = 2;
    if (has_star_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_starsign_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_starsign_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_starsign_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_starsign_req::MergeFrom(const role_show_change_starsign_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_star_sign()) {
      set_star_sign(from.star_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_starsign_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_starsign_req::CopyFrom(const role_show_change_starsign_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_starsign_req::IsInitialized() const {

  return true;
}

void role_show_change_starsign_req::Swap(role_show_change_starsign_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(star_sign_, other->star_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_starsign_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_starsign_req_descriptor_;
  metadata.reflection = role_show_change_starsign_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_starsign_ack::kProtoidFieldNumber;
const int role_show_change_starsign_ack::kRetFieldNumber;
const int role_show_change_starsign_ack::kStarSignFieldNumber;
#endif  // !_MSC_VER

role_show_change_starsign_ack::role_show_change_starsign_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_starsign_ack::InitAsDefaultInstance() {
}

role_show_change_starsign_ack::role_show_change_starsign_ack(const role_show_change_starsign_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_starsign_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5240;
  ret_ = 0u;
  star_sign_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_starsign_ack::~role_show_change_starsign_ack() {
  SharedDtor();
}

void role_show_change_starsign_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_starsign_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_starsign_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_starsign_ack_descriptor_;
}

const role_show_change_starsign_ack& role_show_change_starsign_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_starsign_ack* role_show_change_starsign_ack::default_instance_ = NULL;

role_show_change_starsign_ack* role_show_change_starsign_ack::New() const {
  return new role_show_change_starsign_ack;
}

void role_show_change_starsign_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5240;
    ret_ = 0u;
    star_sign_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_starsign_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star_sign;
        break;
      }

      // optional uint32 star_sign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_sign_)));
          set_has_star_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_starsign_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 star_sign = 3;
  if (has_star_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_starsign_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 star_sign = 3;
  if (has_star_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_starsign_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 star_sign = 3;
    if (has_star_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_starsign_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_starsign_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_starsign_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_starsign_ack::MergeFrom(const role_show_change_starsign_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_star_sign()) {
      set_star_sign(from.star_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_starsign_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_starsign_ack::CopyFrom(const role_show_change_starsign_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_starsign_ack::IsInitialized() const {

  return true;
}

void role_show_change_starsign_ack::Swap(role_show_change_starsign_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(star_sign_, other->star_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_starsign_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_starsign_ack_descriptor_;
  metadata.reflection = role_show_change_starsign_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_birthday_req::kProtoidFieldNumber;
const int role_show_change_birthday_req::kMonthFieldNumber;
const int role_show_change_birthday_req::kDayFieldNumber;
#endif  // !_MSC_VER

role_show_change_birthday_req::role_show_change_birthday_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_birthday_req::InitAsDefaultInstance() {
}

role_show_change_birthday_req::role_show_change_birthday_req(const role_show_change_birthday_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_birthday_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5241;
  month_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_birthday_req::~role_show_change_birthday_req() {
  SharedDtor();
}

void role_show_change_birthday_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_birthday_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_birthday_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_birthday_req_descriptor_;
}

const role_show_change_birthday_req& role_show_change_birthday_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_birthday_req* role_show_change_birthday_req::default_instance_ = NULL;

role_show_change_birthday_req* role_show_change_birthday_req::New() const {
  return new role_show_change_birthday_req;
}

void role_show_change_birthday_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5241;
    month_ = 0u;
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_birthday_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional uint32 month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional uint32 day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_birthday_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->month(), output);
  }

  // optional uint32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_birthday_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->month(), target);
  }

  // optional uint32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_birthday_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_birthday_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_birthday_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_birthday_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_birthday_req::MergeFrom(const role_show_change_birthday_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_birthday_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_birthday_req::CopyFrom(const role_show_change_birthday_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_birthday_req::IsInitialized() const {

  return true;
}

void role_show_change_birthday_req::Swap(role_show_change_birthday_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_birthday_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_birthday_req_descriptor_;
  metadata.reflection = role_show_change_birthday_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_birthday_ack::kProtoidFieldNumber;
const int role_show_change_birthday_ack::kRetFieldNumber;
const int role_show_change_birthday_ack::kMonthFieldNumber;
const int role_show_change_birthday_ack::kDayFieldNumber;
const int role_show_change_birthday_ack::kStarSignFieldNumber;
#endif  // !_MSC_VER

role_show_change_birthday_ack::role_show_change_birthday_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_birthday_ack::InitAsDefaultInstance() {
}

role_show_change_birthday_ack::role_show_change_birthday_ack(const role_show_change_birthday_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_birthday_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5242;
  ret_ = 0u;
  month_ = 0u;
  day_ = 0u;
  star_sign_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_birthday_ack::~role_show_change_birthday_ack() {
  SharedDtor();
}

void role_show_change_birthday_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_birthday_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_birthday_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_birthday_ack_descriptor_;
}

const role_show_change_birthday_ack& role_show_change_birthday_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_birthday_ack* role_show_change_birthday_ack::default_instance_ = NULL;

role_show_change_birthday_ack* role_show_change_birthday_ack::New() const {
  return new role_show_change_birthday_ack;
}

void role_show_change_birthday_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5242;
    ret_ = 0u;
    month_ = 0u;
    day_ = 0u;
    star_sign_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_birthday_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_month;
        break;
      }

      // optional uint32 month = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_day;
        break;
      }

      // optional uint32 day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star_sign;
        break;
      }

      // optional uint32 star_sign = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_sign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_sign_)));
          set_has_star_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_birthday_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 month = 3;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->month(), output);
  }

  // optional uint32 day = 4;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->day(), output);
  }

  // optional uint32 star_sign = 5;
  if (has_star_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_birthday_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 month = 3;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->month(), target);
  }

  // optional uint32 day = 4;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->day(), target);
  }

  // optional uint32 star_sign = 5;
  if (has_star_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->star_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_birthday_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 month = 3;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }

    // optional uint32 day = 4;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 star_sign = 5;
    if (has_star_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_birthday_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_birthday_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_birthday_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_birthday_ack::MergeFrom(const role_show_change_birthday_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_star_sign()) {
      set_star_sign(from.star_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_birthday_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_birthday_ack::CopyFrom(const role_show_change_birthday_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_birthday_ack::IsInitialized() const {

  return true;
}

void role_show_change_birthday_ack::Swap(role_show_change_birthday_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(star_sign_, other->star_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_birthday_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_birthday_ack_descriptor_;
  metadata.reflection = role_show_change_birthday_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_labels_req::kProtoidFieldNumber;
const int role_show_change_labels_req::kLabelsFieldNumber;
#endif  // !_MSC_VER

role_show_change_labels_req::role_show_change_labels_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_labels_req::InitAsDefaultInstance() {
}

role_show_change_labels_req::role_show_change_labels_req(const role_show_change_labels_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_labels_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5243;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_labels_req::~role_show_change_labels_req() {
  SharedDtor();
}

void role_show_change_labels_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_labels_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_labels_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_labels_req_descriptor_;
}

const role_show_change_labels_req& role_show_change_labels_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_labels_req* role_show_change_labels_req::default_instance_ = NULL;

role_show_change_labels_req* role_show_change_labels_req::New() const {
  return new role_show_change_labels_req;
}

void role_show_change_labels_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5243;
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_labels_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_labels;
        break;
      }

      // repeated uint32 labels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_labels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_labels_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint32 labels = 2;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_labels_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint32 labels = 2;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_labels_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint32 labels = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->labels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->labels(i));
    }
    total_size += 1 * this->labels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_labels_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_labels_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_labels_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_labels_req::MergeFrom(const role_show_change_labels_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_labels_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_labels_req::CopyFrom(const role_show_change_labels_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_labels_req::IsInitialized() const {

  return true;
}

void role_show_change_labels_req::Swap(role_show_change_labels_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_labels_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_labels_req_descriptor_;
  metadata.reflection = role_show_change_labels_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_change_labels_ack::kProtoidFieldNumber;
const int role_show_change_labels_ack::kRetFieldNumber;
const int role_show_change_labels_ack::kLabelsFieldNumber;
#endif  // !_MSC_VER

role_show_change_labels_ack::role_show_change_labels_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_change_labels_ack::InitAsDefaultInstance() {
}

role_show_change_labels_ack::role_show_change_labels_ack(const role_show_change_labels_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_change_labels_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5244;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_change_labels_ack::~role_show_change_labels_ack() {
  SharedDtor();
}

void role_show_change_labels_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_change_labels_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_change_labels_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_change_labels_ack_descriptor_;
}

const role_show_change_labels_ack& role_show_change_labels_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_change_labels_ack* role_show_change_labels_ack::default_instance_ = NULL;

role_show_change_labels_ack* role_show_change_labels_ack::New() const {
  return new role_show_change_labels_ack;
}

void role_show_change_labels_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5244;
    ret_ = 0u;
  }
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_change_labels_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_labels;
        break;
      }

      // repeated uint32 labels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_labels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_labels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_labels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_change_labels_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated uint32 labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_change_labels_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated uint32 labels = 3;
  for (int i = 0; i < this->labels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_change_labels_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated uint32 labels = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->labels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->labels(i));
    }
    total_size += 1 * this->labels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_change_labels_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_change_labels_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_change_labels_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_change_labels_ack::MergeFrom(const role_show_change_labels_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_change_labels_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_change_labels_ack::CopyFrom(const role_show_change_labels_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_change_labels_ack::IsInitialized() const {

  return true;
}

void role_show_change_labels_ack::Swap(role_show_change_labels_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_change_labels_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_change_labels_ack_descriptor_;
  metadata.reflection = role_show_change_labels_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_get_emotion_req::kProtoidFieldNumber;
const int role_show_get_emotion_req::kShowRoleIdFieldNumber;
const int role_show_get_emotion_req::kStartIndexFieldNumber;
const int role_show_get_emotion_req::kCountFieldNumber;
#endif  // !_MSC_VER

role_show_get_emotion_req::role_show_get_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_get_emotion_req::InitAsDefaultInstance() {
}

role_show_get_emotion_req::role_show_get_emotion_req(const role_show_get_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_get_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5245;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  start_index_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_get_emotion_req::~role_show_get_emotion_req() {
  SharedDtor();
}

void role_show_get_emotion_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_get_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_get_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_get_emotion_req_descriptor_;
}

const role_show_get_emotion_req& role_show_get_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_get_emotion_req* role_show_get_emotion_req::default_instance_ = NULL;

role_show_get_emotion_req* role_show_get_emotion_req::New() const {
  return new role_show_get_emotion_req;
}

void role_show_get_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5245;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    start_index_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_get_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_get_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  // optional uint32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_index(), output);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_get_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  // optional uint32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_index(), target);
  }

  // optional uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_get_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_get_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_get_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_get_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_get_emotion_req::MergeFrom(const role_show_get_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_get_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_get_emotion_req::CopyFrom(const role_show_get_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_get_emotion_req::IsInitialized() const {

  return true;
}

void role_show_get_emotion_req::Swap(role_show_get_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(start_index_, other->start_index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_get_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_get_emotion_req_descriptor_;
  metadata.reflection = role_show_get_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_get_emotion_ack::kProtoidFieldNumber;
const int role_show_get_emotion_ack::kRetFieldNumber;
const int role_show_get_emotion_ack::kShowRoleIdFieldNumber;
const int role_show_get_emotion_ack::kEmotionAllFieldNumber;
#endif  // !_MSC_VER

role_show_get_emotion_ack::role_show_get_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_get_emotion_ack::InitAsDefaultInstance() {
  emotion_all_ = const_cast< ::SProtoSpace::show_emotion_all_info*>(&::SProtoSpace::show_emotion_all_info::default_instance());
}

role_show_get_emotion_ack::role_show_get_emotion_ack(const role_show_get_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_get_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5246;
  ret_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_all_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_get_emotion_ack::~role_show_get_emotion_ack() {
  SharedDtor();
}

void role_show_get_emotion_ack::SharedDtor() {
  if (this != default_instance_) {
    delete emotion_all_;
  }
}

void role_show_get_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_get_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_get_emotion_ack_descriptor_;
}

const role_show_get_emotion_ack& role_show_get_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_get_emotion_ack* role_show_get_emotion_ack::default_instance_ = NULL;

role_show_get_emotion_ack* role_show_get_emotion_ack::New() const {
  return new role_show_get_emotion_ack;
}

void role_show_get_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5246;
    ret_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_emotion_all()) {
      if (emotion_all_ != NULL) emotion_all_->::SProtoSpace::show_emotion_all_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_get_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_emotion_all;
        break;
      }

      // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emotion_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emotion_all()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_get_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
  if (has_emotion_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->emotion_all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_get_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
  if (has_emotion_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->emotion_all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_get_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
    if (has_emotion_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emotion_all());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_get_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_get_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_get_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_get_emotion_ack::MergeFrom(const role_show_get_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_all()) {
      mutable_emotion_all()->::SProtoSpace::show_emotion_all_info::MergeFrom(from.emotion_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_get_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_get_emotion_ack::CopyFrom(const role_show_get_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_get_emotion_ack::IsInitialized() const {

  return true;
}

void role_show_get_emotion_ack::Swap(role_show_get_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_all_, other->emotion_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_get_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_get_emotion_ack_descriptor_;
  metadata.reflection = role_show_get_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_write_emotion_req::kProtoidFieldNumber;
const int role_show_write_emotion_req::kMsgContentFieldNumber;
const int role_show_write_emotion_req::kImgUrlsFieldNumber;
const int role_show_write_emotion_req::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

role_show_write_emotion_req::role_show_write_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_write_emotion_req::InitAsDefaultInstance() {
}

role_show_write_emotion_req::role_show_write_emotion_req(const role_show_write_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_write_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5247;
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_write_emotion_req::~role_show_write_emotion_req() {
  SharedDtor();
}

void role_show_write_emotion_req::SharedDtor() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void role_show_write_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_write_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_write_emotion_req_descriptor_;
}

const role_show_write_emotion_req& role_show_write_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_write_emotion_req* role_show_write_emotion_req::default_instance_ = NULL;

role_show_write_emotion_req* role_show_write_emotion_req::New() const {
  return new role_show_write_emotion_req;
}

void role_show_write_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5247;
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    msg_type_ = 0;
  }
  img_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_write_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_img_urls;
        break;
      }

      // repeated string img_urls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_urls(this->img_urls_size() - 1).data(),
            this->img_urls(this->img_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_img_urls;
        if (input->ExpectTag(32)) goto parse_msg_type;
        break;
      }

      // optional .SProtoSpace.EmotionType msg_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EmotionType_IsValid(value)) {
            set_msg_type(static_cast< ::SProtoSpace::EmotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_write_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional string msg_content = 2;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg_content(), output);
  }

  // repeated string img_urls = 3;
  for (int i = 0; i < this->img_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->img_urls(i).data(), this->img_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->img_urls(i), output);
  }

  // optional .SProtoSpace.EmotionType msg_type = 4;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msg_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_write_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional string msg_content = 2;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_content(), target);
  }

  // repeated string img_urls = 3;
  for (int i = 0; i < this->img_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_urls(i).data(), this->img_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->img_urls(i), target);
  }

  // optional .SProtoSpace.EmotionType msg_type = 4;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msg_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_write_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional string msg_content = 2;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional .SProtoSpace.EmotionType msg_type = 4;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

  }
  // repeated string img_urls = 3;
  total_size += 1 * this->img_urls_size();
  for (int i = 0; i < this->img_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_write_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_write_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_write_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_write_emotion_req::MergeFrom(const role_show_write_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  img_urls_.MergeFrom(from.img_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_write_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_write_emotion_req::CopyFrom(const role_show_write_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_write_emotion_req::IsInitialized() const {

  return true;
}

void role_show_write_emotion_req::Swap(role_show_write_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(msg_content_, other->msg_content_);
    img_urls_.Swap(&other->img_urls_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_write_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_write_emotion_req_descriptor_;
  metadata.reflection = role_show_write_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_write_emotion_ack::kProtoidFieldNumber;
const int role_show_write_emotion_ack::kRetFieldNumber;
const int role_show_write_emotion_ack::kEmotionIdFieldNumber;
const int role_show_write_emotion_ack::kMsgContentFieldNumber;
const int role_show_write_emotion_ack::kImgUrlsFieldNumber;
const int role_show_write_emotion_ack::kMsgTypeFieldNumber;
const int role_show_write_emotion_ack::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

role_show_write_emotion_ack::role_show_write_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_write_emotion_ack::InitAsDefaultInstance() {
}

role_show_write_emotion_ack::role_show_write_emotion_ack(const role_show_write_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_write_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5248;
  ret_ = 0u;
  emotion_id_ = GOOGLE_ULONGLONG(0);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_type_ = 0;
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_write_emotion_ack::~role_show_write_emotion_ack() {
  SharedDtor();
}

void role_show_write_emotion_ack::SharedDtor() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void role_show_write_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_write_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_write_emotion_ack_descriptor_;
}

const role_show_write_emotion_ack& role_show_write_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_write_emotion_ack* role_show_write_emotion_ack::default_instance_ = NULL;

role_show_write_emotion_ack* role_show_write_emotion_ack::New() const {
  return new role_show_write_emotion_ack;
}

void role_show_write_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5248;
    ret_ = 0u;
    emotion_id_ = GOOGLE_ULONGLONG(0);
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    msg_type_ = 0;
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  img_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_write_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_img_urls;
        break;
      }

      // repeated string img_urls = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_img_urls()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_urls(this->img_urls_size() - 1).data(),
            this->img_urls(this->img_urls_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_img_urls;
        if (input->ExpectTag(48)) goto parse_msg_type;
        break;
      }

      // optional .SProtoSpace.EmotionType msg_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EmotionType_IsValid(value)) {
            set_msg_type(static_cast< ::SProtoSpace::EmotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_write_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 emotion_id = 3;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->emotion_id(), output);
  }

  // optional string msg_content = 4;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg_content(), output);
  }

  // repeated string img_urls = 5;
  for (int i = 0; i < this->img_urls_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->img_urls(i).data(), this->img_urls(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->img_urls(i), output);
  }

  // optional .SProtoSpace.EmotionType msg_type = 6;
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->msg_type(), output);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_write_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 emotion_id = 3;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->emotion_id(), target);
  }

  // optional string msg_content = 4;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_content(), target);
  }

  // repeated string img_urls = 5;
  for (int i = 0; i < this->img_urls_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_urls(i).data(), this->img_urls(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->img_urls(i), target);
  }

  // optional .SProtoSpace.EmotionType msg_type = 6;
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->msg_type(), target);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_write_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 emotion_id = 3;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional string msg_content = 4;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional .SProtoSpace.EmotionType msg_type = 6;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }

    // optional uint64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  // repeated string img_urls = 5;
  total_size += 1 * this->img_urls_size();
  for (int i = 0; i < this->img_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->img_urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_write_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_write_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_write_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_write_emotion_ack::MergeFrom(const role_show_write_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  img_urls_.MergeFrom(from.img_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_write_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_write_emotion_ack::CopyFrom(const role_show_write_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_write_emotion_ack::IsInitialized() const {

  return true;
}

void role_show_write_emotion_ack::Swap(role_show_write_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(msg_content_, other->msg_content_);
    img_urls_.Swap(&other->img_urls_);
    std::swap(msg_type_, other->msg_type_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_write_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_write_emotion_ack_descriptor_;
  metadata.reflection = role_show_write_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_like_emotion_req::kProtoidFieldNumber;
const int role_show_like_emotion_req::kRoleIdFieldNumber;
const int role_show_like_emotion_req::kRoleNameFieldNumber;
const int role_show_like_emotion_req::kEmotionIdFieldNumber;
const int role_show_like_emotion_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_like_emotion_req::role_show_like_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_like_emotion_req::InitAsDefaultInstance() {
}

role_show_like_emotion_req::role_show_like_emotion_req(const role_show_like_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_like_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5249;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_like_emotion_req::~role_show_like_emotion_req() {
  SharedDtor();
}

void role_show_like_emotion_req::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void role_show_like_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_like_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_like_emotion_req_descriptor_;
}

const role_show_like_emotion_req& role_show_like_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_like_emotion_req* role_show_like_emotion_req::default_instance_ = NULL;

role_show_like_emotion_req* role_show_like_emotion_req::New() const {
  return new role_show_like_emotion_req;
}

void role_show_like_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5249;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    emotion_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_like_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_like_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint64 emotion_id = 4;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->emotion_id(), output);
  }

  // optional uint64 show_role_id = 5;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_like_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint64 emotion_id = 4;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->emotion_id(), target);
  }

  // optional uint64 show_role_id = 5;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_like_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 emotion_id = 4;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 show_role_id = 5;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_like_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_like_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_like_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_like_emotion_req::MergeFrom(const role_show_like_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_like_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_like_emotion_req::CopyFrom(const role_show_like_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_like_emotion_req::IsInitialized() const {

  return true;
}

void role_show_like_emotion_req::Swap(role_show_like_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_like_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_like_emotion_req_descriptor_;
  metadata.reflection = role_show_like_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_like_emotion_ack::kProtoidFieldNumber;
const int role_show_like_emotion_ack::kRoleIdFieldNumber;
const int role_show_like_emotion_ack::kRoleNameFieldNumber;
const int role_show_like_emotion_ack::kEmotionIdFieldNumber;
const int role_show_like_emotion_ack::kShowRoleIdFieldNumber;
const int role_show_like_emotion_ack::kRetFieldNumber;
#endif  // !_MSC_VER

role_show_like_emotion_ack::role_show_like_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_like_emotion_ack::InitAsDefaultInstance() {
}

role_show_like_emotion_ack::role_show_like_emotion_ack(const role_show_like_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_like_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5250;
  role_id_ = GOOGLE_ULONGLONG(0);
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_like_emotion_ack::~role_show_like_emotion_ack() {
  SharedDtor();
}

void role_show_like_emotion_ack::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void role_show_like_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_like_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_like_emotion_ack_descriptor_;
}

const role_show_like_emotion_ack& role_show_like_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_like_emotion_ack* role_show_like_emotion_ack::default_instance_ = NULL;

role_show_like_emotion_ack* role_show_like_emotion_ack::New() const {
  return new role_show_like_emotion_ack;
}

void role_show_like_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5250;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    emotion_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_like_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_like_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  // optional uint64 emotion_id = 4;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->emotion_id(), output);
  }

  // optional uint64 show_role_id = 5;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->show_role_id(), output);
  }

  // optional uint32 ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_like_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  // optional uint64 emotion_id = 4;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->emotion_id(), target);
  }

  // optional uint64 show_role_id = 5;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->show_role_id(), target);
  }

  // optional uint32 ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_like_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint64 emotion_id = 4;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 show_role_id = 5;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint32 ret = 6;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_like_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_like_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_like_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_like_emotion_ack::MergeFrom(const role_show_like_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_like_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_like_emotion_ack::CopyFrom(const role_show_like_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_like_emotion_ack::IsInitialized() const {

  return true;
}

void role_show_like_emotion_ack::Swap(role_show_like_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_like_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_like_emotion_ack_descriptor_;
  metadata.reflection = role_show_like_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_comment_emotion_req::kProtoidFieldNumber;
const int role_show_comment_emotion_req::kFromIdFieldNumber;
const int role_show_comment_emotion_req::kFromNameFieldNumber;
const int role_show_comment_emotion_req::kToIdFieldNumber;
const int role_show_comment_emotion_req::kToNameFieldNumber;
const int role_show_comment_emotion_req::kMsgContentFieldNumber;
const int role_show_comment_emotion_req::kShowRoleIdFieldNumber;
const int role_show_comment_emotion_req::kEmotionIdFieldNumber;
#endif  // !_MSC_VER

role_show_comment_emotion_req::role_show_comment_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_comment_emotion_req::InitAsDefaultInstance() {
}

role_show_comment_emotion_req::role_show_comment_emotion_req(const role_show_comment_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_comment_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5251;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_id_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_comment_emotion_req::~role_show_comment_emotion_req() {
  SharedDtor();
}

void role_show_comment_emotion_req::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void role_show_comment_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_comment_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_comment_emotion_req_descriptor_;
}

const role_show_comment_emotion_req& role_show_comment_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_comment_emotion_req* role_show_comment_emotion_req::default_instance_ = NULL;

role_show_comment_emotion_req* role_show_comment_emotion_req::New() const {
  return new role_show_comment_emotion_req;
}

void role_show_comment_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5251;
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    to_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_comment_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_name;
        break;
      }

      // optional string from_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_name;
        break;
      }

      // optional string to_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_comment_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_name(), output);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_id(), output);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_name(), output);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg_content(), output);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->emotion_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_comment_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_name(), target);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_id(), target);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_name(), target);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg_content(), target);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->emotion_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_comment_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 3;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint64 to_id = 4;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional string to_name = 5;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional string msg_content = 6;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional uint64 show_role_id = 7;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 8;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_comment_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_comment_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_comment_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_comment_emotion_req::MergeFrom(const role_show_comment_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_comment_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_comment_emotion_req::CopyFrom(const role_show_comment_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_comment_emotion_req::IsInitialized() const {

  return true;
}

void role_show_comment_emotion_req::Swap(role_show_comment_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_name_, other->to_name_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_comment_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_comment_emotion_req_descriptor_;
  metadata.reflection = role_show_comment_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_comment_emotion_ack::kProtoidFieldNumber;
const int role_show_comment_emotion_ack::kFromIdFieldNumber;
const int role_show_comment_emotion_ack::kFromNameFieldNumber;
const int role_show_comment_emotion_ack::kToIdFieldNumber;
const int role_show_comment_emotion_ack::kToNameFieldNumber;
const int role_show_comment_emotion_ack::kMsgContentFieldNumber;
const int role_show_comment_emotion_ack::kShowRoleIdFieldNumber;
const int role_show_comment_emotion_ack::kEmotionIdFieldNumber;
const int role_show_comment_emotion_ack::kRetFieldNumber;
const int role_show_comment_emotion_ack::kCommentIdFieldNumber;
#endif  // !_MSC_VER

role_show_comment_emotion_ack::role_show_comment_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_comment_emotion_ack::InitAsDefaultInstance() {
}

role_show_comment_emotion_ack::role_show_comment_emotion_ack(const role_show_comment_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_comment_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5252;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_id_ = GOOGLE_ULONGLONG(0);
  to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  comment_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_comment_emotion_ack::~role_show_comment_emotion_ack() {
  SharedDtor();
}

void role_show_comment_emotion_ack::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (this != default_instance_) {
  }
}

void role_show_comment_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_comment_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_comment_emotion_ack_descriptor_;
}

const role_show_comment_emotion_ack& role_show_comment_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_comment_emotion_ack* role_show_comment_emotion_ack::default_instance_ = NULL;

role_show_comment_emotion_ack* role_show_comment_emotion_ack::New() const {
  return new role_show_comment_emotion_ack;
}

void role_show_comment_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5252;
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    to_id_ = GOOGLE_ULONGLONG(0);
    if (has_to_name()) {
      if (to_name_ != &::google::protobuf::internal::kEmptyString) {
        to_name_->clear();
      }
    }
    if (has_msg_content()) {
      if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
        msg_content_->clear();
      }
    }
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ret_ = 0u;
    comment_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_comment_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_from_name;
        break;
      }

      // optional string from_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_to_name;
        break;
      }

      // optional string to_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_name().data(), this->to_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_content;
        break;
      }

      // optional string msg_content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_content().data(), this->msg_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_comment_id;
        break;
      }

      // optional uint64 comment_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_comment_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->from_name(), output);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->to_id(), output);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->to_name(), output);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->msg_content(), output);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->emotion_id(), output);
  }

  // optional uint32 ret = 9;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ret(), output);
  }

  // optional uint64 comment_id = 10;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->comment_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_comment_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional string from_name = 3;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->from_name(), target);
  }

  // optional uint64 to_id = 4;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->to_id(), target);
  }

  // optional string to_name = 5;
  if (has_to_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_name().data(), this->to_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->to_name(), target);
  }

  // optional string msg_content = 6;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_content().data(), this->msg_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->msg_content(), target);
  }

  // optional uint64 show_role_id = 7;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 8;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->emotion_id(), target);
  }

  // optional uint32 ret = 9;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ret(), target);
  }

  // optional uint64 comment_id = 10;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->comment_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_comment_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 3;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint64 to_id = 4;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional string to_name = 5;
    if (has_to_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_name());
    }

    // optional string msg_content = 6;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_content());
    }

    // optional uint64 show_role_id = 7;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 8;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ret = 9;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 comment_id = 10;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comment_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_comment_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_comment_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_comment_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_comment_emotion_ack::MergeFrom(const role_show_comment_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_to_name()) {
      set_to_name(from.to_name());
    }
    if (from.has_msg_content()) {
      set_msg_content(from.msg_content());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_comment_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_comment_emotion_ack::CopyFrom(const role_show_comment_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_comment_emotion_ack::IsInitialized() const {

  return true;
}

void role_show_comment_emotion_ack::Swap(role_show_comment_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(to_id_, other->to_id_);
    std::swap(to_name_, other->to_name_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(ret_, other->ret_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_comment_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_comment_emotion_ack_descriptor_;
  metadata.reflection = role_show_comment_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_remove_emotion_req::kProtoidFieldNumber;
const int role_show_remove_emotion_req::kEmotionIdFieldNumber;
#endif  // !_MSC_VER

role_show_remove_emotion_req::role_show_remove_emotion_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_remove_emotion_req::InitAsDefaultInstance() {
}

role_show_remove_emotion_req::role_show_remove_emotion_req(const role_show_remove_emotion_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_remove_emotion_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5253;
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_remove_emotion_req::~role_show_remove_emotion_req() {
  SharedDtor();
}

void role_show_remove_emotion_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_remove_emotion_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_remove_emotion_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_remove_emotion_req_descriptor_;
}

const role_show_remove_emotion_req& role_show_remove_emotion_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_remove_emotion_req* role_show_remove_emotion_req::default_instance_ = NULL;

role_show_remove_emotion_req* role_show_remove_emotion_req::New() const {
  return new role_show_remove_emotion_req;
}

void role_show_remove_emotion_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5253;
    emotion_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_remove_emotion_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_remove_emotion_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 emotion_id = 2;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->emotion_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_remove_emotion_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 emotion_id = 2;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->emotion_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_remove_emotion_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 emotion_id = 2;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_remove_emotion_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_remove_emotion_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_remove_emotion_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_remove_emotion_req::MergeFrom(const role_show_remove_emotion_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_remove_emotion_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_remove_emotion_req::CopyFrom(const role_show_remove_emotion_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_remove_emotion_req::IsInitialized() const {

  return true;
}

void role_show_remove_emotion_req::Swap(role_show_remove_emotion_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_remove_emotion_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_remove_emotion_req_descriptor_;
  metadata.reflection = role_show_remove_emotion_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_remove_emotion_ack::kProtoidFieldNumber;
const int role_show_remove_emotion_ack::kEmotionIdFieldNumber;
const int role_show_remove_emotion_ack::kRetFieldNumber;
#endif  // !_MSC_VER

role_show_remove_emotion_ack::role_show_remove_emotion_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_remove_emotion_ack::InitAsDefaultInstance() {
}

role_show_remove_emotion_ack::role_show_remove_emotion_ack(const role_show_remove_emotion_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_remove_emotion_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5254;
  emotion_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_remove_emotion_ack::~role_show_remove_emotion_ack() {
  SharedDtor();
}

void role_show_remove_emotion_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_remove_emotion_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_remove_emotion_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_remove_emotion_ack_descriptor_;
}

const role_show_remove_emotion_ack& role_show_remove_emotion_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_remove_emotion_ack* role_show_remove_emotion_ack::default_instance_ = NULL;

role_show_remove_emotion_ack* role_show_remove_emotion_ack::New() const {
  return new role_show_remove_emotion_ack;
}

void role_show_remove_emotion_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5254;
    emotion_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_remove_emotion_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_remove_emotion_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 emotion_id = 2;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->emotion_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_remove_emotion_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 emotion_id = 2;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->emotion_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_remove_emotion_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 emotion_id = 2;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_remove_emotion_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_remove_emotion_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_remove_emotion_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_remove_emotion_ack::MergeFrom(const role_show_remove_emotion_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_remove_emotion_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_remove_emotion_ack::CopyFrom(const role_show_remove_emotion_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_remove_emotion_ack::IsInitialized() const {

  return true;
}

void role_show_remove_emotion_ack::Swap(role_show_remove_emotion_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_remove_emotion_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_remove_emotion_ack_descriptor_;
  metadata.reflection = role_show_remove_emotion_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_remove_comment_req::kProtoidFieldNumber;
const int role_show_remove_comment_req::kFromIdFieldNumber;
const int role_show_remove_comment_req::kToIdFieldNumber;
const int role_show_remove_comment_req::kShowRoleIdFieldNumber;
const int role_show_remove_comment_req::kEmotionIdFieldNumber;
const int role_show_remove_comment_req::kCommentIdFieldNumber;
#endif  // !_MSC_VER

role_show_remove_comment_req::role_show_remove_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_remove_comment_req::InitAsDefaultInstance() {
}

role_show_remove_comment_req::role_show_remove_comment_req(const role_show_remove_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_remove_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5255;
  from_id_ = GOOGLE_ULONGLONG(0);
  to_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  comment_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_remove_comment_req::~role_show_remove_comment_req() {
  SharedDtor();
}

void role_show_remove_comment_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_remove_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_remove_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_remove_comment_req_descriptor_;
}

const role_show_remove_comment_req& role_show_remove_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_remove_comment_req* role_show_remove_comment_req::default_instance_ = NULL;

role_show_remove_comment_req* role_show_remove_comment_req::New() const {
  return new role_show_remove_comment_req;
}

void role_show_remove_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5255;
    from_id_ = GOOGLE_ULONGLONG(0);
    to_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
    comment_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_remove_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_comment_id;
        break;
      }

      // optional uint64 comment_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_remove_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->emotion_id(), output);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->comment_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_remove_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->emotion_id(), target);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->comment_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_remove_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional uint64 to_id = 3;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 5;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 comment_id = 6;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comment_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_remove_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_remove_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_remove_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_remove_comment_req::MergeFrom(const role_show_remove_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_remove_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_remove_comment_req::CopyFrom(const role_show_remove_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_remove_comment_req::IsInitialized() const {

  return true;
}

void role_show_remove_comment_req::Swap(role_show_remove_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_remove_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_remove_comment_req_descriptor_;
  metadata.reflection = role_show_remove_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_remove_comment_ack::kProtoidFieldNumber;
const int role_show_remove_comment_ack::kFromIdFieldNumber;
const int role_show_remove_comment_ack::kToIdFieldNumber;
const int role_show_remove_comment_ack::kShowRoleIdFieldNumber;
const int role_show_remove_comment_ack::kEmotionIdFieldNumber;
const int role_show_remove_comment_ack::kCommentIdFieldNumber;
const int role_show_remove_comment_ack::kRetFieldNumber;
#endif  // !_MSC_VER

role_show_remove_comment_ack::role_show_remove_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_remove_comment_ack::InitAsDefaultInstance() {
}

role_show_remove_comment_ack::role_show_remove_comment_ack(const role_show_remove_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_remove_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5256;
  from_id_ = GOOGLE_ULONGLONG(0);
  to_id_ = GOOGLE_ULONGLONG(0);
  show_role_id_ = GOOGLE_ULONGLONG(0);
  emotion_id_ = GOOGLE_ULONGLONG(0);
  comment_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_remove_comment_ack::~role_show_remove_comment_ack() {
  SharedDtor();
}

void role_show_remove_comment_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_remove_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_remove_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_remove_comment_ack_descriptor_;
}

const role_show_remove_comment_ack& role_show_remove_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_remove_comment_ack* role_show_remove_comment_ack::default_instance_ = NULL;

role_show_remove_comment_ack* role_show_remove_comment_ack::New() const {
  return new role_show_remove_comment_ack;
}

void role_show_remove_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5256;
    from_id_ = GOOGLE_ULONGLONG(0);
    to_id_ = GOOGLE_ULONGLONG(0);
    show_role_id_ = GOOGLE_ULONGLONG(0);
    emotion_id_ = GOOGLE_ULONGLONG(0);
    comment_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_remove_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_id;
        break;
      }

      // optional uint64 from_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_id;
        break;
      }

      // optional uint64 to_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_id_)));
          set_has_to_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_emotion_id;
        break;
      }

      // optional uint64 emotion_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_emotion_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &emotion_id_)));
          set_has_emotion_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_comment_id;
        break;
      }

      // optional uint64 comment_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_remove_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_id(), output);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_id(), output);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->show_role_id(), output);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->emotion_id(), output);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->comment_id(), output);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_remove_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_id = 2;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_id(), target);
  }

  // optional uint64 to_id = 3;
  if (has_to_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_id(), target);
  }

  // optional uint64 show_role_id = 4;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->show_role_id(), target);
  }

  // optional uint64 emotion_id = 5;
  if (has_emotion_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->emotion_id(), target);
  }

  // optional uint64 comment_id = 6;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->comment_id(), target);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_remove_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_id = 2;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional uint64 to_id = 3;
    if (has_to_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_id());
    }

    // optional uint64 show_role_id = 4;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional uint64 emotion_id = 5;
    if (has_emotion_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->emotion_id());
    }

    // optional uint64 comment_id = 6;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->comment_id());
    }

    // optional uint32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_remove_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_remove_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_remove_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_remove_comment_ack::MergeFrom(const role_show_remove_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_to_id()) {
      set_to_id(from.to_id());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_emotion_id()) {
      set_emotion_id(from.emotion_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_remove_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_remove_comment_ack::CopyFrom(const role_show_remove_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_remove_comment_ack::IsInitialized() const {

  return true;
}

void role_show_remove_comment_ack::Swap(role_show_remove_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_id_, other->from_id_);
    std::swap(to_id_, other->to_id_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(emotion_id_, other->emotion_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_remove_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_remove_comment_ack_descriptor_;
  metadata.reflection = role_show_remove_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_set_hero_info::kIndexFieldNumber;
const int role_show_set_hero_info::kHeroIdFieldNumber;
#endif  // !_MSC_VER

role_show_set_hero_info::role_show_set_hero_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_set_hero_info::InitAsDefaultInstance() {
}

role_show_set_hero_info::role_show_set_hero_info(const role_show_set_hero_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_set_hero_info::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  hero_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_set_hero_info::~role_show_set_hero_info() {
  SharedDtor();
}

void role_show_set_hero_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_set_hero_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_set_hero_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_set_hero_info_descriptor_;
}

const role_show_set_hero_info& role_show_set_hero_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_set_hero_info* role_show_set_hero_info::default_instance_ = NULL;

role_show_set_hero_info* role_show_set_hero_info::New() const {
  return new role_show_set_hero_info;
}

void role_show_set_hero_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    hero_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_set_hero_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional int64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_set_hero_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_set_hero_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_set_hero_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_set_hero_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_set_hero_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_set_hero_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_set_hero_info::MergeFrom(const role_show_set_hero_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_set_hero_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_set_hero_info::CopyFrom(const role_show_set_hero_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_set_hero_info::IsInitialized() const {

  return true;
}

void role_show_set_hero_info::Swap(role_show_set_hero_info* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_set_hero_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_set_hero_info_descriptor_;
  metadata.reflection = role_show_set_hero_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_set_hero_req::kProtoidFieldNumber;
const int role_show_set_hero_req::kDataFieldNumber;
#endif  // !_MSC_VER

role_show_set_hero_req::role_show_set_hero_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_set_hero_req::InitAsDefaultInstance() {
}

role_show_set_hero_req::role_show_set_hero_req(const role_show_set_hero_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_set_hero_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5225;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_set_hero_req::~role_show_set_hero_req() {
  SharedDtor();
}

void role_show_set_hero_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_set_hero_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_set_hero_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_set_hero_req_descriptor_;
}

const role_show_set_hero_req& role_show_set_hero_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_set_hero_req* role_show_set_hero_req::default_instance_ = NULL;

role_show_set_hero_req* role_show_set_hero_req::New() const {
  return new role_show_set_hero_req;
}

void role_show_set_hero_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5225;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_set_hero_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.role_show_set_hero_info data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_set_hero_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.role_show_set_hero_info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_set_hero_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.role_show_set_hero_info data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_set_hero_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.role_show_set_hero_info data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_set_hero_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_set_hero_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_set_hero_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_set_hero_req::MergeFrom(const role_show_set_hero_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_set_hero_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_set_hero_req::CopyFrom(const role_show_set_hero_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_set_hero_req::IsInitialized() const {

  return true;
}

void role_show_set_hero_req::Swap(role_show_set_hero_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_set_hero_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_set_hero_req_descriptor_;
  metadata.reflection = role_show_set_hero_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_set_hero_ack::kProtoidFieldNumber;
const int role_show_set_hero_ack::kResultFieldNumber;
#endif  // !_MSC_VER

role_show_set_hero_ack::role_show_set_hero_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_set_hero_ack::InitAsDefaultInstance() {
}

role_show_set_hero_ack::role_show_set_hero_ack(const role_show_set_hero_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_set_hero_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5226;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_set_hero_ack::~role_show_set_hero_ack() {
  SharedDtor();
}

void role_show_set_hero_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_set_hero_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_set_hero_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_set_hero_ack_descriptor_;
}

const role_show_set_hero_ack& role_show_set_hero_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_set_hero_ack* role_show_set_hero_ack::default_instance_ = NULL;

role_show_set_hero_ack* role_show_set_hero_ack::New() const {
  return new role_show_set_hero_ack;
}

void role_show_set_hero_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5226;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_set_hero_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_set_hero_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_set_hero_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_set_hero_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_set_hero_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_set_hero_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_set_hero_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_set_hero_ack::MergeFrom(const role_show_set_hero_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_set_hero_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_set_hero_ack::CopyFrom(const role_show_set_hero_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_set_hero_ack::IsInitialized() const {

  return true;
}

void role_show_set_hero_ack::Swap(role_show_set_hero_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_set_hero_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_set_hero_ack_descriptor_;
  metadata.reflection = role_show_set_hero_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_set_border_req::kProtoidFieldNumber;
const int role_show_set_border_req::kBorderIdFieldNumber;
#endif  // !_MSC_VER

role_show_set_border_req::role_show_set_border_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_set_border_req::InitAsDefaultInstance() {
}

role_show_set_border_req::role_show_set_border_req(const role_show_set_border_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_set_border_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5227;
  border_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_set_border_req::~role_show_set_border_req() {
  SharedDtor();
}

void role_show_set_border_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_set_border_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_set_border_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_set_border_req_descriptor_;
}

const role_show_set_border_req& role_show_set_border_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_set_border_req* role_show_set_border_req::default_instance_ = NULL;

role_show_set_border_req* role_show_set_border_req::New() const {
  return new role_show_set_border_req;
}

void role_show_set_border_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5227;
    border_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_set_border_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_border_id;
        break;
      }

      // optional int32 border_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_border_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &border_id_)));
          set_has_border_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_set_border_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 border_id = 2;
  if (has_border_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->border_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_set_border_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 border_id = 2;
  if (has_border_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->border_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_set_border_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 border_id = 2;
    if (has_border_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->border_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_set_border_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_set_border_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_set_border_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_set_border_req::MergeFrom(const role_show_set_border_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_border_id()) {
      set_border_id(from.border_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_set_border_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_set_border_req::CopyFrom(const role_show_set_border_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_set_border_req::IsInitialized() const {

  return true;
}

void role_show_set_border_req::Swap(role_show_set_border_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(border_id_, other->border_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_set_border_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_set_border_req_descriptor_;
  metadata.reflection = role_show_set_border_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_set_border_ack::kProtoidFieldNumber;
const int role_show_set_border_ack::kResultFieldNumber;
#endif  // !_MSC_VER

role_show_set_border_ack::role_show_set_border_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_set_border_ack::InitAsDefaultInstance() {
}

role_show_set_border_ack::role_show_set_border_ack(const role_show_set_border_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_set_border_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5228;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_set_border_ack::~role_show_set_border_ack() {
  SharedDtor();
}

void role_show_set_border_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_set_border_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_set_border_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_set_border_ack_descriptor_;
}

const role_show_set_border_ack& role_show_set_border_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_set_border_ack* role_show_set_border_ack::default_instance_ = NULL;

role_show_set_border_ack* role_show_set_border_ack::New() const {
  return new role_show_set_border_ack;
}

void role_show_set_border_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5228;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_set_border_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_set_border_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_set_border_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_set_border_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_set_border_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_set_border_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_set_border_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_set_border_ack::MergeFrom(const role_show_set_border_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_set_border_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_set_border_ack::CopyFrom(const role_show_set_border_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_set_border_ack::IsInitialized() const {

  return true;
}

void role_show_set_border_ack::Swap(role_show_set_border_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_set_border_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_set_border_ack_descriptor_;
  metadata.reflection = role_show_set_border_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_comment_req::kProtoidFieldNumber;
const int role_show_comment_req::kShowRoleIdFieldNumber;
const int role_show_comment_req::kCommentFieldNumber;
#endif  // !_MSC_VER

role_show_comment_req::role_show_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_comment_req::InitAsDefaultInstance() {
  comment_ = const_cast< ::SProtoSpace::comment_info*>(&::SProtoSpace::comment_info::default_instance());
}

role_show_comment_req::role_show_comment_req(const role_show_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5229;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_comment_req::~role_show_comment_req() {
  SharedDtor();
}

void role_show_comment_req::SharedDtor() {
  if (this != default_instance_) {
    delete comment_;
  }
}

void role_show_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_comment_req_descriptor_;
}

const role_show_comment_req& role_show_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_comment_req* role_show_comment_req::default_instance_ = NULL;

role_show_comment_req* role_show_comment_req::New() const {
  return new role_show_comment_req;
}

void role_show_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5229;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_comment()) {
      if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }

      // optional .SProtoSpace.comment_info comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  // optional .SProtoSpace.comment_info comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  // optional .SProtoSpace.comment_info comment = 3;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.comment_info comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_comment_req::MergeFrom(const role_show_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_comment()) {
      mutable_comment()->::SProtoSpace::comment_info::MergeFrom(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_comment_req::CopyFrom(const role_show_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_comment_req::IsInitialized() const {

  return true;
}

void role_show_comment_req::Swap(role_show_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_comment_req_descriptor_;
  metadata.reflection = role_show_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_comment_ack::kProtoidFieldNumber;
const int role_show_comment_ack::kResultFieldNumber;
const int role_show_comment_ack::kCommentFieldNumber;
#endif  // !_MSC_VER

role_show_comment_ack::role_show_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_comment_ack::InitAsDefaultInstance() {
  comment_ = const_cast< ::SProtoSpace::comment_info*>(&::SProtoSpace::comment_info::default_instance());
}

role_show_comment_ack::role_show_comment_ack(const role_show_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5230;
  result_ = 0;
  comment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_comment_ack::~role_show_comment_ack() {
  SharedDtor();
}

void role_show_comment_ack::SharedDtor() {
  if (this != default_instance_) {
    delete comment_;
  }
}

void role_show_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_comment_ack_descriptor_;
}

const role_show_comment_ack& role_show_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_comment_ack* role_show_comment_ack::default_instance_ = NULL;

role_show_comment_ack* role_show_comment_ack::New() const {
  return new role_show_comment_ack;
}

void role_show_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5230;
    result_ = 0;
    if (has_comment()) {
      if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_comment;
        break;
      }

      // optional .SProtoSpace.comment_info comment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .SProtoSpace.comment_info comment = 3;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .SProtoSpace.comment_info comment = 3;
  if (has_comment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .SProtoSpace.comment_info comment = 3;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_comment_ack::MergeFrom(const role_show_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_comment()) {
      mutable_comment()->::SProtoSpace::comment_info::MergeFrom(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_comment_ack::CopyFrom(const role_show_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_comment_ack::IsInitialized() const {

  return true;
}

void role_show_comment_ack::Swap(role_show_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_comment_ack_descriptor_;
  metadata.reflection = role_show_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_delete_comment_req::kProtoidFieldNumber;
const int role_show_delete_comment_req::kRoleIdFieldNumber;
const int role_show_delete_comment_req::kToRoleIdFieldNumber;
const int role_show_delete_comment_req::kTimeFieldNumber;
#endif  // !_MSC_VER

role_show_delete_comment_req::role_show_delete_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_delete_comment_req::InitAsDefaultInstance() {
}

role_show_delete_comment_req::role_show_delete_comment_req(const role_show_delete_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_delete_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5231;
  role_id_ = GOOGLE_ULONGLONG(0);
  to_role_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_delete_comment_req::~role_show_delete_comment_req() {
  SharedDtor();
}

void role_show_delete_comment_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_delete_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_delete_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_delete_comment_req_descriptor_;
}

const role_show_delete_comment_req& role_show_delete_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_delete_comment_req* role_show_delete_comment_req::default_instance_ = NULL;

role_show_delete_comment_req* role_show_delete_comment_req::New() const {
  return new role_show_delete_comment_req;
}

void role_show_delete_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5231;
    role_id_ = GOOGLE_ULONGLONG(0);
    to_role_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_delete_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_to_role_id;
        break;
      }

      // optional uint64 to_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_role_id_)));
          set_has_to_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_delete_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint64 to_role_id = 3;
  if (has_to_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->to_role_id(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_delete_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint64 to_role_id = 3;
  if (has_to_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->to_role_id(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_delete_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 to_role_id = 3;
    if (has_to_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to_role_id());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_delete_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_delete_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_delete_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_delete_comment_req::MergeFrom(const role_show_delete_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_to_role_id()) {
      set_to_role_id(from.to_role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_delete_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_delete_comment_req::CopyFrom(const role_show_delete_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_delete_comment_req::IsInitialized() const {

  return true;
}

void role_show_delete_comment_req::Swap(role_show_delete_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(to_role_id_, other->to_role_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_delete_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_delete_comment_req_descriptor_;
  metadata.reflection = role_show_delete_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_delete_comment_ack::kProtoidFieldNumber;
const int role_show_delete_comment_ack::kResultFieldNumber;
#endif  // !_MSC_VER

role_show_delete_comment_ack::role_show_delete_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_delete_comment_ack::InitAsDefaultInstance() {
}

role_show_delete_comment_ack::role_show_delete_comment_ack(const role_show_delete_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_delete_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5232;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_delete_comment_ack::~role_show_delete_comment_ack() {
  SharedDtor();
}

void role_show_delete_comment_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_delete_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_delete_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_delete_comment_ack_descriptor_;
}

const role_show_delete_comment_ack& role_show_delete_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_delete_comment_ack* role_show_delete_comment_ack::default_instance_ = NULL;

role_show_delete_comment_ack* role_show_delete_comment_ack::New() const {
  return new role_show_delete_comment_ack;
}

void role_show_delete_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5232;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_delete_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_delete_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_delete_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_delete_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_delete_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_delete_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_delete_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_delete_comment_ack::MergeFrom(const role_show_delete_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_delete_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_delete_comment_ack::CopyFrom(const role_show_delete_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_delete_comment_ack::IsInitialized() const {

  return true;
}

void role_show_delete_comment_ack::Swap(role_show_delete_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_delete_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_delete_comment_ack_descriptor_;
  metadata.reflection = role_show_delete_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_get_comment_req::kProtoidFieldNumber;
const int role_show_get_comment_req::kShowRoleIdFieldNumber;
#endif  // !_MSC_VER

role_show_get_comment_req::role_show_get_comment_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_get_comment_req::InitAsDefaultInstance() {
}

role_show_get_comment_req::role_show_get_comment_req(const role_show_get_comment_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_get_comment_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5233;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_get_comment_req::~role_show_get_comment_req() {
  SharedDtor();
}

void role_show_get_comment_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_show_get_comment_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_get_comment_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_get_comment_req_descriptor_;
}

const role_show_get_comment_req& role_show_get_comment_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_get_comment_req* role_show_get_comment_req::default_instance_ = NULL;

role_show_get_comment_req* role_show_get_comment_req::New() const {
  return new role_show_get_comment_req;
}

void role_show_get_comment_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5233;
    show_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_get_comment_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_get_comment_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->show_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_get_comment_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 show_role_id = 2;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->show_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_get_comment_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 show_role_id = 2;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_get_comment_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_get_comment_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_get_comment_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_get_comment_req::MergeFrom(const role_show_get_comment_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_get_comment_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_get_comment_req::CopyFrom(const role_show_get_comment_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_get_comment_req::IsInitialized() const {

  return true;
}

void role_show_get_comment_req::Swap(role_show_get_comment_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_get_comment_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_get_comment_req_descriptor_;
  metadata.reflection = role_show_get_comment_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_show_get_comment_ack::kProtoidFieldNumber;
const int role_show_get_comment_ack::kResultFieldNumber;
const int role_show_get_comment_ack::kShowRoleIdFieldNumber;
const int role_show_get_comment_ack::kCommentAllFieldNumber;
#endif  // !_MSC_VER

role_show_get_comment_ack::role_show_get_comment_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_show_get_comment_ack::InitAsDefaultInstance() {
  comment_all_ = const_cast< ::SProtoSpace::comment_all*>(&::SProtoSpace::comment_all::default_instance());
}

role_show_get_comment_ack::role_show_get_comment_ack(const role_show_get_comment_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_show_get_comment_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5234;
  result_ = 0;
  show_role_id_ = GOOGLE_ULONGLONG(0);
  comment_all_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_show_get_comment_ack::~role_show_get_comment_ack() {
  SharedDtor();
}

void role_show_get_comment_ack::SharedDtor() {
  if (this != default_instance_) {
    delete comment_all_;
  }
}

void role_show_get_comment_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_show_get_comment_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_show_get_comment_ack_descriptor_;
}

const role_show_get_comment_ack& role_show_get_comment_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_show_get_comment_ack* role_show_get_comment_ack::default_instance_ = NULL;

role_show_get_comment_ack* role_show_get_comment_ack::New() const {
  return new role_show_get_comment_ack;
}

void role_show_get_comment_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5234;
    result_ = 0;
    show_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_comment_all()) {
      if (comment_all_ != NULL) comment_all_->::SProtoSpace::comment_all::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_show_get_comment_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_show_role_id;
        break;
      }

      // optional uint64 show_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &show_role_id_)));
          set_has_show_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment_all;
        break;
      }

      // optional .SProtoSpace.comment_all comment_all = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_all:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comment_all()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_show_get_comment_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->show_role_id(), output);
  }

  // optional .SProtoSpace.comment_all comment_all = 4;
  if (has_comment_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->comment_all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_show_get_comment_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint64 show_role_id = 3;
  if (has_show_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->show_role_id(), target);
  }

  // optional .SProtoSpace.comment_all comment_all = 4;
  if (has_comment_all()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->comment_all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_show_get_comment_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 show_role_id = 3;
    if (has_show_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->show_role_id());
    }

    // optional .SProtoSpace.comment_all comment_all = 4;
    if (has_comment_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comment_all());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_show_get_comment_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_show_get_comment_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_show_get_comment_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_show_get_comment_ack::MergeFrom(const role_show_get_comment_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_show_role_id()) {
      set_show_role_id(from.show_role_id());
    }
    if (from.has_comment_all()) {
      mutable_comment_all()->::SProtoSpace::comment_all::MergeFrom(from.comment_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_show_get_comment_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_show_get_comment_ack::CopyFrom(const role_show_get_comment_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_show_get_comment_ack::IsInitialized() const {

  return true;
}

void role_show_get_comment_ack::Swap(role_show_get_comment_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(show_role_id_, other->show_role_id_);
    std::swap(comment_all_, other->comment_all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_show_get_comment_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_show_get_comment_ack_descriptor_;
  metadata.reflection = role_show_get_comment_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discover_info_ntf::kProtoidFieldNumber;
const int discover_info_ntf::kTimeFieldNumber;
const int discover_info_ntf::kUpdateFieldNumber;
const int discover_info_ntf::kChapterSFieldNumber;
const int discover_info_ntf::kDiscoverSFieldNumber;
const int discover_info_ntf::kStarBoxIdsFieldNumber;
#endif  // !_MSC_VER

discover_info_ntf::discover_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discover_info_ntf::InitAsDefaultInstance() {
}

discover_info_ntf::discover_info_ntf(const discover_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discover_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5800;
  time_ = 0;
  update_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discover_info_ntf::~discover_info_ntf() {
  SharedDtor();
}

void discover_info_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discover_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discover_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discover_info_ntf_descriptor_;
}

const discover_info_ntf& discover_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discover_info_ntf* discover_info_ntf::default_instance_ = NULL;

discover_info_ntf* discover_info_ntf::New() const {
  return new discover_info_ntf;
}

void discover_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5800;
    time_ = 0;
    update_ = false;
  }
  chapter_s_.Clear();
  discover_s_.Clear();
  star_box_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discover_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_update;
        break;
      }

      // optional bool update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_)));
          set_has_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chapter_s;
        break;
      }

      // repeated .SProtoSpace.dischapter_data chapter_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chapter_s;
        if (input->ExpectTag(42)) goto parse_discover_s;
        break;
      }

      // repeated .SProtoSpace.discover_data discover_s = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_discover_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_discover_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_discover_s;
        if (input->ExpectTag(48)) goto parse_star_box_ids;
        break;
      }

      // repeated int32 star_box_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_box_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_star_box_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_star_box_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_box_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discover_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional bool update = 3;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->update(), output);
  }

  // repeated .SProtoSpace.dischapter_data chapter_s = 4;
  for (int i = 0; i < this->chapter_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chapter_s(i), output);
  }

  // repeated .SProtoSpace.discover_data discover_s = 5;
  for (int i = 0; i < this->discover_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->discover_s(i), output);
  }

  // repeated int32 star_box_ids = 6;
  for (int i = 0; i < this->star_box_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->star_box_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discover_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional bool update = 3;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->update(), target);
  }

  // repeated .SProtoSpace.dischapter_data chapter_s = 4;
  for (int i = 0; i < this->chapter_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chapter_s(i), target);
  }

  // repeated .SProtoSpace.discover_data discover_s = 5;
  for (int i = 0; i < this->discover_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->discover_s(i), target);
  }

  // repeated int32 star_box_ids = 6;
  for (int i = 0; i < this->star_box_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->star_box_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discover_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional bool update = 3;
    if (has_update()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SProtoSpace.dischapter_data chapter_s = 4;
  total_size += 1 * this->chapter_s_size();
  for (int i = 0; i < this->chapter_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_s(i));
  }

  // repeated .SProtoSpace.discover_data discover_s = 5;
  total_size += 1 * this->discover_s_size();
  for (int i = 0; i < this->discover_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->discover_s(i));
  }

  // repeated int32 star_box_ids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_box_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->star_box_ids(i));
    }
    total_size += 1 * this->star_box_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discover_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discover_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discover_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discover_info_ntf::MergeFrom(const discover_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_s_.MergeFrom(from.chapter_s_);
  discover_s_.MergeFrom(from.discover_s_);
  star_box_ids_.MergeFrom(from.star_box_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_update()) {
      set_update(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discover_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discover_info_ntf::CopyFrom(const discover_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discover_info_ntf::IsInitialized() const {

  return true;
}

void discover_info_ntf::Swap(discover_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(time_, other->time_);
    std::swap(update_, other->update_);
    chapter_s_.Swap(&other->chapter_s_);
    discover_s_.Swap(&other->discover_s_);
    star_box_ids_.Swap(&other->star_box_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discover_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discover_info_ntf_descriptor_;
  metadata.reflection = discover_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discover_show_boss_ntf::kProtoidFieldNumber;
const int discover_show_boss_ntf::kIdFieldNumber;
const int discover_show_boss_ntf::kBossIdFieldNumber;
#endif  // !_MSC_VER

discover_show_boss_ntf::discover_show_boss_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discover_show_boss_ntf::InitAsDefaultInstance() {
}

discover_show_boss_ntf::discover_show_boss_ntf(const discover_show_boss_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discover_show_boss_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5801;
  id_ = 0;
  boss_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discover_show_boss_ntf::~discover_show_boss_ntf() {
  SharedDtor();
}

void discover_show_boss_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discover_show_boss_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discover_show_boss_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discover_show_boss_ntf_descriptor_;
}

const discover_show_boss_ntf& discover_show_boss_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discover_show_boss_ntf* discover_show_boss_ntf::default_instance_ = NULL;

discover_show_boss_ntf* discover_show_boss_ntf::New() const {
  return new discover_show_boss_ntf;
}

void discover_show_boss_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5801;
    id_ = 0;
    boss_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discover_show_boss_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_show_boss_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boss_id;
        break;
      }

      // optional int32 boss_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_id_)));
          set_has_boss_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discover_show_boss_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_show_boss_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 boss_id = 3;
  if (has_boss_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boss_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discover_show_boss_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_show_boss_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 boss_id = 3;
  if (has_boss_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boss_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discover_show_boss_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_show_boss_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 boss_id = 3;
    if (has_boss_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discover_show_boss_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discover_show_boss_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discover_show_boss_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discover_show_boss_ntf::MergeFrom(const discover_show_boss_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_boss_id()) {
      set_boss_id(from.boss_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discover_show_boss_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discover_show_boss_ntf::CopyFrom(const discover_show_boss_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discover_show_boss_ntf::IsInitialized() const {

  return true;
}

void discover_show_boss_ntf::Swap(discover_show_boss_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(boss_id_, other->boss_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discover_show_boss_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discover_show_boss_ntf_descriptor_;
  metadata.reflection = discover_show_boss_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_discover_req::kProtoidFieldNumber;
const int enter_discover_req::kIdFieldNumber;
#endif  // !_MSC_VER

enter_discover_req::enter_discover_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_discover_req::InitAsDefaultInstance() {
}

enter_discover_req::enter_discover_req(const enter_discover_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_discover_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5802;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_discover_req::~enter_discover_req() {
  SharedDtor();
}

void enter_discover_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_discover_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_discover_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_discover_req_descriptor_;
}

const enter_discover_req& enter_discover_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

enter_discover_req* enter_discover_req::default_instance_ = NULL;

enter_discover_req* enter_discover_req::New() const {
  return new enter_discover_req;
}

void enter_discover_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5802;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_discover_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_discover_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_discover_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_discover_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_discover_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_discover_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_discover_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_discover_req::MergeFrom(const enter_discover_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_discover_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_discover_req::CopyFrom(const enter_discover_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_discover_req::IsInitialized() const {

  return true;
}

void enter_discover_req::Swap(enter_discover_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_discover_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_discover_req_descriptor_;
  metadata.reflection = enter_discover_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_discover_ack::kProtoidFieldNumber;
const int enter_discover_ack::kResultFieldNumber;
const int enter_discover_ack::kIdFieldNumber;
#endif  // !_MSC_VER

enter_discover_ack::enter_discover_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_discover_ack::InitAsDefaultInstance() {
}

enter_discover_ack::enter_discover_ack(const enter_discover_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_discover_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5803;
  result_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_discover_ack::~enter_discover_ack() {
  SharedDtor();
}

void enter_discover_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_discover_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_discover_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_discover_ack_descriptor_;
}

const enter_discover_ack& enter_discover_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

enter_discover_ack* enter_discover_ack::default_instance_ = NULL;

enter_discover_ack* enter_discover_ack::New() const {
  return new enter_discover_ack;
}

void enter_discover_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5803;
    result_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_discover_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_discover_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_discover_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_discover_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_discover_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_discover_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_discover_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_discover_ack::MergeFrom(const enter_discover_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_discover_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_discover_ack::CopyFrom(const enter_discover_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_discover_ack::IsInitialized() const {

  return true;
}

void enter_discover_ack::Swap(enter_discover_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_discover_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_discover_ack_descriptor_;
  metadata.reflection = enter_discover_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_discover_req::kProtoidFieldNumber;
const int exit_discover_req::kIdFieldNumber;
#endif  // !_MSC_VER

exit_discover_req::exit_discover_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_discover_req::InitAsDefaultInstance() {
}

exit_discover_req::exit_discover_req(const exit_discover_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_discover_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5804;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_discover_req::~exit_discover_req() {
  SharedDtor();
}

void exit_discover_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_discover_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_discover_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_discover_req_descriptor_;
}

const exit_discover_req& exit_discover_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

exit_discover_req* exit_discover_req::default_instance_ = NULL;

exit_discover_req* exit_discover_req::New() const {
  return new exit_discover_req;
}

void exit_discover_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5804;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_discover_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_discover_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_discover_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_discover_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_discover_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_discover_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_discover_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_discover_req::MergeFrom(const exit_discover_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_discover_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_discover_req::CopyFrom(const exit_discover_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_discover_req::IsInitialized() const {

  return true;
}

void exit_discover_req::Swap(exit_discover_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_discover_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_discover_req_descriptor_;
  metadata.reflection = exit_discover_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_discover_ack::kProtoidFieldNumber;
const int exit_discover_ack::kResultFieldNumber;
const int exit_discover_ack::kIdFieldNumber;
const int exit_discover_ack::kBoxnumFieldNumber;
const int exit_discover_ack::kItemsFieldNumber;
const int exit_discover_ack::kMonsterFieldNumber;
#endif  // !_MSC_VER

exit_discover_ack::exit_discover_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_discover_ack::InitAsDefaultInstance() {
}

exit_discover_ack::exit_discover_ack(const exit_discover_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_discover_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5805;
  result_ = 0;
  id_ = 0;
  boxnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_discover_ack::~exit_discover_ack() {
  SharedDtor();
}

void exit_discover_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_discover_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_discover_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_discover_ack_descriptor_;
}

const exit_discover_ack& exit_discover_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

exit_discover_ack* exit_discover_ack::default_instance_ = NULL;

exit_discover_ack* exit_discover_ack::New() const {
  return new exit_discover_ack;
}

void exit_discover_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5805;
    result_ = 0;
    id_ = 0;
    boxnum_ = 0;
  }
  items_.Clear();
  monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_discover_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxnum;
        break;
      }

      // optional int32 boxnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxnum_)));
          set_has_boxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.drop_data items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectTag(48)) goto parse_monster;
        break;
      }

      // repeated int32 monster = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_monster())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_monster())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_discover_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 boxnum = 4;
  if (has_boxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boxnum(), output);
  }

  // repeated .SProtoSpace.drop_data items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  // repeated int32 monster = 6;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_discover_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 boxnum = 4;
  if (has_boxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boxnum(), target);
  }

  // repeated .SProtoSpace.drop_data items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  // repeated int32 monster = 6;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_discover_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 boxnum = 4;
    if (has_boxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxnum());
    }

  }
  // repeated .SProtoSpace.drop_data items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated int32 monster = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->monster_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->monster(i));
    }
    total_size += 1 * this->monster_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_discover_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_discover_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_discover_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_discover_ack::MergeFrom(const exit_discover_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  monster_.MergeFrom(from.monster_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_boxnum()) {
      set_boxnum(from.boxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_discover_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_discover_ack::CopyFrom(const exit_discover_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_discover_ack::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void exit_discover_ack::Swap(exit_discover_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(boxnum_, other->boxnum_);
    items_.Swap(&other->items_);
    monster_.Swap(&other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_discover_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_discover_ack_descriptor_;
  metadata.reflection = exit_discover_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_mopping_req::kProtoidFieldNumber;
const int discovery_mopping_req::kMoppingTypeFieldNumber;
const int discovery_mopping_req::kTimesFieldNumber;
const int discovery_mopping_req::kDiscoveryIdFieldNumber;
const int discovery_mopping_req::kItemIdFieldNumber;
const int discovery_mopping_req::kItemAddNumFieldNumber;
#endif  // !_MSC_VER

discovery_mopping_req::discovery_mopping_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_mopping_req::InitAsDefaultInstance() {
}

discovery_mopping_req::discovery_mopping_req(const discovery_mopping_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_mopping_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5806;
  mopping_type_ = 1;
  times_ = 0;
  discovery_id_ = 0;
  item_id_ = 0;
  item_add_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_mopping_req::~discovery_mopping_req() {
  SharedDtor();
}

void discovery_mopping_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_mopping_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_mopping_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_mopping_req_descriptor_;
}

const discovery_mopping_req& discovery_mopping_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_mopping_req* discovery_mopping_req::default_instance_ = NULL;

discovery_mopping_req* discovery_mopping_req::New() const {
  return new discovery_mopping_req;
}

void discovery_mopping_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5806;
    mopping_type_ = 1;
    times_ = 0;
    discovery_id_ = 0;
    item_id_ = 0;
    item_add_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_mopping_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mopping_type;
        break;
      }

      // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mopping_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eDiscoveryMoppingType_IsValid(value)) {
            set_mopping_type(static_cast< ::SProtoSpace::eDiscoveryMoppingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_discovery_id;
        break;
      }

      // optional int32 discovery_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discovery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discovery_id_)));
          set_has_discovery_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_item_add_num;
        break;
      }

      // optional int32 item_add_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_add_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_add_num_)));
          set_has_item_add_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_mopping_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
  if (has_mopping_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mopping_type(), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // optional int32 discovery_id = 4;
  if (has_discovery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->discovery_id(), output);
  }

  // optional int32 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_id(), output);
  }

  // optional int32 item_add_num = 6;
  if (has_item_add_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_add_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_mopping_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
  if (has_mopping_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mopping_type(), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // optional int32 discovery_id = 4;
  if (has_discovery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->discovery_id(), target);
  }

  // optional int32 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_id(), target);
  }

  // optional int32 item_add_num = 6;
  if (has_item_add_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_add_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_mopping_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
    if (has_mopping_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mopping_type());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 discovery_id = 4;
    if (has_discovery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discovery_id());
    }

    // optional int32 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_add_num = 6;
    if (has_item_add_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_add_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_mopping_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_mopping_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_mopping_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_mopping_req::MergeFrom(const discovery_mopping_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mopping_type()) {
      set_mopping_type(from.mopping_type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_discovery_id()) {
      set_discovery_id(from.discovery_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_add_num()) {
      set_item_add_num(from.item_add_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_mopping_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_mopping_req::CopyFrom(const discovery_mopping_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_mopping_req::IsInitialized() const {

  return true;
}

void discovery_mopping_req::Swap(discovery_mopping_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mopping_type_, other->mopping_type_);
    std::swap(times_, other->times_);
    std::swap(discovery_id_, other->discovery_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_add_num_, other->item_add_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_mopping_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_mopping_req_descriptor_;
  metadata.reflection = discovery_mopping_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_mopping_ack_rewards::kItemIdFieldNumber;
const int discovery_mopping_ack_rewards::kItemCountFieldNumber;
#endif  // !_MSC_VER

discovery_mopping_ack_rewards::discovery_mopping_ack_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_mopping_ack_rewards::InitAsDefaultInstance() {
}

discovery_mopping_ack_rewards::discovery_mopping_ack_rewards(const discovery_mopping_ack_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_mopping_ack_rewards::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_mopping_ack_rewards::~discovery_mopping_ack_rewards() {
  SharedDtor();
}

void discovery_mopping_ack_rewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_mopping_ack_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_mopping_ack_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_mopping_ack_rewards_descriptor_;
}

const discovery_mopping_ack_rewards& discovery_mopping_ack_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_mopping_ack_rewards* discovery_mopping_ack_rewards::default_instance_ = NULL;

discovery_mopping_ack_rewards* discovery_mopping_ack_rewards::New() const {
  return new discovery_mopping_ack_rewards;
}

void discovery_mopping_ack_rewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_mopping_ack_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_mopping_ack_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_mopping_ack_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_mopping_ack_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_mopping_ack_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_mopping_ack_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_mopping_ack_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_mopping_ack_rewards::MergeFrom(const discovery_mopping_ack_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_mopping_ack_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_mopping_ack_rewards::CopyFrom(const discovery_mopping_ack_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_mopping_ack_rewards::IsInitialized() const {

  return true;
}

void discovery_mopping_ack_rewards::Swap(discovery_mopping_ack_rewards* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_mopping_ack_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_mopping_ack_rewards_descriptor_;
  metadata.reflection = discovery_mopping_ack_rewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_mopping_ack_moppping::kMoppingTimeFieldNumber;
const int discovery_mopping_ack_moppping::kRewardItemsFieldNumber;
#endif  // !_MSC_VER

discovery_mopping_ack_moppping::discovery_mopping_ack_moppping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_mopping_ack_moppping::InitAsDefaultInstance() {
}

discovery_mopping_ack_moppping::discovery_mopping_ack_moppping(const discovery_mopping_ack_moppping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_mopping_ack_moppping::SharedCtor() {
  _cached_size_ = 0;
  mopping_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_mopping_ack_moppping::~discovery_mopping_ack_moppping() {
  SharedDtor();
}

void discovery_mopping_ack_moppping::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_mopping_ack_moppping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_mopping_ack_moppping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_mopping_ack_moppping_descriptor_;
}

const discovery_mopping_ack_moppping& discovery_mopping_ack_moppping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_mopping_ack_moppping* discovery_mopping_ack_moppping::default_instance_ = NULL;

discovery_mopping_ack_moppping* discovery_mopping_ack_moppping::New() const {
  return new discovery_mopping_ack_moppping;
}

void discovery_mopping_ack_moppping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mopping_time_ = 0;
  }
  reward_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_mopping_ack_moppping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mopping_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mopping_time_)));
          set_has_mopping_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_items;
        break;
      }

      // repeated .SProtoSpace.discovery_mopping_ack_rewards reward_items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_mopping_ack_moppping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mopping_time = 1;
  if (has_mopping_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mopping_time(), output);
  }

  // repeated .SProtoSpace.discovery_mopping_ack_rewards reward_items = 2;
  for (int i = 0; i < this->reward_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_mopping_ack_moppping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mopping_time = 1;
  if (has_mopping_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mopping_time(), target);
  }

  // repeated .SProtoSpace.discovery_mopping_ack_rewards reward_items = 2;
  for (int i = 0; i < this->reward_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_mopping_ack_moppping::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mopping_time = 1;
    if (has_mopping_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mopping_time());
    }

  }
  // repeated .SProtoSpace.discovery_mopping_ack_rewards reward_items = 2;
  total_size += 1 * this->reward_items_size();
  for (int i = 0; i < this->reward_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_mopping_ack_moppping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_mopping_ack_moppping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_mopping_ack_moppping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_mopping_ack_moppping::MergeFrom(const discovery_mopping_ack_moppping& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_items_.MergeFrom(from.reward_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mopping_time()) {
      set_mopping_time(from.mopping_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_mopping_ack_moppping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_mopping_ack_moppping::CopyFrom(const discovery_mopping_ack_moppping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_mopping_ack_moppping::IsInitialized() const {

  return true;
}

void discovery_mopping_ack_moppping::Swap(discovery_mopping_ack_moppping* other) {
  if (other != this) {
    std::swap(mopping_time_, other->mopping_time_);
    reward_items_.Swap(&other->reward_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_mopping_ack_moppping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_mopping_ack_moppping_descriptor_;
  metadata.reflection = discovery_mopping_ack_moppping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_mopping_ack::kProtoidFieldNumber;
const int discovery_mopping_ack::kMoppingTypeFieldNumber;
const int discovery_mopping_ack::kTimesFieldNumber;
const int discovery_mopping_ack::kRetFieldNumber;
const int discovery_mopping_ack::kMoppingsFieldNumber;
const int discovery_mopping_ack::kMoppingTimesRemainFieldNumber;
const int discovery_mopping_ack::kDiscoveryIdFieldNumber;
#endif  // !_MSC_VER

discovery_mopping_ack::discovery_mopping_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_mopping_ack::InitAsDefaultInstance() {
}

discovery_mopping_ack::discovery_mopping_ack(const discovery_mopping_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_mopping_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5807;
  mopping_type_ = 1;
  times_ = 0;
  ret_ = 0;
  mopping_times_remain_ = 0;
  discovery_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_mopping_ack::~discovery_mopping_ack() {
  SharedDtor();
}

void discovery_mopping_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_mopping_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_mopping_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_mopping_ack_descriptor_;
}

const discovery_mopping_ack& discovery_mopping_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_mopping_ack* discovery_mopping_ack::default_instance_ = NULL;

discovery_mopping_ack* discovery_mopping_ack::New() const {
  return new discovery_mopping_ack;
}

void discovery_mopping_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5807;
    mopping_type_ = 1;
    times_ = 0;
    ret_ = 0;
    mopping_times_remain_ = 0;
    discovery_id_ = 0;
  }
  moppings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_mopping_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mopping_type;
        break;
      }

      // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mopping_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eDiscoveryMoppingType_IsValid(value)) {
            set_mopping_type(static_cast< ::SProtoSpace::eDiscoveryMoppingType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_times;
        break;
      }

      // optional int32 times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional .SProtoSpace.MsgErrorType ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_ret(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_moppings;
        break;
      }

      // repeated .SProtoSpace.discovery_mopping_ack_moppping moppings = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moppings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moppings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_moppings;
        if (input->ExpectTag(48)) goto parse_mopping_times_remain;
        break;
      }

      // optional int32 mopping_times_remain = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mopping_times_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mopping_times_remain_)));
          set_has_mopping_times_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_discovery_id;
        break;
      }

      // optional int32 discovery_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discovery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discovery_id_)));
          set_has_discovery_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_mopping_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
  if (has_mopping_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mopping_type(), output);
  }

  // optional int32 times = 3;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // optional .SProtoSpace.MsgErrorType ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  // repeated .SProtoSpace.discovery_mopping_ack_moppping moppings = 5;
  for (int i = 0; i < this->moppings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->moppings(i), output);
  }

  // optional int32 mopping_times_remain = 6;
  if (has_mopping_times_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mopping_times_remain(), output);
  }

  // optional int32 discovery_id = 7;
  if (has_discovery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->discovery_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_mopping_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
  if (has_mopping_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mopping_type(), target);
  }

  // optional int32 times = 3;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // optional .SProtoSpace.MsgErrorType ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  // repeated .SProtoSpace.discovery_mopping_ack_moppping moppings = 5;
  for (int i = 0; i < this->moppings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->moppings(i), target);
  }

  // optional int32 mopping_times_remain = 6;
  if (has_mopping_times_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mopping_times_remain(), target);
  }

  // optional int32 discovery_id = 7;
  if (has_discovery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->discovery_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_mopping_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
    if (has_mopping_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mopping_type());
    }

    // optional int32 times = 3;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional .SProtoSpace.MsgErrorType ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional int32 mopping_times_remain = 6;
    if (has_mopping_times_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mopping_times_remain());
    }

    // optional int32 discovery_id = 7;
    if (has_discovery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discovery_id());
    }

  }
  // repeated .SProtoSpace.discovery_mopping_ack_moppping moppings = 5;
  total_size += 1 * this->moppings_size();
  for (int i = 0; i < this->moppings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moppings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_mopping_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_mopping_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_mopping_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_mopping_ack::MergeFrom(const discovery_mopping_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  moppings_.MergeFrom(from.moppings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_mopping_type()) {
      set_mopping_type(from.mopping_type());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mopping_times_remain()) {
      set_mopping_times_remain(from.mopping_times_remain());
    }
    if (from.has_discovery_id()) {
      set_discovery_id(from.discovery_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_mopping_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_mopping_ack::CopyFrom(const discovery_mopping_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_mopping_ack::IsInitialized() const {

  return true;
}

void discovery_mopping_ack::Swap(discovery_mopping_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(mopping_type_, other->mopping_type_);
    std::swap(times_, other->times_);
    std::swap(ret_, other->ret_);
    moppings_.Swap(&other->moppings_);
    std::swap(mopping_times_remain_, other->mopping_times_remain_);
    std::swap(discovery_id_, other->discovery_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_mopping_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_mopping_ack_descriptor_;
  metadata.reflection = discovery_mopping_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_buy_times_req::kProtoidFieldNumber;
const int discovery_buy_times_req::kDiscoveryIdFieldNumber;
#endif  // !_MSC_VER

discovery_buy_times_req::discovery_buy_times_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_buy_times_req::InitAsDefaultInstance() {
}

discovery_buy_times_req::discovery_buy_times_req(const discovery_buy_times_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_buy_times_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5808;
  discovery_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_buy_times_req::~discovery_buy_times_req() {
  SharedDtor();
}

void discovery_buy_times_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_buy_times_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_buy_times_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_buy_times_req_descriptor_;
}

const discovery_buy_times_req& discovery_buy_times_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_buy_times_req* discovery_buy_times_req::default_instance_ = NULL;

discovery_buy_times_req* discovery_buy_times_req::New() const {
  return new discovery_buy_times_req;
}

void discovery_buy_times_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5808;
    discovery_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_buy_times_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discovery_id;
        break;
      }

      // optional int32 discovery_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discovery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discovery_id_)));
          set_has_discovery_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_buy_times_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 discovery_id = 2;
  if (has_discovery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->discovery_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_buy_times_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 discovery_id = 2;
  if (has_discovery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->discovery_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_buy_times_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 discovery_id = 2;
    if (has_discovery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discovery_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_buy_times_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_buy_times_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_buy_times_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_buy_times_req::MergeFrom(const discovery_buy_times_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_discovery_id()) {
      set_discovery_id(from.discovery_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_buy_times_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_buy_times_req::CopyFrom(const discovery_buy_times_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_buy_times_req::IsInitialized() const {

  return true;
}

void discovery_buy_times_req::Swap(discovery_buy_times_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(discovery_id_, other->discovery_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_buy_times_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_buy_times_req_descriptor_;
  metadata.reflection = discovery_buy_times_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_buy_times_ack::kProtoidFieldNumber;
const int discovery_buy_times_ack::kDiscoveryIdFieldNumber;
const int discovery_buy_times_ack::kRetFieldNumber;
const int discovery_buy_times_ack::kMoppingTimesRemainFieldNumber;
#endif  // !_MSC_VER

discovery_buy_times_ack::discovery_buy_times_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_buy_times_ack::InitAsDefaultInstance() {
}

discovery_buy_times_ack::discovery_buy_times_ack(const discovery_buy_times_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_buy_times_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5809;
  discovery_id_ = 0;
  ret_ = 0;
  mopping_times_remain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_buy_times_ack::~discovery_buy_times_ack() {
  SharedDtor();
}

void discovery_buy_times_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_buy_times_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_buy_times_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_buy_times_ack_descriptor_;
}

const discovery_buy_times_ack& discovery_buy_times_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_buy_times_ack* discovery_buy_times_ack::default_instance_ = NULL;

discovery_buy_times_ack* discovery_buy_times_ack::New() const {
  return new discovery_buy_times_ack;
}

void discovery_buy_times_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5809;
    discovery_id_ = 0;
    ret_ = 0;
    mopping_times_remain_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_buy_times_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_discovery_id;
        break;
      }

      // optional int32 discovery_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discovery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discovery_id_)));
          set_has_discovery_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional .SProtoSpace.MsgErrorType ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_ret(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mopping_times_remain;
        break;
      }

      // optional int32 mopping_times_remain = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mopping_times_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mopping_times_remain_)));
          set_has_mopping_times_remain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_buy_times_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 discovery_id = 2;
  if (has_discovery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->discovery_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  // optional int32 mopping_times_remain = 5;
  if (has_mopping_times_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mopping_times_remain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_buy_times_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 discovery_id = 2;
  if (has_discovery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->discovery_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  // optional int32 mopping_times_remain = 5;
  if (has_mopping_times_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mopping_times_remain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_buy_times_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 discovery_id = 2;
    if (has_discovery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discovery_id());
    }

    // optional .SProtoSpace.MsgErrorType ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional int32 mopping_times_remain = 5;
    if (has_mopping_times_remain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mopping_times_remain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_buy_times_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_buy_times_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_buy_times_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_buy_times_ack::MergeFrom(const discovery_buy_times_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_discovery_id()) {
      set_discovery_id(from.discovery_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mopping_times_remain()) {
      set_mopping_times_remain(from.mopping_times_remain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_buy_times_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_buy_times_ack::CopyFrom(const discovery_buy_times_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_buy_times_ack::IsInitialized() const {

  return true;
}

void discovery_buy_times_ack::Swap(discovery_buy_times_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(discovery_id_, other->discovery_id_);
    std::swap(ret_, other->ret_);
    std::swap(mopping_times_remain_, other->mopping_times_remain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_buy_times_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_buy_times_ack_descriptor_;
  metadata.reflection = discovery_buy_times_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_get_section_star_req::kProtoidFieldNumber;
const int discovery_get_section_star_req::kRewardIdFieldNumber;
#endif  // !_MSC_VER

discovery_get_section_star_req::discovery_get_section_star_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_get_section_star_req::InitAsDefaultInstance() {
}

discovery_get_section_star_req::discovery_get_section_star_req(const discovery_get_section_star_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_get_section_star_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5810;
  reward_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_get_section_star_req::~discovery_get_section_star_req() {
  SharedDtor();
}

void discovery_get_section_star_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_get_section_star_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_get_section_star_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_get_section_star_req_descriptor_;
}

const discovery_get_section_star_req& discovery_get_section_star_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_get_section_star_req* discovery_get_section_star_req::default_instance_ = NULL;

discovery_get_section_star_req* discovery_get_section_star_req::New() const {
  return new discovery_get_section_star_req;
}

void discovery_get_section_star_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5810;
    reward_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_get_section_star_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // optional int32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_get_section_star_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_get_section_star_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_get_section_star_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_get_section_star_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_get_section_star_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_get_section_star_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_get_section_star_req::MergeFrom(const discovery_get_section_star_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_get_section_star_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_get_section_star_req::CopyFrom(const discovery_get_section_star_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_get_section_star_req::IsInitialized() const {

  return true;
}

void discovery_get_section_star_req::Swap(discovery_get_section_star_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_get_section_star_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_get_section_star_req_descriptor_;
  metadata.reflection = discovery_get_section_star_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_get_section_star_ack_rewards::kItemIdFieldNumber;
const int discovery_get_section_star_ack_rewards::kItemCountFieldNumber;
#endif  // !_MSC_VER

discovery_get_section_star_ack_rewards::discovery_get_section_star_ack_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_get_section_star_ack_rewards::InitAsDefaultInstance() {
}

discovery_get_section_star_ack_rewards::discovery_get_section_star_ack_rewards(const discovery_get_section_star_ack_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_get_section_star_ack_rewards::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0;
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_get_section_star_ack_rewards::~discovery_get_section_star_ack_rewards() {
  SharedDtor();
}

void discovery_get_section_star_ack_rewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_get_section_star_ack_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_get_section_star_ack_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_get_section_star_ack_rewards_descriptor_;
}

const discovery_get_section_star_ack_rewards& discovery_get_section_star_ack_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_get_section_star_ack_rewards* discovery_get_section_star_ack_rewards::default_instance_ = NULL;

discovery_get_section_star_ack_rewards* discovery_get_section_star_ack_rewards::New() const {
  return new discovery_get_section_star_ack_rewards;
}

void discovery_get_section_star_ack_rewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0;
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_get_section_star_ack_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // optional int32 item_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_get_section_star_ack_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_id(), output);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_get_section_star_ack_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_get_section_star_ack_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional int32 item_count = 2;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_get_section_star_ack_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_get_section_star_ack_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_get_section_star_ack_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_get_section_star_ack_rewards::MergeFrom(const discovery_get_section_star_ack_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_get_section_star_ack_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_get_section_star_ack_rewards::CopyFrom(const discovery_get_section_star_ack_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_get_section_star_ack_rewards::IsInitialized() const {

  return true;
}

void discovery_get_section_star_ack_rewards::Swap(discovery_get_section_star_ack_rewards* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_get_section_star_ack_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_get_section_star_ack_rewards_descriptor_;
  metadata.reflection = discovery_get_section_star_ack_rewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int discovery_get_section_star_ack::kProtoidFieldNumber;
const int discovery_get_section_star_ack::kRewardIdFieldNumber;
const int discovery_get_section_star_ack::kItemsFieldNumber;
const int discovery_get_section_star_ack::kRetFieldNumber;
#endif  // !_MSC_VER

discovery_get_section_star_ack::discovery_get_section_star_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void discovery_get_section_star_ack::InitAsDefaultInstance() {
}

discovery_get_section_star_ack::discovery_get_section_star_ack(const discovery_get_section_star_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void discovery_get_section_star_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5811;
  reward_id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

discovery_get_section_star_ack::~discovery_get_section_star_ack() {
  SharedDtor();
}

void discovery_get_section_star_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void discovery_get_section_star_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* discovery_get_section_star_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return discovery_get_section_star_ack_descriptor_;
}

const discovery_get_section_star_ack& discovery_get_section_star_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

discovery_get_section_star_ack* discovery_get_section_star_ack::default_instance_ = NULL;

discovery_get_section_star_ack* discovery_get_section_star_ack::New() const {
  return new discovery_get_section_star_ack;
}

void discovery_get_section_star_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5811;
    reward_id_ = 0;
    ret_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool discovery_get_section_star_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // optional int32 reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.discovery_get_section_star_ack_rewards items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional .SProtoSpace.MsgErrorType ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_ret(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void discovery_get_section_star_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  // repeated .SProtoSpace.discovery_get_section_star_ack_rewards items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional .SProtoSpace.MsgErrorType ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* discovery_get_section_star_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  // repeated .SProtoSpace.discovery_get_section_star_ack_rewards items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional .SProtoSpace.MsgErrorType ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int discovery_get_section_star_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // optional .SProtoSpace.MsgErrorType ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  // repeated .SProtoSpace.discovery_get_section_star_ack_rewards items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void discovery_get_section_star_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const discovery_get_section_star_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const discovery_get_section_star_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void discovery_get_section_star_ack::MergeFrom(const discovery_get_section_star_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void discovery_get_section_star_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void discovery_get_section_star_ack::CopyFrom(const discovery_get_section_star_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool discovery_get_section_star_ack::IsInitialized() const {

  return true;
}

void discovery_get_section_star_ack::Swap(discovery_get_section_star_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(reward_id_, other->reward_id_);
    items_.Swap(&other->items_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata discovery_get_section_star_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = discovery_get_section_star_ack_descriptor_;
  metadata.reflection = discovery_get_section_star_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_base_info_ntf::kProtoIdFieldNumber;
const int royal_base_info_ntf::kInfoFieldNumber;
#endif  // !_MSC_VER

royal_base_info_ntf::royal_base_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_base_info_ntf::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::royal_base_info*>(&::SProtoSpace::royal_base_info::default_instance());
}

royal_base_info_ntf::royal_base_info_ntf(const royal_base_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_base_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6126;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_base_info_ntf::~royal_base_info_ntf() {
  SharedDtor();
}

void royal_base_info_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void royal_base_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_base_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_base_info_ntf_descriptor_;
}

const royal_base_info_ntf& royal_base_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_base_info_ntf* royal_base_info_ntf::default_instance_ = NULL;

royal_base_info_ntf* royal_base_info_ntf::New() const {
  return new royal_base_info_ntf;
}

void royal_base_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6126;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::royal_base_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_base_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_base_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.royal_base_info info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_base_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_base_info_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.royal_base_info info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_base_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_base_info_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.royal_base_info info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_base_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_base_info_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.royal_base_info info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_base_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_base_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_base_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_base_info_ntf::MergeFrom(const royal_base_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::royal_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_base_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_base_info_ntf::CopyFrom(const royal_base_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_base_info_ntf::IsInitialized() const {

  return true;
}

void royal_base_info_ntf::Swap(royal_base_info_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_base_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_base_info_ntf_descriptor_;
  metadata.reflection = royal_base_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_all_info_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

royal_all_info_req::royal_all_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_all_info_req::InitAsDefaultInstance() {
}

royal_all_info_req::royal_all_info_req(const royal_all_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_all_info_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6131;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_all_info_req::~royal_all_info_req() {
  SharedDtor();
}

void royal_all_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_all_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_all_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_all_info_req_descriptor_;
}

const royal_all_info_req& royal_all_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_all_info_req* royal_all_info_req::default_instance_ = NULL;

royal_all_info_req* royal_all_info_req::New() const {
  return new royal_all_info_req;
}

void royal_all_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6131;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_all_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_all_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_all_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_all_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_all_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_all_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_all_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_all_info_req::MergeFrom(const royal_all_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_all_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_all_info_req::CopyFrom(const royal_all_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_all_info_req::IsInitialized() const {

  return true;
}

void royal_all_info_req::Swap(royal_all_info_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_all_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_all_info_req_descriptor_;
  metadata.reflection = royal_all_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_all_info_ack::kProtoIdFieldNumber;
const int royal_all_info_ack::kRoyalsFieldNumber;
const int royal_all_info_ack::kInfoFieldNumber;
#endif  // !_MSC_VER

royal_all_info_ack::royal_all_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_all_info_ack::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::royal_base_info*>(&::SProtoSpace::royal_base_info::default_instance());
}

royal_all_info_ack::royal_all_info_ack(const royal_all_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_all_info_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6132;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_all_info_ack::~royal_all_info_ack() {
  SharedDtor();
}

void royal_all_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void royal_all_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_all_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_all_info_ack_descriptor_;
}

const royal_all_info_ack& royal_all_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_all_info_ack* royal_all_info_ack::default_instance_ = NULL;

royal_all_info_ack* royal_all_info_ack::New() const {
  return new royal_all_info_ack;
}

void royal_all_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6132;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::royal_base_info::Clear();
    }
  }
  royals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_all_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        break;
      }

      // repeated .SProtoSpace.royal_info royals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.royal_base_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_all_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->royals(i), output);
  }

  // optional .SProtoSpace.royal_base_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_all_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->royals(i), target);
  }

  // optional .SProtoSpace.royal_base_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_all_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.royal_base_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .SProtoSpace.royal_info royals = 2;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_all_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_all_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_all_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_all_info_ack::MergeFrom(const royal_all_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::royal_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_all_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_all_info_ack::CopyFrom(const royal_all_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_all_info_ack::IsInitialized() const {

  return true;
}

void royal_all_info_ack::Swap(royal_all_info_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    royals_.Swap(&other->royals_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_all_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_all_info_ack_descriptor_;
  metadata.reflection = royal_all_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_refresh_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

royal_refresh_req::royal_refresh_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_refresh_req::InitAsDefaultInstance() {
}

royal_refresh_req::royal_refresh_req(const royal_refresh_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_refresh_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6133;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_refresh_req::~royal_refresh_req() {
  SharedDtor();
}

void royal_refresh_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_refresh_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_refresh_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_refresh_req_descriptor_;
}

const royal_refresh_req& royal_refresh_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_refresh_req* royal_refresh_req::default_instance_ = NULL;

royal_refresh_req* royal_refresh_req::New() const {
  return new royal_refresh_req;
}

void royal_refresh_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6133;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_refresh_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_refresh_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_refresh_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_refresh_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_refresh_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_refresh_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_refresh_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_refresh_req::MergeFrom(const royal_refresh_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_refresh_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_refresh_req::CopyFrom(const royal_refresh_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_refresh_req::IsInitialized() const {

  return true;
}

void royal_refresh_req::Swap(royal_refresh_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_refresh_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_refresh_req_descriptor_;
  metadata.reflection = royal_refresh_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_refresh_ack::kProtoIdFieldNumber;
const int royal_refresh_ack::kRetFieldNumber;
const int royal_refresh_ack::kRoyalIdsFieldNumber;
#endif  // !_MSC_VER

royal_refresh_ack::royal_refresh_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_refresh_ack::InitAsDefaultInstance() {
}

royal_refresh_ack::royal_refresh_ack(const royal_refresh_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_refresh_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6134;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_refresh_ack::~royal_refresh_ack() {
  SharedDtor();
}

void royal_refresh_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_refresh_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_refresh_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_refresh_ack_descriptor_;
}

const royal_refresh_ack& royal_refresh_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_refresh_ack* royal_refresh_ack::default_instance_ = NULL;

royal_refresh_ack* royal_refresh_ack::New() const {
  return new royal_refresh_ack;
}

void royal_refresh_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6134;
    ret_ = 0;
  }
  royal_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_refresh_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_ids;
        break;
      }

      // repeated int32 royal_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_royal_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_royal_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_refresh_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // repeated int32 royal_ids = 3;
  for (int i = 0; i < this->royal_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->royal_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_refresh_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // repeated int32 royal_ids = 3;
  for (int i = 0; i < this->royal_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->royal_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_refresh_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 royal_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->royal_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->royal_ids(i));
    }
    total_size += 1 * this->royal_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_refresh_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_refresh_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_refresh_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_refresh_ack::MergeFrom(const royal_refresh_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  royal_ids_.MergeFrom(from.royal_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_refresh_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_refresh_ack::CopyFrom(const royal_refresh_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_refresh_ack::IsInitialized() const {

  return true;
}

void royal_refresh_ack::Swap(royal_refresh_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    royal_ids_.Swap(&other->royal_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_refresh_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_refresh_ack_descriptor_;
  metadata.reflection = royal_refresh_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_visit_req::kProtoIdFieldNumber;
const int royal_visit_req::kRoyalIdFieldNumber;
#endif  // !_MSC_VER

royal_visit_req::royal_visit_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_visit_req::InitAsDefaultInstance() {
}

royal_visit_req::royal_visit_req(const royal_visit_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_visit_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6135;
  royal_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_visit_req::~royal_visit_req() {
  SharedDtor();
}

void royal_visit_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_visit_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_visit_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_visit_req_descriptor_;
}

const royal_visit_req& royal_visit_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_visit_req* royal_visit_req::default_instance_ = NULL;

royal_visit_req* royal_visit_req::New() const {
  return new royal_visit_req;
}

void royal_visit_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6135;
    royal_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_visit_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_id;
        break;
      }

      // optional int32 royal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_visit_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 royal_id = 2;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->royal_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_visit_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 royal_id = 2;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->royal_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_visit_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 royal_id = 2;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->royal_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_visit_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_visit_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_visit_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_visit_req::MergeFrom(const royal_visit_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_visit_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_visit_req::CopyFrom(const royal_visit_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_visit_req::IsInitialized() const {

  return true;
}

void royal_visit_req::Swap(royal_visit_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_visit_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_visit_req_descriptor_;
  metadata.reflection = royal_visit_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_visit_ack::kProtoIdFieldNumber;
const int royal_visit_ack::kRoyalIdFieldNumber;
const int royal_visit_ack::kEventIdFieldNumber;
const int royal_visit_ack::kDataFieldNumber;
const int royal_visit_ack::kRetFieldNumber;
#endif  // !_MSC_VER

royal_visit_ack::royal_visit_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_visit_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::question_data*>(&::SProtoSpace::question_data::default_instance());
}

royal_visit_ack::royal_visit_ack(const royal_visit_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_visit_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6136;
  royal_id_ = 0;
  event_id_ = 0;
  data_ = NULL;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_visit_ack::~royal_visit_ack() {
  SharedDtor();
}

void royal_visit_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void royal_visit_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_visit_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_visit_ack_descriptor_;
}

const royal_visit_ack& royal_visit_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_visit_ack* royal_visit_ack::default_instance_ = NULL;

royal_visit_ack* royal_visit_ack::New() const {
  return new royal_visit_ack;
}

void royal_visit_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6136;
    royal_id_ = 0;
    event_id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::question_data::Clear();
    }
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_visit_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_id;
        break;
      }

      // optional int32 royal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_id;
        break;
      }

      // optional int32 event_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.question_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional int32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_visit_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 royal_id = 2;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->royal_id(), output);
  }

  // optional int32 event_id = 3;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_id(), output);
  }

  // optional .SProtoSpace.question_data data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_visit_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 royal_id = 2;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->royal_id(), target);
  }

  // optional int32 event_id = 3;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_id(), target);
  }

  // optional .SProtoSpace.question_data data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_visit_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 royal_id = 2;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->royal_id());
    }

    // optional int32 event_id = 3;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional .SProtoSpace.question_data data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_visit_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_visit_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_visit_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_visit_ack::MergeFrom(const royal_visit_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::question_data::MergeFrom(from.data());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_visit_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_visit_ack::CopyFrom(const royal_visit_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_visit_ack::IsInitialized() const {

  return true;
}

void royal_visit_ack::Swap(royal_visit_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(event_id_, other->event_id_);
    std::swap(data_, other->data_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_visit_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_visit_ack_descriptor_;
  metadata.reflection = royal_visit_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_reward_ntf::kProtoidFieldNumber;
const int royal_reward_ntf::kEventIdFieldNumber;
const int royal_reward_ntf::kTypeFieldNumber;
const int royal_reward_ntf::kIsWinFieldNumber;
const int royal_reward_ntf::kRewardFieldNumber;
const int royal_reward_ntf::kRetFieldNumber;
#endif  // !_MSC_VER

royal_reward_ntf::royal_reward_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_reward_ntf::InitAsDefaultInstance() {
}

royal_reward_ntf::royal_reward_ntf(const royal_reward_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_reward_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6137;
  event_id_ = 0;
  type_ = 0;
  is_win_ = false;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_reward_ntf::~royal_reward_ntf() {
  SharedDtor();
}

void royal_reward_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_reward_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_reward_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_reward_ntf_descriptor_;
}

const royal_reward_ntf& royal_reward_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_reward_ntf* royal_reward_ntf::default_instance_ = NULL;

royal_reward_ntf* royal_reward_ntf::New() const {
  return new royal_reward_ntf;
}

void royal_reward_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6137;
    event_id_ = 0;
    type_ = 0;
    is_win_ = false;
    ret_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_reward_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = royal_reward_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_id;
        break;
      }

      // optional int32 event_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // repeated .SProtoSpace.item_info reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional int32 ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_reward_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = royal_reward_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 event_id = 2;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_id(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional bool is_win = 4;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_win(), output);
  }

  // repeated .SProtoSpace.item_info reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(i), output);
  }

  // optional int32 ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_reward_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = royal_reward_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 event_id = 2;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_id(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional bool is_win = 4;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_win(), target);
  }

  // repeated .SProtoSpace.item_info reward = 5;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(i), target);
  }

  // optional int32 ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_reward_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = royal_reward_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 event_id = 2;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool is_win = 4;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional int32 ret = 6;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.item_info reward = 5;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_reward_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_reward_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_reward_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_reward_ntf::MergeFrom(const royal_reward_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_reward_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_reward_ntf::CopyFrom(const royal_reward_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_reward_ntf::IsInitialized() const {

  return true;
}

void royal_reward_ntf::Swap(royal_reward_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(event_id_, other->event_id_);
    std::swap(type_, other->type_);
    std::swap(is_win_, other->is_win_);
    reward_.Swap(&other->reward_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_reward_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_reward_ntf_descriptor_;
  metadata.reflection = royal_reward_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_royals_ntf::kProtoIdFieldNumber;
const int all_royals_ntf::kRoyalsFieldNumber;
const int all_royals_ntf::kInfoFieldNumber;
#endif  // !_MSC_VER

all_royals_ntf::all_royals_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_royals_ntf::InitAsDefaultInstance() {
  info_ = const_cast< ::SProtoSpace::royal_base_info*>(&::SProtoSpace::royal_base_info::default_instance());
}

all_royals_ntf::all_royals_ntf(const all_royals_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_royals_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6100;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_royals_ntf::~all_royals_ntf() {
  SharedDtor();
}

void all_royals_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void all_royals_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_royals_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_royals_ntf_descriptor_;
}

const all_royals_ntf& all_royals_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

all_royals_ntf* all_royals_ntf::default_instance_ = NULL;

all_royals_ntf* all_royals_ntf::New() const {
  return new all_royals_ntf;
}

void all_royals_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6100;
    if (has_info()) {
      if (info_ != NULL) info_->::SProtoSpace::royal_base_info::Clear();
    }
  }
  royals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_royals_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = all_royals_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        break;
      }

      // repeated .SProtoSpace.royal_info royals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .SProtoSpace.royal_base_info info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_royals_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = all_royals_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->royals(i), output);
  }

  // optional .SProtoSpace.royal_base_info info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_royals_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = all_royals_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->royals(i), target);
  }

  // optional .SProtoSpace.royal_base_info info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_royals_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = all_royals_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.royal_base_info info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .SProtoSpace.royal_info royals = 2;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_royals_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_royals_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_royals_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_royals_ntf::MergeFrom(const all_royals_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_info()) {
      mutable_info()->::SProtoSpace::royal_base_info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_royals_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_royals_ntf::CopyFrom(const all_royals_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_royals_ntf::IsInitialized() const {

  return true;
}

void all_royals_ntf::Swap(all_royals_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    royals_.Swap(&other->royals_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_royals_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_royals_ntf_descriptor_;
  metadata.reflection = all_royals_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_pro_update_ntf::kProtoIdFieldNumber;
const int royal_pro_update_ntf::kRoyalFieldNumber;
#endif  // !_MSC_VER

royal_pro_update_ntf::royal_pro_update_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_pro_update_ntf::InitAsDefaultInstance() {
  royal_ = const_cast< ::SProtoSpace::royal_info*>(&::SProtoSpace::royal_info::default_instance());
}

royal_pro_update_ntf::royal_pro_update_ntf(const royal_pro_update_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_pro_update_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6115;
  royal_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_pro_update_ntf::~royal_pro_update_ntf() {
  SharedDtor();
}

void royal_pro_update_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete royal_;
  }
}

void royal_pro_update_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_pro_update_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_pro_update_ntf_descriptor_;
}

const royal_pro_update_ntf& royal_pro_update_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_pro_update_ntf* royal_pro_update_ntf::default_instance_ = NULL;

royal_pro_update_ntf* royal_pro_update_ntf::New() const {
  return new royal_pro_update_ntf;
}

void royal_pro_update_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6115;
    if (has_royal()) {
      if (royal_ != NULL) royal_->::SProtoSpace::royal_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_pro_update_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_pro_update_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royal;
        break;
      }

      // optional .SProtoSpace.royal_info royal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_royal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_pro_update_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_pro_update_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.royal_info royal = 2;
  if (has_royal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->royal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_pro_update_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_pro_update_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.royal_info royal = 2;
  if (has_royal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->royal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_pro_update_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_pro_update_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.royal_info royal = 2;
    if (has_royal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->royal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_pro_update_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_pro_update_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_pro_update_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_pro_update_ntf::MergeFrom(const royal_pro_update_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal()) {
      mutable_royal()->::SProtoSpace::royal_info::MergeFrom(from.royal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_pro_update_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_pro_update_ntf::CopyFrom(const royal_pro_update_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_pro_update_ntf::IsInitialized() const {

  return true;
}

void royal_pro_update_ntf::Swap(royal_pro_update_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_, other->royal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_pro_update_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_pro_update_ntf_descriptor_;
  metadata.reflection = royal_pro_update_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_task_reward_draw_ntf::kProtoIdFieldNumber;
const int royal_task_reward_draw_ntf::kRetFieldNumber;
#endif  // !_MSC_VER

royal_task_reward_draw_ntf::royal_task_reward_draw_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_task_reward_draw_ntf::InitAsDefaultInstance() {
}

royal_task_reward_draw_ntf::royal_task_reward_draw_ntf(const royal_task_reward_draw_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_task_reward_draw_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6101;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_task_reward_draw_ntf::~royal_task_reward_draw_ntf() {
  SharedDtor();
}

void royal_task_reward_draw_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_task_reward_draw_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_task_reward_draw_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_task_reward_draw_ntf_descriptor_;
}

const royal_task_reward_draw_ntf& royal_task_reward_draw_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

royal_task_reward_draw_ntf* royal_task_reward_draw_ntf::default_instance_ = NULL;

royal_task_reward_draw_ntf* royal_task_reward_draw_ntf::New() const {
  return new royal_task_reward_draw_ntf;
}

void royal_task_reward_draw_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6101;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_task_reward_draw_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_task_reward_draw_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_task_reward_draw_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_task_reward_draw_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_task_reward_draw_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_task_reward_draw_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_task_reward_draw_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_task_reward_draw_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_task_reward_draw_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_task_reward_draw_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_task_reward_draw_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_task_reward_draw_ntf::MergeFrom(const royal_task_reward_draw_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_task_reward_draw_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_task_reward_draw_ntf::CopyFrom(const royal_task_reward_draw_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_task_reward_draw_ntf::IsInitialized() const {

  return true;
}

void royal_task_reward_draw_ntf::Swap(royal_task_reward_draw_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_task_reward_draw_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_task_reward_draw_ntf_descriptor_;
  metadata.reflection = royal_task_reward_draw_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_update_royal_task_ntf::kProtoIdFieldNumber;
const int game_update_royal_task_ntf::kRoyalsFieldNumber;
#endif  // !_MSC_VER

game_update_royal_task_ntf::game_update_royal_task_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_update_royal_task_ntf::InitAsDefaultInstance() {
}

game_update_royal_task_ntf::game_update_royal_task_ntf(const game_update_royal_task_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_update_royal_task_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6110;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_update_royal_task_ntf::~game_update_royal_task_ntf() {
  SharedDtor();
}

void game_update_royal_task_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_update_royal_task_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_update_royal_task_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_update_royal_task_ntf_descriptor_;
}

const game_update_royal_task_ntf& game_update_royal_task_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_update_royal_task_ntf* game_update_royal_task_ntf::default_instance_ = NULL;

game_update_royal_task_ntf* game_update_royal_task_ntf::New() const {
  return new game_update_royal_task_ntf;
}

void game_update_royal_task_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6110;
  }
  royals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_update_royal_task_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_update_royal_task_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        break;
      }

      // repeated .SProtoSpace.royal_info royals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_update_royal_task_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_update_royal_task_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->royals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_update_royal_task_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_update_royal_task_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->royals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_update_royal_task_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_update_royal_task_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.royal_info royals = 2;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_update_royal_task_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_update_royal_task_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_update_royal_task_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_update_royal_task_ntf::MergeFrom(const game_update_royal_task_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_update_royal_task_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_update_royal_task_ntf::CopyFrom(const game_update_royal_task_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_update_royal_task_ntf::IsInitialized() const {

  return true;
}

void game_update_royal_task_ntf::Swap(game_update_royal_task_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    royals_.Swap(&other->royals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_update_royal_task_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_update_royal_task_ntf_descriptor_;
  metadata.reflection = game_update_royal_task_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_intimacy_reward_req::kProtoIdFieldNumber;
const int game_royal_intimacy_reward_req::kRoyalIdFieldNumber;
const int game_royal_intimacy_reward_req::kIndexFieldNumber;
#endif  // !_MSC_VER

game_royal_intimacy_reward_req::game_royal_intimacy_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_intimacy_reward_req::InitAsDefaultInstance() {
}

game_royal_intimacy_reward_req::game_royal_intimacy_reward_req(const game_royal_intimacy_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_intimacy_reward_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6118;
  royal_id_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_intimacy_reward_req::~game_royal_intimacy_reward_req() {
  SharedDtor();
}

void game_royal_intimacy_reward_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_intimacy_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_intimacy_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_intimacy_reward_req_descriptor_;
}

const game_royal_intimacy_reward_req& game_royal_intimacy_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_intimacy_reward_req* game_royal_intimacy_reward_req::default_instance_ = NULL;

game_royal_intimacy_reward_req* game_royal_intimacy_reward_req::New() const {
  return new game_royal_intimacy_reward_req;
}

void game_royal_intimacy_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6118;
    royal_id_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_intimacy_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_intimacy_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->royal_id(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_intimacy_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->royal_id(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_intimacy_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 royal_id = 2;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_intimacy_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_intimacy_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_intimacy_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_intimacy_reward_req::MergeFrom(const game_royal_intimacy_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_intimacy_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_intimacy_reward_req::CopyFrom(const game_royal_intimacy_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_intimacy_reward_req::IsInitialized() const {

  return true;
}

void game_royal_intimacy_reward_req::Swap(game_royal_intimacy_reward_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_intimacy_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_intimacy_reward_req_descriptor_;
  metadata.reflection = game_royal_intimacy_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_intimacy_reward_ack::kProtoIdFieldNumber;
const int game_royal_intimacy_reward_ack::kRetFieldNumber;
const int game_royal_intimacy_reward_ack::kRoyalIdFieldNumber;
const int game_royal_intimacy_reward_ack::kIndexFieldNumber;
#endif  // !_MSC_VER

game_royal_intimacy_reward_ack::game_royal_intimacy_reward_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_intimacy_reward_ack::InitAsDefaultInstance() {
}

game_royal_intimacy_reward_ack::game_royal_intimacy_reward_ack(const game_royal_intimacy_reward_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_intimacy_reward_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6119;
  ret_ = 0u;
  royal_id_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_intimacy_reward_ack::~game_royal_intimacy_reward_ack() {
  SharedDtor();
}

void game_royal_intimacy_reward_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_intimacy_reward_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_intimacy_reward_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_intimacy_reward_ack_descriptor_;
}

const game_royal_intimacy_reward_ack& game_royal_intimacy_reward_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_intimacy_reward_ack* game_royal_intimacy_reward_ack::default_instance_ = NULL;

game_royal_intimacy_reward_ack* game_royal_intimacy_reward_ack::New() const {
  return new game_royal_intimacy_reward_ack;
}

void game_royal_intimacy_reward_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6119;
    ret_ = 0u;
    royal_id_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_intimacy_reward_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_intimacy_reward_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->royal_id(), output);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_intimacy_reward_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->royal_id(), target);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_intimacy_reward_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 royal_id = 3;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_intimacy_reward_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_intimacy_reward_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_intimacy_reward_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_intimacy_reward_ack::MergeFrom(const game_royal_intimacy_reward_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_intimacy_reward_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_intimacy_reward_ack::CopyFrom(const game_royal_intimacy_reward_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_intimacy_reward_ack::IsInitialized() const {

  return true;
}

void game_royal_intimacy_reward_ack::Swap(game_royal_intimacy_reward_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_intimacy_reward_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_intimacy_reward_ack_descriptor_;
  metadata.reflection = game_royal_intimacy_reward_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_draw_reward_req::kProtoIdFieldNumber;
const int game_royal_draw_reward_req::kRoyalTaskConfigIdFieldNumber;
const int game_royal_draw_reward_req::kRoyalConfigIdFieldNumber;
#endif  // !_MSC_VER

game_royal_draw_reward_req::game_royal_draw_reward_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_draw_reward_req::InitAsDefaultInstance() {
}

game_royal_draw_reward_req::game_royal_draw_reward_req(const game_royal_draw_reward_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_draw_reward_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6104;
  royal_task_config_id_ = 0u;
  royal_config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_draw_reward_req::~game_royal_draw_reward_req() {
  SharedDtor();
}

void game_royal_draw_reward_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_draw_reward_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_draw_reward_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_draw_reward_req_descriptor_;
}

const game_royal_draw_reward_req& game_royal_draw_reward_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_draw_reward_req* game_royal_draw_reward_req::default_instance_ = NULL;

game_royal_draw_reward_req* game_royal_draw_reward_req::New() const {
  return new game_royal_draw_reward_req;
}

void game_royal_draw_reward_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6104;
    royal_task_config_id_ = 0u;
    royal_config_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_draw_reward_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_task_config_id;
        break;
      }

      // optional uint32 royal_task_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_task_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_task_config_id_)));
          set_has_royal_task_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_config_id;
        break;
      }

      // optional uint32 royal_config_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_config_id_)));
          set_has_royal_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_draw_reward_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 royal_task_config_id = 2;
  if (has_royal_task_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->royal_task_config_id(), output);
  }

  // optional uint32 royal_config_id = 3;
  if (has_royal_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->royal_config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_draw_reward_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 royal_task_config_id = 2;
  if (has_royal_task_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->royal_task_config_id(), target);
  }

  // optional uint32 royal_config_id = 3;
  if (has_royal_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->royal_config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_draw_reward_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 royal_task_config_id = 2;
    if (has_royal_task_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_task_config_id());
    }

    // optional uint32 royal_config_id = 3;
    if (has_royal_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_draw_reward_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_draw_reward_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_draw_reward_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_draw_reward_req::MergeFrom(const game_royal_draw_reward_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_task_config_id()) {
      set_royal_task_config_id(from.royal_task_config_id());
    }
    if (from.has_royal_config_id()) {
      set_royal_config_id(from.royal_config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_draw_reward_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_draw_reward_req::CopyFrom(const game_royal_draw_reward_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_draw_reward_req::IsInitialized() const {

  return true;
}

void game_royal_draw_reward_req::Swap(game_royal_draw_reward_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_task_config_id_, other->royal_task_config_id_);
    std::swap(royal_config_id_, other->royal_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_draw_reward_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_draw_reward_req_descriptor_;
  metadata.reflection = game_royal_draw_reward_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_draw_reward_ack::kProtoIdFieldNumber;
const int game_royal_draw_reward_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_royal_draw_reward_ack::game_royal_draw_reward_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_draw_reward_ack::InitAsDefaultInstance() {
}

game_royal_draw_reward_ack::game_royal_draw_reward_ack(const game_royal_draw_reward_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_draw_reward_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6105;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_draw_reward_ack::~game_royal_draw_reward_ack() {
  SharedDtor();
}

void game_royal_draw_reward_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_draw_reward_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_draw_reward_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_draw_reward_ack_descriptor_;
}

const game_royal_draw_reward_ack& game_royal_draw_reward_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_draw_reward_ack* game_royal_draw_reward_ack::default_instance_ = NULL;

game_royal_draw_reward_ack* game_royal_draw_reward_ack::New() const {
  return new game_royal_draw_reward_ack;
}

void game_royal_draw_reward_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6105;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_draw_reward_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_draw_reward_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_draw_reward_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_draw_reward_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_draw_reward_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_draw_reward_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_draw_reward_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_draw_reward_ack::MergeFrom(const game_royal_draw_reward_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_draw_reward_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_draw_reward_ack::CopyFrom(const game_royal_draw_reward_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_draw_reward_ack::IsInitialized() const {

  return true;
}

void game_royal_draw_reward_ack::Swap(game_royal_draw_reward_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_draw_reward_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_draw_reward_ack_descriptor_;
  metadata.reflection = game_royal_draw_reward_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_all_data_req::kProtoIdFieldNumber;
const int game_royal_all_data_req::kConfigIdFieldNumber;
#endif  // !_MSC_VER

game_royal_all_data_req::game_royal_all_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_all_data_req::InitAsDefaultInstance() {
}

game_royal_all_data_req::game_royal_all_data_req(const game_royal_all_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_all_data_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6106;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_all_data_req::~game_royal_all_data_req() {
  SharedDtor();
}

void game_royal_all_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_all_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_all_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_all_data_req_descriptor_;
}

const game_royal_all_data_req& game_royal_all_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_all_data_req* game_royal_all_data_req::default_instance_ = NULL;

game_royal_all_data_req* game_royal_all_data_req::New() const {
  return new game_royal_all_data_req;
}

void game_royal_all_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6106;
  }
  config_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_all_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // repeated uint32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_config_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_config_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_all_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated uint32 config_id = 2;
  for (int i = 0; i < this->config_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->config_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_all_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated uint32 config_id = 2;
  for (int i = 0; i < this->config_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->config_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_all_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated uint32 config_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->config_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->config_id(i));
    }
    total_size += 1 * this->config_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_all_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_all_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_all_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_all_data_req::MergeFrom(const game_royal_all_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_id_.MergeFrom(from.config_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_all_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_all_data_req::CopyFrom(const game_royal_all_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_all_data_req::IsInitialized() const {

  return true;
}

void game_royal_all_data_req::Swap(game_royal_all_data_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    config_id_.Swap(&other->config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_all_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_all_data_req_descriptor_;
  metadata.reflection = game_royal_all_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_all_data_ack::kProtoIdFieldNumber;
const int game_royal_all_data_ack::kRoyalsFieldNumber;
#endif  // !_MSC_VER

game_royal_all_data_ack::game_royal_all_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_all_data_ack::InitAsDefaultInstance() {
}

game_royal_all_data_ack::game_royal_all_data_ack(const game_royal_all_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_all_data_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6107;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_all_data_ack::~game_royal_all_data_ack() {
  SharedDtor();
}

void game_royal_all_data_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_all_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_all_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_all_data_ack_descriptor_;
}

const game_royal_all_data_ack& game_royal_all_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_all_data_ack* game_royal_all_data_ack::default_instance_ = NULL;

game_royal_all_data_ack* game_royal_all_data_ack::New() const {
  return new game_royal_all_data_ack;
}

void game_royal_all_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6107;
  }
  royals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_all_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        break;
      }

      // repeated .SProtoSpace.royal_info royals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_royals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_all_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->royals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_all_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.royal_info royals = 2;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->royals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_all_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated .SProtoSpace.royal_info royals = 2;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_all_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_all_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_all_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_all_data_ack::MergeFrom(const game_royal_all_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_all_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_all_data_ack::CopyFrom(const game_royal_all_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_all_data_ack::IsInitialized() const {

  return true;
}

void game_royal_all_data_ack::Swap(game_royal_all_data_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    royals_.Swap(&other->royals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_all_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_all_data_ack_descriptor_;
  metadata.reflection = game_royal_all_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_refresh_data_req::kProtoIdFieldNumber;
const int game_royal_refresh_data_req::kConfigIdFieldNumber;
#endif  // !_MSC_VER

game_royal_refresh_data_req::game_royal_refresh_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_refresh_data_req::InitAsDefaultInstance() {
}

game_royal_refresh_data_req::game_royal_refresh_data_req(const game_royal_refresh_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_refresh_data_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6108;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_refresh_data_req::~game_royal_refresh_data_req() {
  SharedDtor();
}

void game_royal_refresh_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_refresh_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_refresh_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_refresh_data_req_descriptor_;
}

const game_royal_refresh_data_req& game_royal_refresh_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_refresh_data_req* game_royal_refresh_data_req::default_instance_ = NULL;

game_royal_refresh_data_req* game_royal_refresh_data_req::New() const {
  return new game_royal_refresh_data_req;
}

void game_royal_refresh_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6108;
  }
  config_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_refresh_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // repeated uint32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_config_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_config_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_refresh_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated uint32 config_id = 2;
  for (int i = 0; i < this->config_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->config_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_refresh_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated uint32 config_id = 2;
  for (int i = 0; i < this->config_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->config_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_refresh_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  // repeated uint32 config_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->config_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->config_id(i));
    }
    total_size += 1 * this->config_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_refresh_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_refresh_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_refresh_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_refresh_data_req::MergeFrom(const game_royal_refresh_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  config_id_.MergeFrom(from.config_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_refresh_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_refresh_data_req::CopyFrom(const game_royal_refresh_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_refresh_data_req::IsInitialized() const {

  return true;
}

void game_royal_refresh_data_req::Swap(game_royal_refresh_data_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    config_id_.Swap(&other->config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_refresh_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_refresh_data_req_descriptor_;
  metadata.reflection = game_royal_refresh_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_refresh_data_ack::kProtoIdFieldNumber;
const int game_royal_refresh_data_ack::kRetFieldNumber;
const int game_royal_refresh_data_ack::kRoyalsFieldNumber;
#endif  // !_MSC_VER

game_royal_refresh_data_ack::game_royal_refresh_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_refresh_data_ack::InitAsDefaultInstance() {
}

game_royal_refresh_data_ack::game_royal_refresh_data_ack(const game_royal_refresh_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_refresh_data_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6109;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_refresh_data_ack::~game_royal_refresh_data_ack() {
  SharedDtor();
}

void game_royal_refresh_data_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_refresh_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_refresh_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_refresh_data_ack_descriptor_;
}

const game_royal_refresh_data_ack& game_royal_refresh_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_refresh_data_ack* game_royal_refresh_data_ack::default_instance_ = NULL;

game_royal_refresh_data_ack* game_royal_refresh_data_ack::New() const {
  return new game_royal_refresh_data_ack;
}

void game_royal_refresh_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6109;
    ret_ = 0u;
  }
  royals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_refresh_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_royals;
        break;
      }

      // repeated .SProtoSpace.royal_info royals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_royals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_refresh_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.royal_info royals = 3;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->royals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_refresh_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.royal_info royals = 3;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->royals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_refresh_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.royal_info royals = 3;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_refresh_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_refresh_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_refresh_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_refresh_data_ack::MergeFrom(const game_royal_refresh_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_refresh_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_refresh_data_ack::CopyFrom(const game_royal_refresh_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_refresh_data_ack::IsInitialized() const {

  return true;
}

void game_royal_refresh_data_ack::Swap(game_royal_refresh_data_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    royals_.Swap(&other->royals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_refresh_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_refresh_data_ack_descriptor_;
  metadata.reflection = game_royal_refresh_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_qingan_req::kProtoIdFieldNumber;
const int game_royal_qingan_req::kUuidFieldNumber;
const int game_royal_qingan_req::kRoyalIdFieldNumber;
#endif  // !_MSC_VER

game_royal_qingan_req::game_royal_qingan_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_qingan_req::InitAsDefaultInstance() {
}

game_royal_qingan_req::game_royal_qingan_req(const game_royal_qingan_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_qingan_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6111;
  uuid_ = GOOGLE_ULONGLONG(0);
  royal_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_qingan_req::~game_royal_qingan_req() {
  SharedDtor();
}

void game_royal_qingan_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_qingan_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_qingan_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_qingan_req_descriptor_;
}

const game_royal_qingan_req& game_royal_qingan_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_qingan_req* game_royal_qingan_req::default_instance_ = NULL;

game_royal_qingan_req* game_royal_qingan_req::New() const {
  return new game_royal_qingan_req;
}

void game_royal_qingan_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6111;
    uuid_ = GOOGLE_ULONGLONG(0);
    royal_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_qingan_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_qingan_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->royal_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_qingan_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->royal_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_qingan_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // optional uint32 royal_id = 3;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_qingan_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_qingan_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_qingan_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_qingan_req::MergeFrom(const game_royal_qingan_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_qingan_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_qingan_req::CopyFrom(const game_royal_qingan_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_qingan_req::IsInitialized() const {

  return true;
}

void game_royal_qingan_req::Swap(game_royal_qingan_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(uuid_, other->uuid_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_qingan_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_qingan_req_descriptor_;
  metadata.reflection = game_royal_qingan_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_qingan_ack::kProtoIdFieldNumber;
const int game_royal_qingan_ack::kRetFieldNumber;
const int game_royal_qingan_ack::kRoyalsFieldNumber;
#endif  // !_MSC_VER

game_royal_qingan_ack::game_royal_qingan_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_qingan_ack::InitAsDefaultInstance() {
}

game_royal_qingan_ack::game_royal_qingan_ack(const game_royal_qingan_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_qingan_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6112;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_qingan_ack::~game_royal_qingan_ack() {
  SharedDtor();
}

void game_royal_qingan_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_qingan_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_qingan_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_qingan_ack_descriptor_;
}

const game_royal_qingan_ack& game_royal_qingan_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_qingan_ack* game_royal_qingan_ack::default_instance_ = NULL;

game_royal_qingan_ack* game_royal_qingan_ack::New() const {
  return new game_royal_qingan_ack;
}

void game_royal_qingan_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6112;
    ret_ = 0u;
  }
  royals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_qingan_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_royals;
        break;
      }

      // repeated .SProtoSpace.royal_info royals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_royals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_royals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_royals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_qingan_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.royal_info royals = 3;
  for (int i = 0; i < this->royals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->royals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_qingan_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.royal_info royals = 3;
  for (int i = 0; i < this->royals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->royals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_qingan_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.royal_info royals = 3;
  total_size += 1 * this->royals_size();
  for (int i = 0; i < this->royals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->royals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_qingan_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_qingan_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_qingan_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_qingan_ack::MergeFrom(const game_royal_qingan_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  royals_.MergeFrom(from.royals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_qingan_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_qingan_ack::CopyFrom(const game_royal_qingan_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_qingan_ack::IsInitialized() const {

  return true;
}

void game_royal_qingan_ack::Swap(game_royal_qingan_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    royals_.Swap(&other->royals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_qingan_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_qingan_ack_descriptor_;
  metadata.reflection = game_royal_qingan_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_unlock_req::kProtoIdFieldNumber;
const int game_royal_unlock_req::kConfigIdFieldNumber;
#endif  // !_MSC_VER

game_royal_unlock_req::game_royal_unlock_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_unlock_req::InitAsDefaultInstance() {
}

game_royal_unlock_req::game_royal_unlock_req(const game_royal_unlock_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_unlock_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6113;
  config_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_unlock_req::~game_royal_unlock_req() {
  SharedDtor();
}

void game_royal_unlock_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_unlock_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_unlock_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_unlock_req_descriptor_;
}

const game_royal_unlock_req& game_royal_unlock_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_unlock_req* game_royal_unlock_req::default_instance_ = NULL;

game_royal_unlock_req* game_royal_unlock_req::New() const {
  return new game_royal_unlock_req;
}

void game_royal_unlock_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6113;
    config_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_unlock_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_config_id;
        break;
      }

      // optional uint32 config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_unlock_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 config_id = 2;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->config_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_unlock_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 config_id = 2;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->config_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_unlock_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 config_id = 2;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_unlock_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_unlock_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_unlock_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_unlock_req::MergeFrom(const game_royal_unlock_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_unlock_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_unlock_req::CopyFrom(const game_royal_unlock_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_unlock_req::IsInitialized() const {

  return true;
}

void game_royal_unlock_req::Swap(game_royal_unlock_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(config_id_, other->config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_unlock_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_unlock_req_descriptor_;
  metadata.reflection = game_royal_unlock_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_unlock_ack::kProtoIdFieldNumber;
const int game_royal_unlock_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_royal_unlock_ack::game_royal_unlock_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_unlock_ack::InitAsDefaultInstance() {
}

game_royal_unlock_ack::game_royal_unlock_ack(const game_royal_unlock_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_unlock_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6114;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_unlock_ack::~game_royal_unlock_ack() {
  SharedDtor();
}

void game_royal_unlock_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_unlock_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_unlock_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_unlock_ack_descriptor_;
}

const game_royal_unlock_ack& game_royal_unlock_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_unlock_ack* game_royal_unlock_ack::default_instance_ = NULL;

game_royal_unlock_ack* game_royal_unlock_ack::New() const {
  return new game_royal_unlock_ack;
}

void game_royal_unlock_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6114;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_unlock_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_unlock_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_unlock_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_unlock_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_unlock_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_unlock_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_unlock_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_unlock_ack::MergeFrom(const game_royal_unlock_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_unlock_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_unlock_ack::CopyFrom(const game_royal_unlock_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_unlock_ack::IsInitialized() const {

  return true;
}

void game_royal_unlock_ack::Swap(game_royal_unlock_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_unlock_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_unlock_ack_descriptor_;
  metadata.reflection = game_royal_unlock_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_branch_task_fin_req::kProtoIdFieldNumber;
const int game_branch_task_fin_req::kRoyalIdFieldNumber;
const int game_branch_task_fin_req::kTaskIdFieldNumber;
#endif  // !_MSC_VER

game_branch_task_fin_req::game_branch_task_fin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_branch_task_fin_req::InitAsDefaultInstance() {
}

game_branch_task_fin_req::game_branch_task_fin_req(const game_branch_task_fin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_branch_task_fin_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6116;
  royal_id_ = 0u;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_branch_task_fin_req::~game_branch_task_fin_req() {
  SharedDtor();
}

void game_branch_task_fin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_branch_task_fin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_branch_task_fin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_branch_task_fin_req_descriptor_;
}

const game_branch_task_fin_req& game_branch_task_fin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_branch_task_fin_req* game_branch_task_fin_req::default_instance_ = NULL;

game_branch_task_fin_req* game_branch_task_fin_req::New() const {
  return new game_branch_task_fin_req;
}

void game_branch_task_fin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6116;
    royal_id_ = 0u;
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_branch_task_fin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_branch_task_fin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->royal_id(), output);
  }

  // optional uint32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_branch_task_fin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->royal_id(), target);
  }

  // optional uint32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_branch_task_fin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 royal_id = 2;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional uint32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_branch_task_fin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_branch_task_fin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_branch_task_fin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_branch_task_fin_req::MergeFrom(const game_branch_task_fin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_branch_task_fin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_branch_task_fin_req::CopyFrom(const game_branch_task_fin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_branch_task_fin_req::IsInitialized() const {

  return true;
}

void game_branch_task_fin_req::Swap(game_branch_task_fin_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_branch_task_fin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_branch_task_fin_req_descriptor_;
  metadata.reflection = game_branch_task_fin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_branch_task_fin_ack::kProtoIdFieldNumber;
const int game_branch_task_fin_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_branch_task_fin_ack::game_branch_task_fin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_branch_task_fin_ack::InitAsDefaultInstance() {
}

game_branch_task_fin_ack::game_branch_task_fin_ack(const game_branch_task_fin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_branch_task_fin_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6117;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_branch_task_fin_ack::~game_branch_task_fin_ack() {
  SharedDtor();
}

void game_branch_task_fin_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_branch_task_fin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_branch_task_fin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_branch_task_fin_ack_descriptor_;
}

const game_branch_task_fin_ack& game_branch_task_fin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_branch_task_fin_ack* game_branch_task_fin_ack::default_instance_ = NULL;

game_branch_task_fin_ack* game_branch_task_fin_ack::New() const {
  return new game_branch_task_fin_ack;
}

void game_branch_task_fin_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6117;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_branch_task_fin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_branch_task_fin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_branch_task_fin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_branch_task_fin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_branch_task_fin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_branch_task_fin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_branch_task_fin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_branch_task_fin_ack::MergeFrom(const game_branch_task_fin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_branch_task_fin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_branch_task_fin_ack::CopyFrom(const game_branch_task_fin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_branch_task_fin_ack::IsInitialized() const {

  return true;
}

void game_branch_task_fin_ack::Swap(game_branch_task_fin_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_branch_task_fin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_branch_task_fin_ack_descriptor_;
  metadata.reflection = game_branch_task_fin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_chat_req::kProtoIdFieldNumber;
const int game_royal_chat_req::kRoyalIdFieldNumber;
#endif  // !_MSC_VER

game_royal_chat_req::game_royal_chat_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_chat_req::InitAsDefaultInstance() {
}

game_royal_chat_req::game_royal_chat_req(const game_royal_chat_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_chat_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6120;
  royal_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_chat_req::~game_royal_chat_req() {
  SharedDtor();
}

void game_royal_chat_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_chat_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_chat_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_chat_req_descriptor_;
}

const game_royal_chat_req& game_royal_chat_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_chat_req* game_royal_chat_req::default_instance_ = NULL;

game_royal_chat_req* game_royal_chat_req::New() const {
  return new game_royal_chat_req;
}

void game_royal_chat_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6120;
    royal_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_chat_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_chat_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->royal_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_chat_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->royal_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_chat_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 royal_id = 2;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_chat_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_chat_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_chat_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_chat_req::MergeFrom(const game_royal_chat_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_chat_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_chat_req::CopyFrom(const game_royal_chat_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_chat_req::IsInitialized() const {

  return true;
}

void game_royal_chat_req::Swap(game_royal_chat_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_chat_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_chat_req_descriptor_;
  metadata.reflection = game_royal_chat_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_chat_ack::kProtoIdFieldNumber;
const int game_royal_chat_ack::kRetFieldNumber;
const int game_royal_chat_ack::kTaskIdFieldNumber;
#endif  // !_MSC_VER

game_royal_chat_ack::game_royal_chat_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_chat_ack::InitAsDefaultInstance() {
}

game_royal_chat_ack::game_royal_chat_ack(const game_royal_chat_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_chat_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6121;
  ret_ = 0u;
  task_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_chat_ack::~game_royal_chat_ack() {
  SharedDtor();
}

void game_royal_chat_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_chat_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_chat_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_chat_ack_descriptor_;
}

const game_royal_chat_ack& game_royal_chat_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_chat_ack* game_royal_chat_ack::default_instance_ = NULL;

game_royal_chat_ack* game_royal_chat_ack::New() const {
  return new game_royal_chat_ack;
}

void game_royal_chat_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6121;
    ret_ = 0u;
    task_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_chat_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_chat_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_chat_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_chat_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_chat_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_chat_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_chat_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_chat_ack::MergeFrom(const game_royal_chat_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_chat_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_chat_ack::CopyFrom(const game_royal_chat_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_chat_ack::IsInitialized() const {

  return true;
}

void game_royal_chat_ack::Swap(game_royal_chat_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(task_id_, other->task_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_chat_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_chat_ack_descriptor_;
  metadata.reflection = game_royal_chat_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_get_gifts_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

game_royal_get_gifts_req::game_royal_get_gifts_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_get_gifts_req::InitAsDefaultInstance() {
}

game_royal_get_gifts_req::game_royal_get_gifts_req(const game_royal_get_gifts_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_get_gifts_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6122;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_get_gifts_req::~game_royal_get_gifts_req() {
  SharedDtor();
}

void game_royal_get_gifts_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_get_gifts_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_get_gifts_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_get_gifts_req_descriptor_;
}

const game_royal_get_gifts_req& game_royal_get_gifts_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_get_gifts_req* game_royal_get_gifts_req::default_instance_ = NULL;

game_royal_get_gifts_req* game_royal_get_gifts_req::New() const {
  return new game_royal_get_gifts_req;
}

void game_royal_get_gifts_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6122;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_get_gifts_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_get_gifts_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_get_gifts_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_get_gifts_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_get_gifts_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_get_gifts_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_get_gifts_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_get_gifts_req::MergeFrom(const game_royal_get_gifts_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_get_gifts_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_get_gifts_req::CopyFrom(const game_royal_get_gifts_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_get_gifts_req::IsInitialized() const {

  return true;
}

void game_royal_get_gifts_req::Swap(game_royal_get_gifts_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_get_gifts_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_get_gifts_req_descriptor_;
  metadata.reflection = game_royal_get_gifts_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_get_gifts_ack::kProtoIdFieldNumber;
const int game_royal_get_gifts_ack::kGiftInfosFieldNumber;
const int game_royal_get_gifts_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_royal_get_gifts_ack::game_royal_get_gifts_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_get_gifts_ack::InitAsDefaultInstance() {
}

game_royal_get_gifts_ack::game_royal_get_gifts_ack(const game_royal_get_gifts_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_get_gifts_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6123;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_get_gifts_ack::~game_royal_get_gifts_ack() {
  SharedDtor();
}

void game_royal_get_gifts_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_get_gifts_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_get_gifts_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_get_gifts_ack_descriptor_;
}

const game_royal_get_gifts_ack& game_royal_get_gifts_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_get_gifts_ack* game_royal_get_gifts_ack::default_instance_ = NULL;

game_royal_get_gifts_ack* game_royal_get_gifts_ack::New() const {
  return new game_royal_get_gifts_ack;
}

void game_royal_get_gifts_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6123;
    ret_ = 0u;
  }
  gift_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_get_gifts_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_infos;
        break;
      }

      // repeated .SProtoSpace.royal_gift_info gift_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_infos;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_get_gifts_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // repeated .SProtoSpace.royal_gift_info gift_infos = 2;
  for (int i = 0; i < this->gift_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gift_infos(i), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_get_gifts_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // repeated .SProtoSpace.royal_gift_info gift_infos = 2;
  for (int i = 0; i < this->gift_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gift_infos(i), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_get_gifts_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.royal_gift_info gift_infos = 2;
  total_size += 1 * this->gift_infos_size();
  for (int i = 0; i < this->gift_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_get_gifts_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_get_gifts_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_get_gifts_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_get_gifts_ack::MergeFrom(const game_royal_get_gifts_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_infos_.MergeFrom(from.gift_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_get_gifts_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_get_gifts_ack::CopyFrom(const game_royal_get_gifts_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_get_gifts_ack::IsInitialized() const {

  return true;
}

void game_royal_get_gifts_ack::Swap(game_royal_get_gifts_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    gift_infos_.Swap(&other->gift_infos_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_get_gifts_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_get_gifts_ack_descriptor_;
  metadata.reflection = game_royal_get_gifts_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_give_gift_req::kProtoIdFieldNumber;
const int game_royal_give_gift_req::kRoyalIdFieldNumber;
const int game_royal_give_gift_req::kGiftIdFieldNumber;
#endif  // !_MSC_VER

game_royal_give_gift_req::game_royal_give_gift_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_give_gift_req::InitAsDefaultInstance() {
}

game_royal_give_gift_req::game_royal_give_gift_req(const game_royal_give_gift_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_give_gift_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6124;
  royal_id_ = 0u;
  gift_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_give_gift_req::~game_royal_give_gift_req() {
  SharedDtor();
}

void game_royal_give_gift_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_give_gift_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_give_gift_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_give_gift_req_descriptor_;
}

const game_royal_give_gift_req& game_royal_give_gift_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_give_gift_req* game_royal_give_gift_req::default_instance_ = NULL;

game_royal_give_gift_req* game_royal_give_gift_req::New() const {
  return new game_royal_give_gift_req;
}

void game_royal_give_gift_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6124;
    royal_id_ = 0u;
    gift_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_give_gift_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift_id;
        break;
      }

      // optional uint32 gift_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_give_gift_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->royal_id(), output);
  }

  // optional uint32 gift_id = 3;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_give_gift_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 royal_id = 2;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->royal_id(), target);
  }

  // optional uint32 gift_id = 3;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_give_gift_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 royal_id = 2;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional uint32 gift_id = 3;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_give_gift_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_give_gift_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_give_gift_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_give_gift_req::MergeFrom(const game_royal_give_gift_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_give_gift_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_give_gift_req::CopyFrom(const game_royal_give_gift_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_give_gift_req::IsInitialized() const {

  return true;
}

void game_royal_give_gift_req::Swap(game_royal_give_gift_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_give_gift_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_give_gift_req_descriptor_;
  metadata.reflection = game_royal_give_gift_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_give_gift_ack::kProtoIdFieldNumber;
const int game_royal_give_gift_ack::kRetFieldNumber;
const int game_royal_give_gift_ack::kGiftIdFieldNumber;
#endif  // !_MSC_VER

game_royal_give_gift_ack::game_royal_give_gift_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_give_gift_ack::InitAsDefaultInstance() {
}

game_royal_give_gift_ack::game_royal_give_gift_ack(const game_royal_give_gift_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_give_gift_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6125;
  ret_ = 0u;
  gift_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_give_gift_ack::~game_royal_give_gift_ack() {
  SharedDtor();
}

void game_royal_give_gift_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_give_gift_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_give_gift_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_give_gift_ack_descriptor_;
}

const game_royal_give_gift_ack& game_royal_give_gift_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_give_gift_ack* game_royal_give_gift_ack::default_instance_ = NULL;

game_royal_give_gift_ack* game_royal_give_gift_ack::New() const {
  return new game_royal_give_gift_ack;
}

void game_royal_give_gift_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6125;
    ret_ = 0u;
    gift_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_give_gift_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gift_id;
        break;
      }

      // optional uint32 gift_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gift_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_give_gift_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 gift_id = 3;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gift_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_give_gift_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 gift_id = 3;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gift_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_give_gift_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 gift_id = 3;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_give_gift_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_give_gift_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_give_gift_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_give_gift_ack::MergeFrom(const game_royal_give_gift_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_give_gift_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_give_gift_ack::CopyFrom(const game_royal_give_gift_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_give_gift_ack::IsInitialized() const {

  return true;
}

void game_royal_give_gift_ack::Swap(game_royal_give_gift_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(gift_id_, other->gift_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_give_gift_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_give_gift_ack_descriptor_;
  metadata.reflection = game_royal_give_gift_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_enter_scene_req::kProtoIdFieldNumber;
const int game_royal_enter_scene_req::kSceneIdFieldNumber;
#endif  // !_MSC_VER

game_royal_enter_scene_req::game_royal_enter_scene_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_enter_scene_req::InitAsDefaultInstance() {
}

game_royal_enter_scene_req::game_royal_enter_scene_req(const game_royal_enter_scene_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_enter_scene_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6127;
  scene_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_enter_scene_req::~game_royal_enter_scene_req() {
  SharedDtor();
}

void game_royal_enter_scene_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_enter_scene_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_enter_scene_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_enter_scene_req_descriptor_;
}

const game_royal_enter_scene_req& game_royal_enter_scene_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_enter_scene_req* game_royal_enter_scene_req::default_instance_ = NULL;

game_royal_enter_scene_req* game_royal_enter_scene_req::New() const {
  return new game_royal_enter_scene_req;
}

void game_royal_enter_scene_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6127;
    scene_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_enter_scene_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_enter_scene_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scene_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_enter_scene_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scene_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_enter_scene_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_enter_scene_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_enter_scene_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_enter_scene_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_enter_scene_req::MergeFrom(const game_royal_enter_scene_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_enter_scene_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_enter_scene_req::CopyFrom(const game_royal_enter_scene_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_enter_scene_req::IsInitialized() const {

  return true;
}

void game_royal_enter_scene_req::Swap(game_royal_enter_scene_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_enter_scene_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_enter_scene_req_descriptor_;
  metadata.reflection = game_royal_enter_scene_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_enter_scene_ack::kProtoIdFieldNumber;
const int game_royal_enter_scene_ack::kRetFieldNumber;
const int game_royal_enter_scene_ack::kTaskIdFieldNumber;
const int game_royal_enter_scene_ack::kSceneIdFieldNumber;
const int game_royal_enter_scene_ack::kRoyalIdFieldNumber;
const int game_royal_enter_scene_ack::kCanFindFieldNumber;
#endif  // !_MSC_VER

game_royal_enter_scene_ack::game_royal_enter_scene_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_enter_scene_ack::InitAsDefaultInstance() {
}

game_royal_enter_scene_ack::game_royal_enter_scene_ack(const game_royal_enter_scene_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_enter_scene_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6128;
  ret_ = 0u;
  task_id_ = 0u;
  scene_id_ = 0u;
  royal_id_ = 0u;
  can_find_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_enter_scene_ack::~game_royal_enter_scene_ack() {
  SharedDtor();
}

void game_royal_enter_scene_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_enter_scene_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_enter_scene_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_enter_scene_ack_descriptor_;
}

const game_royal_enter_scene_ack& game_royal_enter_scene_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_enter_scene_ack* game_royal_enter_scene_ack::default_instance_ = NULL;

game_royal_enter_scene_ack* game_royal_enter_scene_ack::New() const {
  return new game_royal_enter_scene_ack;
}

void game_royal_enter_scene_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6128;
    ret_ = 0u;
    task_id_ = 0u;
    scene_id_ = 0u;
    royal_id_ = 0u;
    can_find_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_enter_scene_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_id;
        break;
      }

      // optional uint32 scene_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_can_find;
        break;
      }

      // optional bool can_find = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_find:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_find_)));
          set_has_can_find();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_enter_scene_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 task_id = 3;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->task_id(), output);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_id(), output);
  }

  // optional uint32 royal_id = 5;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->royal_id(), output);
  }

  // optional bool can_find = 6 [default = false];
  if (has_can_find()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->can_find(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_enter_scene_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 task_id = 3;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->task_id(), target);
  }

  // optional uint32 scene_id = 4;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_id(), target);
  }

  // optional uint32 royal_id = 5;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->royal_id(), target);
  }

  // optional bool can_find = 6 [default = false];
  if (has_can_find()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->can_find(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_enter_scene_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 task_id = 3;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 scene_id = 4;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_id());
    }

    // optional uint32 royal_id = 5;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional bool can_find = 6 [default = false];
    if (has_can_find()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_enter_scene_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_enter_scene_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_enter_scene_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_enter_scene_ack::MergeFrom(const game_royal_enter_scene_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_can_find()) {
      set_can_find(from.can_find());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_enter_scene_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_enter_scene_ack::CopyFrom(const game_royal_enter_scene_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_enter_scene_ack::IsInitialized() const {

  return true;
}

void game_royal_enter_scene_ack::Swap(game_royal_enter_scene_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(task_id_, other->task_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(can_find_, other->can_find_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_enter_scene_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_enter_scene_ack_descriptor_;
  metadata.reflection = game_royal_enter_scene_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_event_fin_req::kProtoIdFieldNumber;
const int game_royal_event_fin_req::kTaskIdFieldNumber;
const int game_royal_event_fin_req::kRoyalIdFieldNumber;
const int game_royal_event_fin_req::kResultFieldNumber;
#endif  // !_MSC_VER

game_royal_event_fin_req::game_royal_event_fin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_event_fin_req::InitAsDefaultInstance() {
}

game_royal_event_fin_req::game_royal_event_fin_req(const game_royal_event_fin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_event_fin_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6129;
  task_id_ = 0u;
  royal_id_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_event_fin_req::~game_royal_event_fin_req() {
  SharedDtor();
}

void game_royal_event_fin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_event_fin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_event_fin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_event_fin_req_descriptor_;
}

const game_royal_event_fin_req& game_royal_event_fin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_event_fin_req* game_royal_event_fin_req::default_instance_ = NULL;

game_royal_event_fin_req* game_royal_event_fin_req::New() const {
  return new game_royal_event_fin_req;
}

void game_royal_event_fin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6129;
    task_id_ = 0u;
    royal_id_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_event_fin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional uint32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_event_fin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->royal_id(), output);
  }

  // optional uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_event_fin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->royal_id(), target);
  }

  // optional uint32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_event_fin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 royal_id = 3;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_event_fin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_event_fin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_event_fin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_event_fin_req::MergeFrom(const game_royal_event_fin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_event_fin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_event_fin_req::CopyFrom(const game_royal_event_fin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_event_fin_req::IsInitialized() const {

  return true;
}

void game_royal_event_fin_req::Swap(game_royal_event_fin_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_event_fin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_event_fin_req_descriptor_;
  metadata.reflection = game_royal_event_fin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int game_royal_event_fin_ack::kProtoIdFieldNumber;
const int game_royal_event_fin_ack::kTaskIdFieldNumber;
const int game_royal_event_fin_ack::kRoyalIdFieldNumber;
const int game_royal_event_fin_ack::kResultFieldNumber;
const int game_royal_event_fin_ack::kRetFieldNumber;
#endif  // !_MSC_VER

game_royal_event_fin_ack::game_royal_event_fin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void game_royal_event_fin_ack::InitAsDefaultInstance() {
}

game_royal_event_fin_ack::game_royal_event_fin_ack(const game_royal_event_fin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void game_royal_event_fin_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6130;
  task_id_ = 0u;
  royal_id_ = 0u;
  result_ = 0u;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

game_royal_event_fin_ack::~game_royal_event_fin_ack() {
  SharedDtor();
}

void game_royal_event_fin_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void game_royal_event_fin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* game_royal_event_fin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return game_royal_event_fin_ack_descriptor_;
}

const game_royal_event_fin_ack& game_royal_event_fin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

game_royal_event_fin_ack* game_royal_event_fin_ack::default_instance_ = NULL;

game_royal_event_fin_ack* game_royal_event_fin_ack::New() const {
  return new game_royal_event_fin_ack;
}

void game_royal_event_fin_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6130;
    task_id_ = 0u;
    royal_id_ = 0u;
    result_ = 0u;
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool game_royal_event_fin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional uint32 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_royal_id;
        break;
      }

      // optional uint32 royal_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_royal_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &royal_id_)));
          set_has_royal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional uint32 result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void game_royal_event_fin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_id(), output);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->royal_id(), output);
  }

  // optional uint32 result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* game_royal_event_fin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_id(), target);
  }

  // optional uint32 royal_id = 3;
  if (has_royal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->royal_id(), target);
  }

  // optional uint32 result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int game_royal_event_fin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 royal_id = 3;
    if (has_royal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->royal_id());
    }

    // optional uint32 result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void game_royal_event_fin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const game_royal_event_fin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const game_royal_event_fin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void game_royal_event_fin_ack::MergeFrom(const game_royal_event_fin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_royal_id()) {
      set_royal_id(from.royal_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void game_royal_event_fin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void game_royal_event_fin_ack::CopyFrom(const game_royal_event_fin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool game_royal_event_fin_ack::IsInitialized() const {

  return true;
}

void game_royal_event_fin_ack::Swap(game_royal_event_fin_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(royal_id_, other->royal_id_);
    std::swap(result_, other->result_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata game_royal_event_fin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = game_royal_event_fin_ack_descriptor_;
  metadata.reflection = game_royal_event_fin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_data_req::kProtoIdFieldNumber;
#endif  // !_MSC_VER

get_offical_data_req::get_offical_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_data_req::InitAsDefaultInstance() {
}

get_offical_data_req::get_offical_data_req(const get_offical_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_data_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6713;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_data_req::~get_offical_data_req() {
  SharedDtor();
}

void get_offical_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_data_req_descriptor_;
}

const get_offical_data_req& get_offical_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_data_req* get_offical_data_req::default_instance_ = NULL;

get_offical_data_req* get_offical_data_req::New() const {
  return new get_offical_data_req;
}

void get_offical_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6713;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_data_req::MergeFrom(const get_offical_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_data_req::CopyFrom(const get_offical_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_data_req::IsInitialized() const {

  return true;
}

void get_offical_data_req::Swap(get_offical_data_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_data_req_descriptor_;
  metadata.reflection = get_offical_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_data_ack::kProtoIdFieldNumber;
const int get_offical_data_ack::kRetFieldNumber;
const int get_offical_data_ack::kCurGradeFieldNumber;
const int get_offical_data_ack::kMaxGradeFieldNumber;
const int get_offical_data_ack::kApplyGradeFieldNumber;
const int get_offical_data_ack::kApplyTimeFieldNumber;
const int get_offical_data_ack::kIsDrawFieldNumber;
const int get_offical_data_ack::kLastDrawTimeFieldNumber;
const int get_offical_data_ack::kDailyOfficalChalNumFieldNumber;
const int get_offical_data_ack::kLastGradeFieldNumber;
const int get_offical_data_ack::kExistFieldNumber;
const int get_offical_data_ack::kRankingIdFieldNumber;
const int get_offical_data_ack::kTimeDataFieldNumber;
#endif  // !_MSC_VER

get_offical_data_ack::get_offical_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_data_ack::InitAsDefaultInstance() {
}

get_offical_data_ack::get_offical_data_ack(const get_offical_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_data_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6714;
  ret_ = 0u;
  cur_grade_ = 0u;
  max_grade_ = 0u;
  apply_grade_ = 0u;
  apply_time_ = GOOGLE_ULONGLONG(0);
  is_draw_ = false;
  last_draw_time_ = GOOGLE_ULONGLONG(0);
  daily_offical_chal_num_ = 0;
  last_grade_ = 0u;
  exist_ = false;
  ranking_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_data_ack::~get_offical_data_ack() {
  SharedDtor();
}

void get_offical_data_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_data_ack_descriptor_;
}

const get_offical_data_ack& get_offical_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_data_ack* get_offical_data_ack::default_instance_ = NULL;

get_offical_data_ack* get_offical_data_ack::New() const {
  return new get_offical_data_ack;
}

void get_offical_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6714;
    ret_ = 0u;
    cur_grade_ = 0u;
    max_grade_ = 0u;
    apply_grade_ = 0u;
    apply_time_ = GOOGLE_ULONGLONG(0);
    is_draw_ = false;
    last_draw_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    daily_offical_chal_num_ = 0;
    last_grade_ = 0u;
    exist_ = false;
    ranking_id_ = 0;
  }
  time_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_grade;
        break;
      }

      // optional uint32 cur_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_grade;
        break;
      }

      // optional uint32 max_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_apply_grade;
        break;
      }

      // optional uint32 apply_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &apply_grade_)));
          set_has_apply_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_time;
        break;
      }

      // optional uint64 apply_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_draw;
        break;
      }

      // optional bool is_draw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_draw_)));
          set_has_is_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_draw_time;
        break;
      }

      // optional uint64 last_draw_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_draw_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_draw_time_)));
          set_has_last_draw_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_daily_offical_chal_num;
        break;
      }

      // optional int32 daily_offical_chal_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_offical_chal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_offical_chal_num_)));
          set_has_daily_offical_chal_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_grade;
        break;
      }

      // optional uint32 last_grade = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_grade_)));
          set_has_last_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_exist;
        break;
      }

      // optional bool exist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_)));
          set_has_exist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ranking_id;
        break;
      }

      // optional int32 ranking_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_id_)));
          set_has_ranking_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_time_data;
        break;
      }

      // repeated .SProtoSpace.grade_match_conf time_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_time_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_grade(), output);
  }

  // optional uint32 max_grade = 4;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_grade(), output);
  }

  // optional uint32 apply_grade = 5;
  if (has_apply_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->apply_grade(), output);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->apply_time(), output);
  }

  // optional bool is_draw = 7;
  if (has_is_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_draw(), output);
  }

  // optional uint64 last_draw_time = 8;
  if (has_last_draw_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_draw_time(), output);
  }

  // optional int32 daily_offical_chal_num = 9;
  if (has_daily_offical_chal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->daily_offical_chal_num(), output);
  }

  // optional uint32 last_grade = 10;
  if (has_last_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_grade(), output);
  }

  // optional bool exist = 11;
  if (has_exist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->exist(), output);
  }

  // optional int32 ranking_id = 12;
  if (has_ranking_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ranking_id(), output);
  }

  // repeated .SProtoSpace.grade_match_conf time_data = 13;
  for (int i = 0; i < this->time_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->time_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint32 cur_grade = 3;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_grade(), target);
  }

  // optional uint32 max_grade = 4;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_grade(), target);
  }

  // optional uint32 apply_grade = 5;
  if (has_apply_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->apply_grade(), target);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->apply_time(), target);
  }

  // optional bool is_draw = 7;
  if (has_is_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_draw(), target);
  }

  // optional uint64 last_draw_time = 8;
  if (has_last_draw_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_draw_time(), target);
  }

  // optional int32 daily_offical_chal_num = 9;
  if (has_daily_offical_chal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->daily_offical_chal_num(), target);
  }

  // optional uint32 last_grade = 10;
  if (has_last_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_grade(), target);
  }

  // optional bool exist = 11;
  if (has_exist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->exist(), target);
  }

  // optional int32 ranking_id = 12;
  if (has_ranking_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ranking_id(), target);
  }

  // repeated .SProtoSpace.grade_match_conf time_data = 13;
  for (int i = 0; i < this->time_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->time_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint32 cur_grade = 3;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_grade());
    }

    // optional uint32 max_grade = 4;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grade());
    }

    // optional uint32 apply_grade = 5;
    if (has_apply_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->apply_grade());
    }

    // optional uint64 apply_time = 6;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

    // optional bool is_draw = 7;
    if (has_is_draw()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_draw_time = 8;
    if (has_last_draw_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_draw_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 daily_offical_chal_num = 9;
    if (has_daily_offical_chal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_offical_chal_num());
    }

    // optional uint32 last_grade = 10;
    if (has_last_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_grade());
    }

    // optional bool exist = 11;
    if (has_exist()) {
      total_size += 1 + 1;
    }

    // optional int32 ranking_id = 12;
    if (has_ranking_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_id());
    }

  }
  // repeated .SProtoSpace.grade_match_conf time_data = 13;
  total_size += 1 * this->time_data_size();
  for (int i = 0; i < this->time_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->time_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_data_ack::MergeFrom(const get_offical_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  time_data_.MergeFrom(from.time_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_apply_grade()) {
      set_apply_grade(from.apply_grade());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_is_draw()) {
      set_is_draw(from.is_draw());
    }
    if (from.has_last_draw_time()) {
      set_last_draw_time(from.last_draw_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_daily_offical_chal_num()) {
      set_daily_offical_chal_num(from.daily_offical_chal_num());
    }
    if (from.has_last_grade()) {
      set_last_grade(from.last_grade());
    }
    if (from.has_exist()) {
      set_exist(from.exist());
    }
    if (from.has_ranking_id()) {
      set_ranking_id(from.ranking_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_data_ack::CopyFrom(const get_offical_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_data_ack::IsInitialized() const {

  return true;
}

void get_offical_data_ack::Swap(get_offical_data_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(apply_grade_, other->apply_grade_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(is_draw_, other->is_draw_);
    std::swap(last_draw_time_, other->last_draw_time_);
    std::swap(daily_offical_chal_num_, other->daily_offical_chal_num_);
    std::swap(last_grade_, other->last_grade_);
    std::swap(exist_, other->exist_);
    std::swap(ranking_id_, other->ranking_id_);
    time_data_.Swap(&other->time_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_data_ack_descriptor_;
  metadata.reflection = get_offical_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_data_ntf::kProtoIdFieldNumber;
const int offical_data_ntf::kCurGradeFieldNumber;
const int offical_data_ntf::kMaxGradeFieldNumber;
const int offical_data_ntf::kApplyGradeFieldNumber;
const int offical_data_ntf::kLockFieldNumber;
const int offical_data_ntf::kApplyTimeFieldNumber;
const int offical_data_ntf::kIsDrawFieldNumber;
const int offical_data_ntf::kLastDrawTimeFieldNumber;
const int offical_data_ntf::kDailyOfficalChalNumFieldNumber;
#endif  // !_MSC_VER

offical_data_ntf::offical_data_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_data_ntf::InitAsDefaultInstance() {
}

offical_data_ntf::offical_data_ntf(const offical_data_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_data_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6701;
  cur_grade_ = 0;
  max_grade_ = 0;
  apply_grade_ = 0;
  lock_ = false;
  apply_time_ = GOOGLE_ULONGLONG(0);
  is_draw_ = false;
  last_draw_time_ = GOOGLE_ULONGLONG(0);
  daily_offical_chal_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_data_ntf::~offical_data_ntf() {
  SharedDtor();
}

void offical_data_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_data_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_data_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_data_ntf_descriptor_;
}

const offical_data_ntf& offical_data_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

offical_data_ntf* offical_data_ntf::default_instance_ = NULL;

offical_data_ntf* offical_data_ntf::New() const {
  return new offical_data_ntf;
}

void offical_data_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6701;
    cur_grade_ = 0;
    max_grade_ = 0;
    apply_grade_ = 0;
    lock_ = false;
    apply_time_ = GOOGLE_ULONGLONG(0);
    is_draw_ = false;
    last_draw_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    daily_offical_chal_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_data_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_data_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_grade;
        break;
      }

      // optional int32 cur_grade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_grade_)));
          set_has_cur_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_grade;
        break;
      }

      // optional int32 max_grade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_apply_grade;
        break;
      }

      // optional int32 apply_grade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_grade_)));
          set_has_apply_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lock;
        break;
      }

      // optional bool lock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_time;
        break;
      }

      // optional uint64 apply_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_draw;
        break;
      }

      // optional bool is_draw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_draw_)));
          set_has_is_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_draw_time;
        break;
      }

      // optional uint64 last_draw_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_draw_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_draw_time_)));
          set_has_last_draw_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_daily_offical_chal_num;
        break;
      }

      // optional int32 daily_offical_chal_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_offical_chal_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_offical_chal_num_)));
          set_has_daily_offical_chal_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_data_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_data_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 cur_grade = 2;
  if (has_cur_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_grade(), output);
  }

  // optional int32 max_grade = 3;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_grade(), output);
  }

  // optional int32 apply_grade = 4;
  if (has_apply_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->apply_grade(), output);
  }

  // optional bool lock = 5;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lock(), output);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->apply_time(), output);
  }

  // optional bool is_draw = 7;
  if (has_is_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_draw(), output);
  }

  // optional uint64 last_draw_time = 8;
  if (has_last_draw_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_draw_time(), output);
  }

  // optional int32 daily_offical_chal_num = 9;
  if (has_daily_offical_chal_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->daily_offical_chal_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_data_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_data_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 cur_grade = 2;
  if (has_cur_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_grade(), target);
  }

  // optional int32 max_grade = 3;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_grade(), target);
  }

  // optional int32 apply_grade = 4;
  if (has_apply_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->apply_grade(), target);
  }

  // optional bool lock = 5;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->lock(), target);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->apply_time(), target);
  }

  // optional bool is_draw = 7;
  if (has_is_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_draw(), target);
  }

  // optional uint64 last_draw_time = 8;
  if (has_last_draw_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_draw_time(), target);
  }

  // optional int32 daily_offical_chal_num = 9;
  if (has_daily_offical_chal_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->daily_offical_chal_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_data_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_data_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 cur_grade = 2;
    if (has_cur_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_grade());
    }

    // optional int32 max_grade = 3;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_grade());
    }

    // optional int32 apply_grade = 4;
    if (has_apply_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_grade());
    }

    // optional bool lock = 5;
    if (has_lock()) {
      total_size += 1 + 1;
    }

    // optional uint64 apply_time = 6;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

    // optional bool is_draw = 7;
    if (has_is_draw()) {
      total_size += 1 + 1;
    }

    // optional uint64 last_draw_time = 8;
    if (has_last_draw_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_draw_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 daily_offical_chal_num = 9;
    if (has_daily_offical_chal_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_offical_chal_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_data_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_data_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_data_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_data_ntf::MergeFrom(const offical_data_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_cur_grade()) {
      set_cur_grade(from.cur_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
    if (from.has_apply_grade()) {
      set_apply_grade(from.apply_grade());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
    if (from.has_is_draw()) {
      set_is_draw(from.is_draw());
    }
    if (from.has_last_draw_time()) {
      set_last_draw_time(from.last_draw_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_daily_offical_chal_num()) {
      set_daily_offical_chal_num(from.daily_offical_chal_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_data_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_data_ntf::CopyFrom(const offical_data_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_data_ntf::IsInitialized() const {

  return true;
}

void offical_data_ntf::Swap(offical_data_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(cur_grade_, other->cur_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(apply_grade_, other->apply_grade_);
    std::swap(lock_, other->lock_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(is_draw_, other->is_draw_);
    std::swap(last_draw_time_, other->last_draw_time_);
    std::swap(daily_offical_chal_num_, other->daily_offical_chal_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_data_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_data_ntf_descriptor_;
  metadata.reflection = offical_data_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_chest_ntf::kProtoidFieldNumber;
const int update_chest_ntf::kChestsFieldNumber;
#endif  // !_MSC_VER

update_chest_ntf::update_chest_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_chest_ntf::InitAsDefaultInstance() {
}

update_chest_ntf::update_chest_ntf(const update_chest_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_chest_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5122;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_chest_ntf::~update_chest_ntf() {
  SharedDtor();
}

void update_chest_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_chest_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_chest_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_chest_ntf_descriptor_;
}

const update_chest_ntf& update_chest_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

update_chest_ntf* update_chest_ntf::default_instance_ = NULL;

update_chest_ntf* update_chest_ntf::New() const {
  return new update_chest_ntf;
}

void update_chest_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5122;
  }
  chests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_chest_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_chest_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chests;
        break;
      }

      // repeated .SProtoSpace.role_chest chests = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chests()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chests;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_chest_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_chest_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.role_chest chests = 2;
  for (int i = 0; i < this->chests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_chest_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_chest_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.role_chest chests = 2;
  for (int i = 0; i < this->chests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_chest_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_chest_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.role_chest chests = 2;
  total_size += 1 * this->chests_size();
  for (int i = 0; i < this->chests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_chest_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_chest_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_chest_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_chest_ntf::MergeFrom(const update_chest_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  chests_.MergeFrom(from.chests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_chest_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_chest_ntf::CopyFrom(const update_chest_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_chest_ntf::IsInitialized() const {

  return true;
}

void update_chest_ntf::Swap(update_chest_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    chests_.Swap(&other->chests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_chest_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_chest_ntf_descriptor_;
  metadata.reflection = update_chest_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_role_chest_req::kProtoIdFieldNumber;
const int get_role_chest_req::kChestIdFieldNumber;
#endif  // !_MSC_VER

get_role_chest_req::get_role_chest_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_role_chest_req::InitAsDefaultInstance() {
}

get_role_chest_req::get_role_chest_req(const get_role_chest_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_role_chest_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 5120;
  chest_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_role_chest_req::~get_role_chest_req() {
  SharedDtor();
}

void get_role_chest_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_role_chest_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_role_chest_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_role_chest_req_descriptor_;
}

const get_role_chest_req& get_role_chest_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_role_chest_req* get_role_chest_req::default_instance_ = NULL;

get_role_chest_req* get_role_chest_req::New() const {
  return new get_role_chest_req;
}

void get_role_chest_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 5120;
    chest_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_role_chest_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chest_id;
        break;
      }

      // optional uint64 chest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chest_id_)));
          set_has_chest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_role_chest_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 chest_id = 2;
  if (has_chest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_role_chest_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 chest_id = 2;
  if (has_chest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_role_chest_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 chest_id = 2;
    if (has_chest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_role_chest_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_role_chest_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_role_chest_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_role_chest_req::MergeFrom(const get_role_chest_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_chest_id()) {
      set_chest_id(from.chest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_role_chest_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_role_chest_req::CopyFrom(const get_role_chest_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_role_chest_req::IsInitialized() const {

  return true;
}

void get_role_chest_req::Swap(get_role_chest_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(chest_id_, other->chest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_role_chest_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_role_chest_req_descriptor_;
  metadata.reflection = get_role_chest_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_role_chest_ack::kProtoIdFieldNumber;
const int get_role_chest_ack::kChestIdFieldNumber;
const int get_role_chest_ack::kRetFieldNumber;
#endif  // !_MSC_VER

get_role_chest_ack::get_role_chest_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_role_chest_ack::InitAsDefaultInstance() {
}

get_role_chest_ack::get_role_chest_ack(const get_role_chest_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_role_chest_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 5121;
  chest_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_role_chest_ack::~get_role_chest_ack() {
  SharedDtor();
}

void get_role_chest_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_role_chest_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_role_chest_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_role_chest_ack_descriptor_;
}

const get_role_chest_ack& get_role_chest_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_role_chest_ack* get_role_chest_ack::default_instance_ = NULL;

get_role_chest_ack* get_role_chest_ack::New() const {
  return new get_role_chest_ack;
}

void get_role_chest_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 5121;
    chest_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_role_chest_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chest_id;
        break;
      }

      // optional uint64 chest_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chest_id_)));
          set_has_chest_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_role_chest_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 chest_id = 2;
  if (has_chest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->chest_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_role_chest_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 chest_id = 2;
  if (has_chest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->chest_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_role_chest_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 chest_id = 2;
    if (has_chest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chest_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_role_chest_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_role_chest_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_role_chest_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_role_chest_ack::MergeFrom(const get_role_chest_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_chest_id()) {
      set_chest_id(from.chest_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_role_chest_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_role_chest_ack::CopyFrom(const get_role_chest_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_role_chest_ack::IsInitialized() const {

  return true;
}

void get_role_chest_ack::Swap(get_role_chest_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(chest_id_, other->chest_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_role_chest_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_role_chest_ack_descriptor_;
  metadata.reflection = get_role_chest_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_team_req::kProtoIdFieldNumber;
const int create_team_req::kTeamTypeFieldNumber;
const int create_team_req::kTeamSizeFieldNumber;
const int create_team_req::kTeamPermFieldNumber;
const int create_team_req::kTeamNameFieldNumber;
const int create_team_req::kHerosFieldNumber;
#endif  // !_MSC_VER

create_team_req::create_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_team_req::InitAsDefaultInstance() {
}

create_team_req::create_team_req(const create_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_team_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6500;
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_team_req::~create_team_req() {
  SharedDtor();
}

void create_team_req::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void create_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_team_req_descriptor_;
}

const create_team_req& create_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

create_team_req* create_team_req::default_instance_ = NULL;

create_team_req* create_team_req::New() const {
  return new create_team_req;
}

void create_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6500;
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_name;
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        break;
      }

      // repeated uint64 heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->team_name(), output);
  }

  // repeated uint64 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // repeated uint64 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

    // optional string team_name = 5;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

  }
  // repeated uint64 heros = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_team_req::MergeFrom(const create_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_team_req::CopyFrom(const create_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_team_req::IsInitialized() const {

  return true;
}

void create_team_req::Swap(create_team_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    std::swap(team_name_, other->team_name_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_team_req_descriptor_;
  metadata.reflection = create_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int create_team_ack::kProtoIdFieldNumber;
const int create_team_ack::kTeamTypeFieldNumber;
const int create_team_ack::kTeamSizeFieldNumber;
const int create_team_ack::kTeamPermFieldNumber;
const int create_team_ack::kTeamNameFieldNumber;
const int create_team_ack::kHerosFieldNumber;
const int create_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

create_team_ack::create_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void create_team_ack::InitAsDefaultInstance() {
}

create_team_ack::create_team_ack(const create_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void create_team_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6501;
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

create_team_ack::~create_team_ack() {
  SharedDtor();
}

void create_team_ack::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (this != default_instance_) {
  }
}

void create_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* create_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return create_team_ack_descriptor_;
}

const create_team_ack& create_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

create_team_ack* create_team_ack::default_instance_ = NULL;

create_team_ack* create_team_ack::New() const {
  return new create_team_ack;
}

void create_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6501;
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    ret_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool create_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_team_name;
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        break;
      }

      // repeated uint64 heros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heros;
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void create_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->team_name(), output);
  }

  // repeated uint64 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->heros(i), output);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* create_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // optional string team_name = 5;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // repeated uint64 heros = 6;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->heros(i), target);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int create_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

    // optional string team_name = 5;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated uint64 heros = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void create_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const create_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const create_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void create_team_ack::MergeFrom(const create_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void create_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void create_team_ack::CopyFrom(const create_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool create_team_ack::IsInitialized() const {

  return true;
}

void create_team_ack::Swap(create_team_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    std::swap(team_name_, other->team_name_);
    heros_.Swap(&other->heros_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata create_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = create_team_ack_descriptor_;
  metadata.reflection = create_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_team_req::kProtoIdFieldNumber;
const int enter_team_req::kTeamIdFieldNumber;
const int enter_team_req::kHerosFieldNumber;
#endif  // !_MSC_VER

enter_team_req::enter_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_team_req::InitAsDefaultInstance() {
}

enter_team_req::enter_team_req(const enter_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_team_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6502;
  team_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_team_req::~enter_team_req() {
  SharedDtor();
}

void enter_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_team_req_descriptor_;
}

const enter_team_req& enter_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

enter_team_req* enter_team_req::default_instance_ = NULL;

enter_team_req* enter_team_req::New() const {
  return new enter_team_req;
}

void enter_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6502;
    team_id_ = GOOGLE_ULONGLONG(0);
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heros;
        break;
      }

      // repeated uint64 heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // repeated uint64 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // repeated uint64 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

  }
  // repeated uint64 heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_team_req::MergeFrom(const enter_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_team_req::CopyFrom(const enter_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_team_req::IsInitialized() const {

  return true;
}

void enter_team_req::Swap(enter_team_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_team_req_descriptor_;
  metadata.reflection = enter_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int enter_team_ack::kProtoIdFieldNumber;
const int enter_team_ack::kTeamIdFieldNumber;
const int enter_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

enter_team_ack::enter_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void enter_team_ack::InitAsDefaultInstance() {
}

enter_team_ack::enter_team_ack(const enter_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void enter_team_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6503;
  team_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

enter_team_ack::~enter_team_ack() {
  SharedDtor();
}

void enter_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void enter_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* enter_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enter_team_ack_descriptor_;
}

const enter_team_ack& enter_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

enter_team_ack* enter_team_ack::default_instance_ = NULL;

enter_team_ack* enter_team_ack::New() const {
  return new enter_team_ack;
}

void enter_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6503;
    team_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool enter_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void enter_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* enter_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int enter_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void enter_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const enter_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const enter_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void enter_team_ack::MergeFrom(const enter_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void enter_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void enter_team_ack::CopyFrom(const enter_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool enter_team_ack::IsInitialized() const {

  return true;
}

void enter_team_ack::Swap(enter_team_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata enter_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = enter_team_ack_descriptor_;
  metadata.reflection = enter_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_team_req::kProtoIdFieldNumber;
const int exit_team_req::kTeamIdFieldNumber;
#endif  // !_MSC_VER

exit_team_req::exit_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_team_req::InitAsDefaultInstance() {
}

exit_team_req::exit_team_req(const exit_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_team_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6504;
  team_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_team_req::~exit_team_req() {
  SharedDtor();
}

void exit_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_team_req_descriptor_;
}

const exit_team_req& exit_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

exit_team_req* exit_team_req::default_instance_ = NULL;

exit_team_req* exit_team_req::New() const {
  return new exit_team_req;
}

void exit_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6504;
    team_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_team_req::MergeFrom(const exit_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_team_req::CopyFrom(const exit_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_team_req::IsInitialized() const {

  return true;
}

void exit_team_req::Swap(exit_team_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_team_req_descriptor_;
  metadata.reflection = exit_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_team_ack::kProtoIdFieldNumber;
const int exit_team_ack::kTeamIdFieldNumber;
const int exit_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

exit_team_ack::exit_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_team_ack::InitAsDefaultInstance() {
}

exit_team_ack::exit_team_ack(const exit_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_team_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6505;
  team_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_team_ack::~exit_team_ack() {
  SharedDtor();
}

void exit_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_team_ack_descriptor_;
}

const exit_team_ack& exit_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

exit_team_ack* exit_team_ack::default_instance_ = NULL;

exit_team_ack* exit_team_ack::New() const {
  return new exit_team_ack;
}

void exit_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6505;
    team_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_team_ack::MergeFrom(const exit_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_team_ack::CopyFrom(const exit_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_team_ack::IsInitialized() const {

  return true;
}

void exit_team_ack::Swap(exit_team_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_team_ack_descriptor_;
  metadata.reflection = exit_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_team_ntf::kProtoIdFieldNumber;
const int update_team_ntf::kTeamFieldNumber;
#endif  // !_MSC_VER

update_team_ntf::update_team_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_team_ntf::InitAsDefaultInstance() {
  team_ = const_cast< ::SProtoSpace::team_data*>(&::SProtoSpace::team_data::default_instance());
}

update_team_ntf::update_team_ntf(const update_team_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_team_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6506;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_team_ntf::~update_team_ntf() {
  SharedDtor();
}

void update_team_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete team_;
  }
}

void update_team_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_team_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_team_ntf_descriptor_;
}

const update_team_ntf& update_team_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

update_team_ntf* update_team_ntf::default_instance_ = NULL;

update_team_ntf* update_team_ntf::New() const {
  return new update_team_ntf;
}

void update_team_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6506;
    if (has_team()) {
      if (team_ != NULL) team_->::SProtoSpace::team_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_team_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_team;
        break;
      }

      // optional .SProtoSpace.team_data team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_team_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.team_data team = 2;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_team_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.team_data team = 2;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_team_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.team_data team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_team_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_team_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_team_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_team_ntf::MergeFrom(const update_team_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team()) {
      mutable_team()->::SProtoSpace::team_data::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_team_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_team_ntf::CopyFrom(const update_team_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_team_ntf::IsInitialized() const {

  if (has_team()) {
    if (!this->team().IsInitialized()) return false;
  }
  return true;
}

void update_team_ntf::Swap(update_team_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_team_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_team_ntf_descriptor_;
  metadata.reflection = update_team_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ready_team_req::kProtoIdFieldNumber;
const int ready_team_req::kTeamIdFieldNumber;
#endif  // !_MSC_VER

ready_team_req::ready_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ready_team_req::InitAsDefaultInstance() {
}

ready_team_req::ready_team_req(const ready_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ready_team_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6507;
  team_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ready_team_req::~ready_team_req() {
  SharedDtor();
}

void ready_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ready_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ready_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ready_team_req_descriptor_;
}

const ready_team_req& ready_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

ready_team_req* ready_team_req::default_instance_ = NULL;

ready_team_req* ready_team_req::New() const {
  return new ready_team_req;
}

void ready_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6507;
    team_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ready_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ready_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ready_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ready_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ready_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ready_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ready_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ready_team_req::MergeFrom(const ready_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ready_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ready_team_req::CopyFrom(const ready_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ready_team_req::IsInitialized() const {

  return true;
}

void ready_team_req::Swap(ready_team_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ready_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ready_team_req_descriptor_;
  metadata.reflection = ready_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ready_team_ack::kProtoIdFieldNumber;
const int ready_team_ack::kTeamIdFieldNumber;
const int ready_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

ready_team_ack::ready_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ready_team_ack::InitAsDefaultInstance() {
}

ready_team_ack::ready_team_ack(const ready_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ready_team_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6508;
  team_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ready_team_ack::~ready_team_ack() {
  SharedDtor();
}

void ready_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ready_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ready_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ready_team_ack_descriptor_;
}

const ready_team_ack& ready_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

ready_team_ack* ready_team_ack::default_instance_ = NULL;

ready_team_ack* ready_team_ack::New() const {
  return new ready_team_ack;
}

void ready_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6508;
    team_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ready_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ready_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ready_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ready_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ready_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ready_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ready_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ready_team_ack::MergeFrom(const ready_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ready_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ready_team_ack::CopyFrom(const ready_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ready_team_ack::IsInitialized() const {

  return true;
}

void ready_team_ack::Swap(ready_team_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ready_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ready_team_ack_descriptor_;
  metadata.reflection = ready_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_team_req::kProtoIdFieldNumber;
const int update_team_req::kTeamIdFieldNumber;
const int update_team_req::kSlotIdFieldNumber;
const int update_team_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

update_team_req::update_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_team_req::InitAsDefaultInstance() {
}

update_team_req::update_team_req(const update_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_team_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6509;
  team_id_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 0u;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_team_req::~update_team_req() {
  SharedDtor();
}

void update_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_team_req_descriptor_;
}

const update_team_req& update_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

update_team_req* update_team_req::default_instance_ = NULL;

update_team_req* update_team_req::New() const {
  return new update_team_req;
}

void update_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6509;
    team_id_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 0u;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }

  // optional uint64 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }

  // optional uint64 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint32 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint64 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_team_req::MergeFrom(const update_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_team_req::CopyFrom(const update_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_team_req::IsInitialized() const {

  return true;
}

void update_team_req::Swap(update_team_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_team_req_descriptor_;
  metadata.reflection = update_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int update_team_ack::kProtoIdFieldNumber;
const int update_team_ack::kTeamIdFieldNumber;
const int update_team_ack::kSlotIdFieldNumber;
const int update_team_ack::kHeroIdFieldNumber;
const int update_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

update_team_ack::update_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void update_team_ack::InitAsDefaultInstance() {
}

update_team_ack::update_team_ack(const update_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void update_team_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6510;
  team_id_ = GOOGLE_ULONGLONG(0);
  slot_id_ = 0u;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

update_team_ack::~update_team_ack() {
  SharedDtor();
}

void update_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void update_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* update_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return update_team_ack_descriptor_;
}

const update_team_ack& update_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

update_team_ack* update_team_ack::default_instance_ = NULL;

update_team_ack* update_team_ack::New() const {
  return new update_team_ack;
}

void update_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6510;
    team_id_ = GOOGLE_ULONGLONG(0);
    slot_id_ = 0u;
    hero_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool update_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_id;
        break;
      }

      // optional uint32 slot_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void update_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }

  // optional uint64 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_id(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* update_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint32 slot_id = 3;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }

  // optional uint64 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_id(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int update_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint32 slot_id = 3;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint64 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void update_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const update_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const update_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void update_team_ack::MergeFrom(const update_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void update_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void update_team_ack::CopyFrom(const update_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool update_team_ack::IsInitialized() const {

  return true;
}

void update_team_ack::Swap(update_team_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(slot_id_, other->slot_id_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata update_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = update_team_ack_descriptor_;
  metadata.reflection = update_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_teams_req::kProtoIdFieldNumber;
const int get_teams_req::kTeamTypeFieldNumber;
const int get_teams_req::kTeamSizeFieldNumber;
const int get_teams_req::kTeamPermFieldNumber;
const int get_teams_req::kParmsFieldNumber;
#endif  // !_MSC_VER

get_teams_req::get_teams_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_teams_req::InitAsDefaultInstance() {
}

get_teams_req::get_teams_req(const get_teams_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_teams_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6511;
  team_type_ = 1;
  team_size_ = 1;
  team_perm_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_teams_req::~get_teams_req() {
  SharedDtor();
}

void get_teams_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_teams_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_teams_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_teams_req_descriptor_;
}

const get_teams_req& get_teams_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_teams_req* get_teams_req::default_instance_ = NULL;

get_teams_req* get_teams_req::New() const {
  return new get_teams_req;
}

void get_teams_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6511;
    team_type_ = 1;
    team_size_ = 1;
    team_perm_ = 1;
  }
  parms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_teams_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_type;
        break;
      }

      // optional .SProtoSpace.eTeamType team_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamType_IsValid(value)) {
            set_team_type(static_cast< ::SProtoSpace::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_size;
        break;
      }

      // optional .SProtoSpace.eTeamSize team_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_size:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamSize_IsValid(value)) {
            set_team_size(static_cast< ::SProtoSpace::eTeamSize >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_team_perm;
        break;
      }

      // optional .SProtoSpace.eTeamPermission team_perm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_perm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eTeamPermission_IsValid(value)) {
            set_team_perm(static_cast< ::SProtoSpace::eTeamPermission >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parms;
        break;
      }

      // repeated int32 parms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_parms())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_parms())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parms;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_teams_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->team_type(), output);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team_size(), output);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team_perm(), output);
  }

  // repeated int32 parms = 5;
  for (int i = 0; i < this->parms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->parms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_teams_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional .SProtoSpace.eTeamType team_type = 2;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->team_type(), target);
  }

  // optional .SProtoSpace.eTeamSize team_size = 3;
  if (has_team_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team_size(), target);
  }

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  if (has_team_perm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team_perm(), target);
  }

  // repeated int32 parms = 5;
  for (int i = 0; i < this->parms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->parms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_teams_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional .SProtoSpace.eTeamType team_type = 2;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_type());
    }

    // optional .SProtoSpace.eTeamSize team_size = 3;
    if (has_team_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_size());
    }

    // optional .SProtoSpace.eTeamPermission team_perm = 4;
    if (has_team_perm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team_perm());
    }

  }
  // repeated int32 parms = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->parms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->parms(i));
    }
    total_size += 1 * this->parms_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_teams_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_teams_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_teams_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_teams_req::MergeFrom(const get_teams_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  parms_.MergeFrom(from.parms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_team_size()) {
      set_team_size(from.team_size());
    }
    if (from.has_team_perm()) {
      set_team_perm(from.team_perm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_teams_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_teams_req::CopyFrom(const get_teams_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_teams_req::IsInitialized() const {

  return true;
}

void get_teams_req::Swap(get_teams_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_type_, other->team_type_);
    std::swap(team_size_, other->team_size_);
    std::swap(team_perm_, other->team_perm_);
    parms_.Swap(&other->parms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_teams_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_teams_req_descriptor_;
  metadata.reflection = get_teams_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_teams_ack::kProtoIdFieldNumber;
const int get_teams_ack::kRetFieldNumber;
const int get_teams_ack::kTeamsFieldNumber;
#endif  // !_MSC_VER

get_teams_ack::get_teams_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_teams_ack::InitAsDefaultInstance() {
}

get_teams_ack::get_teams_ack(const get_teams_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_teams_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6512;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_teams_ack::~get_teams_ack() {
  SharedDtor();
}

void get_teams_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_teams_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_teams_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_teams_ack_descriptor_;
}

const get_teams_ack& get_teams_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_teams_ack* get_teams_ack::default_instance_ = NULL;

get_teams_ack* get_teams_ack::New() const {
  return new get_teams_ack;
}

void get_teams_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6512;
    ret_ = 0u;
  }
  teams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_teams_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teams;
        break;
      }

      // repeated .SProtoSpace.team_brief teams = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_teams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_teams_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.team_brief teams = 3;
  for (int i = 0; i < this->teams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_teams_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.team_brief teams = 3;
  for (int i = 0; i < this->teams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_teams_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.team_brief teams = 3;
  total_size += 1 * this->teams_size();
  for (int i = 0; i < this->teams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_teams_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_teams_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_teams_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_teams_ack::MergeFrom(const get_teams_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  teams_.MergeFrom(from.teams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_teams_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_teams_ack::CopyFrom(const get_teams_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_teams_ack::IsInitialized() const {

  return true;
}

void get_teams_ack::Swap(get_teams_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    teams_.Swap(&other->teams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_teams_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_teams_ack_descriptor_;
  metadata.reflection = get_teams_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_roles_enter_team_req::kProtoIdFieldNumber;
const int invite_roles_enter_team_req::kTeamIdFieldNumber;
const int invite_roles_enter_team_req::kRolesFieldNumber;
#endif  // !_MSC_VER

invite_roles_enter_team_req::invite_roles_enter_team_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_roles_enter_team_req::InitAsDefaultInstance() {
}

invite_roles_enter_team_req::invite_roles_enter_team_req(const invite_roles_enter_team_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_roles_enter_team_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6513;
  team_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_roles_enter_team_req::~invite_roles_enter_team_req() {
  SharedDtor();
}

void invite_roles_enter_team_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void invite_roles_enter_team_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_roles_enter_team_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_roles_enter_team_req_descriptor_;
}

const invite_roles_enter_team_req& invite_roles_enter_team_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

invite_roles_enter_team_req* invite_roles_enter_team_req::default_instance_ = NULL;

invite_roles_enter_team_req* invite_roles_enter_team_req::New() const {
  return new invite_roles_enter_team_req;
}

void invite_roles_enter_team_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6513;
    team_id_ = GOOGLE_ULONGLONG(0);
  }
  roles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_roles_enter_team_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roles;
        break;
      }

      // repeated uint64 roles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_roles())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_roles())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roles;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_roles_enter_team_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // repeated uint64 roles = 3;
  for (int i = 0; i < this->roles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->roles(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_roles_enter_team_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // repeated uint64 roles = 3;
  for (int i = 0; i < this->roles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->roles(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_roles_enter_team_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

  }
  // repeated uint64 roles = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->roles_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->roles(i));
    }
    total_size += 1 * this->roles_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_roles_enter_team_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_roles_enter_team_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_roles_enter_team_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_roles_enter_team_req::MergeFrom(const invite_roles_enter_team_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  roles_.MergeFrom(from.roles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_roles_enter_team_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_roles_enter_team_req::CopyFrom(const invite_roles_enter_team_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_roles_enter_team_req::IsInitialized() const {

  return true;
}

void invite_roles_enter_team_req::Swap(invite_roles_enter_team_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    roles_.Swap(&other->roles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_roles_enter_team_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_roles_enter_team_req_descriptor_;
  metadata.reflection = invite_roles_enter_team_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_roles_enter_team_ack::kProtoIdFieldNumber;
const int invite_roles_enter_team_ack::kTeamIdFieldNumber;
const int invite_roles_enter_team_ack::kRetFieldNumber;
#endif  // !_MSC_VER

invite_roles_enter_team_ack::invite_roles_enter_team_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_roles_enter_team_ack::InitAsDefaultInstance() {
}

invite_roles_enter_team_ack::invite_roles_enter_team_ack(const invite_roles_enter_team_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_roles_enter_team_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6514;
  team_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_roles_enter_team_ack::~invite_roles_enter_team_ack() {
  SharedDtor();
}

void invite_roles_enter_team_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void invite_roles_enter_team_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_roles_enter_team_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_roles_enter_team_ack_descriptor_;
}

const invite_roles_enter_team_ack& invite_roles_enter_team_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

invite_roles_enter_team_ack* invite_roles_enter_team_ack::default_instance_ = NULL;

invite_roles_enter_team_ack* invite_roles_enter_team_ack::New() const {
  return new invite_roles_enter_team_ack;
}

void invite_roles_enter_team_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6514;
    team_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_roles_enter_team_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_roles_enter_team_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->team_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_roles_enter_team_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 team_id = 2;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->team_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_roles_enter_team_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_roles_enter_team_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_roles_enter_team_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_roles_enter_team_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_roles_enter_team_ack::MergeFrom(const invite_roles_enter_team_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_roles_enter_team_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_roles_enter_team_ack::CopyFrom(const invite_roles_enter_team_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_roles_enter_team_ack::IsInitialized() const {

  return true;
}

void invite_roles_enter_team_ack::Swap(invite_roles_enter_team_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_roles_enter_team_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_roles_enter_team_ack_descriptor_;
  metadata.reflection = invite_roles_enter_team_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int invite_enter_team_ntf::kProtoIdFieldNumber;
const int invite_enter_team_ntf::kDestRoleIdFieldNumber;
const int invite_enter_team_ntf::kTeamIdFieldNumber;
const int invite_enter_team_ntf::kTeamNameFieldNumber;
const int invite_enter_team_ntf::kTeamTypeFieldNumber;
const int invite_enter_team_ntf::kSourRoleIdFieldNumber;
const int invite_enter_team_ntf::kSourRoleNameFieldNumber;
#endif  // !_MSC_VER

invite_enter_team_ntf::invite_enter_team_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void invite_enter_team_ntf::InitAsDefaultInstance() {
}

invite_enter_team_ntf::invite_enter_team_ntf(const invite_enter_team_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void invite_enter_team_ntf::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6515;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  team_id_ = GOOGLE_ULONGLONG(0);
  team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_type_ = 0u;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

invite_enter_team_ntf::~invite_enter_team_ntf() {
  SharedDtor();
}

void invite_enter_team_ntf::SharedDtor() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sour_role_name_;
  }
  if (this != default_instance_) {
  }
}

void invite_enter_team_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* invite_enter_team_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return invite_enter_team_ntf_descriptor_;
}

const invite_enter_team_ntf& invite_enter_team_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

invite_enter_team_ntf* invite_enter_team_ntf::default_instance_ = NULL;

invite_enter_team_ntf* invite_enter_team_ntf::New() const {
  return new invite_enter_team_ntf;
}

void invite_enter_team_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6515;
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    team_id_ = GOOGLE_ULONGLONG(0);
    if (has_team_name()) {
      if (team_name_ != &::google::protobuf::internal::kEmptyString) {
        team_name_->clear();
      }
    }
    team_type_ = 0u;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    if (has_sour_role_name()) {
      if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
        sour_role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool invite_enter_team_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_enter_team_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }

      // optional uint64 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_team_name;
        break;
      }

      // optional string team_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_type;
        break;
      }

      // optional uint32 team_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_type_)));
          set_has_team_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sour_role_name;
        break;
      }

      // optional string sour_role_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sour_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sour_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sour_role_name().data(), this->sour_role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void invite_enter_team_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_enter_team_ntf_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 dest_role_id = 2;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dest_role_id(), output);
  }

  // optional uint64 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->team_id(), output);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->team_name(), output);
  }

  // optional uint32 team_type = 5;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_type(), output);
  }

  // optional uint64 sour_role_id = 6;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sour_role_id(), output);
  }

  // optional string sour_role_name = 7;
  if (has_sour_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sour_role_name().data(), this->sour_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sour_role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* invite_enter_team_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_enter_team_ntf_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 dest_role_id = 2;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dest_role_id(), target);
  }

  // optional uint64 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->team_id(), target);
  }

  // optional string team_name = 4;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name(), target);
  }

  // optional uint32 team_type = 5;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_type(), target);
  }

  // optional uint64 sour_role_id = 6;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sour_role_id(), target);
  }

  // optional string sour_role_name = 7;
  if (has_sour_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sour_role_name().data(), this->sour_role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sour_role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int invite_enter_team_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_enter_team_ntf_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 dest_role_id = 2;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional uint64 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_id());
    }

    // optional string team_name = 4;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 team_type = 5;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_type());
    }

    // optional uint64 sour_role_id = 6;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional string sour_role_name = 7;
    if (has_sour_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sour_role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void invite_enter_team_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const invite_enter_team_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const invite_enter_team_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void invite_enter_team_ntf::MergeFrom(const invite_enter_team_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_team_name()) {
      set_team_name(from.team_name());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_sour_role_name()) {
      set_sour_role_name(from.sour_role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void invite_enter_team_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void invite_enter_team_ntf::CopyFrom(const invite_enter_team_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool invite_enter_team_ntf::IsInitialized() const {

  return true;
}

void invite_enter_team_ntf::Swap(invite_enter_team_ntf* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(team_id_, other->team_id_);
    std::swap(team_name_, other->team_name_);
    std::swap(team_type_, other->team_type_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(sour_role_name_, other->sour_role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata invite_enter_team_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = invite_enter_team_ntf_descriptor_;
  metadata.reflection = invite_enter_team_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_rank_req::kProtoIdFieldNumber;
const int get_offical_rank_req::kOfficeLvFieldNumber;
const int get_offical_rank_req::kStartIndexFieldNumber;
const int get_offical_rank_req::kEndIndexFieldNumber;
#endif  // !_MSC_VER

get_offical_rank_req::get_offical_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_rank_req::InitAsDefaultInstance() {
}

get_offical_rank_req::get_offical_rank_req(const get_offical_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_rank_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6702;
  office_lv_ = 0;
  start_index_ = 0u;
  end_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_rank_req::~get_offical_rank_req() {
  SharedDtor();
}

void get_offical_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_rank_req_descriptor_;
}

const get_offical_rank_req& get_offical_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_rank_req* get_offical_rank_req::default_instance_ = NULL;

get_offical_rank_req* get_offical_rank_req::New() const {
  return new get_offical_rank_req;
}

void get_offical_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6702;
    office_lv_ = 0;
    start_index_ = 0u;
    end_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional int32 office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_lv_)));
          set_has_office_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional uint32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_index;
        break;
      }

      // optional uint32 end_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->office_lv(), output);
  }

  // optional uint32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_index(), output);
  }

  // optional uint32 end_index = 4;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->office_lv(), target);
  }

  // optional uint32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_index(), target);
  }

  // optional uint32 end_index = 4;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_lv());
    }

    // optional uint32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_index());
    }

    // optional uint32 end_index = 4;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_rank_req::MergeFrom(const get_offical_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_rank_req::CopyFrom(const get_offical_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_rank_req::IsInitialized() const {

  return true;
}

void get_offical_rank_req::Swap(get_offical_rank_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_rank_req_descriptor_;
  metadata.reflection = get_offical_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_rank_ack::kProtoIdFieldNumber;
const int get_offical_rank_ack::kRetFieldNumber;
const int get_offical_rank_ack::kRankItemsFieldNumber;
#endif  // !_MSC_VER

get_offical_rank_ack::get_offical_rank_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_rank_ack::InitAsDefaultInstance() {
}

get_offical_rank_ack::get_offical_rank_ack(const get_offical_rank_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_rank_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6703;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_rank_ack::~get_offical_rank_ack() {
  SharedDtor();
}

void get_offical_rank_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_rank_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_rank_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_rank_ack_descriptor_;
}

const get_offical_rank_ack& get_offical_rank_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_rank_ack* get_offical_rank_ack::default_instance_ = NULL;

get_offical_rank_ack* get_offical_rank_ack::New() const {
  return new get_offical_rank_ack;
}

void get_offical_rank_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6703;
    ret_ = 0u;
  }
  rank_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_rank_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_items;
        break;
      }

      // repeated .SProtoSpace.offical_item_data rank_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_rank_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 3;
  for (int i = 0; i < this->rank_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_rank_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 3;
  for (int i = 0; i < this->rank_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_rank_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.offical_item_data rank_items = 3;
  total_size += 1 * this->rank_items_size();
  for (int i = 0; i < this->rank_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_rank_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_rank_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_rank_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_rank_ack::MergeFrom(const get_offical_rank_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_items_.MergeFrom(from.rank_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_rank_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_rank_ack::CopyFrom(const get_offical_rank_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_rank_ack::IsInitialized() const {

  return true;
}

void get_offical_rank_ack::Swap(get_offical_rank_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    rank_items_.Swap(&other->rank_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_rank_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_rank_ack_descriptor_;
  metadata.reflection = get_offical_rank_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_rank_info_req::kProtoIdFieldNumber;
const int get_offical_rank_info_req::kOfficeLvFieldNumber;
const int get_offical_rank_info_req::kStartIndexFieldNumber;
const int get_offical_rank_info_req::kLenFieldNumber;
const int get_offical_rank_info_req::kShowFieldNumber;
#endif  // !_MSC_VER

get_offical_rank_info_req::get_offical_rank_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_rank_info_req::InitAsDefaultInstance() {
}

get_offical_rank_info_req::get_offical_rank_info_req(const get_offical_rank_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_rank_info_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6732;
  office_lv_ = 0;
  start_index_ = 0;
  len_ = 0;
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_rank_info_req::~get_offical_rank_info_req() {
  SharedDtor();
}

void get_offical_rank_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_rank_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_rank_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_rank_info_req_descriptor_;
}

const get_offical_rank_info_req& get_offical_rank_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_rank_info_req* get_offical_rank_info_req::default_instance_ = NULL;

get_offical_rank_info_req* get_offical_rank_info_req::New() const {
  return new get_offical_rank_info_req;
}

void get_offical_rank_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6732;
    office_lv_ = 0;
    start_index_ = 0;
    len_ = 0;
    show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_rank_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional int32 office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_lv_)));
          set_has_office_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_len;
        break;
      }

      // optional int32 len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_show;
        break;
      }

      // optional bool show = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_rank_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->office_lv(), output);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_index(), output);
  }

  // optional int32 len = 4;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->len(), output);
  }

  // optional bool show = 5;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_rank_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->office_lv(), target);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_index(), target);
  }

  // optional int32 len = 4;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->len(), target);
  }

  // optional bool show = 5;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_rank_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_lv());
    }

    // optional int32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 len = 4;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->len());
    }

    // optional bool show = 5;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_rank_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_rank_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_rank_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_rank_info_req::MergeFrom(const get_offical_rank_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_rank_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_rank_info_req::CopyFrom(const get_offical_rank_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_rank_info_req::IsInitialized() const {

  return true;
}

void get_offical_rank_info_req::Swap(get_offical_rank_info_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(start_index_, other->start_index_);
    std::swap(len_, other->len_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_rank_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_rank_info_req_descriptor_;
  metadata.reflection = get_offical_rank_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_rank_info_ack::kProtoIdFieldNumber;
const int get_offical_rank_info_ack::kRetFieldNumber;
const int get_offical_rank_info_ack::kOfficalChallengeNumFieldNumber;
const int get_offical_rank_info_ack::kOfficalChallengeBuyFieldNumber;
const int get_offical_rank_info_ack::kMyItemFieldNumber;
const int get_offical_rank_info_ack::kCurrentSizeFieldNumber;
const int get_offical_rank_info_ack::kRankItemsFieldNumber;
const int get_offical_rank_info_ack::kEquipItemsFieldNumber;
#endif  // !_MSC_VER

get_offical_rank_info_ack::get_offical_rank_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_rank_info_ack::InitAsDefaultInstance() {
  my_item_ = const_cast< ::SProtoSpace::offical_item_data*>(&::SProtoSpace::offical_item_data::default_instance());
}

get_offical_rank_info_ack::get_offical_rank_info_ack(const get_offical_rank_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_rank_info_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6733;
  ret_ = 0u;
  offical_challenge_num_ = 0;
  offical_challenge_buy_ = 0;
  my_item_ = NULL;
  current_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_rank_info_ack::~get_offical_rank_info_ack() {
  SharedDtor();
}

void get_offical_rank_info_ack::SharedDtor() {
  if (this != default_instance_) {
    delete my_item_;
  }
}

void get_offical_rank_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_rank_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_rank_info_ack_descriptor_;
}

const get_offical_rank_info_ack& get_offical_rank_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_rank_info_ack* get_offical_rank_info_ack::default_instance_ = NULL;

get_offical_rank_info_ack* get_offical_rank_info_ack::New() const {
  return new get_offical_rank_info_ack;
}

void get_offical_rank_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6733;
    ret_ = 0u;
    offical_challenge_num_ = 0;
    offical_challenge_buy_ = 0;
    if (has_my_item()) {
      if (my_item_ != NULL) my_item_->::SProtoSpace::offical_item_data::Clear();
    }
    current_size_ = 0;
  }
  rank_items_.Clear();
  equip_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_rank_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offical_challenge_num;
        break;
      }

      // optional int32 offical_challenge_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_num_)));
          set_has_offical_challenge_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offical_challenge_buy;
        break;
      }

      // optional int32 offical_challenge_buy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offical_challenge_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offical_challenge_buy_)));
          set_has_offical_challenge_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_my_item;
        break;
      }

      // optional .SProtoSpace.offical_item_data my_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_current_size;
        break;
      }

      // optional int32 current_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_size_)));
          set_has_current_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_items;
        break;
      }

      // repeated .SProtoSpace.offical_item_data rank_items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rank_items;
        if (input->ExpectTag(66)) goto parse_equip_items;
        break;
      }

      // repeated .SProtoSpace.role_show_role_equipped equip_items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_rank_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 offical_challenge_num = 3;
  if (has_offical_challenge_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offical_challenge_num(), output);
  }

  // optional int32 offical_challenge_buy = 4;
  if (has_offical_challenge_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offical_challenge_buy(), output);
  }

  // optional .SProtoSpace.offical_item_data my_item = 5;
  if (has_my_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->my_item(), output);
  }

  // optional int32 current_size = 6;
  if (has_current_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->current_size(), output);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  for (int i = 0; i < this->rank_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rank_items(i), output);
  }

  // repeated .SProtoSpace.role_show_role_equipped equip_items = 8;
  for (int i = 0; i < this->equip_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_rank_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 offical_challenge_num = 3;
  if (has_offical_challenge_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offical_challenge_num(), target);
  }

  // optional int32 offical_challenge_buy = 4;
  if (has_offical_challenge_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offical_challenge_buy(), target);
  }

  // optional .SProtoSpace.offical_item_data my_item = 5;
  if (has_my_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->my_item(), target);
  }

  // optional int32 current_size = 6;
  if (has_current_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->current_size(), target);
  }

  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  for (int i = 0; i < this->rank_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rank_items(i), target);
  }

  // repeated .SProtoSpace.role_show_role_equipped equip_items = 8;
  for (int i = 0; i < this->equip_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_rank_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 offical_challenge_num = 3;
    if (has_offical_challenge_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_num());
    }

    // optional int32 offical_challenge_buy = 4;
    if (has_offical_challenge_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offical_challenge_buy());
    }

    // optional .SProtoSpace.offical_item_data my_item = 5;
    if (has_my_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_item());
    }

    // optional int32 current_size = 6;
    if (has_current_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_size());
    }

  }
  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  total_size += 1 * this->rank_items_size();
  for (int i = 0; i < this->rank_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_items(i));
  }

  // repeated .SProtoSpace.role_show_role_equipped equip_items = 8;
  total_size += 1 * this->equip_items_size();
  for (int i = 0; i < this->equip_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_rank_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_rank_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_rank_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_rank_info_ack::MergeFrom(const get_offical_rank_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_items_.MergeFrom(from.rank_items_);
  equip_items_.MergeFrom(from.equip_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_offical_challenge_num()) {
      set_offical_challenge_num(from.offical_challenge_num());
    }
    if (from.has_offical_challenge_buy()) {
      set_offical_challenge_buy(from.offical_challenge_buy());
    }
    if (from.has_my_item()) {
      mutable_my_item()->::SProtoSpace::offical_item_data::MergeFrom(from.my_item());
    }
    if (from.has_current_size()) {
      set_current_size(from.current_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_rank_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_rank_info_ack::CopyFrom(const get_offical_rank_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_rank_info_ack::IsInitialized() const {

  return true;
}

void get_offical_rank_info_ack::Swap(get_offical_rank_info_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(offical_challenge_num_, other->offical_challenge_num_);
    std::swap(offical_challenge_buy_, other->offical_challenge_buy_);
    std::swap(my_item_, other->my_item_);
    std::swap(current_size_, other->current_size_);
    rank_items_.Swap(&other->rank_items_);
    equip_items_.Swap(&other->equip_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_rank_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_rank_info_ack_descriptor_;
  metadata.reflection = get_offical_rank_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_formation_req::kProtoIdFieldNumber;
const int get_offical_formation_req::kRoleIdFieldNumber;
#endif  // !_MSC_VER

get_offical_formation_req::get_offical_formation_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_formation_req::InitAsDefaultInstance() {
}

get_offical_formation_req::get_offical_formation_req(const get_offical_formation_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_formation_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6734;
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_formation_req::~get_offical_formation_req() {
  SharedDtor();
}

void get_offical_formation_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_offical_formation_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_formation_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_formation_req_descriptor_;
}

const get_offical_formation_req& get_offical_formation_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_formation_req* get_offical_formation_req::default_instance_ = NULL;

get_offical_formation_req* get_offical_formation_req::New() const {
  return new get_offical_formation_req;
}

void get_offical_formation_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6734;
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_formation_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_formation_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_formation_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_formation_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_formation_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_formation_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_formation_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_formation_req::MergeFrom(const get_offical_formation_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_formation_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_formation_req::CopyFrom(const get_offical_formation_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_formation_req::IsInitialized() const {

  return true;
}

void get_offical_formation_req::Swap(get_offical_formation_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_formation_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_formation_req_descriptor_;
  metadata.reflection = get_offical_formation_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_offical_formation_ack::kProtoIdFieldNumber;
const int get_offical_formation_ack::kRetFieldNumber;
const int get_offical_formation_ack::kRoleIdFieldNumber;
const int get_offical_formation_ack::kNameFieldNumber;
const int get_offical_formation_ack::kSexFieldNumber;
const int get_offical_formation_ack::kHeadFieldNumber;
const int get_offical_formation_ack::kBordFieldNumber;
const int get_offical_formation_ack::kGradeFieldNumber;
const int get_offical_formation_ack::kLvFieldNumber;
const int get_offical_formation_ack::kHerosFieldNumber;
#endif  // !_MSC_VER

get_offical_formation_ack::get_offical_formation_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_offical_formation_ack::InitAsDefaultInstance() {
}

get_offical_formation_ack::get_offical_formation_ack(const get_offical_formation_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_offical_formation_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6735;
  ret_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bord_ = 0;
  grade_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_offical_formation_ack::~get_offical_formation_ack() {
  SharedDtor();
}

void get_offical_formation_ack::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (this != default_instance_) {
  }
}

void get_offical_formation_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_offical_formation_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_offical_formation_ack_descriptor_;
}

const get_offical_formation_ack& get_offical_formation_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_offical_formation_ack* get_offical_formation_ack::default_instance_ = NULL;

get_offical_formation_ack* get_offical_formation_ack::New() const {
  return new get_offical_formation_ack;
}

void get_offical_formation_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6735;
    ret_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
    if (has_head()) {
      if (head_ != &::google::protobuf::internal::kEmptyString) {
        head_->clear();
      }
    }
    bord_ = 0;
    grade_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lv_ = 0;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_offical_formation_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_head;
        break;
      }

      // optional string head = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bord;
        break;
      }

      // optional int32 bord = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bord_)));
          set_has_bord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_grade;
        break;
      }

      // optional int32 grade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lv;
        break;
      }

      // optional int32 lv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.hero_base_info heros = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_offical_formation_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional string head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->head(), output);
  }

  // optional int32 bord = 7;
  if (has_bord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bord(), output);
  }

  // optional int32 grade = 8;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->grade(), output);
  }

  // optional int32 lv = 9;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lv(), output);
  }

  // repeated .SProtoSpace.hero_base_info heros = 10;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_offical_formation_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional string head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->head(), target);
  }

  // optional int32 bord = 7;
  if (has_bord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bord(), target);
  }

  // optional int32 grade = 8;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->grade(), target);
  }

  // optional int32 lv = 9;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lv(), target);
  }

  // repeated .SProtoSpace.hero_base_info heros = 10;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_offical_formation_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional string head = 6;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->head());
    }

    // optional int32 bord = 7;
    if (has_bord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bord());
    }

    // optional int32 grade = 8;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lv = 9;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  // repeated .SProtoSpace.hero_base_info heros = 10;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_offical_formation_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_offical_formation_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_offical_formation_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_offical_formation_ack::MergeFrom(const get_offical_formation_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_bord()) {
      set_bord(from.bord());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_offical_formation_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_offical_formation_ack::CopyFrom(const get_offical_formation_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_offical_formation_ack::IsInitialized() const {

  return true;
}

void get_offical_formation_ack::Swap(get_offical_formation_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(role_id_, other->role_id_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(head_, other->head_);
    std::swap(bord_, other->bord_);
    std::swap(grade_, other->grade_);
    std::swap(lv_, other->lv_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_offical_formation_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_offical_formation_ack_descriptor_;
  metadata.reflection = get_offical_formation_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int challenge_offical_rank_req::kProtoIdFieldNumber;
const int challenge_offical_rank_req::kOfficeLvFieldNumber;
const int challenge_offical_rank_req::kDestRoleIdFieldNumber;
#endif  // !_MSC_VER

challenge_offical_rank_req::challenge_offical_rank_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void challenge_offical_rank_req::InitAsDefaultInstance() {
}

challenge_offical_rank_req::challenge_offical_rank_req(const challenge_offical_rank_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void challenge_offical_rank_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6704;
  office_lv_ = 0;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

challenge_offical_rank_req::~challenge_offical_rank_req() {
  SharedDtor();
}

void challenge_offical_rank_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void challenge_offical_rank_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* challenge_offical_rank_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return challenge_offical_rank_req_descriptor_;
}

const challenge_offical_rank_req& challenge_offical_rank_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

challenge_offical_rank_req* challenge_offical_rank_req::default_instance_ = NULL;

challenge_offical_rank_req* challenge_offical_rank_req::New() const {
  return new challenge_offical_rank_req;
}

void challenge_offical_rank_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6704;
    office_lv_ = 0;
    dest_role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool challenge_offical_rank_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional int32 office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_lv_)));
          set_has_office_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void challenge_offical_rank_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->office_lv(), output);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dest_role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* challenge_offical_rank_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->office_lv(), target);
  }

  // optional uint64 dest_role_id = 3;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dest_role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int challenge_offical_rank_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_lv());
    }

    // optional uint64 dest_role_id = 3;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void challenge_offical_rank_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const challenge_offical_rank_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const challenge_offical_rank_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void challenge_offical_rank_req::MergeFrom(const challenge_offical_rank_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void challenge_offical_rank_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void challenge_offical_rank_req::CopyFrom(const challenge_offical_rank_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool challenge_offical_rank_req::IsInitialized() const {

  return true;
}

void challenge_offical_rank_req::Swap(challenge_offical_rank_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata challenge_offical_rank_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = challenge_offical_rank_req_descriptor_;
  metadata.reflection = challenge_offical_rank_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int challenge_offical_rank_ack::kProtoIdFieldNumber;
const int challenge_offical_rank_ack::kRetFieldNumber;
const int challenge_offical_rank_ack::kOfficeLvFieldNumber;
const int challenge_offical_rank_ack::kDestRoleIdFieldNumber;
const int challenge_offical_rank_ack::kDestOlderRankingidFieldNumber;
const int challenge_offical_rank_ack::kDestNewRankingidFieldNumber;
const int challenge_offical_rank_ack::kSourRoleIdFieldNumber;
const int challenge_offical_rank_ack::kSourOlderRankingidFieldNumber;
const int challenge_offical_rank_ack::kSourNewRankingidFieldNumber;
const int challenge_offical_rank_ack::kBattleIdFieldNumber;
const int challenge_offical_rank_ack::kWinFieldNumber;
const int challenge_offical_rank_ack::kItemsFieldNumber;
const int challenge_offical_rank_ack::kMeritFieldNumber;
const int challenge_offical_rank_ack::kHerosFieldNumber;
#endif  // !_MSC_VER

challenge_offical_rank_ack::challenge_offical_rank_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void challenge_offical_rank_ack::InitAsDefaultInstance() {
}

challenge_offical_rank_ack::challenge_offical_rank_ack(const challenge_offical_rank_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void challenge_offical_rank_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6705;
  ret_ = 0u;
  office_lv_ = 0;
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  dest_older_rankingid_ = 0;
  dest_new_rankingid_ = 0;
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  sour_older_rankingid_ = 0;
  sour_new_rankingid_ = 0;
  battle_id_ = GOOGLE_ULONGLONG(0);
  win_ = false;
  merit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

challenge_offical_rank_ack::~challenge_offical_rank_ack() {
  SharedDtor();
}

void challenge_offical_rank_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void challenge_offical_rank_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* challenge_offical_rank_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return challenge_offical_rank_ack_descriptor_;
}

const challenge_offical_rank_ack& challenge_offical_rank_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

challenge_offical_rank_ack* challenge_offical_rank_ack::default_instance_ = NULL;

challenge_offical_rank_ack* challenge_offical_rank_ack::New() const {
  return new challenge_offical_rank_ack;
}

void challenge_offical_rank_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6705;
    ret_ = 0u;
    office_lv_ = 0;
    dest_role_id_ = GOOGLE_ULONGLONG(0);
    dest_older_rankingid_ = 0;
    dest_new_rankingid_ = 0;
    sour_role_id_ = GOOGLE_ULONGLONG(0);
    sour_older_rankingid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sour_new_rankingid_ = 0;
    battle_id_ = GOOGLE_ULONGLONG(0);
    win_ = false;
    merit_ = 0;
  }
  items_.Clear();
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool challenge_offical_rank_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_office_lv;
        break;
      }

      // optional int32 office_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_lv_)));
          set_has_office_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dest_role_id;
        break;
      }

      // optional uint64 dest_role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dest_role_id_)));
          set_has_dest_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dest_older_rankingid;
        break;
      }

      // optional int32 dest_older_rankingid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_older_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_older_rankingid_)));
          set_has_dest_older_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dest_new_rankingid;
        break;
      }

      // optional int32 dest_new_rankingid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_new_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_new_rankingid_)));
          set_has_dest_new_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sour_role_id;
        break;
      }

      // optional uint64 sour_role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sour_role_id_)));
          set_has_sour_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sour_older_rankingid;
        break;
      }

      // optional int32 sour_older_rankingid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_older_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sour_older_rankingid_)));
          set_has_sour_older_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sour_new_rankingid;
        break;
      }

      // optional int32 sour_new_rankingid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sour_new_rankingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sour_new_rankingid_)));
          set_has_sour_new_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_battle_id;
        break;
      }

      // optional uint64 battle_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_win;
        break;
      }

      // optional bool win = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.reward_item items = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_items;
        if (input->ExpectTag(104)) goto parse_merit;
        break;
      }

      // optional int32 merit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_merit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &merit_)));
          set_has_merit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_heros;
        break;
      }

      // repeated .SProtoSpace.hero_base_info heros = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void challenge_offical_rank_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  // optional int32 office_lv = 3;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->office_lv(), output);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dest_role_id(), output);
  }

  // optional int32 dest_older_rankingid = 5;
  if (has_dest_older_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dest_older_rankingid(), output);
  }

  // optional int32 dest_new_rankingid = 6;
  if (has_dest_new_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dest_new_rankingid(), output);
  }

  // optional uint64 sour_role_id = 7;
  if (has_sour_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sour_role_id(), output);
  }

  // optional int32 sour_older_rankingid = 8;
  if (has_sour_older_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sour_older_rankingid(), output);
  }

  // optional int32 sour_new_rankingid = 9;
  if (has_sour_new_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->sour_new_rankingid(), output);
  }

  // optional uint64 battle_id = 10;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->battle_id(), output);
  }

  // optional bool win = 11;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->win(), output);
  }

  // repeated .SProtoSpace.reward_item items = 12;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->items(i), output);
  }

  // optional int32 merit = 13;
  if (has_merit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->merit(), output);
  }

  // repeated .SProtoSpace.hero_base_info heros = 14;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->heros(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* challenge_offical_rank_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  // optional int32 office_lv = 3;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->office_lv(), target);
  }

  // optional uint64 dest_role_id = 4;
  if (has_dest_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dest_role_id(), target);
  }

  // optional int32 dest_older_rankingid = 5;
  if (has_dest_older_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dest_older_rankingid(), target);
  }

  // optional int32 dest_new_rankingid = 6;
  if (has_dest_new_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dest_new_rankingid(), target);
  }

  // optional uint64 sour_role_id = 7;
  if (has_sour_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->sour_role_id(), target);
  }

  // optional int32 sour_older_rankingid = 8;
  if (has_sour_older_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sour_older_rankingid(), target);
  }

  // optional int32 sour_new_rankingid = 9;
  if (has_sour_new_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->sour_new_rankingid(), target);
  }

  // optional uint64 battle_id = 10;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->battle_id(), target);
  }

  // optional bool win = 11;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->win(), target);
  }

  // repeated .SProtoSpace.reward_item items = 12;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->items(i), target);
  }

  // optional int32 merit = 13;
  if (has_merit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->merit(), target);
  }

  // repeated .SProtoSpace.hero_base_info heros = 14;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->heros(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int challenge_offical_rank_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional int32 office_lv = 3;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_lv());
    }

    // optional uint64 dest_role_id = 4;
    if (has_dest_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dest_role_id());
    }

    // optional int32 dest_older_rankingid = 5;
    if (has_dest_older_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_older_rankingid());
    }

    // optional int32 dest_new_rankingid = 6;
    if (has_dest_new_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_new_rankingid());
    }

    // optional uint64 sour_role_id = 7;
    if (has_sour_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sour_role_id());
    }

    // optional int32 sour_older_rankingid = 8;
    if (has_sour_older_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sour_older_rankingid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 sour_new_rankingid = 9;
    if (has_sour_new_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sour_new_rankingid());
    }

    // optional uint64 battle_id = 10;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_id());
    }

    // optional bool win = 11;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional int32 merit = 13;
    if (has_merit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->merit());
    }

  }
  // repeated .SProtoSpace.reward_item items = 12;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .SProtoSpace.hero_base_info heros = 14;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void challenge_offical_rank_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const challenge_offical_rank_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const challenge_offical_rank_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void challenge_offical_rank_ack::MergeFrom(const challenge_offical_rank_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_dest_role_id()) {
      set_dest_role_id(from.dest_role_id());
    }
    if (from.has_dest_older_rankingid()) {
      set_dest_older_rankingid(from.dest_older_rankingid());
    }
    if (from.has_dest_new_rankingid()) {
      set_dest_new_rankingid(from.dest_new_rankingid());
    }
    if (from.has_sour_role_id()) {
      set_sour_role_id(from.sour_role_id());
    }
    if (from.has_sour_older_rankingid()) {
      set_sour_older_rankingid(from.sour_older_rankingid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sour_new_rankingid()) {
      set_sour_new_rankingid(from.sour_new_rankingid());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_merit()) {
      set_merit(from.merit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void challenge_offical_rank_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void challenge_offical_rank_ack::CopyFrom(const challenge_offical_rank_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool challenge_offical_rank_ack::IsInitialized() const {

  return true;
}

void challenge_offical_rank_ack::Swap(challenge_offical_rank_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(ret_, other->ret_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(dest_role_id_, other->dest_role_id_);
    std::swap(dest_older_rankingid_, other->dest_older_rankingid_);
    std::swap(dest_new_rankingid_, other->dest_new_rankingid_);
    std::swap(sour_role_id_, other->sour_role_id_);
    std::swap(sour_older_rankingid_, other->sour_older_rankingid_);
    std::swap(sour_new_rankingid_, other->sour_new_rankingid_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(win_, other->win_);
    items_.Swap(&other->items_);
    std::swap(merit_, other->merit_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata challenge_offical_rank_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = challenge_offical_rank_ack_descriptor_;
  metadata.reflection = challenge_offical_rank_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_apply_battle_result_req::kProtoIdFieldNumber;
const int offical_apply_battle_result_req::kOfficeLvFieldNumber;
#endif  // !_MSC_VER

offical_apply_battle_result_req::offical_apply_battle_result_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_apply_battle_result_req::InitAsDefaultInstance() {
}

offical_apply_battle_result_req::offical_apply_battle_result_req(const offical_apply_battle_result_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_apply_battle_result_req::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6708;
  office_lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_apply_battle_result_req::~offical_apply_battle_result_req() {
  SharedDtor();
}

void offical_apply_battle_result_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_apply_battle_result_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_apply_battle_result_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_apply_battle_result_req_descriptor_;
}

const offical_apply_battle_result_req& offical_apply_battle_result_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

offical_apply_battle_result_req* offical_apply_battle_result_req::default_instance_ = NULL;

offical_apply_battle_result_req* offical_apply_battle_result_req::New() const {
  return new offical_apply_battle_result_req;
}

void offical_apply_battle_result_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6708;
    office_lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_apply_battle_result_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional int32 office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_lv_)));
          set_has_office_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_apply_battle_result_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_req_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->office_lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_apply_battle_result_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_req_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->office_lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_apply_battle_result_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_req_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_apply_battle_result_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_apply_battle_result_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_apply_battle_result_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_apply_battle_result_req::MergeFrom(const offical_apply_battle_result_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_apply_battle_result_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_apply_battle_result_req::CopyFrom(const offical_apply_battle_result_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_apply_battle_result_req::IsInitialized() const {

  return true;
}

void offical_apply_battle_result_req::Swap(offical_apply_battle_result_req* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_apply_battle_result_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_apply_battle_result_req_descriptor_;
  metadata.reflection = offical_apply_battle_result_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int offical_apply_battle_result_ack::kProtoIdFieldNumber;
const int offical_apply_battle_result_ack::kOfficeLvFieldNumber;
const int offical_apply_battle_result_ack::kTimeFieldNumber;
const int offical_apply_battle_result_ack::kDataFieldNumber;
const int offical_apply_battle_result_ack::kMydataFieldNumber;
const int offical_apply_battle_result_ack::kMyPlaceIdFieldNumber;
const int offical_apply_battle_result_ack::kRetFieldNumber;
#endif  // !_MSC_VER

offical_apply_battle_result_ack::offical_apply_battle_result_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void offical_apply_battle_result_ack::InitAsDefaultInstance() {
}

offical_apply_battle_result_ack::offical_apply_battle_result_ack(const offical_apply_battle_result_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void offical_apply_battle_result_ack::SharedCtor() {
  _cached_size_ = 0;
  proto_id_ = 6709;
  office_lv_ = 0;
  time_ = 0;
  my_place_id_ = 0;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

offical_apply_battle_result_ack::~offical_apply_battle_result_ack() {
  SharedDtor();
}

void offical_apply_battle_result_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void offical_apply_battle_result_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* offical_apply_battle_result_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return offical_apply_battle_result_ack_descriptor_;
}

const offical_apply_battle_result_ack& offical_apply_battle_result_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

offical_apply_battle_result_ack* offical_apply_battle_result_ack::default_instance_ = NULL;

offical_apply_battle_result_ack* offical_apply_battle_result_ack::New() const {
  return new offical_apply_battle_result_ack;
}

void offical_apply_battle_result_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proto_id_ = 6709;
    office_lv_ = 0;
    time_ = 0;
    my_place_id_ = 0;
    ret_ = 0u;
  }
  data_.Clear();
  mydata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool offical_apply_battle_result_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_proto_id(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_office_lv;
        break;
      }

      // optional int32 office_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_office_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &office_lv_)));
          set_has_office_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.offical_member_data data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(42)) goto parse_mydata;
        break;
      }

      // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mydata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mydata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_mydata;
        if (input->ExpectTag(48)) goto parse_my_place_id;
        break;
      }

      // optional int32 my_place_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_place_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_place_id_)));
          set_has_my_place_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void offical_apply_battle_result_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_ack_id];
  if (has_proto_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->proto_id(), output);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->office_lv(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // repeated .SProtoSpace.offical_member_data data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 5;
  for (int i = 0; i < this->mydata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mydata(i), output);
  }

  // optional int32 my_place_id = 6;
  if (has_my_place_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->my_place_id(), output);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* offical_apply_battle_result_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_ack_id];
  if (has_proto_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->proto_id(), target);
  }

  // optional int32 office_lv = 2;
  if (has_office_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->office_lv(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // repeated .SProtoSpace.offical_member_data data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 5;
  for (int i = 0; i < this->mydata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mydata(i), target);
  }

  // optional int32 my_place_id = 6;
  if (has_my_place_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->my_place_id(), target);
  }

  // optional uint32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int offical_apply_battle_result_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_ack_id];
    if (has_proto_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->proto_id());
    }

    // optional int32 office_lv = 2;
    if (has_office_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->office_lv());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 my_place_id = 6;
    if (has_my_place_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_place_id());
    }

    // optional uint32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  // repeated .SProtoSpace.offical_member_data data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 5;
  total_size += 1 * this->mydata_size();
  for (int i = 0; i < this->mydata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mydata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void offical_apply_battle_result_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const offical_apply_battle_result_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const offical_apply_battle_result_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void offical_apply_battle_result_ack::MergeFrom(const offical_apply_battle_result_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mydata_.MergeFrom(from.mydata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proto_id()) {
      set_proto_id(from.proto_id());
    }
    if (from.has_office_lv()) {
      set_office_lv(from.office_lv());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_my_place_id()) {
      set_my_place_id(from.my_place_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void offical_apply_battle_result_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void offical_apply_battle_result_ack::CopyFrom(const offical_apply_battle_result_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool offical_apply_battle_result_ack::IsInitialized() const {

  return true;
}

void offical_apply_battle_result_ack::Swap(offical_apply_battle_result_ack* other) {
  if (other != this) {
    std::swap(proto_id_, other->proto_id_);
    std::swap(office_lv_, other->office_lv_);
    std::swap(time_, other->time_);
    data_.Swap(&other->data_);
    mydata_.Swap(&other->mydata_);
    std::swap(my_place_id_, other->my_place_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata offical_apply_battle_result_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = offical_apply_battle_result_ack_descriptor_;
  metadata.reflection = offical_apply_battle_result_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_plot_upload_req::kProtoidFieldNumber;
const int role_plot_upload_req::kChapterIdFieldNumber;
const int role_plot_upload_req::kScreenIdFieldNumber;
const int role_plot_upload_req::kSectionIdFieldNumber;
#endif  // !_MSC_VER

role_plot_upload_req::role_plot_upload_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_plot_upload_req::InitAsDefaultInstance() {
}

role_plot_upload_req::role_plot_upload_req(const role_plot_upload_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_plot_upload_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5820;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  section_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_plot_upload_req::~role_plot_upload_req() {
  SharedDtor();
}

void role_plot_upload_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_plot_upload_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_plot_upload_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_plot_upload_req_descriptor_;
}

const role_plot_upload_req& role_plot_upload_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_plot_upload_req* role_plot_upload_req::default_instance_ = NULL;

role_plot_upload_req* role_plot_upload_req::New() const {
  return new role_plot_upload_req;
}

void role_plot_upload_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5820;
    chapter_id_ = 0u;
    screen_id_ = 0u;
    section_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_plot_upload_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_section_id;
        break;
      }

      // optional uint32 section_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_section_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_id_)));
          set_has_section_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_plot_upload_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screen_id(), output);
  }

  // optional uint32 section_id = 4;
  if (has_section_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->section_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_plot_upload_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screen_id(), target);
  }

  // optional uint32 section_id = 4;
  if (has_section_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->section_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_plot_upload_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 3;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

    // optional uint32 section_id = 4;
    if (has_section_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_plot_upload_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_plot_upload_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_plot_upload_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_plot_upload_req::MergeFrom(const role_plot_upload_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
    if (from.has_section_id()) {
      set_section_id(from.section_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_plot_upload_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_plot_upload_req::CopyFrom(const role_plot_upload_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_plot_upload_req::IsInitialized() const {

  return true;
}

void role_plot_upload_req::Swap(role_plot_upload_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    std::swap(section_id_, other->section_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_plot_upload_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_plot_upload_req_descriptor_;
  metadata.reflection = role_plot_upload_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_plot_upload_ack::kProtoidFieldNumber;
const int role_plot_upload_ack::kResultFieldNumber;
#endif  // !_MSC_VER

role_plot_upload_ack::role_plot_upload_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_plot_upload_ack::InitAsDefaultInstance() {
}

role_plot_upload_ack::role_plot_upload_ack(const role_plot_upload_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_plot_upload_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5821;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_plot_upload_ack::~role_plot_upload_ack() {
  SharedDtor();
}

void role_plot_upload_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_plot_upload_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_plot_upload_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_plot_upload_ack_descriptor_;
}

const role_plot_upload_ack& role_plot_upload_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_plot_upload_ack* role_plot_upload_ack::default_instance_ = NULL;

role_plot_upload_ack* role_plot_upload_ack::New() const {
  return new role_plot_upload_ack;
}

void role_plot_upload_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5821;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_plot_upload_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_plot_upload_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_plot_upload_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_plot_upload_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_plot_upload_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_plot_upload_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_plot_upload_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_plot_upload_ack::MergeFrom(const role_plot_upload_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_plot_upload_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_plot_upload_ack::CopyFrom(const role_plot_upload_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_plot_upload_ack::IsInitialized() const {

  return true;
}

void role_plot_upload_ack::Swap(role_plot_upload_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_plot_upload_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_plot_upload_ack_descriptor_;
  metadata.reflection = role_plot_upload_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_plot_get_req::kProtoidFieldNumber;
const int role_plot_get_req::kGetTypeFieldNumber;
#endif  // !_MSC_VER

role_plot_get_req::role_plot_get_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_plot_get_req::InitAsDefaultInstance() {
}

role_plot_get_req::role_plot_get_req(const role_plot_get_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_plot_get_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5822;
  get_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_plot_get_req::~role_plot_get_req() {
  SharedDtor();
}

void role_plot_get_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_plot_get_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_plot_get_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_plot_get_req_descriptor_;
}

const role_plot_get_req& role_plot_get_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_plot_get_req* role_plot_get_req::default_instance_ = NULL;

role_plot_get_req* role_plot_get_req::New() const {
  return new role_plot_get_req;
}

void role_plot_get_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5822;
    get_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_plot_get_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_type;
        break;
      }

      // optional .SProtoSpace.GET_PLOT_TYPE get_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::GET_PLOT_TYPE_IsValid(value)) {
            set_get_type(static_cast< ::SProtoSpace::GET_PLOT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_plot_get_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.GET_PLOT_TYPE get_type = 2;
  if (has_get_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->get_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_plot_get_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.GET_PLOT_TYPE get_type = 2;
  if (has_get_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->get_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_plot_get_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.GET_PLOT_TYPE get_type = 2;
    if (has_get_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->get_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_plot_get_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_plot_get_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_plot_get_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_plot_get_req::MergeFrom(const role_plot_get_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_get_type()) {
      set_get_type(from.get_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_plot_get_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_plot_get_req::CopyFrom(const role_plot_get_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_plot_get_req::IsInitialized() const {

  return true;
}

void role_plot_get_req::Swap(role_plot_get_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(get_type_, other->get_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_plot_get_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_plot_get_req_descriptor_;
  metadata.reflection = role_plot_get_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_plot_get_ack::kProtoidFieldNumber;
const int role_plot_get_ack::kResultFieldNumber;
const int role_plot_get_ack::kPlotInfosFieldNumber;
const int role_plot_get_ack::kBranchIdsFieldNumber;
const int role_plot_get_ack::kEndIdsFieldNumber;
#endif  // !_MSC_VER

role_plot_get_ack::role_plot_get_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_plot_get_ack::InitAsDefaultInstance() {
}

role_plot_get_ack::role_plot_get_ack(const role_plot_get_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_plot_get_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5823;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_plot_get_ack::~role_plot_get_ack() {
  SharedDtor();
}

void role_plot_get_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_plot_get_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_plot_get_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_plot_get_ack_descriptor_;
}

const role_plot_get_ack& role_plot_get_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_plot_get_ack* role_plot_get_ack::default_instance_ = NULL;

role_plot_get_ack* role_plot_get_ack::New() const {
  return new role_plot_get_ack;
}

void role_plot_get_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5823;
    result_ = 0;
  }
  plot_infos_.Clear();
  branch_ids_.Clear();
  end_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_plot_get_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_plot_infos;
        break;
      }

      // repeated .SProtoSpace.plot_screen_info plot_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plot_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plot_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_plot_infos;
        if (input->ExpectTag(32)) goto parse_branch_ids;
        break;
      }

      // repeated uint32 branch_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_branch_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_branch_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_branch_ids;
        if (input->ExpectTag(40)) goto parse_end_ids;
        break;
      }

      // repeated uint32 end_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_end_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_end_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_plot_get_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SProtoSpace.plot_screen_info plot_infos = 3;
  for (int i = 0; i < this->plot_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->plot_infos(i), output);
  }

  // repeated uint32 branch_ids = 4;
  for (int i = 0; i < this->branch_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->branch_ids(i), output);
  }

  // repeated uint32 end_ids = 5;
  for (int i = 0; i < this->end_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->end_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_plot_get_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SProtoSpace.plot_screen_info plot_infos = 3;
  for (int i = 0; i < this->plot_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plot_infos(i), target);
  }

  // repeated uint32 branch_ids = 4;
  for (int i = 0; i < this->branch_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->branch_ids(i), target);
  }

  // repeated uint32 end_ids = 5;
  for (int i = 0; i < this->end_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->end_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_plot_get_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .SProtoSpace.plot_screen_info plot_infos = 3;
  total_size += 1 * this->plot_infos_size();
  for (int i = 0; i < this->plot_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plot_infos(i));
  }

  // repeated uint32 branch_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->branch_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->branch_ids(i));
    }
    total_size += 1 * this->branch_ids_size() + data_size;
  }

  // repeated uint32 end_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->end_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->end_ids(i));
    }
    total_size += 1 * this->end_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_plot_get_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_plot_get_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_plot_get_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_plot_get_ack::MergeFrom(const role_plot_get_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  plot_infos_.MergeFrom(from.plot_infos_);
  branch_ids_.MergeFrom(from.branch_ids_);
  end_ids_.MergeFrom(from.end_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_plot_get_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_plot_get_ack::CopyFrom(const role_plot_get_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_plot_get_ack::IsInitialized() const {

  return true;
}

void role_plot_get_ack::Swap(role_plot_get_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    plot_infos_.Swap(&other->plot_infos_);
    branch_ids_.Swap(&other->branch_ids_);
    end_ids_.Swap(&other->end_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_plot_get_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_plot_get_ack_descriptor_;
  metadata.reflection = role_plot_get_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_end_req::kProtoidFieldNumber;
const int plot_end_req::kChapterIdFieldNumber;
const int plot_end_req::kScreenIdFieldNumber;
#endif  // !_MSC_VER

plot_end_req::plot_end_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_end_req::InitAsDefaultInstance() {
}

plot_end_req::plot_end_req(const plot_end_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_end_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5824;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_end_req::~plot_end_req() {
  SharedDtor();
}

void plot_end_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_end_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_end_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_end_req_descriptor_;
}

const plot_end_req& plot_end_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_end_req* plot_end_req::default_instance_ = NULL;

plot_end_req* plot_end_req::New() const {
  return new plot_end_req;
}

void plot_end_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5824;
    chapter_id_ = 0u;
    screen_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_end_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_end_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screen_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_end_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screen_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_end_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 3;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_end_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_end_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_end_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_end_req::MergeFrom(const plot_end_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_end_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_end_req::CopyFrom(const plot_end_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_end_req::IsInitialized() const {

  return true;
}

void plot_end_req::Swap(plot_end_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_end_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_end_req_descriptor_;
  metadata.reflection = plot_end_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_end_ack::kProtoidFieldNumber;
const int plot_end_ack::kResultFieldNumber;
const int plot_end_ack::kGetEndIdFieldNumber;
#endif  // !_MSC_VER

plot_end_ack::plot_end_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_end_ack::InitAsDefaultInstance() {
}

plot_end_ack::plot_end_ack(const plot_end_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_end_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5825;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_end_ack::~plot_end_ack() {
  SharedDtor();
}

void plot_end_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_end_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_end_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_end_ack_descriptor_;
}

const plot_end_ack& plot_end_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_end_ack* plot_end_ack::default_instance_ = NULL;

plot_end_ack* plot_end_ack::New() const {
  return new plot_end_ack;
}

void plot_end_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5825;
    result_ = 0;
  }
  get_end_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_end_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_end_id;
        break;
      }

      // repeated int32 get_end_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_end_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_get_end_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_get_end_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_end_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_end_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated int32 get_end_id = 3;
  for (int i = 0; i < this->get_end_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->get_end_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_end_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated int32 get_end_id = 3;
  for (int i = 0; i < this->get_end_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->get_end_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_end_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated int32 get_end_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->get_end_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->get_end_id(i));
    }
    total_size += 1 * this->get_end_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_end_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_end_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_end_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_end_ack::MergeFrom(const plot_end_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  get_end_id_.MergeFrom(from.get_end_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_end_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_end_ack::CopyFrom(const plot_end_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_end_ack::IsInitialized() const {

  return true;
}

void plot_end_ack::Swap(plot_end_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    get_end_id_.Swap(&other->get_end_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_end_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_end_ack_descriptor_;
  metadata.reflection = plot_end_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_chapter_end_req::kProtoidFieldNumber;
const int plot_chapter_end_req::kChapterIdFieldNumber;
const int plot_chapter_end_req::kScreenIdFieldNumber;
#endif  // !_MSC_VER

plot_chapter_end_req::plot_chapter_end_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_chapter_end_req::InitAsDefaultInstance() {
}

plot_chapter_end_req::plot_chapter_end_req(const plot_chapter_end_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_chapter_end_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5828;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_chapter_end_req::~plot_chapter_end_req() {
  SharedDtor();
}

void plot_chapter_end_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_chapter_end_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_chapter_end_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_chapter_end_req_descriptor_;
}

const plot_chapter_end_req& plot_chapter_end_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_chapter_end_req* plot_chapter_end_req::default_instance_ = NULL;

plot_chapter_end_req* plot_chapter_end_req::New() const {
  return new plot_chapter_end_req;
}

void plot_chapter_end_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5828;
    chapter_id_ = 0u;
    screen_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_chapter_end_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_chapter_end_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screen_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_chapter_end_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screen_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_chapter_end_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 3;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_chapter_end_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_chapter_end_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_chapter_end_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_chapter_end_req::MergeFrom(const plot_chapter_end_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_chapter_end_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_chapter_end_req::CopyFrom(const plot_chapter_end_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_chapter_end_req::IsInitialized() const {

  return true;
}

void plot_chapter_end_req::Swap(plot_chapter_end_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_chapter_end_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_chapter_end_req_descriptor_;
  metadata.reflection = plot_chapter_end_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_chapter_end_ack::kProtoidFieldNumber;
const int plot_chapter_end_ack::kResultFieldNumber;
#endif  // !_MSC_VER

plot_chapter_end_ack::plot_chapter_end_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_chapter_end_ack::InitAsDefaultInstance() {
}

plot_chapter_end_ack::plot_chapter_end_ack(const plot_chapter_end_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_chapter_end_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5829;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_chapter_end_ack::~plot_chapter_end_ack() {
  SharedDtor();
}

void plot_chapter_end_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_chapter_end_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_chapter_end_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_chapter_end_ack_descriptor_;
}

const plot_chapter_end_ack& plot_chapter_end_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_chapter_end_ack* plot_chapter_end_ack::default_instance_ = NULL;

plot_chapter_end_ack* plot_chapter_end_ack::New() const {
  return new plot_chapter_end_ack;
}

void plot_chapter_end_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5829;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_chapter_end_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_chapter_end_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_chapter_end_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_chapter_end_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_chapter_end_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_chapter_end_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_chapter_end_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_chapter_end_ack::MergeFrom(const plot_chapter_end_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_chapter_end_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_chapter_end_ack::CopyFrom(const plot_chapter_end_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_chapter_end_ack::IsInitialized() const {

  return true;
}

void plot_chapter_end_ack::Swap(plot_chapter_end_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_chapter_end_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_chapter_end_ack_descriptor_;
  metadata.reflection = plot_chapter_end_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_choose_branch_req::kProtoidFieldNumber;
const int plot_choose_branch_req::kChapterIdFieldNumber;
const int plot_choose_branch_req::kScreenIdFieldNumber;
const int plot_choose_branch_req::kBranchIdFieldNumber;
#endif  // !_MSC_VER

plot_choose_branch_req::plot_choose_branch_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_choose_branch_req::InitAsDefaultInstance() {
}

plot_choose_branch_req::plot_choose_branch_req(const plot_choose_branch_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_choose_branch_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5826;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  branch_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_choose_branch_req::~plot_choose_branch_req() {
  SharedDtor();
}

void plot_choose_branch_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_choose_branch_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_choose_branch_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_choose_branch_req_descriptor_;
}

const plot_choose_branch_req& plot_choose_branch_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_choose_branch_req* plot_choose_branch_req::default_instance_ = NULL;

plot_choose_branch_req* plot_choose_branch_req::New() const {
  return new plot_choose_branch_req;
}

void plot_choose_branch_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5826;
    chapter_id_ = 0u;
    screen_id_ = 0u;
    branch_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_choose_branch_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_branch_id;
        break;
      }

      // optional uint32 branch_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_choose_branch_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screen_id(), output);
  }

  // optional uint32 branch_id = 4;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->branch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_choose_branch_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screen_id(), target);
  }

  // optional uint32 branch_id = 4;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->branch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_choose_branch_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 3;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

    // optional uint32 branch_id = 4;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_choose_branch_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_choose_branch_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_choose_branch_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_choose_branch_req::MergeFrom(const plot_choose_branch_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_choose_branch_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_choose_branch_req::CopyFrom(const plot_choose_branch_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_choose_branch_req::IsInitialized() const {

  return true;
}

void plot_choose_branch_req::Swap(plot_choose_branch_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_choose_branch_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_choose_branch_req_descriptor_;
  metadata.reflection = plot_choose_branch_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_choose_branch_ack::kProtoidFieldNumber;
const int plot_choose_branch_ack::kResultFieldNumber;
const int plot_choose_branch_ack::kAddCharacterInfosFieldNumber;
const int plot_choose_branch_ack::kAddRoyalInfosFieldNumber;
const int plot_choose_branch_ack::kRewardItemsFieldNumber;
const int plot_choose_branch_ack::kChapterIdFieldNumber;
const int plot_choose_branch_ack::kScreenIdFieldNumber;
const int plot_choose_branch_ack::kBranchIdFieldNumber;
#endif  // !_MSC_VER

plot_choose_branch_ack::plot_choose_branch_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_choose_branch_ack::InitAsDefaultInstance() {
}

plot_choose_branch_ack::plot_choose_branch_ack(const plot_choose_branch_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_choose_branch_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5827;
  result_ = 0;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  branch_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_choose_branch_ack::~plot_choose_branch_ack() {
  SharedDtor();
}

void plot_choose_branch_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_choose_branch_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_choose_branch_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_choose_branch_ack_descriptor_;
}

const plot_choose_branch_ack& plot_choose_branch_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_choose_branch_ack* plot_choose_branch_ack::default_instance_ = NULL;

plot_choose_branch_ack* plot_choose_branch_ack::New() const {
  return new plot_choose_branch_ack;
}

void plot_choose_branch_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5827;
    result_ = 0;
    chapter_id_ = 0u;
    screen_id_ = 0u;
    branch_id_ = 0u;
  }
  add_character_infos_.Clear();
  add_royal_infos_.Clear();
  reward_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_choose_branch_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_character_infos;
        break;
      }

      // repeated .SProtoSpace.add_character_attr_info add_character_infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_character_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_character_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_add_character_infos;
        if (input->ExpectTag(34)) goto parse_add_royal_infos;
        break;
      }

      // repeated .SProtoSpace.add_royal_value_info add_royal_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_royal_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_royal_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_add_royal_infos;
        if (input->ExpectTag(42)) goto parse_reward_items;
        break;
      }

      // repeated .SProtoSpace.itemid_and_num reward_items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reward_items;
        if (input->ExpectTag(48)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_branch_id;
        break;
      }

      // optional uint32 branch_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_branch_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_id_)));
          set_has_branch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_choose_branch_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SProtoSpace.add_character_attr_info add_character_infos = 3;
  for (int i = 0; i < this->add_character_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->add_character_infos(i), output);
  }

  // repeated .SProtoSpace.add_royal_value_info add_royal_infos = 4;
  for (int i = 0; i < this->add_royal_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->add_royal_infos(i), output);
  }

  // repeated .SProtoSpace.itemid_and_num reward_items = 5;
  for (int i = 0; i < this->reward_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward_items(i), output);
  }

  // optional uint32 chapter_id = 6;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 7;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->screen_id(), output);
  }

  // optional uint32 branch_id = 8;
  if (has_branch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->branch_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_choose_branch_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SProtoSpace.add_character_attr_info add_character_infos = 3;
  for (int i = 0; i < this->add_character_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->add_character_infos(i), target);
  }

  // repeated .SProtoSpace.add_royal_value_info add_royal_infos = 4;
  for (int i = 0; i < this->add_royal_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->add_royal_infos(i), target);
  }

  // repeated .SProtoSpace.itemid_and_num reward_items = 5;
  for (int i = 0; i < this->reward_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward_items(i), target);
  }

  // optional uint32 chapter_id = 6;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 7;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->screen_id(), target);
  }

  // optional uint32 branch_id = 8;
  if (has_branch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->branch_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_choose_branch_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 chapter_id = 6;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 7;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

    // optional uint32 branch_id = 8;
    if (has_branch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch_id());
    }

  }
  // repeated .SProtoSpace.add_character_attr_info add_character_infos = 3;
  total_size += 1 * this->add_character_infos_size();
  for (int i = 0; i < this->add_character_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_character_infos(i));
  }

  // repeated .SProtoSpace.add_royal_value_info add_royal_infos = 4;
  total_size += 1 * this->add_royal_infos_size();
  for (int i = 0; i < this->add_royal_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_royal_infos(i));
  }

  // repeated .SProtoSpace.itemid_and_num reward_items = 5;
  total_size += 1 * this->reward_items_size();
  for (int i = 0; i < this->reward_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_choose_branch_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_choose_branch_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_choose_branch_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_choose_branch_ack::MergeFrom(const plot_choose_branch_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_character_infos_.MergeFrom(from.add_character_infos_);
  add_royal_infos_.MergeFrom(from.add_royal_infos_);
  reward_items_.MergeFrom(from.reward_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
    if (from.has_branch_id()) {
      set_branch_id(from.branch_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_choose_branch_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_choose_branch_ack::CopyFrom(const plot_choose_branch_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_choose_branch_ack::IsInitialized() const {

  return true;
}

void plot_choose_branch_ack::Swap(plot_choose_branch_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    add_character_infos_.Swap(&other->add_character_infos_);
    add_royal_infos_.Swap(&other->add_royal_infos_);
    reward_items_.Swap(&other->reward_items_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    std::swap(branch_id_, other->branch_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_choose_branch_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_choose_branch_ack_descriptor_;
  metadata.reflection = plot_choose_branch_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_trigger_action_req::kProtoidFieldNumber;
const int plot_trigger_action_req::kChapterIdFieldNumber;
const int plot_trigger_action_req::kScreenIdFieldNumber;
const int plot_trigger_action_req::kActionIdFieldNumber;
#endif  // !_MSC_VER

plot_trigger_action_req::plot_trigger_action_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_trigger_action_req::InitAsDefaultInstance() {
}

plot_trigger_action_req::plot_trigger_action_req(const plot_trigger_action_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_trigger_action_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5830;
  chapter_id_ = 0u;
  screen_id_ = 0u;
  action_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_trigger_action_req::~plot_trigger_action_req() {
  SharedDtor();
}

void plot_trigger_action_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_trigger_action_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_trigger_action_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_trigger_action_req_descriptor_;
}

const plot_trigger_action_req& plot_trigger_action_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_trigger_action_req* plot_trigger_action_req::default_instance_ = NULL;

plot_trigger_action_req* plot_trigger_action_req::New() const {
  return new plot_trigger_action_req;
}

void plot_trigger_action_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5830;
    chapter_id_ = 0u;
    screen_id_ = 0u;
    action_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_trigger_action_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chapter_id;
        break;
      }

      // optional uint32 chapter_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_id_)));
          set_has_chapter_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_screen_id;
        break;
      }

      // optional uint32 screen_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_screen_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screen_id_)));
          set_has_screen_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_trigger_action_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chapter_id(), output);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->screen_id(), output);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_trigger_action_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 chapter_id = 2;
  if (has_chapter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chapter_id(), target);
  }

  // optional uint32 screen_id = 3;
  if (has_screen_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->screen_id(), target);
  }

  // optional uint32 action_id = 4;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_trigger_action_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 chapter_id = 2;
    if (has_chapter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter_id());
    }

    // optional uint32 screen_id = 3;
    if (has_screen_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screen_id());
    }

    // optional uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_trigger_action_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_trigger_action_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_trigger_action_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_trigger_action_req::MergeFrom(const plot_trigger_action_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_chapter_id()) {
      set_chapter_id(from.chapter_id());
    }
    if (from.has_screen_id()) {
      set_screen_id(from.screen_id());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_trigger_action_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_trigger_action_req::CopyFrom(const plot_trigger_action_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_trigger_action_req::IsInitialized() const {

  return true;
}

void plot_trigger_action_req::Swap(plot_trigger_action_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(chapter_id_, other->chapter_id_);
    std::swap(screen_id_, other->screen_id_);
    std::swap(action_id_, other->action_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_trigger_action_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_trigger_action_req_descriptor_;
  metadata.reflection = plot_trigger_action_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_trigger_action_ack::kProtoidFieldNumber;
const int plot_trigger_action_ack::kResultFieldNumber;
const int plot_trigger_action_ack::kRewardItemsFieldNumber;
#endif  // !_MSC_VER

plot_trigger_action_ack::plot_trigger_action_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_trigger_action_ack::InitAsDefaultInstance() {
}

plot_trigger_action_ack::plot_trigger_action_ack(const plot_trigger_action_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_trigger_action_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5831;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_trigger_action_ack::~plot_trigger_action_ack() {
  SharedDtor();
}

void plot_trigger_action_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_trigger_action_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_trigger_action_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_trigger_action_ack_descriptor_;
}

const plot_trigger_action_ack& plot_trigger_action_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_trigger_action_ack* plot_trigger_action_ack::default_instance_ = NULL;

plot_trigger_action_ack* plot_trigger_action_ack::New() const {
  return new plot_trigger_action_ack;
}

void plot_trigger_action_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5831;
    result_ = 0;
  }
  reward_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_trigger_action_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_items;
        break;
      }

      // repeated .SProtoSpace.itemid_and_num reward_items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_reward_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_trigger_action_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SProtoSpace.itemid_and_num reward_items = 3;
  for (int i = 0; i < this->reward_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->reward_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_trigger_action_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SProtoSpace.itemid_and_num reward_items = 3;
  for (int i = 0; i < this->reward_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->reward_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_trigger_action_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .SProtoSpace.itemid_and_num reward_items = 3;
  total_size += 1 * this->reward_items_size();
  for (int i = 0; i < this->reward_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_trigger_action_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_trigger_action_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_trigger_action_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_trigger_action_ack::MergeFrom(const plot_trigger_action_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_items_.MergeFrom(from.reward_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_trigger_action_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_trigger_action_ack::CopyFrom(const plot_trigger_action_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_trigger_action_ack::IsInitialized() const {

  return true;
}

void plot_trigger_action_ack::Swap(plot_trigger_action_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    reward_items_.Swap(&other->reward_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_trigger_action_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_trigger_action_ack_descriptor_;
  metadata.reflection = plot_trigger_action_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_event_info::kEventOfficalFieldNumber;
const int all_event_info::kEventQinganFieldNumber;
const int all_event_info::kEventSlapFieldNumber;
const int all_event_info::kEventTributeFieldNumber;
const int all_event_info::kEventSendFlowerFieldNumber;
const int all_event_info::kEventReceiveFlowerFieldNumber;
const int all_event_info::kEventReduceFieldNumber;
#endif  // !_MSC_VER

all_event_info::all_event_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_event_info::InitAsDefaultInstance() {
  event_offical_ = const_cast< ::SProtoSpace::event_offical_info*>(&::SProtoSpace::event_offical_info::default_instance());
  event_qingan_ = const_cast< ::SProtoSpace::event_qingan_info*>(&::SProtoSpace::event_qingan_info::default_instance());
  event_slap_ = const_cast< ::SProtoSpace::event_slap_info*>(&::SProtoSpace::event_slap_info::default_instance());
  event_tribute_ = const_cast< ::SProtoSpace::event_tribute_info*>(&::SProtoSpace::event_tribute_info::default_instance());
  event_send_flower_ = const_cast< ::SProtoSpace::event_flower_send_info*>(&::SProtoSpace::event_flower_send_info::default_instance());
  event_receive_flower_ = const_cast< ::SProtoSpace::event_flower_info*>(&::SProtoSpace::event_flower_info::default_instance());
  event_reduce_ = const_cast< ::SProtoSpace::event_offical_reduce*>(&::SProtoSpace::event_offical_reduce::default_instance());
}

all_event_info::all_event_info(const all_event_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_event_info::SharedCtor() {
  _cached_size_ = 0;
  event_offical_ = NULL;
  event_qingan_ = NULL;
  event_slap_ = NULL;
  event_tribute_ = NULL;
  event_send_flower_ = NULL;
  event_receive_flower_ = NULL;
  event_reduce_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_event_info::~all_event_info() {
  SharedDtor();
}

void all_event_info::SharedDtor() {
  if (this != default_instance_) {
    delete event_offical_;
    delete event_qingan_;
    delete event_slap_;
    delete event_tribute_;
    delete event_send_flower_;
    delete event_receive_flower_;
    delete event_reduce_;
  }
}

void all_event_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_event_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_event_info_descriptor_;
}

const all_event_info& all_event_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

all_event_info* all_event_info::default_instance_ = NULL;

all_event_info* all_event_info::New() const {
  return new all_event_info;
}

void all_event_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event_offical()) {
      if (event_offical_ != NULL) event_offical_->::SProtoSpace::event_offical_info::Clear();
    }
    if (has_event_qingan()) {
      if (event_qingan_ != NULL) event_qingan_->::SProtoSpace::event_qingan_info::Clear();
    }
    if (has_event_slap()) {
      if (event_slap_ != NULL) event_slap_->::SProtoSpace::event_slap_info::Clear();
    }
    if (has_event_tribute()) {
      if (event_tribute_ != NULL) event_tribute_->::SProtoSpace::event_tribute_info::Clear();
    }
    if (has_event_send_flower()) {
      if (event_send_flower_ != NULL) event_send_flower_->::SProtoSpace::event_flower_send_info::Clear();
    }
    if (has_event_receive_flower()) {
      if (event_receive_flower_ != NULL) event_receive_flower_->::SProtoSpace::event_flower_info::Clear();
    }
    if (has_event_reduce()) {
      if (event_reduce_ != NULL) event_reduce_->::SProtoSpace::event_offical_reduce::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_event_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.event_offical_info event_offical = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_offical()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_event_qingan;
        break;
      }

      // optional .SProtoSpace.event_qingan_info event_qingan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_qingan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_qingan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_event_slap;
        break;
      }

      // optional .SProtoSpace.event_slap_info event_slap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_slap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_slap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_tribute;
        break;
      }

      // optional .SProtoSpace.event_tribute_info event_tribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_tribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_tribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_event_send_flower;
        break;
      }

      // optional .SProtoSpace.event_flower_send_info event_send_flower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_send_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_send_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_event_receive_flower;
        break;
      }

      // optional .SProtoSpace.event_flower_info event_receive_flower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_receive_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_receive_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_event_reduce;
        break;
      }

      // optional .SProtoSpace.event_offical_reduce event_reduce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_reduce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event_reduce()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_event_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.event_offical_info event_offical = 1;
  if (has_event_offical()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_offical(), output);
  }

  // optional .SProtoSpace.event_qingan_info event_qingan = 2;
  if (has_event_qingan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->event_qingan(), output);
  }

  // optional .SProtoSpace.event_slap_info event_slap = 3;
  if (has_event_slap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->event_slap(), output);
  }

  // optional .SProtoSpace.event_tribute_info event_tribute = 4;
  if (has_event_tribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event_tribute(), output);
  }

  // optional .SProtoSpace.event_flower_send_info event_send_flower = 5;
  if (has_event_send_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->event_send_flower(), output);
  }

  // optional .SProtoSpace.event_flower_info event_receive_flower = 6;
  if (has_event_receive_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->event_receive_flower(), output);
  }

  // optional .SProtoSpace.event_offical_reduce event_reduce = 7;
  if (has_event_reduce()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->event_reduce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_event_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.event_offical_info event_offical = 1;
  if (has_event_offical()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_offical(), target);
  }

  // optional .SProtoSpace.event_qingan_info event_qingan = 2;
  if (has_event_qingan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->event_qingan(), target);
  }

  // optional .SProtoSpace.event_slap_info event_slap = 3;
  if (has_event_slap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->event_slap(), target);
  }

  // optional .SProtoSpace.event_tribute_info event_tribute = 4;
  if (has_event_tribute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event_tribute(), target);
  }

  // optional .SProtoSpace.event_flower_send_info event_send_flower = 5;
  if (has_event_send_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->event_send_flower(), target);
  }

  // optional .SProtoSpace.event_flower_info event_receive_flower = 6;
  if (has_event_receive_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->event_receive_flower(), target);
  }

  // optional .SProtoSpace.event_offical_reduce event_reduce = 7;
  if (has_event_reduce()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->event_reduce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_event_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.event_offical_info event_offical = 1;
    if (has_event_offical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_offical());
    }

    // optional .SProtoSpace.event_qingan_info event_qingan = 2;
    if (has_event_qingan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_qingan());
    }

    // optional .SProtoSpace.event_slap_info event_slap = 3;
    if (has_event_slap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_slap());
    }

    // optional .SProtoSpace.event_tribute_info event_tribute = 4;
    if (has_event_tribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_tribute());
    }

    // optional .SProtoSpace.event_flower_send_info event_send_flower = 5;
    if (has_event_send_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_send_flower());
    }

    // optional .SProtoSpace.event_flower_info event_receive_flower = 6;
    if (has_event_receive_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_receive_flower());
    }

    // optional .SProtoSpace.event_offical_reduce event_reduce = 7;
    if (has_event_reduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event_reduce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_event_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_event_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_event_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_event_info::MergeFrom(const all_event_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_offical()) {
      mutable_event_offical()->::SProtoSpace::event_offical_info::MergeFrom(from.event_offical());
    }
    if (from.has_event_qingan()) {
      mutable_event_qingan()->::SProtoSpace::event_qingan_info::MergeFrom(from.event_qingan());
    }
    if (from.has_event_slap()) {
      mutable_event_slap()->::SProtoSpace::event_slap_info::MergeFrom(from.event_slap());
    }
    if (from.has_event_tribute()) {
      mutable_event_tribute()->::SProtoSpace::event_tribute_info::MergeFrom(from.event_tribute());
    }
    if (from.has_event_send_flower()) {
      mutable_event_send_flower()->::SProtoSpace::event_flower_send_info::MergeFrom(from.event_send_flower());
    }
    if (from.has_event_receive_flower()) {
      mutable_event_receive_flower()->::SProtoSpace::event_flower_info::MergeFrom(from.event_receive_flower());
    }
    if (from.has_event_reduce()) {
      mutable_event_reduce()->::SProtoSpace::event_offical_reduce::MergeFrom(from.event_reduce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_event_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_event_info::CopyFrom(const all_event_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_event_info::IsInitialized() const {

  return true;
}

void all_event_info::Swap(all_event_info* other) {
  if (other != this) {
    std::swap(event_offical_, other->event_offical_);
    std::swap(event_qingan_, other->event_qingan_);
    std::swap(event_slap_, other->event_slap_);
    std::swap(event_tribute_, other->event_tribute_);
    std::swap(event_send_flower_, other->event_send_flower_);
    std::swap(event_receive_flower_, other->event_receive_flower_);
    std::swap(event_reduce_, other->event_reduce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_event_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_event_info_descriptor_;
  metadata.reflection = all_event_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client_event_msg_info::kFromIdFieldNumber;
const int client_event_msg_info::kFromNameFieldNumber;
const int client_event_msg_info::kFromLvFieldNumber;
const int client_event_msg_info::kFromSexFieldNumber;
const int client_event_msg_info::kFromGradeFieldNumber;
const int client_event_msg_info::kFromBorderFieldNumber;
const int client_event_msg_info::kEventTypeFieldNumber;
const int client_event_msg_info::kAddTimeFieldNumber;
const int client_event_msg_info::kIsReadFieldNumber;
const int client_event_msg_info::kMsgTemplateIdFieldNumber;
const int client_event_msg_info::kMsgContentFieldNumber;
#endif  // !_MSC_VER

client_event_msg_info::client_event_msg_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_event_msg_info::InitAsDefaultInstance() {
  msg_content_ = const_cast< ::SProtoSpace::all_event_info*>(&::SProtoSpace::all_event_info::default_instance());
}

client_event_msg_info::client_event_msg_info(const client_event_msg_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_event_msg_info::SharedCtor() {
  _cached_size_ = 0;
  from_id_ = GOOGLE_ULONGLONG(0);
  from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_lv_ = 0u;
  from_sex_ = 0u;
  from_grade_ = 0u;
  from_border_ = 0;
  event_type_ = 0u;
  add_time_ = GOOGLE_ULONGLONG(0);
  is_read_ = false;
  msg_template_id_ = 0u;
  msg_content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_event_msg_info::~client_event_msg_info() {
  SharedDtor();
}

void client_event_msg_info::SharedDtor() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (this != default_instance_) {
    delete msg_content_;
  }
}

void client_event_msg_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_event_msg_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_event_msg_info_descriptor_;
}

const client_event_msg_info& client_event_msg_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

client_event_msg_info* client_event_msg_info::default_instance_ = NULL;

client_event_msg_info* client_event_msg_info::New() const {
  return new client_event_msg_info;
}

void client_event_msg_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    from_id_ = GOOGLE_ULONGLONG(0);
    if (has_from_name()) {
      if (from_name_ != &::google::protobuf::internal::kEmptyString) {
        from_name_->clear();
      }
    }
    from_lv_ = 0u;
    from_sex_ = 0u;
    from_grade_ = 0u;
    from_border_ = 0;
    event_type_ = 0u;
    add_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_read_ = false;
    msg_template_id_ = 0u;
    if (has_msg_content()) {
      if (msg_content_ != NULL) msg_content_->::SProtoSpace::all_event_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_event_msg_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 from_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_id_)));
          set_has_from_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_from_name;
        break;
      }

      // optional string from_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_name().data(), this->from_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_lv;
        break;
      }

      // optional uint32 from_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_lv_)));
          set_has_from_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_from_sex;
        break;
      }

      // optional uint32 from_sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_sex_)));
          set_has_from_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_from_grade;
        break;
      }

      // optional uint32 from_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_grade_)));
          set_has_from_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_from_border;
        break;
      }

      // optional int32 from_border = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_border:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_border_)));
          set_has_from_border();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_add_time;
        break;
      }

      // optional uint64 add_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_time_)));
          set_has_add_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_is_read;
        break;
      }

      // optional bool is_read = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_read_)));
          set_has_is_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_msg_template_id;
        break;
      }

      // optional uint32 msg_template_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_template_id_)));
          set_has_msg_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_msg_content;
        break;
      }

      // optional .SProtoSpace.all_event_info msg_content = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client_event_msg_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 from_id = 1;
  if (has_from_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->from_id(), output);
  }

  // optional string from_name = 2;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->from_name(), output);
  }

  // optional uint32 from_lv = 3;
  if (has_from_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_lv(), output);
  }

  // optional uint32 from_sex = 4;
  if (has_from_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_sex(), output);
  }

  // optional uint32 from_grade = 5;
  if (has_from_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_grade(), output);
  }

  // optional int32 from_border = 6;
  if (has_from_border()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->from_border(), output);
  }

  // optional uint32 event_type = 7;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->event_type(), output);
  }

  // optional uint64 add_time = 8;
  if (has_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->add_time(), output);
  }

  // optional bool is_read = 9;
  if (has_is_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_read(), output);
  }

  // optional uint32 msg_template_id = 10;
  if (has_msg_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->msg_template_id(), output);
  }

  // optional .SProtoSpace.all_event_info msg_content = 11;
  if (has_msg_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->msg_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_event_msg_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 from_id = 1;
  if (has_from_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->from_id(), target);
  }

  // optional string from_name = 2;
  if (has_from_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_name().data(), this->from_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->from_name(), target);
  }

  // optional uint32 from_lv = 3;
  if (has_from_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_lv(), target);
  }

  // optional uint32 from_sex = 4;
  if (has_from_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->from_sex(), target);
  }

  // optional uint32 from_grade = 5;
  if (has_from_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_grade(), target);
  }

  // optional int32 from_border = 6;
  if (has_from_border()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->from_border(), target);
  }

  // optional uint32 event_type = 7;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->event_type(), target);
  }

  // optional uint64 add_time = 8;
  if (has_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->add_time(), target);
  }

  // optional bool is_read = 9;
  if (has_is_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_read(), target);
  }

  // optional uint32 msg_template_id = 10;
  if (has_msg_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->msg_template_id(), target);
  }

  // optional .SProtoSpace.all_event_info msg_content = 11;
  if (has_msg_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->msg_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_event_msg_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 from_id = 1;
    if (has_from_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_id());
    }

    // optional string from_name = 2;
    if (has_from_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_name());
    }

    // optional uint32 from_lv = 3;
    if (has_from_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_lv());
    }

    // optional uint32 from_sex = 4;
    if (has_from_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_sex());
    }

    // optional uint32 from_grade = 5;
    if (has_from_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_grade());
    }

    // optional int32 from_border = 6;
    if (has_from_border()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_border());
    }

    // optional uint32 event_type = 7;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

    // optional uint64 add_time = 8;
    if (has_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_read = 9;
    if (has_is_read()) {
      total_size += 1 + 1;
    }

    // optional uint32 msg_template_id = 10;
    if (has_msg_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msg_template_id());
    }

    // optional .SProtoSpace.all_event_info msg_content = 11;
    if (has_msg_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_event_msg_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_event_msg_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_event_msg_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_event_msg_info::MergeFrom(const client_event_msg_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_id()) {
      set_from_id(from.from_id());
    }
    if (from.has_from_name()) {
      set_from_name(from.from_name());
    }
    if (from.has_from_lv()) {
      set_from_lv(from.from_lv());
    }
    if (from.has_from_sex()) {
      set_from_sex(from.from_sex());
    }
    if (from.has_from_grade()) {
      set_from_grade(from.from_grade());
    }
    if (from.has_from_border()) {
      set_from_border(from.from_border());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_add_time()) {
      set_add_time(from.add_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_read()) {
      set_is_read(from.is_read());
    }
    if (from.has_msg_template_id()) {
      set_msg_template_id(from.msg_template_id());
    }
    if (from.has_msg_content()) {
      mutable_msg_content()->::SProtoSpace::all_event_info::MergeFrom(from.msg_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_event_msg_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_event_msg_info::CopyFrom(const client_event_msg_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_event_msg_info::IsInitialized() const {

  return true;
}

void client_event_msg_info::Swap(client_event_msg_info* other) {
  if (other != this) {
    std::swap(from_id_, other->from_id_);
    std::swap(from_name_, other->from_name_);
    std::swap(from_lv_, other->from_lv_);
    std::swap(from_sex_, other->from_sex_);
    std::swap(from_grade_, other->from_grade_);
    std::swap(from_border_, other->from_border_);
    std::swap(event_type_, other->event_type_);
    std::swap(add_time_, other->add_time_);
    std::swap(is_read_, other->is_read_);
    std::swap(msg_template_id_, other->msg_template_id_);
    std::swap(msg_content_, other->msg_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_event_msg_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_event_msg_info_descriptor_;
  metadata.reflection = client_event_msg_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_get_all_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

event_msg_get_all_req::event_msg_get_all_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_get_all_req::InitAsDefaultInstance() {
}

event_msg_get_all_req::event_msg_get_all_req(const event_msg_get_all_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_get_all_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7000;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_get_all_req::~event_msg_get_all_req() {
  SharedDtor();
}

void event_msg_get_all_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_get_all_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_get_all_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_get_all_req_descriptor_;
}

const event_msg_get_all_req& event_msg_get_all_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_get_all_req* event_msg_get_all_req::default_instance_ = NULL;

event_msg_get_all_req* event_msg_get_all_req::New() const {
  return new event_msg_get_all_req;
}

void event_msg_get_all_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7000;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_get_all_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_get_all_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_get_all_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_get_all_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_get_all_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_get_all_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_get_all_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_get_all_req::MergeFrom(const event_msg_get_all_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_get_all_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_get_all_req::CopyFrom(const event_msg_get_all_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_get_all_req::IsInitialized() const {

  return true;
}

void event_msg_get_all_req::Swap(event_msg_get_all_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_get_all_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_get_all_req_descriptor_;
  metadata.reflection = event_msg_get_all_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_get_all_ack::kProtoidFieldNumber;
const int event_msg_get_all_ack::kResultFieldNumber;
const int event_msg_get_all_ack::kMsgsFieldNumber;
#endif  // !_MSC_VER

event_msg_get_all_ack::event_msg_get_all_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_get_all_ack::InitAsDefaultInstance() {
}

event_msg_get_all_ack::event_msg_get_all_ack(const event_msg_get_all_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_get_all_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7001;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_get_all_ack::~event_msg_get_all_ack() {
  SharedDtor();
}

void event_msg_get_all_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_get_all_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_get_all_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_get_all_ack_descriptor_;
}

const event_msg_get_all_ack& event_msg_get_all_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_get_all_ack* event_msg_get_all_ack::default_instance_ = NULL;

event_msg_get_all_ack* event_msg_get_all_ack::New() const {
  return new event_msg_get_all_ack;
}

void event_msg_get_all_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7001;
    result_ = 0;
  }
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_get_all_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        break;
      }

      // repeated .SProtoSpace.client_event_msg_info msgs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_get_all_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SProtoSpace.client_event_msg_info msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_get_all_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SProtoSpace.client_event_msg_info msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_get_all_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .SProtoSpace.client_event_msg_info msgs = 3;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_get_all_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_get_all_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_get_all_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_get_all_ack::MergeFrom(const event_msg_get_all_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_get_all_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_get_all_ack::CopyFrom(const event_msg_get_all_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_get_all_ack::IsInitialized() const {

  return true;
}

void event_msg_get_all_ack::Swap(event_msg_get_all_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_get_all_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_get_all_ack_descriptor_;
  metadata.reflection = event_msg_get_all_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_read_req::kProtoidFieldNumber;
const int event_msg_read_req::kEventTypeFieldNumber;
#endif  // !_MSC_VER

event_msg_read_req::event_msg_read_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_read_req::InitAsDefaultInstance() {
}

event_msg_read_req::event_msg_read_req(const event_msg_read_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_read_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7002;
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_read_req::~event_msg_read_req() {
  SharedDtor();
}

void event_msg_read_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_read_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_read_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_read_req_descriptor_;
}

const event_msg_read_req& event_msg_read_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_read_req* event_msg_read_req::default_instance_ = NULL;

event_msg_read_req* event_msg_read_req::New() const {
  return new event_msg_read_req;
}

void event_msg_read_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7002;
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_read_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_read_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_read_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_read_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_read_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_read_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_read_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_read_req::MergeFrom(const event_msg_read_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_read_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_read_req::CopyFrom(const event_msg_read_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_read_req::IsInitialized() const {

  return true;
}

void event_msg_read_req::Swap(event_msg_read_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_read_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_read_req_descriptor_;
  metadata.reflection = event_msg_read_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_read_ack::kProtoidFieldNumber;
const int event_msg_read_ack::kResultFieldNumber;
const int event_msg_read_ack::kEventTypeFieldNumber;
#endif  // !_MSC_VER

event_msg_read_ack::event_msg_read_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_read_ack::InitAsDefaultInstance() {
}

event_msg_read_ack::event_msg_read_ack(const event_msg_read_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_read_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7003;
  result_ = 0;
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_read_ack::~event_msg_read_ack() {
  SharedDtor();
}

void event_msg_read_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_read_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_read_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_read_ack_descriptor_;
}

const event_msg_read_ack& event_msg_read_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_read_ack* event_msg_read_ack::default_instance_ = NULL;

event_msg_read_ack* event_msg_read_ack::New() const {
  return new event_msg_read_ack;
}

void event_msg_read_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7003;
    result_ = 0;
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_read_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_read_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_read_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_read_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_read_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_read_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_read_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_read_ack::MergeFrom(const event_msg_read_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_read_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_read_ack::CopyFrom(const event_msg_read_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_read_ack::IsInitialized() const {

  return true;
}

void event_msg_read_ack::Swap(event_msg_read_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_read_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_read_ack_descriptor_;
  metadata.reflection = event_msg_read_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_del_req::kProtoidFieldNumber;
const int event_msg_del_req::kEventTypeFieldNumber;
#endif  // !_MSC_VER

event_msg_del_req::event_msg_del_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_del_req::InitAsDefaultInstance() {
}

event_msg_del_req::event_msg_del_req(const event_msg_del_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_del_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7004;
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_del_req::~event_msg_del_req() {
  SharedDtor();
}

void event_msg_del_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_del_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_del_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_del_req_descriptor_;
}

const event_msg_del_req& event_msg_del_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_del_req* event_msg_del_req::default_instance_ = NULL;

event_msg_del_req* event_msg_del_req::New() const {
  return new event_msg_del_req;
}

void event_msg_del_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7004;
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_del_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_del_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_del_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_del_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_del_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_del_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_del_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_del_req::MergeFrom(const event_msg_del_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_del_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_del_req::CopyFrom(const event_msg_del_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_del_req::IsInitialized() const {

  return true;
}

void event_msg_del_req::Swap(event_msg_del_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_del_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_del_req_descriptor_;
  metadata.reflection = event_msg_del_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_del_ack::kProtoidFieldNumber;
const int event_msg_del_ack::kResultFieldNumber;
const int event_msg_del_ack::kEventTypeFieldNumber;
#endif  // !_MSC_VER

event_msg_del_ack::event_msg_del_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_del_ack::InitAsDefaultInstance() {
}

event_msg_del_ack::event_msg_del_ack(const event_msg_del_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_del_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7005;
  result_ = 0;
  event_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_del_ack::~event_msg_del_ack() {
  SharedDtor();
}

void event_msg_del_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_del_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_del_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_del_ack_descriptor_;
}

const event_msg_del_ack& event_msg_del_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_del_ack* event_msg_del_ack::default_instance_ = NULL;

event_msg_del_ack* event_msg_del_ack::New() const {
  return new event_msg_del_ack;
}

void event_msg_del_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7005;
    result_ = 0;
    event_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_del_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // optional uint32 event_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_del_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_del_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional uint32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_del_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_del_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_del_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_del_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_del_ack::MergeFrom(const event_msg_del_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_del_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_del_ack::CopyFrom(const event_msg_del_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_del_ack::IsInitialized() const {

  return true;
}

void event_msg_del_ack::Swap(event_msg_del_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(event_type_, other->event_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_del_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_del_ack_descriptor_;
  metadata.reflection = event_msg_del_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_nty::kProtoidFieldNumber;
const int event_msg_nty::kMsgsFieldNumber;
#endif  // !_MSC_VER

event_msg_nty::event_msg_nty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_nty::InitAsDefaultInstance() {
  msgs_ = const_cast< ::SProtoSpace::client_event_msg_info*>(&::SProtoSpace::client_event_msg_info::default_instance());
}

event_msg_nty::event_msg_nty(const event_msg_nty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_nty::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7006;
  msgs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_nty::~event_msg_nty() {
  SharedDtor();
}

void event_msg_nty::SharedDtor() {
  if (this != default_instance_) {
    delete msgs_;
  }
}

void event_msg_nty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_nty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_nty_descriptor_;
}

const event_msg_nty& event_msg_nty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_nty* event_msg_nty::default_instance_ = NULL;

event_msg_nty* event_msg_nty::New() const {
  return new event_msg_nty;
}

void event_msg_nty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7006;
    if (has_msgs()) {
      if (msgs_ != NULL) msgs_->::SProtoSpace::client_event_msg_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_nty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_nty_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        break;
      }

      // optional .SProtoSpace.client_event_msg_info msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_nty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_nty_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.client_event_msg_info msgs = 2;
  if (has_msgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msgs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_nty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_nty_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.client_event_msg_info msgs = 2;
  if (has_msgs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msgs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_nty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_nty_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.client_event_msg_info msgs = 2;
    if (has_msgs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_nty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_nty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_nty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_nty::MergeFrom(const event_msg_nty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_msgs()) {
      mutable_msgs()->::SProtoSpace::client_event_msg_info::MergeFrom(from.msgs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_nty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_nty::CopyFrom(const event_msg_nty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_nty::IsInitialized() const {

  return true;
}

void event_msg_nty::Swap(event_msg_nty* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(msgs_, other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_nty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_nty_descriptor_;
  metadata.reflection = event_msg_nty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_get_by_id_req::kProtoidFieldNumber;
const int event_msg_get_by_id_req::kEventUuidFieldNumber;
#endif  // !_MSC_VER

event_msg_get_by_id_req::event_msg_get_by_id_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_get_by_id_req::InitAsDefaultInstance() {
}

event_msg_get_by_id_req::event_msg_get_by_id_req(const event_msg_get_by_id_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_get_by_id_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7007;
  event_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_get_by_id_req::~event_msg_get_by_id_req() {
  SharedDtor();
}

void event_msg_get_by_id_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void event_msg_get_by_id_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_get_by_id_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_get_by_id_req_descriptor_;
}

const event_msg_get_by_id_req& event_msg_get_by_id_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_get_by_id_req* event_msg_get_by_id_req::default_instance_ = NULL;

event_msg_get_by_id_req* event_msg_get_by_id_req::New() const {
  return new event_msg_get_by_id_req;
}

void event_msg_get_by_id_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7007;
    event_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_get_by_id_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_event_uuid;
        break;
      }

      // optional uint64 event_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &event_uuid_)));
          set_has_event_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_get_by_id_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 event_uuid = 2;
  if (has_event_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->event_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_get_by_id_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 event_uuid = 2;
  if (has_event_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->event_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_get_by_id_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 event_uuid = 2;
    if (has_event_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->event_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_get_by_id_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_get_by_id_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_get_by_id_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_get_by_id_req::MergeFrom(const event_msg_get_by_id_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_event_uuid()) {
      set_event_uuid(from.event_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_get_by_id_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_get_by_id_req::CopyFrom(const event_msg_get_by_id_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_get_by_id_req::IsInitialized() const {

  return true;
}

void event_msg_get_by_id_req::Swap(event_msg_get_by_id_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(event_uuid_, other->event_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_get_by_id_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_get_by_id_req_descriptor_;
  metadata.reflection = event_msg_get_by_id_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int event_msg_get_by_id_ack::kProtoidFieldNumber;
const int event_msg_get_by_id_ack::kResultFieldNumber;
const int event_msg_get_by_id_ack::kMsgFieldNumber;
#endif  // !_MSC_VER

event_msg_get_by_id_ack::event_msg_get_by_id_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void event_msg_get_by_id_ack::InitAsDefaultInstance() {
  msg_ = const_cast< ::SProtoSpace::client_event_msg_info*>(&::SProtoSpace::client_event_msg_info::default_instance());
}

event_msg_get_by_id_ack::event_msg_get_by_id_ack(const event_msg_get_by_id_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void event_msg_get_by_id_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7008;
  result_ = 0;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

event_msg_get_by_id_ack::~event_msg_get_by_id_ack() {
  SharedDtor();
}

void event_msg_get_by_id_ack::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void event_msg_get_by_id_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* event_msg_get_by_id_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return event_msg_get_by_id_ack_descriptor_;
}

const event_msg_get_by_id_ack& event_msg_get_by_id_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

event_msg_get_by_id_ack* event_msg_get_by_id_ack::default_instance_ = NULL;

event_msg_get_by_id_ack* event_msg_get_by_id_ack::New() const {
  return new event_msg_get_by_id_ack;
}

void event_msg_get_by_id_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7008;
    result_ = 0;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::SProtoSpace::client_event_msg_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool event_msg_get_by_id_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional .SProtoSpace.client_event_msg_info msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void event_msg_get_by_id_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // optional .SProtoSpace.client_event_msg_info msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* event_msg_get_by_id_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // optional .SProtoSpace.client_event_msg_info msg = 3;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int event_msg_get_by_id_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .SProtoSpace.client_event_msg_info msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void event_msg_get_by_id_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const event_msg_get_by_id_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const event_msg_get_by_id_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void event_msg_get_by_id_ack::MergeFrom(const event_msg_get_by_id_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      mutable_msg()->::SProtoSpace::client_event_msg_info::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void event_msg_get_by_id_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void event_msg_get_by_id_ack::CopyFrom(const event_msg_get_by_id_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool event_msg_get_by_id_ack::IsInitialized() const {

  return true;
}

void event_msg_get_by_id_ack::Swap(event_msg_get_by_id_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata event_msg_get_by_id_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = event_msg_get_by_id_ack_descriptor_;
  metadata.reflection = event_msg_get_by_id_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_rank_data_req::kProtoidFieldNumber;
const int get_rank_data_req::kTypeFieldNumber;
const int get_rank_data_req::kStartIndexFieldNumber;
const int get_rank_data_req::kEndIndexFieldNumber;
#endif  // !_MSC_VER

get_rank_data_req::get_rank_data_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_rank_data_req::InitAsDefaultInstance() {
}

get_rank_data_req::get_rank_data_req(const get_rank_data_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_rank_data_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6801;
  type_ = 1000;
  start_index_ = 0;
  end_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_rank_data_req::~get_rank_data_req() {
  SharedDtor();
}

void get_rank_data_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_rank_data_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_rank_data_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_rank_data_req_descriptor_;
}

const get_rank_data_req& get_rank_data_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_rank_data_req* get_rank_data_req::default_instance_ = NULL;

get_rank_data_req* get_rank_data_req::New() const {
  return new get_rank_data_req;
}

void get_rank_data_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6801;
    type_ = 1000;
    start_index_ = 0;
    end_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_rank_data_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.RANK_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::RANK_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_rank_data_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.RANK_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_index(), output);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_rank_data_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.RANK_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 start_index = 3;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_index(), target);
  }

  // optional int32 end_index = 4;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_rank_data_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.RANK_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 start_index = 3;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 4;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_rank_data_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_rank_data_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_rank_data_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_rank_data_req::MergeFrom(const get_rank_data_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_rank_data_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_rank_data_req::CopyFrom(const get_rank_data_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_rank_data_req::IsInitialized() const {

  return true;
}

void get_rank_data_req::Swap(get_rank_data_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_rank_data_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_rank_data_req_descriptor_;
  metadata.reflection = get_rank_data_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_rank_data_ack::kProtoidFieldNumber;
const int get_rank_data_ack::kRetFieldNumber;
const int get_rank_data_ack::kTypeFieldNumber;
const int get_rank_data_ack::kStartIndexFieldNumber;
const int get_rank_data_ack::kEndIndexFieldNumber;
const int get_rank_data_ack::kMyItemFieldNumber;
const int get_rank_data_ack::kItemsFieldNumber;
#endif  // !_MSC_VER

get_rank_data_ack::get_rank_data_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_rank_data_ack::InitAsDefaultInstance() {
  my_item_ = const_cast< ::SProtoSpace::rank_common_item*>(&::SProtoSpace::rank_common_item::default_instance());
}

get_rank_data_ack::get_rank_data_ack(const get_rank_data_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_rank_data_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6802;
  ret_ = 0;
  type_ = 1000;
  start_index_ = 0;
  end_index_ = 0;
  my_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_rank_data_ack::~get_rank_data_ack() {
  SharedDtor();
}

void get_rank_data_ack::SharedDtor() {
  if (this != default_instance_) {
    delete my_item_;
  }
}

void get_rank_data_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_rank_data_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_rank_data_ack_descriptor_;
}

const get_rank_data_ack& get_rank_data_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_rank_data_ack* get_rank_data_ack::default_instance_ = NULL;

get_rank_data_ack* get_rank_data_ack::New() const {
  return new get_rank_data_ack;
}

void get_rank_data_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6802;
    ret_ = 0;
    type_ = 1000;
    start_index_ = 0;
    end_index_ = 0;
    if (has_my_item()) {
      if (my_item_ != NULL) my_item_->::SProtoSpace::rank_common_item::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_rank_data_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.RANK_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::RANK_TYPE_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::RANK_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_index;
        break;
      }

      // optional int32 start_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_index_)));
          set_has_start_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_end_index;
        break;
      }

      // optional int32 end_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_index_)));
          set_has_end_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_my_item;
        break;
      }

      // optional .SProtoSpace.rank_common_item my_item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .SProtoSpace.rank_common_item items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_rank_data_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.RANK_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 start_index = 4;
  if (has_start_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_index(), output);
  }

  // optional int32 end_index = 5;
  if (has_end_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_index(), output);
  }

  // optional .SProtoSpace.rank_common_item my_item = 6;
  if (has_my_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->my_item(), output);
  }

  // repeated .SProtoSpace.rank_common_item items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_rank_data_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.RANK_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 start_index = 4;
  if (has_start_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_index(), target);
  }

  // optional int32 end_index = 5;
  if (has_end_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_index(), target);
  }

  // optional .SProtoSpace.rank_common_item my_item = 6;
  if (has_my_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->my_item(), target);
  }

  // repeated .SProtoSpace.rank_common_item items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_rank_data_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .SProtoSpace.RANK_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 start_index = 4;
    if (has_start_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_index());
    }

    // optional int32 end_index = 5;
    if (has_end_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_index());
    }

    // optional .SProtoSpace.rank_common_item my_item = 6;
    if (has_my_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my_item());
    }

  }
  // repeated .SProtoSpace.rank_common_item items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_rank_data_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_rank_data_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_rank_data_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_rank_data_ack::MergeFrom(const get_rank_data_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_index()) {
      set_start_index(from.start_index());
    }
    if (from.has_end_index()) {
      set_end_index(from.end_index());
    }
    if (from.has_my_item()) {
      mutable_my_item()->::SProtoSpace::rank_common_item::MergeFrom(from.my_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_rank_data_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_rank_data_ack::CopyFrom(const get_rank_data_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_rank_data_ack::IsInitialized() const {

  return true;
}

void get_rank_data_ack::Swap(get_rank_data_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(start_index_, other->start_index_);
    std::swap(end_index_, other->end_index_);
    std::swap(my_item_, other->my_item_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_rank_data_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_rank_data_ack_descriptor_;
  metadata.reflection = get_rank_data_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_uint_achievement::kTaskConfigIdFieldNumber;
const int role_uint_achievement::kStateFieldNumber;
const int role_uint_achievement::kStateUtcTimeFieldNumber;
const int role_uint_achievement::kCurrentStepFieldNumber;
const int role_uint_achievement::kMaxStepFieldNumber;
const int role_uint_achievement::kIsNewFieldNumber;
#endif  // !_MSC_VER

role_uint_achievement::role_uint_achievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_uint_achievement::InitAsDefaultInstance() {
}

role_uint_achievement::role_uint_achievement(const role_uint_achievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_uint_achievement::SharedCtor() {
  _cached_size_ = 0;
  task_config_id_ = 0;
  state_ = 0;
  state_utc_time_ = 0u;
  current_step_ = 0u;
  max_step_ = 0u;
  is_new_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_uint_achievement::~role_uint_achievement() {
  SharedDtor();
}

void role_uint_achievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_uint_achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_uint_achievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_uint_achievement_descriptor_;
}

const role_uint_achievement& role_uint_achievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_uint_achievement* role_uint_achievement::default_instance_ = NULL;

role_uint_achievement* role_uint_achievement::New() const {
  return new role_uint_achievement;
}

void role_uint_achievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_config_id_ = 0;
    state_ = 0;
    state_utc_time_ = 0u;
    current_step_ = 0u;
    max_step_ = 0u;
    is_new_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_uint_achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 task_config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_config_id_)));
          set_has_task_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .SProtoSpace.EQuestStatus state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EQuestStatus_IsValid(value)) {
            set_state(static_cast< ::SProtoSpace::EQuestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state_utc_time;
        break;
      }

      // optional uint32 state_utc_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_utc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_utc_time_)));
          set_has_state_utc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_current_step;
        break;
      }

      // optional uint32 current_step = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_step_)));
          set_has_current_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_step;
        break;
      }

      // optional uint32 max_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_step_)));
          set_has_max_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_new;
        break;
      }

      // optional bool is_new = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_uint_achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 task_config_id = 1;
  if (has_task_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->task_config_id(), output);
  }

  // optional .SProtoSpace.EQuestStatus state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional uint32 state_utc_time = 3;
  if (has_state_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state_utc_time(), output);
  }

  // optional uint32 current_step = 4;
  if (has_current_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_step(), output);
  }

  // optional uint32 max_step = 5;
  if (has_max_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_step(), output);
  }

  // optional bool is_new = 6;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_new(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_uint_achievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 task_config_id = 1;
  if (has_task_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->task_config_id(), target);
  }

  // optional .SProtoSpace.EQuestStatus state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional uint32 state_utc_time = 3;
  if (has_state_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state_utc_time(), target);
  }

  // optional uint32 current_step = 4;
  if (has_current_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_step(), target);
  }

  // optional uint32 max_step = 5;
  if (has_max_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_step(), target);
  }

  // optional bool is_new = 6;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_new(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_uint_achievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 task_config_id = 1;
    if (has_task_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_config_id());
    }

    // optional .SProtoSpace.EQuestStatus state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 state_utc_time = 3;
    if (has_state_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_utc_time());
    }

    // optional uint32 current_step = 4;
    if (has_current_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_step());
    }

    // optional uint32 max_step = 5;
    if (has_max_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_step());
    }

    // optional bool is_new = 6;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_uint_achievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_uint_achievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_uint_achievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_uint_achievement::MergeFrom(const role_uint_achievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_config_id()) {
      set_task_config_id(from.task_config_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_state_utc_time()) {
      set_state_utc_time(from.state_utc_time());
    }
    if (from.has_current_step()) {
      set_current_step(from.current_step());
    }
    if (from.has_max_step()) {
      set_max_step(from.max_step());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_uint_achievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_uint_achievement::CopyFrom(const role_uint_achievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_uint_achievement::IsInitialized() const {

  return true;
}

void role_uint_achievement::Swap(role_uint_achievement* other) {
  if (other != this) {
    std::swap(task_config_id_, other->task_config_id_);
    std::swap(state_, other->state_);
    std::swap(state_utc_time_, other->state_utc_time_);
    std::swap(current_step_, other->current_step_);
    std::swap(max_step_, other->max_step_);
    std::swap(is_new_, other->is_new_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_uint_achievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_uint_achievement_descriptor_;
  metadata.reflection = role_uint_achievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_achievements_ntf_type_list::kBigTypesFieldNumber;
const int role_achievements_ntf_type_list::kSmallTypesFieldNumber;
const int role_achievements_ntf_type_list::kBigTypePtFieldNumber;
#endif  // !_MSC_VER

role_achievements_ntf_type_list::role_achievements_ntf_type_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_achievements_ntf_type_list::InitAsDefaultInstance() {
}

role_achievements_ntf_type_list::role_achievements_ntf_type_list(const role_achievements_ntf_type_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_achievements_ntf_type_list::SharedCtor() {
  _cached_size_ = 0;
  big_types_ = 0;
  big_type_pt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_achievements_ntf_type_list::~role_achievements_ntf_type_list() {
  SharedDtor();
}

void role_achievements_ntf_type_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_achievements_ntf_type_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_achievements_ntf_type_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_achievements_ntf_type_list_descriptor_;
}

const role_achievements_ntf_type_list& role_achievements_ntf_type_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_achievements_ntf_type_list* role_achievements_ntf_type_list::default_instance_ = NULL;

role_achievements_ntf_type_list* role_achievements_ntf_type_list::New() const {
  return new role_achievements_ntf_type_list;
}

void role_achievements_ntf_type_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    big_types_ = 0;
    big_type_pt_ = 0u;
  }
  small_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_achievements_ntf_type_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 big_types = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &big_types_)));
          set_has_big_types();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_small_types;
        break;
      }

      // repeated int32 small_types = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_small_types:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_small_types())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_small_types())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_small_types;
        if (input->ExpectTag(24)) goto parse_big_type_pt;
        break;
      }

      // optional uint32 big_type_pt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_big_type_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &big_type_pt_)));
          set_has_big_type_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_achievements_ntf_type_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 big_types = 1;
  if (has_big_types()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->big_types(), output);
  }

  // repeated int32 small_types = 2;
  for (int i = 0; i < this->small_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->small_types(i), output);
  }

  // optional uint32 big_type_pt = 3;
  if (has_big_type_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->big_type_pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_achievements_ntf_type_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 big_types = 1;
  if (has_big_types()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->big_types(), target);
  }

  // repeated int32 small_types = 2;
  for (int i = 0; i < this->small_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->small_types(i), target);
  }

  // optional uint32 big_type_pt = 3;
  if (has_big_type_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->big_type_pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_achievements_ntf_type_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 big_types = 1;
    if (has_big_types()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->big_types());
    }

    // optional uint32 big_type_pt = 3;
    if (has_big_type_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->big_type_pt());
    }

  }
  // repeated int32 small_types = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->small_types_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->small_types(i));
    }
    total_size += 1 * this->small_types_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_achievements_ntf_type_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_achievements_ntf_type_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_achievements_ntf_type_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_achievements_ntf_type_list::MergeFrom(const role_achievements_ntf_type_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  small_types_.MergeFrom(from.small_types_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_big_types()) {
      set_big_types(from.big_types());
    }
    if (from.has_big_type_pt()) {
      set_big_type_pt(from.big_type_pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_achievements_ntf_type_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_achievements_ntf_type_list::CopyFrom(const role_achievements_ntf_type_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_achievements_ntf_type_list::IsInitialized() const {

  return true;
}

void role_achievements_ntf_type_list::Swap(role_achievements_ntf_type_list* other) {
  if (other != this) {
    std::swap(big_types_, other->big_types_);
    small_types_.Swap(&other->small_types_);
    std::swap(big_type_pt_, other->big_type_pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_achievements_ntf_type_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_achievements_ntf_type_list_descriptor_;
  metadata.reflection = role_achievements_ntf_type_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_achievements_ntf::kProtoidFieldNumber;
const int role_achievements_ntf::kAchievementsFieldNumber;
const int role_achievements_ntf::kPointsRewardGettedIdsFieldNumber;
const int role_achievements_ntf::kListFieldNumber;
const int role_achievements_ntf::kCurrentAchievePtFieldNumber;
#endif  // !_MSC_VER

role_achievements_ntf::role_achievements_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_achievements_ntf::InitAsDefaultInstance() {
}

role_achievements_ntf::role_achievements_ntf(const role_achievements_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_achievements_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6900;
  current_achieve_pt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_achievements_ntf::~role_achievements_ntf() {
  SharedDtor();
}

void role_achievements_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_achievements_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_achievements_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_achievements_ntf_descriptor_;
}

const role_achievements_ntf& role_achievements_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_achievements_ntf* role_achievements_ntf::default_instance_ = NULL;

role_achievements_ntf* role_achievements_ntf::New() const {
  return new role_achievements_ntf;
}

void role_achievements_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6900;
    current_achieve_pt_ = 0u;
  }
  achievements_.Clear();
  points_reward_getted_ids_.Clear();
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_achievements_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievements_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievements;
        break;
      }

      // repeated .SProtoSpace.role_uint_achievement achievements = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_achievements;
        if (input->ExpectTag(24)) goto parse_points_reward_getted_ids;
        break;
      }

      // repeated int32 points_reward_getted_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points_reward_getted_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_points_reward_getted_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_points_reward_getted_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_points_reward_getted_ids;
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // repeated .SProtoSpace.role_achievements_ntf_type_list list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list;
        if (input->ExpectTag(40)) goto parse_current_achieve_pt;
        break;
      }

      // optional uint32 current_achieve_pt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_achieve_pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_achieve_pt_)));
          set_has_current_achieve_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_achievements_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievements_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.role_uint_achievement achievements = 2;
  for (int i = 0; i < this->achievements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->achievements(i), output);
  }

  // repeated int32 points_reward_getted_ids = 3;
  for (int i = 0; i < this->points_reward_getted_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->points_reward_getted_ids(i), output);
  }

  // repeated .SProtoSpace.role_achievements_ntf_type_list list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->list(i), output);
  }

  // optional uint32 current_achieve_pt = 5;
  if (has_current_achieve_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->current_achieve_pt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_achievements_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievements_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.role_uint_achievement achievements = 2;
  for (int i = 0; i < this->achievements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->achievements(i), target);
  }

  // repeated int32 points_reward_getted_ids = 3;
  for (int i = 0; i < this->points_reward_getted_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->points_reward_getted_ids(i), target);
  }

  // repeated .SProtoSpace.role_achievements_ntf_type_list list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->list(i), target);
  }

  // optional uint32 current_achieve_pt = 5;
  if (has_current_achieve_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->current_achieve_pt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_achievements_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievements_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 current_achieve_pt = 5;
    if (has_current_achieve_pt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_achieve_pt());
    }

  }
  // repeated .SProtoSpace.role_uint_achievement achievements = 2;
  total_size += 1 * this->achievements_size();
  for (int i = 0; i < this->achievements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievements(i));
  }

  // repeated int32 points_reward_getted_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->points_reward_getted_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->points_reward_getted_ids(i));
    }
    total_size += 1 * this->points_reward_getted_ids_size() + data_size;
  }

  // repeated .SProtoSpace.role_achievements_ntf_type_list list = 4;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_achievements_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_achievements_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_achievements_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_achievements_ntf::MergeFrom(const role_achievements_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievements_.MergeFrom(from.achievements_);
  points_reward_getted_ids_.MergeFrom(from.points_reward_getted_ids_);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_current_achieve_pt()) {
      set_current_achieve_pt(from.current_achieve_pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_achievements_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_achievements_ntf::CopyFrom(const role_achievements_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_achievements_ntf::IsInitialized() const {

  return true;
}

void role_achievements_ntf::Swap(role_achievements_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    achievements_.Swap(&other->achievements_);
    points_reward_getted_ids_.Swap(&other->points_reward_getted_ids_);
    list_.Swap(&other->list_);
    std::swap(current_achieve_pt_, other->current_achieve_pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_achievements_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_achievements_ntf_descriptor_;
  metadata.reflection = role_achievements_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_achievement_get_rewards_req::kProtoidFieldNumber;
const int role_achievement_get_rewards_req::kTaskConfigIdFieldNumber;
#endif  // !_MSC_VER

role_achievement_get_rewards_req::role_achievement_get_rewards_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_achievement_get_rewards_req::InitAsDefaultInstance() {
}

role_achievement_get_rewards_req::role_achievement_get_rewards_req(const role_achievement_get_rewards_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_achievement_get_rewards_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6901;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_achievement_get_rewards_req::~role_achievement_get_rewards_req() {
  SharedDtor();
}

void role_achievement_get_rewards_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_achievement_get_rewards_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_achievement_get_rewards_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_achievement_get_rewards_req_descriptor_;
}

const role_achievement_get_rewards_req& role_achievement_get_rewards_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_achievement_get_rewards_req* role_achievement_get_rewards_req::default_instance_ = NULL;

role_achievement_get_rewards_req* role_achievement_get_rewards_req::New() const {
  return new role_achievement_get_rewards_req;
}

void role_achievement_get_rewards_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6901;
  }
  task_config_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_achievement_get_rewards_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_config_id;
        break;
      }

      // repeated int32 task_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_task_config_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_task_config_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_config_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_achievement_get_rewards_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 task_config_id = 2;
  for (int i = 0; i < this->task_config_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->task_config_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_achievement_get_rewards_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 task_config_id = 2;
  for (int i = 0; i < this->task_config_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->task_config_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_achievement_get_rewards_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 task_config_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_config_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->task_config_id(i));
    }
    total_size += 1 * this->task_config_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_achievement_get_rewards_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_achievement_get_rewards_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_achievement_get_rewards_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_achievement_get_rewards_req::MergeFrom(const role_achievement_get_rewards_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_config_id_.MergeFrom(from.task_config_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_achievement_get_rewards_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_achievement_get_rewards_req::CopyFrom(const role_achievement_get_rewards_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_achievement_get_rewards_req::IsInitialized() const {

  return true;
}

void role_achievement_get_rewards_req::Swap(role_achievement_get_rewards_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    task_config_id_.Swap(&other->task_config_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_achievement_get_rewards_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_achievement_get_rewards_req_descriptor_;
  metadata.reflection = role_achievement_get_rewards_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_achievement_get_rewards_ack::kProtoidFieldNumber;
const int role_achievement_get_rewards_ack::kSucceedGetAwardTasksFieldNumber;
const int role_achievement_get_rewards_ack::kFailedGetAwardTasksFieldNumber;
const int role_achievement_get_rewards_ack::kErrorCodesFieldNumber;
#endif  // !_MSC_VER

role_achievement_get_rewards_ack::role_achievement_get_rewards_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_achievement_get_rewards_ack::InitAsDefaultInstance() {
}

role_achievement_get_rewards_ack::role_achievement_get_rewards_ack(const role_achievement_get_rewards_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_achievement_get_rewards_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6902;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_achievement_get_rewards_ack::~role_achievement_get_rewards_ack() {
  SharedDtor();
}

void role_achievement_get_rewards_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_achievement_get_rewards_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_achievement_get_rewards_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_achievement_get_rewards_ack_descriptor_;
}

const role_achievement_get_rewards_ack& role_achievement_get_rewards_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_achievement_get_rewards_ack* role_achievement_get_rewards_ack::default_instance_ = NULL;

role_achievement_get_rewards_ack* role_achievement_get_rewards_ack::New() const {
  return new role_achievement_get_rewards_ack;
}

void role_achievement_get_rewards_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6902;
  }
  succeed_get_award_tasks_.Clear();
  failed_get_award_tasks_.Clear();
  error_codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_achievement_get_rewards_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succeed_get_award_tasks;
        break;
      }

      // repeated int32 succeed_get_award_tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeed_get_award_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_succeed_get_award_tasks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_succeed_get_award_tasks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succeed_get_award_tasks;
        if (input->ExpectTag(24)) goto parse_failed_get_award_tasks;
        break;
      }

      // repeated int32 failed_get_award_tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_get_award_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_failed_get_award_tasks())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_failed_get_award_tasks())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_failed_get_award_tasks;
        if (input->ExpectTag(32)) goto parse_error_codes;
        break;
      }

      // repeated .SProtoSpace.MsgErrorType error_codes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_codes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            add_error_codes(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SProtoSpace::MsgErrorType_IsValid,
                 this->mutable_error_codes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_codes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_achievement_get_rewards_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 succeed_get_award_tasks = 2;
  for (int i = 0; i < this->succeed_get_award_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->succeed_get_award_tasks(i), output);
  }

  // repeated int32 failed_get_award_tasks = 3;
  for (int i = 0; i < this->failed_get_award_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->failed_get_award_tasks(i), output);
  }

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  for (int i = 0; i < this->error_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_codes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_achievement_get_rewards_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 succeed_get_award_tasks = 2;
  for (int i = 0; i < this->succeed_get_award_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->succeed_get_award_tasks(i), target);
  }

  // repeated int32 failed_get_award_tasks = 3;
  for (int i = 0; i < this->failed_get_award_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->failed_get_award_tasks(i), target);
  }

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  for (int i = 0; i < this->error_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error_codes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_achievement_get_rewards_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 succeed_get_award_tasks = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->succeed_get_award_tasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->succeed_get_award_tasks(i));
    }
    total_size += 1 * this->succeed_get_award_tasks_size() + data_size;
  }

  // repeated int32 failed_get_award_tasks = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->failed_get_award_tasks_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->failed_get_award_tasks(i));
    }
    total_size += 1 * this->failed_get_award_tasks_size() + data_size;
  }

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->error_codes(i));
    }
    total_size += 1 * this->error_codes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_achievement_get_rewards_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_achievement_get_rewards_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_achievement_get_rewards_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_achievement_get_rewards_ack::MergeFrom(const role_achievement_get_rewards_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  succeed_get_award_tasks_.MergeFrom(from.succeed_get_award_tasks_);
  failed_get_award_tasks_.MergeFrom(from.failed_get_award_tasks_);
  error_codes_.MergeFrom(from.error_codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_achievement_get_rewards_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_achievement_get_rewards_ack::CopyFrom(const role_achievement_get_rewards_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_achievement_get_rewards_ack::IsInitialized() const {

  return true;
}

void role_achievement_get_rewards_ack::Swap(role_achievement_get_rewards_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    succeed_get_award_tasks_.Swap(&other->succeed_get_award_tasks_);
    failed_get_award_tasks_.Swap(&other->failed_get_award_tasks_);
    error_codes_.Swap(&other->error_codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_achievement_get_rewards_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_achievement_get_rewards_ack_descriptor_;
  metadata.reflection = role_achievement_get_rewards_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_achievement_point_rewards_req::kProtoidFieldNumber;
const int role_achievement_point_rewards_req::kAchievementPtRewardIdFieldNumber;
#endif  // !_MSC_VER

role_achievement_point_rewards_req::role_achievement_point_rewards_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_achievement_point_rewards_req::InitAsDefaultInstance() {
}

role_achievement_point_rewards_req::role_achievement_point_rewards_req(const role_achievement_point_rewards_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_achievement_point_rewards_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6903;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_achievement_point_rewards_req::~role_achievement_point_rewards_req() {
  SharedDtor();
}

void role_achievement_point_rewards_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_achievement_point_rewards_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_achievement_point_rewards_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_achievement_point_rewards_req_descriptor_;
}

const role_achievement_point_rewards_req& role_achievement_point_rewards_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_achievement_point_rewards_req* role_achievement_point_rewards_req::default_instance_ = NULL;

role_achievement_point_rewards_req* role_achievement_point_rewards_req::New() const {
  return new role_achievement_point_rewards_req;
}

void role_achievement_point_rewards_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6903;
  }
  achievement_pt_reward_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_achievement_point_rewards_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievement_pt_reward_id;
        break;
      }

      // repeated int32 achievement_pt_reward_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement_pt_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_achievement_pt_reward_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_achievement_pt_reward_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_achievement_pt_reward_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_achievement_point_rewards_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 achievement_pt_reward_id = 2;
  for (int i = 0; i < this->achievement_pt_reward_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->achievement_pt_reward_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_achievement_point_rewards_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 achievement_pt_reward_id = 2;
  for (int i = 0; i < this->achievement_pt_reward_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->achievement_pt_reward_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_achievement_point_rewards_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 achievement_pt_reward_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->achievement_pt_reward_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->achievement_pt_reward_id(i));
    }
    total_size += 1 * this->achievement_pt_reward_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_achievement_point_rewards_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_achievement_point_rewards_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_achievement_point_rewards_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_achievement_point_rewards_req::MergeFrom(const role_achievement_point_rewards_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_pt_reward_id_.MergeFrom(from.achievement_pt_reward_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_achievement_point_rewards_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_achievement_point_rewards_req::CopyFrom(const role_achievement_point_rewards_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_achievement_point_rewards_req::IsInitialized() const {

  return true;
}

void role_achievement_point_rewards_req::Swap(role_achievement_point_rewards_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    achievement_pt_reward_id_.Swap(&other->achievement_pt_reward_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_achievement_point_rewards_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_achievement_point_rewards_req_descriptor_;
  metadata.reflection = role_achievement_point_rewards_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_achievement_point_rewards_ack::kProtoidFieldNumber;
const int role_achievement_point_rewards_ack::kSucceedGetAwardIdsFieldNumber;
const int role_achievement_point_rewards_ack::kFailedGetAwardIdsFieldNumber;
const int role_achievement_point_rewards_ack::kErrorCodesFieldNumber;
#endif  // !_MSC_VER

role_achievement_point_rewards_ack::role_achievement_point_rewards_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_achievement_point_rewards_ack::InitAsDefaultInstance() {
}

role_achievement_point_rewards_ack::role_achievement_point_rewards_ack(const role_achievement_point_rewards_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_achievement_point_rewards_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6904;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_achievement_point_rewards_ack::~role_achievement_point_rewards_ack() {
  SharedDtor();
}

void role_achievement_point_rewards_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_achievement_point_rewards_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_achievement_point_rewards_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_achievement_point_rewards_ack_descriptor_;
}

const role_achievement_point_rewards_ack& role_achievement_point_rewards_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_achievement_point_rewards_ack* role_achievement_point_rewards_ack::default_instance_ = NULL;

role_achievement_point_rewards_ack* role_achievement_point_rewards_ack::New() const {
  return new role_achievement_point_rewards_ack;
}

void role_achievement_point_rewards_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6904;
  }
  succeed_get_award_ids_.Clear();
  failed_get_award_ids_.Clear();
  error_codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_achievement_point_rewards_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succeed_get_award_ids;
        break;
      }

      // repeated int32 succeed_get_award_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_succeed_get_award_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_succeed_get_award_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_succeed_get_award_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_succeed_get_award_ids;
        if (input->ExpectTag(24)) goto parse_failed_get_award_ids;
        break;
      }

      // repeated int32 failed_get_award_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_get_award_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_failed_get_award_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_failed_get_award_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_failed_get_award_ids;
        if (input->ExpectTag(32)) goto parse_error_codes;
        break;
      }

      // repeated .SProtoSpace.MsgErrorType error_codes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_codes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            add_error_codes(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SProtoSpace::MsgErrorType_IsValid,
                 this->mutable_error_codes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_codes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_achievement_point_rewards_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 succeed_get_award_ids = 2;
  for (int i = 0; i < this->succeed_get_award_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->succeed_get_award_ids(i), output);
  }

  // repeated int32 failed_get_award_ids = 3;
  for (int i = 0; i < this->failed_get_award_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->failed_get_award_ids(i), output);
  }

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  for (int i = 0; i < this->error_codes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_codes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_achievement_point_rewards_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 succeed_get_award_ids = 2;
  for (int i = 0; i < this->succeed_get_award_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->succeed_get_award_ids(i), target);
  }

  // repeated int32 failed_get_award_ids = 3;
  for (int i = 0; i < this->failed_get_award_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->failed_get_award_ids(i), target);
  }

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  for (int i = 0; i < this->error_codes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error_codes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_achievement_point_rewards_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 succeed_get_award_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->succeed_get_award_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->succeed_get_award_ids(i));
    }
    total_size += 1 * this->succeed_get_award_ids_size() + data_size;
  }

  // repeated int32 failed_get_award_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->failed_get_award_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->failed_get_award_ids(i));
    }
    total_size += 1 * this->failed_get_award_ids_size() + data_size;
  }

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->error_codes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->error_codes(i));
    }
    total_size += 1 * this->error_codes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_achievement_point_rewards_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_achievement_point_rewards_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_achievement_point_rewards_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_achievement_point_rewards_ack::MergeFrom(const role_achievement_point_rewards_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  succeed_get_award_ids_.MergeFrom(from.succeed_get_award_ids_);
  failed_get_award_ids_.MergeFrom(from.failed_get_award_ids_);
  error_codes_.MergeFrom(from.error_codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_achievement_point_rewards_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_achievement_point_rewards_ack::CopyFrom(const role_achievement_point_rewards_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_achievement_point_rewards_ack::IsInitialized() const {

  return true;
}

void role_achievement_point_rewards_ack::Swap(role_achievement_point_rewards_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    succeed_get_award_ids_.Swap(&other->succeed_get_award_ids_);
    failed_get_award_ids_.Swap(&other->failed_get_award_ids_);
    error_codes_.Swap(&other->error_codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_achievement_point_rewards_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_achievement_point_rewards_ack_descriptor_;
  metadata.reflection = role_achievement_point_rewards_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_bag_nty::kProtoidFieldNumber;
const int flower_bag_nty::kFlowerFieldNumber;
#endif  // !_MSC_VER

flower_bag_nty::flower_bag_nty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_bag_nty::InitAsDefaultInstance() {
  flower_ = const_cast< ::SProtoSpace::flower_info*>(&::SProtoSpace::flower_info::default_instance());
}

flower_bag_nty::flower_bag_nty(const flower_bag_nty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_bag_nty::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7050;
  flower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_bag_nty::~flower_bag_nty() {
  SharedDtor();
}

void flower_bag_nty::SharedDtor() {
  if (this != default_instance_) {
    delete flower_;
  }
}

void flower_bag_nty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_bag_nty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_bag_nty_descriptor_;
}

const flower_bag_nty& flower_bag_nty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_bag_nty* flower_bag_nty::default_instance_ = NULL;

flower_bag_nty* flower_bag_nty::New() const {
  return new flower_bag_nty;
}

void flower_bag_nty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7050;
    if (has_flower()) {
      if (flower_ != NULL) flower_->::SProtoSpace::flower_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_bag_nty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_nty_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flower;
        break;
      }

      // optional .SProtoSpace.flower_info flower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_bag_nty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_nty_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.flower_info flower = 2;
  if (has_flower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_bag_nty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_nty_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.flower_info flower = 2;
  if (has_flower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_bag_nty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_nty_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.flower_info flower = 2;
    if (has_flower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_bag_nty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_bag_nty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_bag_nty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_bag_nty::MergeFrom(const flower_bag_nty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_flower()) {
      mutable_flower()->::SProtoSpace::flower_info::MergeFrom(from.flower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_bag_nty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_bag_nty::CopyFrom(const flower_bag_nty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_bag_nty::IsInitialized() const {

  return true;
}

void flower_bag_nty::Swap(flower_bag_nty* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(flower_, other->flower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_bag_nty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_bag_nty_descriptor_;
  metadata.reflection = flower_bag_nty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_bag_all_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

flower_bag_all_req::flower_bag_all_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_bag_all_req::InitAsDefaultInstance() {
}

flower_bag_all_req::flower_bag_all_req(const flower_bag_all_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_bag_all_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7051;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_bag_all_req::~flower_bag_all_req() {
  SharedDtor();
}

void flower_bag_all_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flower_bag_all_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_bag_all_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_bag_all_req_descriptor_;
}

const flower_bag_all_req& flower_bag_all_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_bag_all_req* flower_bag_all_req::default_instance_ = NULL;

flower_bag_all_req* flower_bag_all_req::New() const {
  return new flower_bag_all_req;
}

void flower_bag_all_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7051;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_bag_all_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_bag_all_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_bag_all_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_bag_all_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_bag_all_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_bag_all_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_bag_all_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_bag_all_req::MergeFrom(const flower_bag_all_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_bag_all_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_bag_all_req::CopyFrom(const flower_bag_all_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_bag_all_req::IsInitialized() const {

  return true;
}

void flower_bag_all_req::Swap(flower_bag_all_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_bag_all_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_bag_all_req_descriptor_;
  metadata.reflection = flower_bag_all_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_bag_all_ack::kProtoidFieldNumber;
const int flower_bag_all_ack::kResultFieldNumber;
const int flower_bag_all_ack::kFlowerFieldNumber;
#endif  // !_MSC_VER

flower_bag_all_ack::flower_bag_all_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_bag_all_ack::InitAsDefaultInstance() {
}

flower_bag_all_ack::flower_bag_all_ack(const flower_bag_all_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_bag_all_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7052;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_bag_all_ack::~flower_bag_all_ack() {
  SharedDtor();
}

void flower_bag_all_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flower_bag_all_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_bag_all_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_bag_all_ack_descriptor_;
}

const flower_bag_all_ack& flower_bag_all_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_bag_all_ack* flower_bag_all_ack::default_instance_ = NULL;

flower_bag_all_ack* flower_bag_all_ack::New() const {
  return new flower_bag_all_ack;
}

void flower_bag_all_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7052;
    result_ = 0;
  }
  flower_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_bag_all_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_flower;
        break;
      }

      // repeated .SProtoSpace.flower_info flower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_flower;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_bag_all_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // repeated .SProtoSpace.flower_info flower = 3;
  for (int i = 0; i < this->flower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->flower(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_bag_all_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // repeated .SProtoSpace.flower_info flower = 3;
  for (int i = 0; i < this->flower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->flower(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_bag_all_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .SProtoSpace.flower_info flower = 3;
  total_size += 1 * this->flower_size();
  for (int i = 0; i < this->flower_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flower(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_bag_all_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_bag_all_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_bag_all_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_bag_all_ack::MergeFrom(const flower_bag_all_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  flower_.MergeFrom(from.flower_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_bag_all_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_bag_all_ack::CopyFrom(const flower_bag_all_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_bag_all_ack::IsInitialized() const {

  return true;
}

void flower_bag_all_ack::Swap(flower_bag_all_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    flower_.Swap(&other->flower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_bag_all_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_bag_all_ack_descriptor_;
  metadata.reflection = flower_bag_all_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_bag_all_nty::kProtoidFieldNumber;
const int flower_bag_all_nty::kFlowerFieldNumber;
#endif  // !_MSC_VER

flower_bag_all_nty::flower_bag_all_nty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_bag_all_nty::InitAsDefaultInstance() {
}

flower_bag_all_nty::flower_bag_all_nty(const flower_bag_all_nty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_bag_all_nty::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7056;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_bag_all_nty::~flower_bag_all_nty() {
  SharedDtor();
}

void flower_bag_all_nty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flower_bag_all_nty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_bag_all_nty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_bag_all_nty_descriptor_;
}

const flower_bag_all_nty& flower_bag_all_nty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_bag_all_nty* flower_bag_all_nty::default_instance_ = NULL;

flower_bag_all_nty* flower_bag_all_nty::New() const {
  return new flower_bag_all_nty;
}

void flower_bag_all_nty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7056;
  }
  flower_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_bag_all_nty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_nty_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flower;
        break;
      }

      // repeated .SProtoSpace.flower_info flower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_flower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_flower;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_bag_all_nty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_nty_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.flower_info flower = 2;
  for (int i = 0; i < this->flower_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->flower(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_bag_all_nty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_nty_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.flower_info flower = 2;
  for (int i = 0; i < this->flower_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->flower(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_bag_all_nty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_nty_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.flower_info flower = 2;
  total_size += 1 * this->flower_size();
  for (int i = 0; i < this->flower_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->flower(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_bag_all_nty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_bag_all_nty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_bag_all_nty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_bag_all_nty::MergeFrom(const flower_bag_all_nty& from) {
  GOOGLE_CHECK_NE(&from, this);
  flower_.MergeFrom(from.flower_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_bag_all_nty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_bag_all_nty::CopyFrom(const flower_bag_all_nty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_bag_all_nty::IsInitialized() const {

  return true;
}

void flower_bag_all_nty::Swap(flower_bag_all_nty* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    flower_.Swap(&other->flower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_bag_all_nty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_bag_all_nty_descriptor_;
  metadata.reflection = flower_bag_all_nty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_send_req::kProtoidFieldNumber;
const int flower_send_req::kSendInfoFieldNumber;
#endif  // !_MSC_VER

flower_send_req::flower_send_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_send_req::InitAsDefaultInstance() {
  send_info_ = const_cast< ::SProtoSpace::flower_send_info*>(&::SProtoSpace::flower_send_info::default_instance());
}

flower_send_req::flower_send_req(const flower_send_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_send_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7053;
  send_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_send_req::~flower_send_req() {
  SharedDtor();
}

void flower_send_req::SharedDtor() {
  if (this != default_instance_) {
    delete send_info_;
  }
}

void flower_send_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_send_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_send_req_descriptor_;
}

const flower_send_req& flower_send_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_send_req* flower_send_req::default_instance_ = NULL;

flower_send_req* flower_send_req::New() const {
  return new flower_send_req;
}

void flower_send_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7053;
    if (has_send_info()) {
      if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_send_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_send_info;
        break;
      }

      // optional .SProtoSpace.flower_send_info send_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_send_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.flower_send_info send_info = 2;
  if (has_send_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->send_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_send_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.flower_send_info send_info = 2;
  if (has_send_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->send_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_send_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.flower_send_info send_info = 2;
    if (has_send_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->send_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_send_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_send_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_send_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_send_req::MergeFrom(const flower_send_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_send_info()) {
      mutable_send_info()->::SProtoSpace::flower_send_info::MergeFrom(from.send_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_send_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_send_req::CopyFrom(const flower_send_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_send_req::IsInitialized() const {

  return true;
}

void flower_send_req::Swap(flower_send_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(send_info_, other->send_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_send_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_send_req_descriptor_;
  metadata.reflection = flower_send_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_send_ack::kProtoidFieldNumber;
const int flower_send_ack::kResultFieldNumber;
#endif  // !_MSC_VER

flower_send_ack::flower_send_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_send_ack::InitAsDefaultInstance() {
}

flower_send_ack::flower_send_ack(const flower_send_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_send_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7054;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_send_ack::~flower_send_ack() {
  SharedDtor();
}

void flower_send_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void flower_send_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_send_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_send_ack_descriptor_;
}

const flower_send_ack& flower_send_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_send_ack* flower_send_ack::default_instance_ = NULL;

flower_send_ack* flower_send_ack::New() const {
  return new flower_send_ack;
}

void flower_send_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7054;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_send_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_send_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_send_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 result = 2 [default = 0];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_send_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 result = 2 [default = 0];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_send_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_send_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_send_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_send_ack::MergeFrom(const flower_send_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_send_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_send_ack::CopyFrom(const flower_send_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_send_ack::IsInitialized() const {

  return true;
}

void flower_send_ack::Swap(flower_send_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_send_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_send_ack_descriptor_;
  metadata.reflection = flower_send_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int flower_receive_nty::kProtoidFieldNumber;
const int flower_receive_nty::kFromRoleIdFieldNumber;
const int flower_receive_nty::kSendFlowerTemplateIdFieldNumber;
const int flower_receive_nty::kSendFlowerNumFieldNumber;
const int flower_receive_nty::kRemarkFieldNumber;
#endif  // !_MSC_VER

flower_receive_nty::flower_receive_nty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void flower_receive_nty::InitAsDefaultInstance() {
}

flower_receive_nty::flower_receive_nty(const flower_receive_nty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void flower_receive_nty::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7055;
  from_role_id_ = GOOGLE_ULONGLONG(0);
  send_flower_template_id_ = 0;
  send_flower_num_ = 0;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

flower_receive_nty::~flower_receive_nty() {
  SharedDtor();
}

void flower_receive_nty::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void flower_receive_nty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* flower_receive_nty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flower_receive_nty_descriptor_;
}

const flower_receive_nty& flower_receive_nty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

flower_receive_nty* flower_receive_nty::default_instance_ = NULL;

flower_receive_nty* flower_receive_nty::New() const {
  return new flower_receive_nty;
}

void flower_receive_nty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7055;
    from_role_id_ = GOOGLE_ULONGLONG(0);
    send_flower_template_id_ = 0;
    send_flower_num_ = 0;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool flower_receive_nty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_receive_nty_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_role_id;
        break;
      }

      // optional uint64 from_role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_role_id_)));
          set_has_from_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_flower_template_id;
        break;
      }

      // optional int32 send_flower_template_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_flower_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_flower_template_id_)));
          set_has_send_flower_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_flower_num;
        break;
      }

      // optional int32 send_flower_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_flower_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_flower_num_)));
          set_has_send_flower_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_remark;
        break;
      }

      // optional string remark = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void flower_receive_nty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_receive_nty_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 from_role_id = 2;
  if (has_from_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->from_role_id(), output);
  }

  // optional int32 send_flower_template_id = 3;
  if (has_send_flower_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->send_flower_template_id(), output);
  }

  // optional int32 send_flower_num = 4;
  if (has_send_flower_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->send_flower_num(), output);
  }

  // optional string remark = 5;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* flower_receive_nty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_receive_nty_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 from_role_id = 2;
  if (has_from_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->from_role_id(), target);
  }

  // optional int32 send_flower_template_id = 3;
  if (has_send_flower_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->send_flower_template_id(), target);
  }

  // optional int32 send_flower_num = 4;
  if (has_send_flower_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->send_flower_num(), target);
  }

  // optional string remark = 5;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int flower_receive_nty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_receive_nty_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 from_role_id = 2;
    if (has_from_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->from_role_id());
    }

    // optional int32 send_flower_template_id = 3;
    if (has_send_flower_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_flower_template_id());
    }

    // optional int32 send_flower_num = 4;
    if (has_send_flower_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_flower_num());
    }

    // optional string remark = 5;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void flower_receive_nty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const flower_receive_nty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const flower_receive_nty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void flower_receive_nty::MergeFrom(const flower_receive_nty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_from_role_id()) {
      set_from_role_id(from.from_role_id());
    }
    if (from.has_send_flower_template_id()) {
      set_send_flower_template_id(from.send_flower_template_id());
    }
    if (from.has_send_flower_num()) {
      set_send_flower_num(from.send_flower_num());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void flower_receive_nty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flower_receive_nty::CopyFrom(const flower_receive_nty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flower_receive_nty::IsInitialized() const {

  return true;
}

void flower_receive_nty::Swap(flower_receive_nty* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(from_role_id_, other->from_role_id_);
    std::swap(send_flower_template_id_, other->send_flower_template_id_);
    std::swap(send_flower_num_, other->send_flower_num_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata flower_receive_nty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = flower_receive_nty_descriptor_;
  metadata.reflection = flower_receive_nty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_info::kDrawTypeIdFieldNumber;
const int role_draw_card_info::kNowRemainTimesFieldNumber;
const int role_draw_card_info::kRemainFreeTimesFieldNumber;
const int role_draw_card_info::kRemainLimitTimesFieldNumber;
const int role_draw_card_info::kNextAddTimeFieldNumber;
const int role_draw_card_info::kNextSpDropTimeFieldNumber;
#endif  // !_MSC_VER

role_draw_card_info::role_draw_card_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_info::InitAsDefaultInstance() {
}

role_draw_card_info::role_draw_card_info(const role_draw_card_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_info::SharedCtor() {
  _cached_size_ = 0;
  draw_type_id_ = 0;
  now_remain_times_ = 0;
  remain_free_times_ = 0;
  remain_limit_times_ = 0;
  next_add_time_ = 0u;
  next_sp_drop_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_info::~role_draw_card_info() {
  SharedDtor();
}

void role_draw_card_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_info_descriptor_;
}

const role_draw_card_info& role_draw_card_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_info* role_draw_card_info::default_instance_ = NULL;

role_draw_card_info* role_draw_card_info::New() const {
  return new role_draw_card_info;
}

void role_draw_card_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    draw_type_id_ = 0;
    now_remain_times_ = 0;
    remain_free_times_ = 0;
    remain_limit_times_ = 0;
    next_add_time_ = 0u;
    next_sp_drop_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 draw_type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_id_)));
          set_has_draw_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_now_remain_times;
        break;
      }

      // optional int32 now_remain_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_now_remain_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_remain_times_)));
          set_has_now_remain_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remain_free_times;
        break;
      }

      // optional int32 remain_free_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_free_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_free_times_)));
          set_has_remain_free_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_limit_times;
        break;
      }

      // optional int32 remain_limit_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_limit_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_limit_times_)));
          set_has_remain_limit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_next_add_time;
        break;
      }

      // optional uint32 next_add_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_add_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_add_time_)));
          set_has_next_add_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_next_sp_drop_time;
        break;
      }

      // optional int32 next_sp_drop_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_sp_drop_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_sp_drop_time_)));
          set_has_next_sp_drop_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 draw_type_id = 1;
  if (has_draw_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->draw_type_id(), output);
  }

  // optional int32 now_remain_times = 2;
  if (has_now_remain_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->now_remain_times(), output);
  }

  // optional int32 remain_free_times = 3;
  if (has_remain_free_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remain_free_times(), output);
  }

  // optional int32 remain_limit_times = 4;
  if (has_remain_limit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remain_limit_times(), output);
  }

  // optional uint32 next_add_time = 5;
  if (has_next_add_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->next_add_time(), output);
  }

  // optional int32 next_sp_drop_time = 6;
  if (has_next_sp_drop_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->next_sp_drop_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 draw_type_id = 1;
  if (has_draw_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->draw_type_id(), target);
  }

  // optional int32 now_remain_times = 2;
  if (has_now_remain_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->now_remain_times(), target);
  }

  // optional int32 remain_free_times = 3;
  if (has_remain_free_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remain_free_times(), target);
  }

  // optional int32 remain_limit_times = 4;
  if (has_remain_limit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remain_limit_times(), target);
  }

  // optional uint32 next_add_time = 5;
  if (has_next_add_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->next_add_time(), target);
  }

  // optional int32 next_sp_drop_time = 6;
  if (has_next_sp_drop_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->next_sp_drop_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 draw_type_id = 1;
    if (has_draw_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type_id());
    }

    // optional int32 now_remain_times = 2;
    if (has_now_remain_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_remain_times());
    }

    // optional int32 remain_free_times = 3;
    if (has_remain_free_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_free_times());
    }

    // optional int32 remain_limit_times = 4;
    if (has_remain_limit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_limit_times());
    }

    // optional uint32 next_add_time = 5;
    if (has_next_add_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->next_add_time());
    }

    // optional int32 next_sp_drop_time = 6;
    if (has_next_sp_drop_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next_sp_drop_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_info::MergeFrom(const role_draw_card_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draw_type_id()) {
      set_draw_type_id(from.draw_type_id());
    }
    if (from.has_now_remain_times()) {
      set_now_remain_times(from.now_remain_times());
    }
    if (from.has_remain_free_times()) {
      set_remain_free_times(from.remain_free_times());
    }
    if (from.has_remain_limit_times()) {
      set_remain_limit_times(from.remain_limit_times());
    }
    if (from.has_next_add_time()) {
      set_next_add_time(from.next_add_time());
    }
    if (from.has_next_sp_drop_time()) {
      set_next_sp_drop_time(from.next_sp_drop_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_info::CopyFrom(const role_draw_card_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_info::IsInitialized() const {

  return true;
}

void role_draw_card_info::Swap(role_draw_card_info* other) {
  if (other != this) {
    std::swap(draw_type_id_, other->draw_type_id_);
    std::swap(now_remain_times_, other->now_remain_times_);
    std::swap(remain_free_times_, other->remain_free_times_);
    std::swap(remain_limit_times_, other->remain_limit_times_);
    std::swap(next_add_time_, other->next_add_time_);
    std::swap(next_sp_drop_time_, other->next_sp_drop_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_info_descriptor_;
  metadata.reflection = role_draw_card_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_reward_item::kIdFieldNumber;
const int role_draw_card_reward_item::kCountFieldNumber;
#endif  // !_MSC_VER

role_draw_card_reward_item::role_draw_card_reward_item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_reward_item::InitAsDefaultInstance() {
}

role_draw_card_reward_item::role_draw_card_reward_item(const role_draw_card_reward_item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_reward_item::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_reward_item::~role_draw_card_reward_item() {
  SharedDtor();
}

void role_draw_card_reward_item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_reward_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_reward_item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_reward_item_descriptor_;
}

const role_draw_card_reward_item& role_draw_card_reward_item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_reward_item* role_draw_card_reward_item::default_instance_ = NULL;

role_draw_card_reward_item* role_draw_card_reward_item::New() const {
  return new role_draw_card_reward_item;
}

void role_draw_card_reward_item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_reward_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_reward_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_reward_item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_reward_item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_reward_item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_reward_item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_reward_item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_reward_item::MergeFrom(const role_draw_card_reward_item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_reward_item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_reward_item::CopyFrom(const role_draw_card_reward_item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_reward_item::IsInitialized() const {

  return true;
}

void role_draw_card_reward_item::Swap(role_draw_card_reward_item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_reward_item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_reward_item_descriptor_;
  metadata.reflection = role_draw_card_reward_item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_rewards::kCountFieldNumber;
const int role_draw_card_rewards::kRandomResultsFieldNumber;
const int role_draw_card_rewards::kRealResultsFieldNumber;
#endif  // !_MSC_VER

role_draw_card_rewards::role_draw_card_rewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_rewards::InitAsDefaultInstance() {
}

role_draw_card_rewards::role_draw_card_rewards(const role_draw_card_rewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_rewards::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_rewards::~role_draw_card_rewards() {
  SharedDtor();
}

void role_draw_card_rewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_rewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_rewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_rewards_descriptor_;
}

const role_draw_card_rewards& role_draw_card_rewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_rewards* role_draw_card_rewards::default_instance_ = NULL;

role_draw_card_rewards* role_draw_card_rewards::New() const {
  return new role_draw_card_rewards;
}

void role_draw_card_rewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
  }
  random_results_.Clear();
  real_results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_rewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_random_results;
        break;
      }

      // repeated .SProtoSpace.role_draw_card_reward_item random_results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_random_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_random_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_random_results;
        if (input->ExpectTag(26)) goto parse_real_results;
        break;
      }

      // repeated .SProtoSpace.role_draw_card_reward_item real_results = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_real_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_real_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_rewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .SProtoSpace.role_draw_card_reward_item random_results = 2;
  for (int i = 0; i < this->random_results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->random_results(i), output);
  }

  // repeated .SProtoSpace.role_draw_card_reward_item real_results = 3;
  for (int i = 0; i < this->real_results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->real_results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_rewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .SProtoSpace.role_draw_card_reward_item random_results = 2;
  for (int i = 0; i < this->random_results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->random_results(i), target);
  }

  // repeated .SProtoSpace.role_draw_card_reward_item real_results = 3;
  for (int i = 0; i < this->real_results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->real_results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_rewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .SProtoSpace.role_draw_card_reward_item random_results = 2;
  total_size += 1 * this->random_results_size();
  for (int i = 0; i < this->random_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->random_results(i));
  }

  // repeated .SProtoSpace.role_draw_card_reward_item real_results = 3;
  total_size += 1 * this->real_results_size();
  for (int i = 0; i < this->real_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->real_results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_rewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_rewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_rewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_rewards::MergeFrom(const role_draw_card_rewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  random_results_.MergeFrom(from.random_results_);
  real_results_.MergeFrom(from.real_results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_rewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_rewards::CopyFrom(const role_draw_card_rewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_rewards::IsInitialized() const {

  return true;
}

void role_draw_card_rewards::Swap(role_draw_card_rewards* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    random_results_.Swap(&other->random_results_);
    real_results_.Swap(&other->real_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_rewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_rewards_descriptor_;
  metadata.reflection = role_draw_card_rewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_info_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

role_draw_card_info_req::role_draw_card_info_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_info_req::InitAsDefaultInstance() {
}

role_draw_card_info_req::role_draw_card_info_req(const role_draw_card_info_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_info_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7015;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_info_req::~role_draw_card_info_req() {
  SharedDtor();
}

void role_draw_card_info_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_info_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_info_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_info_req_descriptor_;
}

const role_draw_card_info_req& role_draw_card_info_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_info_req* role_draw_card_info_req::default_instance_ = NULL;

role_draw_card_info_req* role_draw_card_info_req::New() const {
  return new role_draw_card_info_req;
}

void role_draw_card_info_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7015;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_info_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_info_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_info_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_info_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_info_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_info_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_info_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_info_req::MergeFrom(const role_draw_card_info_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_info_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_info_req::CopyFrom(const role_draw_card_info_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_info_req::IsInitialized() const {

  return true;
}

void role_draw_card_info_req::Swap(role_draw_card_info_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_info_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_info_req_descriptor_;
  metadata.reflection = role_draw_card_info_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_info_ack::kProtoidFieldNumber;
const int role_draw_card_info_ack::kListsFieldNumber;
#endif  // !_MSC_VER

role_draw_card_info_ack::role_draw_card_info_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_info_ack::InitAsDefaultInstance() {
}

role_draw_card_info_ack::role_draw_card_info_ack(const role_draw_card_info_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_info_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7016;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_info_ack::~role_draw_card_info_ack() {
  SharedDtor();
}

void role_draw_card_info_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_info_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_info_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_info_ack_descriptor_;
}

const role_draw_card_info_ack& role_draw_card_info_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_info_ack* role_draw_card_info_ack::default_instance_ = NULL;

role_draw_card_info_ack* role_draw_card_info_ack::New() const {
  return new role_draw_card_info_ack;
}

void role_draw_card_info_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7016;
  }
  lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_info_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lists;
        break;
      }

      // repeated .SProtoSpace.role_draw_card_info lists = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lists;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_info_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.role_draw_card_info lists = 2;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_info_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.role_draw_card_info lists = 2;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_info_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.role_draw_card_info lists = 2;
  total_size += 1 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_info_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_info_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_info_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_info_ack::MergeFrom(const role_draw_card_info_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  lists_.MergeFrom(from.lists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_info_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_info_ack::CopyFrom(const role_draw_card_info_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_info_ack::IsInitialized() const {

  return true;
}

void role_draw_card_info_ack::Swap(role_draw_card_info_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    lists_.Swap(&other->lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_info_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_info_ack_descriptor_;
  metadata.reflection = role_draw_card_info_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_req::kProtoidFieldNumber;
const int role_draw_card_req::kDrawTypeIdFieldNumber;
const int role_draw_card_req::kNeedCoinTypeFieldNumber;
#endif  // !_MSC_VER

role_draw_card_req::role_draw_card_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_req::InitAsDefaultInstance() {
}

role_draw_card_req::role_draw_card_req(const role_draw_card_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7017;
  draw_type_id_ = 0;
  need_coin_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_req::~role_draw_card_req() {
  SharedDtor();
}

void role_draw_card_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_req_descriptor_;
}

const role_draw_card_req& role_draw_card_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_req* role_draw_card_req::default_instance_ = NULL;

role_draw_card_req* role_draw_card_req::New() const {
  return new role_draw_card_req;
}

void role_draw_card_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7017;
    draw_type_id_ = 0;
    need_coin_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draw_type_id;
        break;
      }

      // optional int32 draw_type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_id_)));
          set_has_draw_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_coin_type;
        break;
      }

      // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eDrawCardCoinType_IsValid(value)) {
            set_need_coin_type(static_cast< ::SProtoSpace::eDrawCardCoinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 draw_type_id = 2;
  if (has_draw_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->draw_type_id(), output);
  }

  // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
  if (has_need_coin_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->need_coin_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 draw_type_id = 2;
  if (has_draw_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->draw_type_id(), target);
  }

  // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
  if (has_need_coin_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->need_coin_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 draw_type_id = 2;
    if (has_draw_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type_id());
    }

    // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
    if (has_need_coin_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->need_coin_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_req::MergeFrom(const role_draw_card_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_draw_type_id()) {
      set_draw_type_id(from.draw_type_id());
    }
    if (from.has_need_coin_type()) {
      set_need_coin_type(from.need_coin_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_req::CopyFrom(const role_draw_card_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_req::IsInitialized() const {

  return true;
}

void role_draw_card_req::Swap(role_draw_card_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(draw_type_id_, other->draw_type_id_);
    std::swap(need_coin_type_, other->need_coin_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_req_descriptor_;
  metadata.reflection = role_draw_card_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_ack::kProtoidFieldNumber;
const int role_draw_card_ack::kDrawTypeIdFieldNumber;
const int role_draw_card_ack::kNeedCoinTypeFieldNumber;
const int role_draw_card_ack::kResultsFieldNumber;
const int role_draw_card_ack::kListsFieldNumber;
const int role_draw_card_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

role_draw_card_ack::role_draw_card_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_ack::InitAsDefaultInstance() {
}

role_draw_card_ack::role_draw_card_ack(const role_draw_card_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7018;
  draw_type_id_ = 0;
  need_coin_type_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_ack::~role_draw_card_ack() {
  SharedDtor();
}

void role_draw_card_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_ack_descriptor_;
}

const role_draw_card_ack& role_draw_card_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_ack* role_draw_card_ack::default_instance_ = NULL;

role_draw_card_ack* role_draw_card_ack::New() const {
  return new role_draw_card_ack;
}

void role_draw_card_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7018;
    draw_type_id_ = 0;
    need_coin_type_ = 0;
    error_code_ = 0;
  }
  results_.Clear();
  lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_draw_type_id;
        break;
      }

      // optional int32 draw_type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_draw_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_type_id_)));
          set_has_draw_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_coin_type;
        break;
      }

      // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_coin_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eDrawCardCoinType_IsValid(value)) {
            set_need_coin_type(static_cast< ::SProtoSpace::eDrawCardCoinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_results;
        break;
      }

      // repeated .SProtoSpace.role_draw_card_rewards results = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_results;
        if (input->ExpectTag(42)) goto parse_lists;
        break;
      }

      // repeated .SProtoSpace.role_draw_card_info lists = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lists()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lists;
        if (input->ExpectTag(48)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 draw_type_id = 2;
  if (has_draw_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->draw_type_id(), output);
  }

  // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
  if (has_need_coin_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->need_coin_type(), output);
  }

  // repeated .SProtoSpace.role_draw_card_rewards results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(i), output);
  }

  // repeated .SProtoSpace.role_draw_card_info lists = 5;
  for (int i = 0; i < this->lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lists(i), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 6;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 draw_type_id = 2;
  if (has_draw_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->draw_type_id(), target);
  }

  // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
  if (has_need_coin_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->need_coin_type(), target);
  }

  // repeated .SProtoSpace.role_draw_card_rewards results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->results(i), target);
  }

  // repeated .SProtoSpace.role_draw_card_info lists = 5;
  for (int i = 0; i < this->lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lists(i), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 6;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 draw_type_id = 2;
    if (has_draw_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_type_id());
    }

    // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
    if (has_need_coin_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->need_coin_type());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 6;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  // repeated .SProtoSpace.role_draw_card_rewards results = 4;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  // repeated .SProtoSpace.role_draw_card_info lists = 5;
  total_size += 1 * this->lists_size();
  for (int i = 0; i < this->lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_ack::MergeFrom(const role_draw_card_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  lists_.MergeFrom(from.lists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_draw_type_id()) {
      set_draw_type_id(from.draw_type_id());
    }
    if (from.has_need_coin_type()) {
      set_need_coin_type(from.need_coin_type());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_ack::CopyFrom(const role_draw_card_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_ack::IsInitialized() const {

  return true;
}

void role_draw_card_ack::Swap(role_draw_card_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(draw_type_id_, other->draw_type_id_);
    std::swap(need_coin_type_, other->need_coin_type_);
    results_.Swap(&other->results_);
    lists_.Swap(&other->lists_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_ack_descriptor_;
  metadata.reflection = role_draw_card_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_ssr_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

role_draw_card_ssr_req::role_draw_card_ssr_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_ssr_req::InitAsDefaultInstance() {
}

role_draw_card_ssr_req::role_draw_card_ssr_req(const role_draw_card_ssr_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_ssr_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7019;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_ssr_req::~role_draw_card_ssr_req() {
  SharedDtor();
}

void role_draw_card_ssr_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_ssr_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_ssr_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_ssr_req_descriptor_;
}

const role_draw_card_ssr_req& role_draw_card_ssr_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_ssr_req* role_draw_card_ssr_req::default_instance_ = NULL;

role_draw_card_ssr_req* role_draw_card_ssr_req::New() const {
  return new role_draw_card_ssr_req;
}

void role_draw_card_ssr_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7019;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_ssr_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_ssr_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_ssr_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_ssr_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_ssr_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_ssr_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_ssr_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_ssr_req::MergeFrom(const role_draw_card_ssr_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_ssr_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_ssr_req::CopyFrom(const role_draw_card_ssr_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_ssr_req::IsInitialized() const {

  return true;
}

void role_draw_card_ssr_req::Swap(role_draw_card_ssr_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_ssr_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_ssr_req_descriptor_;
  metadata.reflection = role_draw_card_ssr_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_ssr_ack_one::kRoleIdFieldNumber;
const int role_draw_card_ssr_ack_one::kItemIdFieldNumber;
#endif  // !_MSC_VER

role_draw_card_ssr_ack_one::role_draw_card_ssr_ack_one()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_ssr_ack_one::InitAsDefaultInstance() {
}

role_draw_card_ssr_ack_one::role_draw_card_ssr_ack_one(const role_draw_card_ssr_ack_one& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_ssr_ack_one::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_ssr_ack_one::~role_draw_card_ssr_ack_one() {
  SharedDtor();
}

void role_draw_card_ssr_ack_one::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_ssr_ack_one::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_ssr_ack_one::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_ssr_ack_one_descriptor_;
}

const role_draw_card_ssr_ack_one& role_draw_card_ssr_ack_one::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_ssr_ack_one* role_draw_card_ssr_ack_one::default_instance_ = NULL;

role_draw_card_ssr_ack_one* role_draw_card_ssr_ack_one::New() const {
  return new role_draw_card_ssr_ack_one;
}

void role_draw_card_ssr_ack_one::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = GOOGLE_ULONGLONG(0);
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_ssr_ack_one::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_ssr_ack_one::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->role_id(), output);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_ssr_ack_one::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->role_id(), target);
  }

  // optional int32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_ssr_ack_one::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional int32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_ssr_ack_one::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_ssr_ack_one* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_ssr_ack_one*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_ssr_ack_one::MergeFrom(const role_draw_card_ssr_ack_one& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_ssr_ack_one::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_ssr_ack_one::CopyFrom(const role_draw_card_ssr_ack_one& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_ssr_ack_one::IsInitialized() const {

  return true;
}

void role_draw_card_ssr_ack_one::Swap(role_draw_card_ssr_ack_one* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_ssr_ack_one::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_ssr_ack_one_descriptor_;
  metadata.reflection = role_draw_card_ssr_ack_one_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_draw_card_ssr_ack::kProtoidFieldNumber;
const int role_draw_card_ssr_ack::kResultsFieldNumber;
#endif  // !_MSC_VER

role_draw_card_ssr_ack::role_draw_card_ssr_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_draw_card_ssr_ack::InitAsDefaultInstance() {
}

role_draw_card_ssr_ack::role_draw_card_ssr_ack(const role_draw_card_ssr_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_draw_card_ssr_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7020;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_draw_card_ssr_ack::~role_draw_card_ssr_ack() {
  SharedDtor();
}

void role_draw_card_ssr_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_draw_card_ssr_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_draw_card_ssr_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_draw_card_ssr_ack_descriptor_;
}

const role_draw_card_ssr_ack& role_draw_card_ssr_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_draw_card_ssr_ack* role_draw_card_ssr_ack::default_instance_ = NULL;

role_draw_card_ssr_ack* role_draw_card_ssr_ack::New() const {
  return new role_draw_card_ssr_ack;
}

void role_draw_card_ssr_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7020;
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_draw_card_ssr_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        break;
      }

      // repeated .SProtoSpace.role_draw_card_ssr_ack_one results = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_draw_card_ssr_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.role_draw_card_ssr_ack_one results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_draw_card_ssr_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.role_draw_card_ssr_ack_one results = 2;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_draw_card_ssr_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.role_draw_card_ssr_ack_one results = 2;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_draw_card_ssr_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_draw_card_ssr_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_draw_card_ssr_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_draw_card_ssr_ack::MergeFrom(const role_draw_card_ssr_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_draw_card_ssr_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_draw_card_ssr_ack::CopyFrom(const role_draw_card_ssr_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_draw_card_ssr_ack::IsInitialized() const {

  return true;
}

void role_draw_card_ssr_ack::Swap(role_draw_card_ssr_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_draw_card_ssr_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_draw_card_ssr_ack_descriptor_;
  metadata.reflection = role_draw_card_ssr_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_talent_activate_req::kProtoidFieldNumber;
const int role_talent_activate_req::kIdFieldNumber;
#endif  // !_MSC_VER

role_talent_activate_req::role_talent_activate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_talent_activate_req::InitAsDefaultInstance() {
}

role_talent_activate_req::role_talent_activate_req(const role_talent_activate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_talent_activate_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7200;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_talent_activate_req::~role_talent_activate_req() {
  SharedDtor();
}

void role_talent_activate_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_talent_activate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_talent_activate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_talent_activate_req_descriptor_;
}

const role_talent_activate_req& role_talent_activate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_talent_activate_req* role_talent_activate_req::default_instance_ = NULL;

role_talent_activate_req* role_talent_activate_req::New() const {
  return new role_talent_activate_req;
}

void role_talent_activate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7200;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_talent_activate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_talent_activate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_talent_activate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_talent_activate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_talent_activate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_talent_activate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_talent_activate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_talent_activate_req::MergeFrom(const role_talent_activate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_talent_activate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_talent_activate_req::CopyFrom(const role_talent_activate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_talent_activate_req::IsInitialized() const {

  return true;
}

void role_talent_activate_req::Swap(role_talent_activate_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_talent_activate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_talent_activate_req_descriptor_;
  metadata.reflection = role_talent_activate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_talent_activate_ack::kProtoidFieldNumber;
const int role_talent_activate_ack::kIdFieldNumber;
const int role_talent_activate_ack::kRetFieldNumber;
#endif  // !_MSC_VER

role_talent_activate_ack::role_talent_activate_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_talent_activate_ack::InitAsDefaultInstance() {
}

role_talent_activate_ack::role_talent_activate_ack(const role_talent_activate_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_talent_activate_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7201;
  id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_talent_activate_ack::~role_talent_activate_ack() {
  SharedDtor();
}

void role_talent_activate_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_talent_activate_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_talent_activate_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_talent_activate_ack_descriptor_;
}

const role_talent_activate_ack& role_talent_activate_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_talent_activate_ack* role_talent_activate_ack::default_instance_ = NULL;

role_talent_activate_ack* role_talent_activate_ack::New() const {
  return new role_talent_activate_ack;
}

void role_talent_activate_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7201;
    id_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_talent_activate_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_talent_activate_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_talent_activate_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_talent_activate_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_talent_activate_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_talent_activate_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_talent_activate_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_talent_activate_ack::MergeFrom(const role_talent_activate_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_talent_activate_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_talent_activate_ack::CopyFrom(const role_talent_activate_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_talent_activate_ack::IsInitialized() const {

  return true;
}

void role_talent_activate_ack::Swap(role_talent_activate_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(id_, other->id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_talent_activate_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_talent_activate_ack_descriptor_;
  metadata.reflection = role_talent_activate_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_role_talents_activate_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

all_role_talents_activate_req::all_role_talents_activate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_role_talents_activate_req::InitAsDefaultInstance() {
}

all_role_talents_activate_req::all_role_talents_activate_req(const all_role_talents_activate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_role_talents_activate_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7202;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_role_talents_activate_req::~all_role_talents_activate_req() {
  SharedDtor();
}

void all_role_talents_activate_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_role_talents_activate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_role_talents_activate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_role_talents_activate_req_descriptor_;
}

const all_role_talents_activate_req& all_role_talents_activate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

all_role_talents_activate_req* all_role_talents_activate_req::default_instance_ = NULL;

all_role_talents_activate_req* all_role_talents_activate_req::New() const {
  return new all_role_talents_activate_req;
}

void all_role_talents_activate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7202;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_role_talents_activate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_role_talents_activate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_role_talents_activate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_role_talents_activate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_role_talents_activate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_role_talents_activate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_role_talents_activate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_role_talents_activate_req::MergeFrom(const all_role_talents_activate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_role_talents_activate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_role_talents_activate_req::CopyFrom(const all_role_talents_activate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_role_talents_activate_req::IsInitialized() const {

  return true;
}

void all_role_talents_activate_req::Swap(all_role_talents_activate_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_role_talents_activate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_role_talents_activate_req_descriptor_;
  metadata.reflection = all_role_talents_activate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_role_talents_activate_ack::kProtoidFieldNumber;
const int all_role_talents_activate_ack::kIdListFieldNumber;
const int all_role_talents_activate_ack::kRetFieldNumber;
#endif  // !_MSC_VER

all_role_talents_activate_ack::all_role_talents_activate_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_role_talents_activate_ack::InitAsDefaultInstance() {
}

all_role_talents_activate_ack::all_role_talents_activate_ack(const all_role_talents_activate_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_role_talents_activate_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7203;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_role_talents_activate_ack::~all_role_talents_activate_ack() {
  SharedDtor();
}

void all_role_talents_activate_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_role_talents_activate_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_role_talents_activate_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_role_talents_activate_ack_descriptor_;
}

const all_role_talents_activate_ack& all_role_talents_activate_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

all_role_talents_activate_ack* all_role_talents_activate_ack::default_instance_ = NULL;

all_role_talents_activate_ack* all_role_talents_activate_ack::New() const {
  return new all_role_talents_activate_ack;
}

void all_role_talents_activate_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7203;
    ret_ = 0;
  }
  id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_role_talents_activate_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_list;
        break;
      }

      // repeated int32 id_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_list;
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_role_talents_activate_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 id_list = 2;
  for (int i = 0; i < this->id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id_list(i), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_role_talents_activate_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 id_list = 2;
  for (int i = 0; i < this->id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id_list(i), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_role_talents_activate_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 id_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_list(i));
    }
    total_size += 1 * this->id_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_role_talents_activate_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_role_talents_activate_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_role_talents_activate_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_role_talents_activate_ack::MergeFrom(const all_role_talents_activate_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_list_.MergeFrom(from.id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_role_talents_activate_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_role_talents_activate_ack::CopyFrom(const all_role_talents_activate_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_role_talents_activate_ack::IsInitialized() const {

  return true;
}

void all_role_talents_activate_ack::Swap(all_role_talents_activate_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    id_list_.Swap(&other->id_list_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_role_talents_activate_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_role_talents_activate_ack_descriptor_;
  metadata.reflection = all_role_talents_activate_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int switch_role_skill_req::kProtoidFieldNumber;
const int switch_role_skill_req::kSkillIdFieldNumber;
#endif  // !_MSC_VER

switch_role_skill_req::switch_role_skill_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void switch_role_skill_req::InitAsDefaultInstance() {
}

switch_role_skill_req::switch_role_skill_req(const switch_role_skill_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void switch_role_skill_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7204;
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

switch_role_skill_req::~switch_role_skill_req() {
  SharedDtor();
}

void switch_role_skill_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void switch_role_skill_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* switch_role_skill_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return switch_role_skill_req_descriptor_;
}

const switch_role_skill_req& switch_role_skill_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

switch_role_skill_req* switch_role_skill_req::default_instance_ = NULL;

switch_role_skill_req* switch_role_skill_req::New() const {
  return new switch_role_skill_req;
}

void switch_role_skill_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7204;
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool switch_role_skill_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void switch_role_skill_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* switch_role_skill_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int switch_role_skill_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void switch_role_skill_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const switch_role_skill_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const switch_role_skill_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void switch_role_skill_req::MergeFrom(const switch_role_skill_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void switch_role_skill_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void switch_role_skill_req::CopyFrom(const switch_role_skill_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool switch_role_skill_req::IsInitialized() const {

  return true;
}

void switch_role_skill_req::Swap(switch_role_skill_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata switch_role_skill_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = switch_role_skill_req_descriptor_;
  metadata.reflection = switch_role_skill_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int switch_role_skill_ack::kProtoidFieldNumber;
const int switch_role_skill_ack::kSkillIdFieldNumber;
const int switch_role_skill_ack::kRetFieldNumber;
#endif  // !_MSC_VER

switch_role_skill_ack::switch_role_skill_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void switch_role_skill_ack::InitAsDefaultInstance() {
}

switch_role_skill_ack::switch_role_skill_ack(const switch_role_skill_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void switch_role_skill_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7205;
  skill_id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

switch_role_skill_ack::~switch_role_skill_ack() {
  SharedDtor();
}

void switch_role_skill_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void switch_role_skill_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* switch_role_skill_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return switch_role_skill_ack_descriptor_;
}

const switch_role_skill_ack& switch_role_skill_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

switch_role_skill_ack* switch_role_skill_ack::default_instance_ = NULL;

switch_role_skill_ack* switch_role_skill_ack::New() const {
  return new switch_role_skill_ack;
}

void switch_role_skill_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7205;
    skill_id_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool switch_role_skill_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void switch_role_skill_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_id(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* switch_role_skill_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 skill_id = 2;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_id(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int switch_role_skill_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 skill_id = 2;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void switch_role_skill_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const switch_role_skill_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const switch_role_skill_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void switch_role_skill_ack::MergeFrom(const switch_role_skill_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void switch_role_skill_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void switch_role_skill_ack::CopyFrom(const switch_role_skill_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool switch_role_skill_ack::IsInitialized() const {

  return true;
}

void switch_role_skill_ack::Swap(switch_role_skill_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata switch_role_skill_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = switch_role_skill_ack_descriptor_;
  metadata.reflection = switch_role_skill_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_use_req::kProtoidFieldNumber;
const int talisman_use_req::kDestFieldNumber;
const int talisman_use_req::kTalismanUuidFieldNumber;
const int talisman_use_req::kHeroUuidFieldNumber;
const int talisman_use_req::kUseSlotFieldNumber;
#endif  // !_MSC_VER

talisman_use_req::talisman_use_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_use_req::InitAsDefaultInstance() {
}

talisman_use_req::talisman_use_req(const talisman_use_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_use_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7350;
  dest_ = 0;
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  use_slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_use_req::~talisman_use_req() {
  SharedDtor();
}

void talisman_use_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_use_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_use_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_use_req_descriptor_;
}

const talisman_use_req& talisman_use_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_use_req* talisman_use_req::default_instance_ = NULL;

talisman_use_req* talisman_use_req::New() const {
  return new talisman_use_req;
}

void talisman_use_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7350;
    dest_ = 0;
    talisman_uuid_ = GOOGLE_ULONGLONG(0);
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    use_slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_use_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_talisman_uuid;
        break;
      }

      // optional uint64 talisman_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talisman_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talisman_uuid_)));
          set_has_talisman_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_slot;
        break;
      }

      // optional .SProtoSpace.EHeroTalismanSlot use_slot = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroTalismanSlot_IsValid(value)) {
            set_use_slot(static_cast< ::SProtoSpace::EHeroTalismanSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_use_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dest(), output);
  }

  // optional uint64 talisman_uuid = 3;
  if (has_talisman_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->talisman_uuid(), output);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_uuid(), output);
  }

  // optional .SProtoSpace.EHeroTalismanSlot use_slot = 5;
  if (has_use_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->use_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_use_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dest(), target);
  }

  // optional uint64 talisman_uuid = 3;
  if (has_talisman_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->talisman_uuid(), target);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_uuid(), target);
  }

  // optional .SProtoSpace.EHeroTalismanSlot use_slot = 5;
  if (has_use_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->use_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_use_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 talisman_uuid = 3;
    if (has_talisman_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talisman_uuid());
    }

    // optional uint64 hero_uuid = 4;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional .SProtoSpace.EHeroTalismanSlot use_slot = 5;
    if (has_use_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->use_slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_use_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_use_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_use_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_use_req::MergeFrom(const talisman_use_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_talisman_uuid()) {
      set_talisman_uuid(from.talisman_uuid());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_use_slot()) {
      set_use_slot(from.use_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_use_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_use_req::CopyFrom(const talisman_use_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_use_req::IsInitialized() const {

  return true;
}

void talisman_use_req::Swap(talisman_use_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(dest_, other->dest_);
    std::swap(talisman_uuid_, other->talisman_uuid_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(use_slot_, other->use_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_use_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_use_req_descriptor_;
  metadata.reflection = talisman_use_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_use_ack::kProtoidFieldNumber;
const int talisman_use_ack::kRetFieldNumber;
const int talisman_use_ack::kDestFieldNumber;
const int talisman_use_ack::kTalismanUuidFieldNumber;
const int talisman_use_ack::kHeroUuidFieldNumber;
const int talisman_use_ack::kUseSlotFieldNumber;
#endif  // !_MSC_VER

talisman_use_ack::talisman_use_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_use_ack::InitAsDefaultInstance() {
}

talisman_use_ack::talisman_use_ack(const talisman_use_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_use_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7351;
  ret_ = 0;
  dest_ = 0;
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  use_slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_use_ack::~talisman_use_ack() {
  SharedDtor();
}

void talisman_use_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_use_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_use_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_use_ack_descriptor_;
}

const talisman_use_ack& talisman_use_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_use_ack* talisman_use_ack::default_instance_ = NULL;

talisman_use_ack* talisman_use_ack::New() const {
  return new talisman_use_ack;
}

void talisman_use_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7351;
    ret_ = 0;
    dest_ = 0;
    talisman_uuid_ = GOOGLE_ULONGLONG(0);
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    use_slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_use_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_talisman_uuid;
        break;
      }

      // optional uint64 talisman_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talisman_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talisman_uuid_)));
          set_has_talisman_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_slot;
        break;
      }

      // optional .SProtoSpace.EHeroTalismanSlot use_slot = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroTalismanSlot_IsValid(value)) {
            set_use_slot(static_cast< ::SProtoSpace::EHeroTalismanSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_use_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dest(), output);
  }

  // optional uint64 talisman_uuid = 4;
  if (has_talisman_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->talisman_uuid(), output);
  }

  // optional uint64 hero_uuid = 5;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hero_uuid(), output);
  }

  // optional .SProtoSpace.EHeroTalismanSlot use_slot = 6;
  if (has_use_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->use_slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_use_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dest(), target);
  }

  // optional uint64 talisman_uuid = 4;
  if (has_talisman_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->talisman_uuid(), target);
  }

  // optional uint64 hero_uuid = 5;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hero_uuid(), target);
  }

  // optional .SProtoSpace.EHeroTalismanSlot use_slot = 6;
  if (has_use_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->use_slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_use_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 3;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 talisman_uuid = 4;
    if (has_talisman_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talisman_uuid());
    }

    // optional uint64 hero_uuid = 5;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional .SProtoSpace.EHeroTalismanSlot use_slot = 6;
    if (has_use_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->use_slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_use_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_use_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_use_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_use_ack::MergeFrom(const talisman_use_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_talisman_uuid()) {
      set_talisman_uuid(from.talisman_uuid());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_use_slot()) {
      set_use_slot(from.use_slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_use_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_use_ack::CopyFrom(const talisman_use_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_use_ack::IsInitialized() const {

  return true;
}

void talisman_use_ack::Swap(talisman_use_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(dest_, other->dest_);
    std::swap(talisman_uuid_, other->talisman_uuid_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(use_slot_, other->use_slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_use_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_use_ack_descriptor_;
  metadata.reflection = talisman_use_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_un_use_req::kProtoidFieldNumber;
const int talisman_un_use_req::kDestFieldNumber;
const int talisman_un_use_req::kUnUseSlotFieldNumber;
const int talisman_un_use_req::kHeroUuidFieldNumber;
#endif  // !_MSC_VER

talisman_un_use_req::talisman_un_use_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_un_use_req::InitAsDefaultInstance() {
}

talisman_un_use_req::talisman_un_use_req(const talisman_un_use_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_un_use_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7352;
  dest_ = 0;
  un_use_slot_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_un_use_req::~talisman_un_use_req() {
  SharedDtor();
}

void talisman_un_use_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_un_use_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_un_use_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_un_use_req_descriptor_;
}

const talisman_un_use_req& talisman_un_use_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_un_use_req* talisman_un_use_req::default_instance_ = NULL;

talisman_un_use_req* talisman_un_use_req::New() const {
  return new talisman_un_use_req;
}

void talisman_un_use_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7352;
    dest_ = 0;
    un_use_slot_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_un_use_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_un_use_slot;
        break;
      }

      // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_un_use_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroTalismanSlot_IsValid(value)) {
            set_un_use_slot(static_cast< ::SProtoSpace::EHeroTalismanSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_un_use_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dest(), output);
  }

  // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 3;
  if (has_un_use_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->un_use_slot(), output);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_un_use_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dest(), target);
  }

  // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 3;
  if (has_un_use_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->un_use_slot(), target);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_un_use_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 3;
    if (has_un_use_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->un_use_slot());
    }

    // optional uint64 hero_uuid = 4;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_un_use_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_un_use_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_un_use_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_un_use_req::MergeFrom(const talisman_un_use_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_un_use_slot()) {
      set_un_use_slot(from.un_use_slot());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_un_use_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_un_use_req::CopyFrom(const talisman_un_use_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_un_use_req::IsInitialized() const {

  return true;
}

void talisman_un_use_req::Swap(talisman_un_use_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(dest_, other->dest_);
    std::swap(un_use_slot_, other->un_use_slot_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_un_use_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_un_use_req_descriptor_;
  metadata.reflection = talisman_un_use_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_un_use_ack::kProtoidFieldNumber;
const int talisman_un_use_ack::kRetFieldNumber;
const int talisman_un_use_ack::kDestFieldNumber;
const int talisman_un_use_ack::kUnUseSlotFieldNumber;
const int talisman_un_use_ack::kHeroUuidFieldNumber;
#endif  // !_MSC_VER

talisman_un_use_ack::talisman_un_use_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_un_use_ack::InitAsDefaultInstance() {
}

talisman_un_use_ack::talisman_un_use_ack(const talisman_un_use_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_un_use_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7353;
  ret_ = 0;
  dest_ = 0;
  un_use_slot_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_un_use_ack::~talisman_un_use_ack() {
  SharedDtor();
}

void talisman_un_use_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_un_use_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_un_use_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_un_use_ack_descriptor_;
}

const talisman_un_use_ack& talisman_un_use_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_un_use_ack* talisman_un_use_ack::default_instance_ = NULL;

talisman_un_use_ack* talisman_un_use_ack::New() const {
  return new talisman_un_use_ack;
}

void talisman_un_use_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7353;
    ret_ = 0;
    dest_ = 0;
    un_use_slot_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_un_use_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_un_use_slot;
        break;
      }

      // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_un_use_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroTalismanSlot_IsValid(value)) {
            set_un_use_slot(static_cast< ::SProtoSpace::EHeroTalismanSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_un_use_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dest(), output);
  }

  // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 4;
  if (has_un_use_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->un_use_slot(), output);
  }

  // optional uint64 hero_uuid = 5;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hero_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_un_use_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dest(), target);
  }

  // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 4;
  if (has_un_use_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->un_use_slot(), target);
  }

  // optional uint64 hero_uuid = 5;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hero_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_un_use_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 3;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 4;
    if (has_un_use_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->un_use_slot());
    }

    // optional uint64 hero_uuid = 5;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_un_use_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_un_use_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_un_use_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_un_use_ack::MergeFrom(const talisman_un_use_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_un_use_slot()) {
      set_un_use_slot(from.un_use_slot());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_un_use_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_un_use_ack::CopyFrom(const talisman_un_use_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_un_use_ack::IsInitialized() const {

  return true;
}

void talisman_un_use_ack::Swap(talisman_un_use_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(dest_, other->dest_);
    std::swap(un_use_slot_, other->un_use_slot_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_un_use_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_un_use_ack_descriptor_;
  metadata.reflection = talisman_un_use_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_lv_up_req::kProtoidFieldNumber;
const int talisman_lv_up_req::kDestFieldNumber;
const int talisman_lv_up_req::kHeroUuidFieldNumber;
const int talisman_lv_up_req::kTalismanUuidFieldNumber;
const int talisman_lv_up_req::kCostUuidsFieldNumber;
#endif  // !_MSC_VER

talisman_lv_up_req::talisman_lv_up_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_lv_up_req::InitAsDefaultInstance() {
}

talisman_lv_up_req::talisman_lv_up_req(const talisman_lv_up_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_lv_up_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7354;
  dest_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_lv_up_req::~talisman_lv_up_req() {
  SharedDtor();
}

void talisman_lv_up_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_lv_up_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_lv_up_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_lv_up_req_descriptor_;
}

const talisman_lv_up_req& talisman_lv_up_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_lv_up_req* talisman_lv_up_req::default_instance_ = NULL;

talisman_lv_up_req* talisman_lv_up_req::New() const {
  return new talisman_lv_up_req;
}

void talisman_lv_up_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7354;
    dest_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    talisman_uuid_ = GOOGLE_ULONGLONG(0);
  }
  cost_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_lv_up_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_talisman_uuid;
        break;
      }

      // optional uint64 talisman_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talisman_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talisman_uuid_)));
          set_has_talisman_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_uuids;
        break;
      }

      // repeated uint64 cost_uuids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_cost_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cost_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cost_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_lv_up_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dest(), output);
  }

  // optional uint64 hero_uuid = 3;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uuid(), output);
  }

  // optional uint64 talisman_uuid = 4;
  if (has_talisman_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->talisman_uuid(), output);
  }

  // repeated uint64 cost_uuids = 5;
  for (int i = 0; i < this->cost_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->cost_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_lv_up_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dest(), target);
  }

  // optional uint64 hero_uuid = 3;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uuid(), target);
  }

  // optional uint64 talisman_uuid = 4;
  if (has_talisman_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->talisman_uuid(), target);
  }

  // repeated uint64 cost_uuids = 5;
  for (int i = 0; i < this->cost_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->cost_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_lv_up_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 hero_uuid = 3;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional uint64 talisman_uuid = 4;
    if (has_talisman_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talisman_uuid());
    }

  }
  // repeated uint64 cost_uuids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cost_uuids(i));
    }
    total_size += 1 * this->cost_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_lv_up_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_lv_up_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_lv_up_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_lv_up_req::MergeFrom(const talisman_lv_up_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_uuids_.MergeFrom(from.cost_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_talisman_uuid()) {
      set_talisman_uuid(from.talisman_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_lv_up_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_lv_up_req::CopyFrom(const talisman_lv_up_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_lv_up_req::IsInitialized() const {

  return true;
}

void talisman_lv_up_req::Swap(talisman_lv_up_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(dest_, other->dest_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(talisman_uuid_, other->talisman_uuid_);
    cost_uuids_.Swap(&other->cost_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_lv_up_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_lv_up_req_descriptor_;
  metadata.reflection = talisman_lv_up_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_lv_up_ack::kProtoidFieldNumber;
const int talisman_lv_up_ack::kRetFieldNumber;
const int talisman_lv_up_ack::kDestFieldNumber;
const int talisman_lv_up_ack::kHeroUuidFieldNumber;
const int talisman_lv_up_ack::kTalismanUuidFieldNumber;
const int talisman_lv_up_ack::kCostUuidsFieldNumber;
#endif  // !_MSC_VER

talisman_lv_up_ack::talisman_lv_up_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_lv_up_ack::InitAsDefaultInstance() {
}

talisman_lv_up_ack::talisman_lv_up_ack(const talisman_lv_up_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_lv_up_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7355;
  ret_ = 0;
  dest_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_lv_up_ack::~talisman_lv_up_ack() {
  SharedDtor();
}

void talisman_lv_up_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_lv_up_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_lv_up_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_lv_up_ack_descriptor_;
}

const talisman_lv_up_ack& talisman_lv_up_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_lv_up_ack* talisman_lv_up_ack::default_instance_ = NULL;

talisman_lv_up_ack* talisman_lv_up_ack::New() const {
  return new talisman_lv_up_ack;
}

void talisman_lv_up_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7355;
    ret_ = 0;
    dest_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    talisman_uuid_ = GOOGLE_ULONGLONG(0);
  }
  cost_uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_lv_up_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_talisman_uuid;
        break;
      }

      // optional uint64 talisman_uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talisman_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talisman_uuid_)));
          set_has_talisman_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cost_uuids;
        break;
      }

      // repeated uint64 cost_uuids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_uuids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_cost_uuids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cost_uuids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cost_uuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_lv_up_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dest(), output);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_uuid(), output);
  }

  // optional uint64 talisman_uuid = 5;
  if (has_talisman_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->talisman_uuid(), output);
  }

  // repeated uint64 cost_uuids = 6;
  for (int i = 0; i < this->cost_uuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->cost_uuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_lv_up_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dest(), target);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_uuid(), target);
  }

  // optional uint64 talisman_uuid = 5;
  if (has_talisman_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->talisman_uuid(), target);
  }

  // repeated uint64 cost_uuids = 6;
  for (int i = 0; i < this->cost_uuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->cost_uuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_lv_up_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 3;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 hero_uuid = 4;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional uint64 talisman_uuid = 5;
    if (has_talisman_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talisman_uuid());
    }

  }
  // repeated uint64 cost_uuids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cost_uuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cost_uuids(i));
    }
    total_size += 1 * this->cost_uuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_lv_up_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_lv_up_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_lv_up_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_lv_up_ack::MergeFrom(const talisman_lv_up_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  cost_uuids_.MergeFrom(from.cost_uuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_talisman_uuid()) {
      set_talisman_uuid(from.talisman_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_lv_up_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_lv_up_ack::CopyFrom(const talisman_lv_up_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_lv_up_ack::IsInitialized() const {

  return true;
}

void talisman_lv_up_ack::Swap(talisman_lv_up_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(dest_, other->dest_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(talisman_uuid_, other->talisman_uuid_);
    cost_uuids_.Swap(&other->cost_uuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_lv_up_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_lv_up_ack_descriptor_;
  metadata.reflection = talisman_lv_up_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_break_req::kProtoidFieldNumber;
const int talisman_break_req::kDestFieldNumber;
const int talisman_break_req::kHeroUuidFieldNumber;
const int talisman_break_req::kTalismanUuidFieldNumber;
#endif  // !_MSC_VER

talisman_break_req::talisman_break_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_break_req::InitAsDefaultInstance() {
}

talisman_break_req::talisman_break_req(const talisman_break_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_break_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7356;
  dest_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_break_req::~talisman_break_req() {
  SharedDtor();
}

void talisman_break_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_break_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_break_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_break_req_descriptor_;
}

const talisman_break_req& talisman_break_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_break_req* talisman_break_req::default_instance_ = NULL;

talisman_break_req* talisman_break_req::New() const {
  return new talisman_break_req;
}

void talisman_break_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7356;
    dest_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    talisman_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_break_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_talisman_uuid;
        break;
      }

      // optional uint64 talisman_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talisman_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talisman_uuid_)));
          set_has_talisman_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_break_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dest(), output);
  }

  // optional uint64 hero_uuid = 3;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hero_uuid(), output);
  }

  // optional uint64 talisman_uuid = 4;
  if (has_talisman_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->talisman_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_break_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dest(), target);
  }

  // optional uint64 hero_uuid = 3;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hero_uuid(), target);
  }

  // optional uint64 talisman_uuid = 4;
  if (has_talisman_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->talisman_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_break_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 2;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 hero_uuid = 3;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional uint64 talisman_uuid = 4;
    if (has_talisman_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talisman_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_break_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_break_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_break_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_break_req::MergeFrom(const talisman_break_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_talisman_uuid()) {
      set_talisman_uuid(from.talisman_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_break_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_break_req::CopyFrom(const talisman_break_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_break_req::IsInitialized() const {

  return true;
}

void talisman_break_req::Swap(talisman_break_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(dest_, other->dest_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(talisman_uuid_, other->talisman_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_break_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_break_req_descriptor_;
  metadata.reflection = talisman_break_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_break_ack::kProtoidFieldNumber;
const int talisman_break_ack::kRetFieldNumber;
const int talisman_break_ack::kDestFieldNumber;
const int talisman_break_ack::kHeroUuidFieldNumber;
const int talisman_break_ack::kTalismanUuidFieldNumber;
#endif  // !_MSC_VER

talisman_break_ack::talisman_break_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_break_ack::InitAsDefaultInstance() {
}

talisman_break_ack::talisman_break_ack(const talisman_break_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_break_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7357;
  ret_ = 0;
  dest_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_break_ack::~talisman_break_ack() {
  SharedDtor();
}

void talisman_break_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talisman_break_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_break_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_break_ack_descriptor_;
}

const talisman_break_ack& talisman_break_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_break_ack* talisman_break_ack::default_instance_ = NULL;

talisman_break_ack* talisman_break_ack::New() const {
  return new talisman_break_ack;
}

void talisman_break_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7357;
    ret_ = 0;
    dest_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    talisman_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_break_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_talisman_uuid;
        break;
      }

      // optional uint64 talisman_uuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talisman_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &talisman_uuid_)));
          set_has_talisman_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_break_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dest(), output);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_uuid(), output);
  }

  // optional uint64 talisman_uuid = 5;
  if (has_talisman_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->talisman_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_break_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dest(), target);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_uuid(), target);
  }

  // optional uint64 talisman_uuid = 5;
  if (has_talisman_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->talisman_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_break_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 3;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 hero_uuid = 4;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional uint64 talisman_uuid = 5;
    if (has_talisman_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->talisman_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_break_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_break_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_break_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_break_ack::MergeFrom(const talisman_break_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_talisman_uuid()) {
      set_talisman_uuid(from.talisman_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_break_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_break_ack::CopyFrom(const talisman_break_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_break_ack::IsInitialized() const {

  return true;
}

void talisman_break_ack::Swap(talisman_break_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(dest_, other->dest_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(talisman_uuid_, other->talisman_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_break_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_break_ack_descriptor_;
  metadata.reflection = talisman_break_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talisman_change_ntf::kProtoidFieldNumber;
const int talisman_change_ntf::kTypeFieldNumber;
const int talisman_change_ntf::kDestFieldNumber;
const int talisman_change_ntf::kHeroUuidFieldNumber;
const int talisman_change_ntf::kTalismanFieldNumber;
#endif  // !_MSC_VER

talisman_change_ntf::talisman_change_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talisman_change_ntf::InitAsDefaultInstance() {
  talisman_ = const_cast< ::SProtoSpace::talisman_data*>(&::SProtoSpace::talisman_data::default_instance());
}

talisman_change_ntf::talisman_change_ntf(const talisman_change_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talisman_change_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7358;
  type_ = 0;
  dest_ = 0;
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  talisman_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talisman_change_ntf::~talisman_change_ntf() {
  SharedDtor();
}

void talisman_change_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete talisman_;
  }
}

void talisman_change_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talisman_change_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talisman_change_ntf_descriptor_;
}

const talisman_change_ntf& talisman_change_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

talisman_change_ntf* talisman_change_ntf::default_instance_ = NULL;

talisman_change_ntf* talisman_change_ntf::New() const {
  return new talisman_change_ntf;
}

void talisman_change_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7358;
    type_ = 0;
    dest_ = 0;
    hero_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_talisman()) {
      if (talisman_ != NULL) talisman_->::SProtoSpace::talisman_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talisman_change_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_change_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.ETalismanChangeType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanChangeType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::ETalismanChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dest;
        break;
      }

      // optional .SProtoSpace.ETalismanDestType dest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ETalismanDestType_IsValid(value)) {
            set_dest(static_cast< ::SProtoSpace::ETalismanDestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_uuid;
        break;
      }

      // optional uint64 hero_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_uuid_)));
          set_has_hero_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_talisman;
        break;
      }

      // optional .SProtoSpace.talisman_data talisman = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talisman:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talisman()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talisman_change_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_change_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.ETalismanChangeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dest(), output);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_uuid(), output);
  }

  // optional .SProtoSpace.talisman_data talisman = 5;
  if (has_talisman()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->talisman(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talisman_change_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_change_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.ETalismanChangeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dest(), target);
  }

  // optional uint64 hero_uuid = 4;
  if (has_hero_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_uuid(), target);
  }

  // optional .SProtoSpace.talisman_data talisman = 5;
  if (has_talisman()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->talisman(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talisman_change_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_change_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.ETalismanChangeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SProtoSpace.ETalismanDestType dest = 3;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dest());
    }

    // optional uint64 hero_uuid = 4;
    if (has_hero_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_uuid());
    }

    // optional .SProtoSpace.talisman_data talisman = 5;
    if (has_talisman()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talisman());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talisman_change_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talisman_change_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talisman_change_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talisman_change_ntf::MergeFrom(const talisman_change_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_hero_uuid()) {
      set_hero_uuid(from.hero_uuid());
    }
    if (from.has_talisman()) {
      mutable_talisman()->::SProtoSpace::talisman_data::MergeFrom(from.talisman());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talisman_change_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talisman_change_ntf::CopyFrom(const talisman_change_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talisman_change_ntf::IsInitialized() const {

  return true;
}

void talisman_change_ntf::Swap(talisman_change_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(dest_, other->dest_);
    std::swap(hero_uuid_, other->hero_uuid_);
    std::swap(talisman_, other->talisman_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talisman_change_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talisman_change_ntf_descriptor_;
  metadata.reflection = talisman_change_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int red_pt_req::kProtoidFieldNumber;
const int red_pt_req::kSysIdSFieldNumber;
#endif  // !_MSC_VER

red_pt_req::red_pt_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void red_pt_req::InitAsDefaultInstance() {
}

red_pt_req::red_pt_req(const red_pt_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void red_pt_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7400;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

red_pt_req::~red_pt_req() {
  SharedDtor();
}

void red_pt_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void red_pt_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* red_pt_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return red_pt_req_descriptor_;
}

const red_pt_req& red_pt_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

red_pt_req* red_pt_req::default_instance_ = NULL;

red_pt_req* red_pt_req::New() const {
  return new red_pt_req;
}

void red_pt_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7400;
  }
  sys_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool red_pt_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sys_id_s;
        break;
      }

      // repeated .SProtoSpace.eRedPtType sys_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_id_s:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::eRedPtType_IsValid(value)) {
            add_sys_id_s(static_cast< ::SProtoSpace::eRedPtType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::SProtoSpace::eRedPtType_IsValid,
                 this->mutable_sys_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sys_id_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void red_pt_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.eRedPtType sys_id_s = 2;
  for (int i = 0; i < this->sys_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sys_id_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* red_pt_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.eRedPtType sys_id_s = 2;
  for (int i = 0; i < this->sys_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sys_id_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int red_pt_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.eRedPtType sys_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sys_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->sys_id_s(i));
    }
    total_size += 1 * this->sys_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void red_pt_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const red_pt_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const red_pt_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void red_pt_req::MergeFrom(const red_pt_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  sys_id_s_.MergeFrom(from.sys_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void red_pt_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void red_pt_req::CopyFrom(const red_pt_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool red_pt_req::IsInitialized() const {

  return true;
}

void red_pt_req::Swap(red_pt_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    sys_id_s_.Swap(&other->sys_id_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata red_pt_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = red_pt_req_descriptor_;
  metadata.reflection = red_pt_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int red_pt_ack::kProtoidFieldNumber;
const int red_pt_ack::kInfosFieldNumber;
#endif  // !_MSC_VER

red_pt_ack::red_pt_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void red_pt_ack::InitAsDefaultInstance() {
  infos_ = const_cast< ::SProtoSpace::red_pt_infos*>(&::SProtoSpace::red_pt_infos::default_instance());
}

red_pt_ack::red_pt_ack(const red_pt_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void red_pt_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7401;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

red_pt_ack::~red_pt_ack() {
  SharedDtor();
}

void red_pt_ack::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void red_pt_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* red_pt_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return red_pt_ack_descriptor_;
}

const red_pt_ack& red_pt_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

red_pt_ack* red_pt_ack::default_instance_ = NULL;

red_pt_ack* red_pt_ack::New() const {
  return new red_pt_ack;
}

void red_pt_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7401;
    if (has_infos()) {
      if (infos_ != NULL) infos_->::SProtoSpace::red_pt_infos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool red_pt_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // optional .SProtoSpace.red_pt_infos infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void red_pt_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.red_pt_infos infos = 2;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* red_pt_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.red_pt_infos infos = 2;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int red_pt_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.red_pt_infos infos = 2;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void red_pt_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const red_pt_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const red_pt_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void red_pt_ack::MergeFrom(const red_pt_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_infos()) {
      mutable_infos()->::SProtoSpace::red_pt_infos::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void red_pt_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void red_pt_ack::CopyFrom(const red_pt_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool red_pt_ack::IsInitialized() const {

  return true;
}

void red_pt_ack::Swap(red_pt_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata red_pt_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = red_pt_ack_descriptor_;
  metadata.reflection = red_pt_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int red_pt_ntf::kProtoidFieldNumber;
const int red_pt_ntf::kInfosFieldNumber;
#endif  // !_MSC_VER

red_pt_ntf::red_pt_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void red_pt_ntf::InitAsDefaultInstance() {
  infos_ = const_cast< ::SProtoSpace::red_pt_infos*>(&::SProtoSpace::red_pt_infos::default_instance());
}

red_pt_ntf::red_pt_ntf(const red_pt_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void red_pt_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7402;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

red_pt_ntf::~red_pt_ntf() {
  SharedDtor();
}

void red_pt_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void red_pt_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* red_pt_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return red_pt_ntf_descriptor_;
}

const red_pt_ntf& red_pt_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

red_pt_ntf* red_pt_ntf::default_instance_ = NULL;

red_pt_ntf* red_pt_ntf::New() const {
  return new red_pt_ntf;
}

void red_pt_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7402;
    if (has_infos()) {
      if (infos_ != NULL) infos_->::SProtoSpace::red_pt_infos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool red_pt_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // optional .SProtoSpace.red_pt_infos infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void red_pt_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.red_pt_infos infos = 2;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* red_pt_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.red_pt_infos infos = 2;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int red_pt_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.red_pt_infos infos = 2;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void red_pt_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const red_pt_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const red_pt_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void red_pt_ntf::MergeFrom(const red_pt_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_infos()) {
      mutable_infos()->::SProtoSpace::red_pt_infos::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void red_pt_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void red_pt_ntf::CopyFrom(const red_pt_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool red_pt_ntf::IsInitialized() const {

  return true;
}

void red_pt_ntf::Swap(red_pt_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata red_pt_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = red_pt_ntf_descriptor_;
  metadata.reflection = red_pt_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_wearing_fashions_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

get_wearing_fashions_req::get_wearing_fashions_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_wearing_fashions_req::InitAsDefaultInstance() {
}

get_wearing_fashions_req::get_wearing_fashions_req(const get_wearing_fashions_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_wearing_fashions_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7450;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_wearing_fashions_req::~get_wearing_fashions_req() {
  SharedDtor();
}

void get_wearing_fashions_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_wearing_fashions_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_wearing_fashions_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_wearing_fashions_req_descriptor_;
}

const get_wearing_fashions_req& get_wearing_fashions_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_wearing_fashions_req* get_wearing_fashions_req::default_instance_ = NULL;

get_wearing_fashions_req* get_wearing_fashions_req::New() const {
  return new get_wearing_fashions_req;
}

void get_wearing_fashions_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7450;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_wearing_fashions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_wearing_fashions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_wearing_fashions_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_wearing_fashions_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_wearing_fashions_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_wearing_fashions_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_wearing_fashions_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_wearing_fashions_req::MergeFrom(const get_wearing_fashions_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_wearing_fashions_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_wearing_fashions_req::CopyFrom(const get_wearing_fashions_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_wearing_fashions_req::IsInitialized() const {

  return true;
}

void get_wearing_fashions_req::Swap(get_wearing_fashions_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_wearing_fashions_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_wearing_fashions_req_descriptor_;
  metadata.reflection = get_wearing_fashions_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_wearing_fashions_ack::kProtoidFieldNumber;
const int get_wearing_fashions_ack::kFashionsPWearingFieldNumber;
const int get_wearing_fashions_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

get_wearing_fashions_ack::get_wearing_fashions_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_wearing_fashions_ack::InitAsDefaultInstance() {
  fashions_p_wearing_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
}

get_wearing_fashions_ack::get_wearing_fashions_ack(const get_wearing_fashions_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_wearing_fashions_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7451;
  fashions_p_wearing_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_wearing_fashions_ack::~get_wearing_fashions_ack() {
  SharedDtor();
}

void get_wearing_fashions_ack::SharedDtor() {
  if (this != default_instance_) {
    delete fashions_p_wearing_;
  }
}

void get_wearing_fashions_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_wearing_fashions_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_wearing_fashions_ack_descriptor_;
}

const get_wearing_fashions_ack& get_wearing_fashions_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_wearing_fashions_ack* get_wearing_fashions_ack::default_instance_ = NULL;

get_wearing_fashions_ack* get_wearing_fashions_ack::New() const {
  return new get_wearing_fashions_ack;
}

void get_wearing_fashions_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7451;
    if (has_fashions_p_wearing()) {
      if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_wearing_fashions_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fashions_p_wearing;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions_p_wearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashions_p_wearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_wearing_fashions_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fashions_p_wearing(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_wearing_fashions_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fashions_p_wearing(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_wearing_fashions_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
    if (has_fashions_p_wearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashions_p_wearing());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_wearing_fashions_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_wearing_fashions_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_wearing_fashions_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_wearing_fashions_ack::MergeFrom(const get_wearing_fashions_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_fashions_p_wearing()) {
      mutable_fashions_p_wearing()->::SProtoSpace::fashions_pack::MergeFrom(from.fashions_p_wearing());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_wearing_fashions_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_wearing_fashions_ack::CopyFrom(const get_wearing_fashions_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_wearing_fashions_ack::IsInitialized() const {

  return true;
}

void get_wearing_fashions_ack::Swap(get_wearing_fashions_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(fashions_p_wearing_, other->fashions_p_wearing_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_wearing_fashions_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_wearing_fashions_ack_descriptor_;
  metadata.reflection = get_wearing_fashions_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_all_fashions_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

get_all_fashions_req::get_all_fashions_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_all_fashions_req::InitAsDefaultInstance() {
}

get_all_fashions_req::get_all_fashions_req(const get_all_fashions_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_all_fashions_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7452;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_all_fashions_req::~get_all_fashions_req() {
  SharedDtor();
}

void get_all_fashions_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_all_fashions_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_all_fashions_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_all_fashions_req_descriptor_;
}

const get_all_fashions_req& get_all_fashions_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_all_fashions_req* get_all_fashions_req::default_instance_ = NULL;

get_all_fashions_req* get_all_fashions_req::New() const {
  return new get_all_fashions_req;
}

void get_all_fashions_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7452;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_all_fashions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_all_fashions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_all_fashions_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_all_fashions_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_all_fashions_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_all_fashions_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_all_fashions_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_all_fashions_req::MergeFrom(const get_all_fashions_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_all_fashions_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_fashions_req::CopyFrom(const get_all_fashions_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_fashions_req::IsInitialized() const {

  return true;
}

void get_all_fashions_req::Swap(get_all_fashions_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_all_fashions_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_all_fashions_req_descriptor_;
  metadata.reflection = get_all_fashions_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_all_fashions_ack::kProtoidFieldNumber;
const int get_all_fashions_ack::kFashionsPWearingFieldNumber;
const int get_all_fashions_ack::kFashionsPWardrobeFieldNumber;
const int get_all_fashions_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

get_all_fashions_ack::get_all_fashions_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_all_fashions_ack::InitAsDefaultInstance() {
  fashions_p_wearing_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
  fashions_p_wardrobe_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
}

get_all_fashions_ack::get_all_fashions_ack(const get_all_fashions_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_all_fashions_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7453;
  fashions_p_wearing_ = NULL;
  fashions_p_wardrobe_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_all_fashions_ack::~get_all_fashions_ack() {
  SharedDtor();
}

void get_all_fashions_ack::SharedDtor() {
  if (this != default_instance_) {
    delete fashions_p_wearing_;
    delete fashions_p_wardrobe_;
  }
}

void get_all_fashions_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_all_fashions_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_all_fashions_ack_descriptor_;
}

const get_all_fashions_ack& get_all_fashions_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_all_fashions_ack* get_all_fashions_ack::default_instance_ = NULL;

get_all_fashions_ack* get_all_fashions_ack::New() const {
  return new get_all_fashions_ack;
}

void get_all_fashions_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7453;
    if (has_fashions_p_wearing()) {
      if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
    }
    if (has_fashions_p_wardrobe()) {
      if (fashions_p_wardrobe_ != NULL) fashions_p_wardrobe_->::SProtoSpace::fashions_pack::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_all_fashions_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fashions_p_wearing;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions_p_wearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashions_p_wearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fashions_p_wardrobe;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashions_p_wardrobe = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions_p_wardrobe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashions_p_wardrobe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_all_fashions_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fashions_p_wearing(), output);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wardrobe = 3;
  if (has_fashions_p_wardrobe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fashions_p_wardrobe(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 4;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_all_fashions_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fashions_p_wearing(), target);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wardrobe = 3;
  if (has_fashions_p_wardrobe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fashions_p_wardrobe(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 4;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_all_fashions_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
    if (has_fashions_p_wearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashions_p_wearing());
    }

    // optional .SProtoSpace.fashions_pack fashions_p_wardrobe = 3;
    if (has_fashions_p_wardrobe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashions_p_wardrobe());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_all_fashions_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_all_fashions_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_all_fashions_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_all_fashions_ack::MergeFrom(const get_all_fashions_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_fashions_p_wearing()) {
      mutable_fashions_p_wearing()->::SProtoSpace::fashions_pack::MergeFrom(from.fashions_p_wearing());
    }
    if (from.has_fashions_p_wardrobe()) {
      mutable_fashions_p_wardrobe()->::SProtoSpace::fashions_pack::MergeFrom(from.fashions_p_wardrobe());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_all_fashions_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_all_fashions_ack::CopyFrom(const get_all_fashions_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_all_fashions_ack::IsInitialized() const {

  return true;
}

void get_all_fashions_ack::Swap(get_all_fashions_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(fashions_p_wearing_, other->fashions_p_wearing_);
    std::swap(fashions_p_wardrobe_, other->fashions_p_wardrobe_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_all_fashions_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_all_fashions_ack_descriptor_;
  metadata.reflection = get_all_fashions_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wear_fashions_req::kProtoidFieldNumber;
const int wear_fashions_req::kUuidSFieldNumber;
#endif  // !_MSC_VER

wear_fashions_req::wear_fashions_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wear_fashions_req::InitAsDefaultInstance() {
}

wear_fashions_req::wear_fashions_req(const wear_fashions_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wear_fashions_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7457;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wear_fashions_req::~wear_fashions_req() {
  SharedDtor();
}

void wear_fashions_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wear_fashions_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wear_fashions_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wear_fashions_req_descriptor_;
}

const wear_fashions_req& wear_fashions_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

wear_fashions_req* wear_fashions_req::default_instance_ = NULL;

wear_fashions_req* wear_fashions_req::New() const {
  return new wear_fashions_req;
}

void wear_fashions_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7457;
  }
  uuid_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wear_fashions_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_s;
        break;
      }

      // repeated uint64 uuid_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uuid_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uuid_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wear_fashions_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 uuid_s = 2;
  for (int i = 0; i < this->uuid_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uuid_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wear_fashions_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 uuid_s = 2;
  for (int i = 0; i < this->uuid_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uuid_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wear_fashions_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 uuid_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uuid_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uuid_s(i));
    }
    total_size += 1 * this->uuid_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wear_fashions_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wear_fashions_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wear_fashions_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wear_fashions_req::MergeFrom(const wear_fashions_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuid_s_.MergeFrom(from.uuid_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wear_fashions_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wear_fashions_req::CopyFrom(const wear_fashions_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wear_fashions_req::IsInitialized() const {

  return true;
}

void wear_fashions_req::Swap(wear_fashions_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    uuid_s_.Swap(&other->uuid_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wear_fashions_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wear_fashions_req_descriptor_;
  metadata.reflection = wear_fashions_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wear_fashions_ack::kProtoidFieldNumber;
const int wear_fashions_ack::kUuidSFieldNumber;
const int wear_fashions_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

wear_fashions_ack::wear_fashions_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void wear_fashions_ack::InitAsDefaultInstance() {
}

wear_fashions_ack::wear_fashions_ack(const wear_fashions_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void wear_fashions_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7458;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wear_fashions_ack::~wear_fashions_ack() {
  SharedDtor();
}

void wear_fashions_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void wear_fashions_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wear_fashions_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wear_fashions_ack_descriptor_;
}

const wear_fashions_ack& wear_fashions_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

wear_fashions_ack* wear_fashions_ack::default_instance_ = NULL;

wear_fashions_ack* wear_fashions_ack::New() const {
  return new wear_fashions_ack;
}

void wear_fashions_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7458;
    error_code_ = 0;
  }
  uuid_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wear_fashions_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_s;
        break;
      }

      // repeated uint64 uuid_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_uuid_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uuid_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid_s;
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void wear_fashions_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 uuid_s = 2;
  for (int i = 0; i < this->uuid_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->uuid_s(i), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* wear_fashions_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 uuid_s = 2;
  for (int i = 0; i < this->uuid_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->uuid_s(i), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int wear_fashions_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  // repeated uint64 uuid_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->uuid_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uuid_s(i));
    }
    total_size += 1 * this->uuid_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wear_fashions_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wear_fashions_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wear_fashions_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wear_fashions_ack::MergeFrom(const wear_fashions_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  uuid_s_.MergeFrom(from.uuid_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wear_fashions_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wear_fashions_ack::CopyFrom(const wear_fashions_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wear_fashions_ack::IsInitialized() const {

  return true;
}

void wear_fashions_ack::Swap(wear_fashions_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    uuid_s_.Swap(&other->uuid_s_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wear_fashions_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wear_fashions_ack_descriptor_;
  metadata.reflection = wear_fashions_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_other_role_fashion_cs_req::kProtoidFieldNumber;
const int get_other_role_fashion_cs_req::kRoleIdSFieldNumber;
const int get_other_role_fashion_cs_req::kRoleNameSFieldNumber;
#endif  // !_MSC_VER

get_other_role_fashion_cs_req::get_other_role_fashion_cs_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_other_role_fashion_cs_req::InitAsDefaultInstance() {
}

get_other_role_fashion_cs_req::get_other_role_fashion_cs_req(const get_other_role_fashion_cs_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_other_role_fashion_cs_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7455;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_other_role_fashion_cs_req::~get_other_role_fashion_cs_req() {
  SharedDtor();
}

void get_other_role_fashion_cs_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void get_other_role_fashion_cs_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_other_role_fashion_cs_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_other_role_fashion_cs_req_descriptor_;
}

const get_other_role_fashion_cs_req& get_other_role_fashion_cs_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_other_role_fashion_cs_req* get_other_role_fashion_cs_req::default_instance_ = NULL;

get_other_role_fashion_cs_req* get_other_role_fashion_cs_req::New() const {
  return new get_other_role_fashion_cs_req;
}

void get_other_role_fashion_cs_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7455;
  }
  role_id_s_.Clear();
  role_name_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_other_role_fashion_cs_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id_s;
        break;
      }

      // repeated uint64 role_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_role_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_role_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id_s;
        if (input->ExpectTag(26)) goto parse_role_name_s;
        break;
      }

      // repeated string role_name_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_role_name_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name_s(this->role_name_s_size() - 1).data(),
            this->role_name_s(this->role_name_s_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_other_role_fashion_cs_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated uint64 role_id_s = 2;
  for (int i = 0; i < this->role_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->role_id_s(i), output);
  }

  // repeated string role_name_s = 3;
  for (int i = 0; i < this->role_name_s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->role_name_s(i).data(), this->role_name_s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_other_role_fashion_cs_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated uint64 role_id_s = 2;
  for (int i = 0; i < this->role_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->role_id_s(i), target);
  }

  // repeated string role_name_s = 3;
  for (int i = 0; i < this->role_name_s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name_s(i).data(), this->role_name_s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->role_name_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_other_role_fashion_cs_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated uint64 role_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->role_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->role_id_s(i));
    }
    total_size += 1 * this->role_id_s_size() + data_size;
  }

  // repeated string role_name_s = 3;
  total_size += 1 * this->role_name_s_size();
  for (int i = 0; i < this->role_name_s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->role_name_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_other_role_fashion_cs_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_other_role_fashion_cs_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_other_role_fashion_cs_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_other_role_fashion_cs_req::MergeFrom(const get_other_role_fashion_cs_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_id_s_.MergeFrom(from.role_id_s_);
  role_name_s_.MergeFrom(from.role_name_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_other_role_fashion_cs_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_other_role_fashion_cs_req::CopyFrom(const get_other_role_fashion_cs_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_other_role_fashion_cs_req::IsInitialized() const {

  return true;
}

void get_other_role_fashion_cs_req::Swap(get_other_role_fashion_cs_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    role_id_s_.Swap(&other->role_id_s_);
    role_name_s_.Swap(&other->role_name_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_other_role_fashion_cs_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_other_role_fashion_cs_req_descriptor_;
  metadata.reflection = get_other_role_fashion_cs_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int get_other_role_fashion_cs_ack::kProtoidFieldNumber;
const int get_other_role_fashion_cs_ack::kFashionsPWearingFieldNumber;
const int get_other_role_fashion_cs_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

get_other_role_fashion_cs_ack::get_other_role_fashion_cs_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void get_other_role_fashion_cs_ack::InitAsDefaultInstance() {
  fashions_p_wearing_ = const_cast< ::SProtoSpace::fashions_pack*>(&::SProtoSpace::fashions_pack::default_instance());
}

get_other_role_fashion_cs_ack::get_other_role_fashion_cs_ack(const get_other_role_fashion_cs_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void get_other_role_fashion_cs_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7456;
  fashions_p_wearing_ = NULL;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

get_other_role_fashion_cs_ack::~get_other_role_fashion_cs_ack() {
  SharedDtor();
}

void get_other_role_fashion_cs_ack::SharedDtor() {
  if (this != default_instance_) {
    delete fashions_p_wearing_;
  }
}

void get_other_role_fashion_cs_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* get_other_role_fashion_cs_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return get_other_role_fashion_cs_ack_descriptor_;
}

const get_other_role_fashion_cs_ack& get_other_role_fashion_cs_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

get_other_role_fashion_cs_ack* get_other_role_fashion_cs_ack::default_instance_ = NULL;

get_other_role_fashion_cs_ack* get_other_role_fashion_cs_ack::New() const {
  return new get_other_role_fashion_cs_ack;
}

void get_other_role_fashion_cs_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7456;
    if (has_fashions_p_wearing()) {
      if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
    }
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool get_other_role_fashion_cs_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fashions_p_wearing;
        break;
      }

      // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashions_p_wearing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashions_p_wearing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void get_other_role_fashion_cs_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fashions_p_wearing(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* get_other_role_fashion_cs_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  if (has_fashions_p_wearing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fashions_p_wearing(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int get_other_role_fashion_cs_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
    if (has_fashions_p_wearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashions_p_wearing());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void get_other_role_fashion_cs_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const get_other_role_fashion_cs_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const get_other_role_fashion_cs_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void get_other_role_fashion_cs_ack::MergeFrom(const get_other_role_fashion_cs_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_fashions_p_wearing()) {
      mutable_fashions_p_wearing()->::SProtoSpace::fashions_pack::MergeFrom(from.fashions_p_wearing());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void get_other_role_fashion_cs_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_other_role_fashion_cs_ack::CopyFrom(const get_other_role_fashion_cs_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_other_role_fashion_cs_ack::IsInitialized() const {

  return true;
}

void get_other_role_fashion_cs_ack::Swap(get_other_role_fashion_cs_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(fashions_p_wearing_, other->fashions_p_wearing_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata get_other_role_fashion_cs_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = get_other_role_fashion_cs_ack_descriptor_;
  metadata.reflection = get_other_role_fashion_cs_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_config_version_req::kProtoidFieldNumber;
const int verify_config_version_req::kVersionFieldNumber;
#endif  // !_MSC_VER

verify_config_version_req::verify_config_version_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void verify_config_version_req::InitAsDefaultInstance() {
}

verify_config_version_req::verify_config_version_req(const verify_config_version_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void verify_config_version_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5070;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_config_version_req::~verify_config_version_req() {
  SharedDtor();
}

void verify_config_version_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void verify_config_version_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_config_version_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_config_version_req_descriptor_;
}

const verify_config_version_req& verify_config_version_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

verify_config_version_req* verify_config_version_req::default_instance_ = NULL;

verify_config_version_req* verify_config_version_req::New() const {
  return new verify_config_version_req;
}

void verify_config_version_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5070;
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_config_version_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void verify_config_version_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* verify_config_version_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int verify_config_version_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_config_version_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_config_version_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_config_version_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_config_version_req::MergeFrom(const verify_config_version_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_config_version_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_config_version_req::CopyFrom(const verify_config_version_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_config_version_req::IsInitialized() const {

  return true;
}

void verify_config_version_req::Swap(verify_config_version_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_config_version_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_config_version_req_descriptor_;
  metadata.reflection = verify_config_version_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int verify_config_version_ack::kProtoidFieldNumber;
const int verify_config_version_ack::kVersionFieldNumber;
const int verify_config_version_ack::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

verify_config_version_ack::verify_config_version_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void verify_config_version_ack::InitAsDefaultInstance() {
}

verify_config_version_ack::verify_config_version_ack(const verify_config_version_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void verify_config_version_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5071;
  version_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

verify_config_version_ack::~verify_config_version_ack() {
  SharedDtor();
}

void verify_config_version_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void verify_config_version_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* verify_config_version_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return verify_config_version_ack_descriptor_;
}

const verify_config_version_ack& verify_config_version_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

verify_config_version_ack* verify_config_version_ack::default_instance_ = NULL;

verify_config_version_ack* verify_config_version_ack::New() const {
  return new verify_config_version_ack;
}

void verify_config_version_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5071;
    version_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool verify_config_version_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error_code;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error_code(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void verify_config_version_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* verify_config_version_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int verify_config_version_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional .SProtoSpace.MsgErrorType error_code = 3;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void verify_config_version_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const verify_config_version_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const verify_config_version_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void verify_config_version_ack::MergeFrom(const verify_config_version_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void verify_config_version_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void verify_config_version_ack::CopyFrom(const verify_config_version_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool verify_config_version_ack::IsInitialized() const {

  return true;
}

void verify_config_version_ack::Swap(verify_config_version_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(version_, other->version_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata verify_config_version_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = verify_config_version_ack_descriptor_;
  metadata.reflection = verify_config_version_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int debug_hero_attr_ntf::kProtoidFieldNumber;
const int debug_hero_attr_ntf::kUuidFieldNumber;
const int debug_hero_attr_ntf::kTypesFieldNumber;
const int debug_hero_attr_ntf::kValuesFieldNumber;
#endif  // !_MSC_VER

debug_hero_attr_ntf::debug_hero_attr_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void debug_hero_attr_ntf::InitAsDefaultInstance() {
}

debug_hero_attr_ntf::debug_hero_attr_ntf(const debug_hero_attr_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void debug_hero_attr_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7700;
  uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

debug_hero_attr_ntf::~debug_hero_attr_ntf() {
  SharedDtor();
}

void debug_hero_attr_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void debug_hero_attr_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* debug_hero_attr_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return debug_hero_attr_ntf_descriptor_;
}

const debug_hero_attr_ntf& debug_hero_attr_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

debug_hero_attr_ntf* debug_hero_attr_ntf::default_instance_ = NULL;

debug_hero_attr_ntf* debug_hero_attr_ntf::New() const {
  return new debug_hero_attr_ntf;
}

void debug_hero_attr_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7700;
    uuid_ = GOOGLE_ULONGLONG(0);
  }
  types_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool debug_hero_attr_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = debug_hero_attr_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uuid;
        break;
      }

      // optional uint64 uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_types;
        break;
      }

      // repeated string types = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_types()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->types(this->types_size() - 1).data(),
            this->types(this->types_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_types;
        if (input->ExpectTag(34)) goto parse_values;
        break;
      }

      // repeated string values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void debug_hero_attr_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = debug_hero_attr_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uuid(), output);
  }

  // repeated string types = 3;
  for (int i = 0; i < this->types_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->types(i).data(), this->types(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->types(i), output);
  }

  // repeated string values = 4;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* debug_hero_attr_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = debug_hero_attr_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 uuid = 2;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uuid(), target);
  }

  // repeated string types = 3;
  for (int i = 0; i < this->types_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->types(i).data(), this->types(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->types(i), target);
  }

  // repeated string values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int debug_hero_attr_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = debug_hero_attr_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

  }
  // repeated string types = 3;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->types(i));
  }

  // repeated string values = 4;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void debug_hero_attr_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const debug_hero_attr_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const debug_hero_attr_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void debug_hero_attr_ntf::MergeFrom(const debug_hero_attr_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  types_.MergeFrom(from.types_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void debug_hero_attr_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void debug_hero_attr_ntf::CopyFrom(const debug_hero_attr_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool debug_hero_attr_ntf::IsInitialized() const {

  return true;
}

void debug_hero_attr_ntf::Swap(debug_hero_attr_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(uuid_, other->uuid_);
    types_.Swap(&other->types_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata debug_hero_attr_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = debug_hero_attr_ntf_descriptor_;
  metadata.reflection = debug_hero_attr_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int waiting_in_line_ntf::kProtoidFieldNumber;
const int waiting_in_line_ntf::kWaitPosFieldNumber;
const int waiting_in_line_ntf::kLeftMinsFieldNumber;
#endif  // !_MSC_VER

waiting_in_line_ntf::waiting_in_line_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void waiting_in_line_ntf::InitAsDefaultInstance() {
}

waiting_in_line_ntf::waiting_in_line_ntf(const waiting_in_line_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void waiting_in_line_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5080;
  wait_pos_ = 0;
  left_mins_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

waiting_in_line_ntf::~waiting_in_line_ntf() {
  SharedDtor();
}

void waiting_in_line_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void waiting_in_line_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* waiting_in_line_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return waiting_in_line_ntf_descriptor_;
}

const waiting_in_line_ntf& waiting_in_line_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

waiting_in_line_ntf* waiting_in_line_ntf::default_instance_ = NULL;

waiting_in_line_ntf* waiting_in_line_ntf::New() const {
  return new waiting_in_line_ntf;
}

void waiting_in_line_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5080;
    wait_pos_ = 0;
    left_mins_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool waiting_in_line_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = waiting_in_line_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wait_pos;
        break;
      }

      // optional int32 wait_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wait_pos_)));
          set_has_wait_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left_mins;
        break;
      }

      // optional int32 left_mins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_mins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_mins_)));
          set_has_left_mins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void waiting_in_line_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = waiting_in_line_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 wait_pos = 2;
  if (has_wait_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wait_pos(), output);
  }

  // optional int32 left_mins = 3;
  if (has_left_mins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_mins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* waiting_in_line_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = waiting_in_line_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 wait_pos = 2;
  if (has_wait_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wait_pos(), target);
  }

  // optional int32 left_mins = 3;
  if (has_left_mins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_mins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int waiting_in_line_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = waiting_in_line_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 wait_pos = 2;
    if (has_wait_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wait_pos());
    }

    // optional int32 left_mins = 3;
    if (has_left_mins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_mins());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void waiting_in_line_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const waiting_in_line_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const waiting_in_line_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void waiting_in_line_ntf::MergeFrom(const waiting_in_line_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_wait_pos()) {
      set_wait_pos(from.wait_pos());
    }
    if (from.has_left_mins()) {
      set_left_mins(from.left_mins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void waiting_in_line_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void waiting_in_line_ntf::CopyFrom(const waiting_in_line_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool waiting_in_line_ntf::IsInitialized() const {

  return true;
}

void waiting_in_line_ntf::Swap(waiting_in_line_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(wait_pos_, other->wait_pos_);
    std::swap(left_mins_, other->left_mins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata waiting_in_line_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = waiting_in_line_ntf_descriptor_;
  metadata.reflection = waiting_in_line_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int finish_in_line_ntf::kProtoidFieldNumber;
const int finish_in_line_ntf::kTmFieldNumber;
#endif  // !_MSC_VER

finish_in_line_ntf::finish_in_line_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void finish_in_line_ntf::InitAsDefaultInstance() {
}

finish_in_line_ntf::finish_in_line_ntf(const finish_in_line_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void finish_in_line_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5081;
  tm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

finish_in_line_ntf::~finish_in_line_ntf() {
  SharedDtor();
}

void finish_in_line_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void finish_in_line_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* finish_in_line_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return finish_in_line_ntf_descriptor_;
}

const finish_in_line_ntf& finish_in_line_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

finish_in_line_ntf* finish_in_line_ntf::default_instance_ = NULL;

finish_in_line_ntf* finish_in_line_ntf::New() const {
  return new finish_in_line_ntf;
}

void finish_in_line_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5081;
    tm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool finish_in_line_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = finish_in_line_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tm;
        break;
      }

      // optional int32 tm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void finish_in_line_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = finish_in_line_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 tm = 2;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* finish_in_line_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = finish_in_line_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 tm = 2;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int finish_in_line_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = finish_in_line_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 tm = 2;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void finish_in_line_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const finish_in_line_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const finish_in_line_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void finish_in_line_ntf::MergeFrom(const finish_in_line_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_tm()) {
      set_tm(from.tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void finish_in_line_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void finish_in_line_ntf::CopyFrom(const finish_in_line_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool finish_in_line_ntf::IsInitialized() const {

  return true;
}

void finish_in_line_ntf::Swap(finish_in_line_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(tm_, other->tm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata finish_in_line_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = finish_in_line_ntf_descriptor_;
  metadata.reflection = finish_in_line_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_waiting_in_line_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

exit_waiting_in_line_req::exit_waiting_in_line_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_waiting_in_line_req::InitAsDefaultInstance() {
}

exit_waiting_in_line_req::exit_waiting_in_line_req(const exit_waiting_in_line_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_waiting_in_line_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5087;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_waiting_in_line_req::~exit_waiting_in_line_req() {
  SharedDtor();
}

void exit_waiting_in_line_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_waiting_in_line_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_waiting_in_line_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_waiting_in_line_req_descriptor_;
}

const exit_waiting_in_line_req& exit_waiting_in_line_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

exit_waiting_in_line_req* exit_waiting_in_line_req::default_instance_ = NULL;

exit_waiting_in_line_req* exit_waiting_in_line_req::New() const {
  return new exit_waiting_in_line_req;
}

void exit_waiting_in_line_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5087;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_waiting_in_line_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_waiting_in_line_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_waiting_in_line_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_waiting_in_line_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_waiting_in_line_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_waiting_in_line_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_waiting_in_line_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_waiting_in_line_req::MergeFrom(const exit_waiting_in_line_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_waiting_in_line_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_waiting_in_line_req::CopyFrom(const exit_waiting_in_line_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_waiting_in_line_req::IsInitialized() const {

  return true;
}

void exit_waiting_in_line_req::Swap(exit_waiting_in_line_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_waiting_in_line_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_waiting_in_line_req_descriptor_;
  metadata.reflection = exit_waiting_in_line_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int exit_waiting_in_line_ack::kProtoidFieldNumber;
const int exit_waiting_in_line_ack::kRetFieldNumber;
#endif  // !_MSC_VER

exit_waiting_in_line_ack::exit_waiting_in_line_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void exit_waiting_in_line_ack::InitAsDefaultInstance() {
}

exit_waiting_in_line_ack::exit_waiting_in_line_ack(const exit_waiting_in_line_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void exit_waiting_in_line_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5088;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

exit_waiting_in_line_ack::~exit_waiting_in_line_ack() {
  SharedDtor();
}

void exit_waiting_in_line_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void exit_waiting_in_line_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* exit_waiting_in_line_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return exit_waiting_in_line_ack_descriptor_;
}

const exit_waiting_in_line_ack& exit_waiting_in_line_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

exit_waiting_in_line_ack* exit_waiting_in_line_ack::default_instance_ = NULL;

exit_waiting_in_line_ack* exit_waiting_in_line_ack::New() const {
  return new exit_waiting_in_line_ack;
}

void exit_waiting_in_line_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5088;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool exit_waiting_in_line_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void exit_waiting_in_line_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* exit_waiting_in_line_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int exit_waiting_in_line_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void exit_waiting_in_line_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const exit_waiting_in_line_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const exit_waiting_in_line_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void exit_waiting_in_line_ack::MergeFrom(const exit_waiting_in_line_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void exit_waiting_in_line_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_waiting_in_line_ack::CopyFrom(const exit_waiting_in_line_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_waiting_in_line_ack::IsInitialized() const {

  return true;
}

void exit_waiting_in_line_ack::Swap(exit_waiting_in_line_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata exit_waiting_in_line_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = exit_waiting_in_line_ack_descriptor_;
  metadata.reflection = exit_waiting_in_line_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int user_event_track_ntf::kProtoidFieldNumber;
const int user_event_track_ntf::kTypeFieldNumber;
const int user_event_track_ntf::kIntDataSFieldNumber;
const int user_event_track_ntf::kStrDataSFieldNumber;
#endif  // !_MSC_VER

user_event_track_ntf::user_event_track_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void user_event_track_ntf::InitAsDefaultInstance() {
}

user_event_track_ntf::user_event_track_ntf(const user_event_track_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void user_event_track_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7820;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

user_event_track_ntf::~user_event_track_ntf() {
  SharedDtor();
}

void user_event_track_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void user_event_track_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* user_event_track_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return user_event_track_ntf_descriptor_;
}

const user_event_track_ntf& user_event_track_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

user_event_track_ntf* user_event_track_ntf::default_instance_ = NULL;

user_event_track_ntf* user_event_track_ntf::New() const {
  return new user_event_track_ntf;
}

void user_event_track_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7820;
    type_ = 0;
  }
  int_data_s_.Clear();
  str_data_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool user_event_track_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = user_event_track_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SProtoSpace.EUserEventTrackType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EUserEventTrackType_IsValid(value)) {
            set_type(static_cast< ::SProtoSpace::EUserEventTrackType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_data_s;
        break;
      }

      // repeated sint32 int_data_s = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_data_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 24, input, this->mutable_int_data_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_int_data_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_data_s;
        if (input->ExpectTag(34)) goto parse_str_data_s;
        break;
      }

      // repeated string str_data_s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_data_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_data_s()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_data_s(this->str_data_s_size() - 1).data(),
            this->str_data_s(this->str_data_s_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_data_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void user_event_track_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = user_event_track_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.EUserEventTrackType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated sint32 int_data_s = 3;
  for (int i = 0; i < this->int_data_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      3, this->int_data_s(i), output);
  }

  // repeated string str_data_s = 4;
  for (int i = 0; i < this->str_data_s_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str_data_s(i).data(), this->str_data_s(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_data_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* user_event_track_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = user_event_track_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.EUserEventTrackType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated sint32 int_data_s = 3;
  for (int i = 0; i < this->int_data_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(3, this->int_data_s(i), target);
  }

  // repeated string str_data_s = 4;
  for (int i = 0; i < this->str_data_s_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_data_s(i).data(), this->str_data_s(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->str_data_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int user_event_track_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = user_event_track_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.EUserEventTrackType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated sint32 int_data_s = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_data_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->int_data_s(i));
    }
    total_size += 1 * this->int_data_s_size() + data_size;
  }

  // repeated string str_data_s = 4;
  total_size += 1 * this->str_data_s_size();
  for (int i = 0; i < this->str_data_s_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_data_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void user_event_track_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const user_event_track_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const user_event_track_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void user_event_track_ntf::MergeFrom(const user_event_track_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  int_data_s_.MergeFrom(from.int_data_s_);
  str_data_s_.MergeFrom(from.str_data_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void user_event_track_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void user_event_track_ntf::CopyFrom(const user_event_track_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool user_event_track_ntf::IsInitialized() const {

  return true;
}

void user_event_track_ntf::Swap(user_event_track_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    int_data_s_.Swap(&other->int_data_s_);
    str_data_s_.Swap(&other->str_data_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata user_event_track_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = user_event_track_ntf_descriptor_;
  metadata.reflection = user_event_track_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_guide_info::kGuideIdFieldNumber;
const int role_guide_info::kStepIdsFieldNumber;
#endif  // !_MSC_VER

role_guide_info::role_guide_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_guide_info::InitAsDefaultInstance() {
}

role_guide_info::role_guide_info(const role_guide_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_guide_info::SharedCtor() {
  _cached_size_ = 0;
  guide_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_guide_info::~role_guide_info() {
  SharedDtor();
}

void role_guide_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_guide_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_guide_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_guide_info_descriptor_;
}

const role_guide_info& role_guide_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_guide_info* role_guide_info::default_instance_ = NULL;

role_guide_info* role_guide_info::New() const {
  return new role_guide_info;
}

void role_guide_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guide_id_ = 0;
  }
  step_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_guide_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guide_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_ids;
        break;
      }

      // repeated int32 step_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_step_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_step_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_guide_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guide_id = 1;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guide_id(), output);
  }

  // repeated int32 step_ids = 2;
  for (int i = 0; i < this->step_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->step_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_guide_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guide_id = 1;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guide_id(), target);
  }

  // repeated int32 step_ids = 2;
  for (int i = 0; i < this->step_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->step_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_guide_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guide_id = 1;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide_id());
    }

  }
  // repeated int32 step_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->step_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->step_ids(i));
    }
    total_size += 1 * this->step_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_guide_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_guide_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_guide_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_guide_info::MergeFrom(const role_guide_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_ids_.MergeFrom(from.step_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_guide_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_guide_info::CopyFrom(const role_guide_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_guide_info::IsInitialized() const {

  return true;
}

void role_guide_info::Swap(role_guide_info* other) {
  if (other != this) {
    std::swap(guide_id_, other->guide_id_);
    step_ids_.Swap(&other->step_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_guide_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_guide_info_descriptor_;
  metadata.reflection = role_guide_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_guide_ntf::kProtoidFieldNumber;
const int role_guide_ntf::kPassAllFieldNumber;
const int role_guide_ntf::kGuideDataFieldNumber;
const int role_guide_ntf::kGuideIdsFieldNumber;
#endif  // !_MSC_VER

role_guide_ntf::role_guide_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_guide_ntf::InitAsDefaultInstance() {
}

role_guide_ntf::role_guide_ntf(const role_guide_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_guide_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5082;
  pass_all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_guide_ntf::~role_guide_ntf() {
  SharedDtor();
}

void role_guide_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_guide_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_guide_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_guide_ntf_descriptor_;
}

const role_guide_ntf& role_guide_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_guide_ntf* role_guide_ntf::default_instance_ = NULL;

role_guide_ntf* role_guide_ntf::New() const {
  return new role_guide_ntf;
}

void role_guide_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5082;
    pass_all_ = false;
  }
  guide_data_.Clear();
  guide_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_guide_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_all;
        break;
      }

      // optional bool pass_all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pass_all_)));
          set_has_pass_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guide_data;
        break;
      }

      // repeated .SProtoSpace.role_guide_info guide_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guide_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guide_data;
        if (input->ExpectTag(32)) goto parse_guide_ids;
        break;
      }

      // repeated int32 guide_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_guide_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_guide_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guide_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_guide_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional bool pass_all = 2;
  if (has_pass_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pass_all(), output);
  }

  // repeated .SProtoSpace.role_guide_info guide_data = 3;
  for (int i = 0; i < this->guide_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->guide_data(i), output);
  }

  // repeated int32 guide_ids = 4;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->guide_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_guide_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional bool pass_all = 2;
  if (has_pass_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pass_all(), target);
  }

  // repeated .SProtoSpace.role_guide_info guide_data = 3;
  for (int i = 0; i < this->guide_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->guide_data(i), target);
  }

  // repeated int32 guide_ids = 4;
  for (int i = 0; i < this->guide_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->guide_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_guide_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional bool pass_all = 2;
    if (has_pass_all()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SProtoSpace.role_guide_info guide_data = 3;
  total_size += 1 * this->guide_data_size();
  for (int i = 0; i < this->guide_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guide_data(i));
  }

  // repeated int32 guide_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->guide_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->guide_ids(i));
    }
    total_size += 1 * this->guide_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_guide_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_guide_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_guide_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_guide_ntf::MergeFrom(const role_guide_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  guide_data_.MergeFrom(from.guide_data_);
  guide_ids_.MergeFrom(from.guide_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pass_all()) {
      set_pass_all(from.pass_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_guide_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_guide_ntf::CopyFrom(const role_guide_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_guide_ntf::IsInitialized() const {

  return true;
}

void role_guide_ntf::Swap(role_guide_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pass_all_, other->pass_all_);
    guide_data_.Swap(&other->guide_data_);
    guide_ids_.Swap(&other->guide_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_guide_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_guide_ntf_descriptor_;
  metadata.reflection = role_guide_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_guide_req::kProtoidFieldNumber;
const int role_guide_req::kGuideIdFieldNumber;
const int role_guide_req::kStepIdFieldNumber;
const int role_guide_req::kSkipFieldNumber;
const int role_guide_req::kCurGuidePassFieldNumber;
#endif  // !_MSC_VER

role_guide_req::role_guide_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_guide_req::InitAsDefaultInstance() {
}

role_guide_req::role_guide_req(const role_guide_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_guide_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5083;
  guide_id_ = 0;
  step_id_ = 0;
  skip_ = false;
  cur_guide_pass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_guide_req::~role_guide_req() {
  SharedDtor();
}

void role_guide_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_guide_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_guide_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_guide_req_descriptor_;
}

const role_guide_req& role_guide_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_guide_req* role_guide_req::default_instance_ = NULL;

role_guide_req* role_guide_req::New() const {
  return new role_guide_req;
}

void role_guide_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5083;
    guide_id_ = 0;
    step_id_ = 0;
    skip_ = false;
    cur_guide_pass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_guide_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guide_id;
        break;
      }

      // optional int32 guide_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_id;
        break;
      }

      // optional int32 step_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skip;
        break;
      }

      // optional bool skip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_guide_pass;
        break;
      }

      // optional bool cur_guide_pass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_guide_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cur_guide_pass_)));
          set_has_cur_guide_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_guide_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 guide_id = 2;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guide_id(), output);
  }

  // optional int32 step_id = 3;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step_id(), output);
  }

  // optional bool skip = 4;
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skip(), output);
  }

  // optional bool cur_guide_pass = 5;
  if (has_cur_guide_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cur_guide_pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_guide_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 guide_id = 2;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guide_id(), target);
  }

  // optional int32 step_id = 3;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step_id(), target);
  }

  // optional bool skip = 4;
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skip(), target);
  }

  // optional bool cur_guide_pass = 5;
  if (has_cur_guide_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cur_guide_pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_guide_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 guide_id = 2;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide_id());
    }

    // optional int32 step_id = 3;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_id());
    }

    // optional bool skip = 4;
    if (has_skip()) {
      total_size += 1 + 1;
    }

    // optional bool cur_guide_pass = 5;
    if (has_cur_guide_pass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_guide_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_guide_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_guide_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_guide_req::MergeFrom(const role_guide_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_cur_guide_pass()) {
      set_cur_guide_pass(from.cur_guide_pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_guide_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_guide_req::CopyFrom(const role_guide_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_guide_req::IsInitialized() const {

  return true;
}

void role_guide_req::Swap(role_guide_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(guide_id_, other->guide_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(skip_, other->skip_);
    std::swap(cur_guide_pass_, other->cur_guide_pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_guide_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_guide_req_descriptor_;
  metadata.reflection = role_guide_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_guide_ack::kProtoidFieldNumber;
const int role_guide_ack::kGuideIdFieldNumber;
const int role_guide_ack::kStepIdFieldNumber;
const int role_guide_ack::kRetFieldNumber;
#endif  // !_MSC_VER

role_guide_ack::role_guide_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_guide_ack::InitAsDefaultInstance() {
}

role_guide_ack::role_guide_ack(const role_guide_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_guide_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5084;
  guide_id_ = 0;
  step_id_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_guide_ack::~role_guide_ack() {
  SharedDtor();
}

void role_guide_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_guide_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_guide_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_guide_ack_descriptor_;
}

const role_guide_ack& role_guide_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

role_guide_ack* role_guide_ack::default_instance_ = NULL;

role_guide_ack* role_guide_ack::New() const {
  return new role_guide_ack;
}

void role_guide_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5084;
    guide_id_ = 0;
    step_id_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_guide_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guide_id;
        break;
      }

      // optional int32 guide_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_id_)));
          set_has_guide_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_id;
        break;
      }

      // optional int32 step_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_id_)));
          set_has_step_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional int32 ret = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_guide_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 guide_id = 2;
  if (has_guide_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guide_id(), output);
  }

  // optional int32 step_id = 3;
  if (has_step_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step_id(), output);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_guide_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 guide_id = 2;
  if (has_guide_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guide_id(), target);
  }

  // optional int32 step_id = 3;
  if (has_step_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step_id(), target);
  }

  // optional int32 ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_guide_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 guide_id = 2;
    if (has_guide_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide_id());
    }

    // optional int32 step_id = 3;
    if (has_step_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step_id());
    }

    // optional int32 ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_guide_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_guide_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_guide_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_guide_ack::MergeFrom(const role_guide_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_guide_id()) {
      set_guide_id(from.guide_id());
    }
    if (from.has_step_id()) {
      set_step_id(from.step_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_guide_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_guide_ack::CopyFrom(const role_guide_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_guide_ack::IsInitialized() const {

  return true;
}

void role_guide_ack::Swap(role_guide_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(guide_id_, other->guide_id_);
    std::swap(step_id_, other->step_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_guide_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_guide_ack_descriptor_;
  metadata.reflection = role_guide_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int onekey_skip_guide_req::kProtoidFieldNumber;
#endif  // !_MSC_VER

onekey_skip_guide_req::onekey_skip_guide_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void onekey_skip_guide_req::InitAsDefaultInstance() {
}

onekey_skip_guide_req::onekey_skip_guide_req(const onekey_skip_guide_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void onekey_skip_guide_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5085;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

onekey_skip_guide_req::~onekey_skip_guide_req() {
  SharedDtor();
}

void onekey_skip_guide_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void onekey_skip_guide_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* onekey_skip_guide_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return onekey_skip_guide_req_descriptor_;
}

const onekey_skip_guide_req& onekey_skip_guide_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

onekey_skip_guide_req* onekey_skip_guide_req::default_instance_ = NULL;

onekey_skip_guide_req* onekey_skip_guide_req::New() const {
  return new onekey_skip_guide_req;
}

void onekey_skip_guide_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5085;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool onekey_skip_guide_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void onekey_skip_guide_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* onekey_skip_guide_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int onekey_skip_guide_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void onekey_skip_guide_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const onekey_skip_guide_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const onekey_skip_guide_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void onekey_skip_guide_req::MergeFrom(const onekey_skip_guide_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void onekey_skip_guide_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void onekey_skip_guide_req::CopyFrom(const onekey_skip_guide_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool onekey_skip_guide_req::IsInitialized() const {

  return true;
}

void onekey_skip_guide_req::Swap(onekey_skip_guide_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata onekey_skip_guide_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = onekey_skip_guide_req_descriptor_;
  metadata.reflection = onekey_skip_guide_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int onekey_skip_guide_ack::kProtoidFieldNumber;
const int onekey_skip_guide_ack::kRetFieldNumber;
#endif  // !_MSC_VER

onekey_skip_guide_ack::onekey_skip_guide_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void onekey_skip_guide_ack::InitAsDefaultInstance() {
}

onekey_skip_guide_ack::onekey_skip_guide_ack(const onekey_skip_guide_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void onekey_skip_guide_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5086;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

onekey_skip_guide_ack::~onekey_skip_guide_ack() {
  SharedDtor();
}

void onekey_skip_guide_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void onekey_skip_guide_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* onekey_skip_guide_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return onekey_skip_guide_ack_descriptor_;
}

const onekey_skip_guide_ack& onekey_skip_guide_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

onekey_skip_guide_ack* onekey_skip_guide_ack::default_instance_ = NULL;

onekey_skip_guide_ack* onekey_skip_guide_ack::New() const {
  return new onekey_skip_guide_ack;
}

void onekey_skip_guide_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5086;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool onekey_skip_guide_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void onekey_skip_guide_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* onekey_skip_guide_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int onekey_skip_guide_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void onekey_skip_guide_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const onekey_skip_guide_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const onekey_skip_guide_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void onekey_skip_guide_ack::MergeFrom(const onekey_skip_guide_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void onekey_skip_guide_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void onekey_skip_guide_ack::CopyFrom(const onekey_skip_guide_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool onekey_skip_guide_ack::IsInitialized() const {

  return true;
}

void onekey_skip_guide_ack::Swap(onekey_skip_guide_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata onekey_skip_guide_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = onekey_skip_guide_ack_descriptor_;
  metadata.reflection = onekey_skip_guide_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_little_game_set_req::kProtoidFieldNumber;
const int plot_little_game_set_req::kCfgIdFieldNumber;
const int plot_little_game_set_req::kStateFieldNumber;
#endif  // !_MSC_VER

plot_little_game_set_req::plot_little_game_set_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_little_game_set_req::InitAsDefaultInstance() {
}

plot_little_game_set_req::plot_little_game_set_req(const plot_little_game_set_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_little_game_set_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7850;
  cfg_id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_little_game_set_req::~plot_little_game_set_req() {
  SharedDtor();
}

void plot_little_game_set_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_little_game_set_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_little_game_set_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_little_game_set_req_descriptor_;
}

const plot_little_game_set_req& plot_little_game_set_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_little_game_set_req* plot_little_game_set_req::default_instance_ = NULL;

plot_little_game_set_req* plot_little_game_set_req::New() const {
  return new plot_little_game_set_req;
}

void plot_little_game_set_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7850;
    cfg_id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_little_game_set_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg_id;
        break;
      }

      // optional int32 cfg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_little_game_set_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 cfg_id = 2;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cfg_id(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_little_game_set_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 cfg_id = 2;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cfg_id(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_little_game_set_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 cfg_id = 2;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_little_game_set_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_little_game_set_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_little_game_set_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_little_game_set_req::MergeFrom(const plot_little_game_set_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_little_game_set_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_little_game_set_req::CopyFrom(const plot_little_game_set_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_little_game_set_req::IsInitialized() const {

  return true;
}

void plot_little_game_set_req::Swap(plot_little_game_set_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_little_game_set_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_little_game_set_req_descriptor_;
  metadata.reflection = plot_little_game_set_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_little_game_set_ack::kProtoidFieldNumber;
const int plot_little_game_set_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

plot_little_game_set_ack::plot_little_game_set_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_little_game_set_ack::InitAsDefaultInstance() {
}

plot_little_game_set_ack::plot_little_game_set_ack(const plot_little_game_set_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_little_game_set_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7851;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_little_game_set_ack::~plot_little_game_set_ack() {
  SharedDtor();
}

void plot_little_game_set_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_little_game_set_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_little_game_set_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_little_game_set_ack_descriptor_;
}

const plot_little_game_set_ack& plot_little_game_set_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_little_game_set_ack* plot_little_game_set_ack::default_instance_ = NULL;

plot_little_game_set_ack* plot_little_game_set_ack::New() const {
  return new plot_little_game_set_ack;
}

void plot_little_game_set_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7851;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_little_game_set_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_little_game_set_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_little_game_set_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_little_game_set_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.MsgErrorType error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_little_game_set_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_little_game_set_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_little_game_set_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_little_game_set_ack::MergeFrom(const plot_little_game_set_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_little_game_set_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_little_game_set_ack::CopyFrom(const plot_little_game_set_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_little_game_set_ack::IsInitialized() const {

  return true;
}

void plot_little_game_set_ack::Swap(plot_little_game_set_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_little_game_set_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_little_game_set_ack_descriptor_;
  metadata.reflection = plot_little_game_set_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_little_game_get_req::kProtoidFieldNumber;
const int plot_little_game_get_req::kCfgIdSFieldNumber;
#endif  // !_MSC_VER

plot_little_game_get_req::plot_little_game_get_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_little_game_get_req::InitAsDefaultInstance() {
}

plot_little_game_get_req::plot_little_game_get_req(const plot_little_game_get_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_little_game_get_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7852;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_little_game_get_req::~plot_little_game_get_req() {
  SharedDtor();
}

void plot_little_game_get_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void plot_little_game_get_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_little_game_get_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_little_game_get_req_descriptor_;
}

const plot_little_game_get_req& plot_little_game_get_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_little_game_get_req* plot_little_game_get_req::default_instance_ = NULL;

plot_little_game_get_req* plot_little_game_get_req::New() const {
  return new plot_little_game_get_req;
}

void plot_little_game_get_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7852;
  }
  cfg_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_little_game_get_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg_id_s;
        break;
      }

      // repeated int32 cfg_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfg_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cfg_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cfg_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfg_id_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_little_game_get_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 cfg_id_s = 2;
  for (int i = 0; i < this->cfg_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cfg_id_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_little_game_get_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 cfg_id_s = 2;
  for (int i = 0; i < this->cfg_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cfg_id_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_little_game_get_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 cfg_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfg_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cfg_id_s(i));
    }
    total_size += 1 * this->cfg_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_little_game_get_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_little_game_get_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_little_game_get_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_little_game_get_req::MergeFrom(const plot_little_game_get_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfg_id_s_.MergeFrom(from.cfg_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_little_game_get_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_little_game_get_req::CopyFrom(const plot_little_game_get_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_little_game_get_req::IsInitialized() const {

  return true;
}

void plot_little_game_get_req::Swap(plot_little_game_get_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    cfg_id_s_.Swap(&other->cfg_id_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_little_game_get_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_little_game_get_req_descriptor_;
  metadata.reflection = plot_little_game_get_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int plot_little_game_get_ack::kProtoidFieldNumber;
const int plot_little_game_get_ack::kPackFieldNumber;
const int plot_little_game_get_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

plot_little_game_get_ack::plot_little_game_get_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void plot_little_game_get_ack::InitAsDefaultInstance() {
  pack_ = const_cast< ::SProtoSpace::pack_plot_little_game*>(&::SProtoSpace::pack_plot_little_game::default_instance());
}

plot_little_game_get_ack::plot_little_game_get_ack(const plot_little_game_get_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void plot_little_game_get_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7853;
  pack_ = NULL;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

plot_little_game_get_ack::~plot_little_game_get_ack() {
  SharedDtor();
}

void plot_little_game_get_ack::SharedDtor() {
  if (this != default_instance_) {
    delete pack_;
  }
}

void plot_little_game_get_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* plot_little_game_get_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return plot_little_game_get_ack_descriptor_;
}

const plot_little_game_get_ack& plot_little_game_get_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

plot_little_game_get_ack* plot_little_game_get_ack::default_instance_ = NULL;

plot_little_game_get_ack* plot_little_game_get_ack::New() const {
  return new plot_little_game_get_ack;
}

void plot_little_game_get_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7853;
    if (has_pack()) {
      if (pack_ != NULL) pack_->::SProtoSpace::pack_plot_little_game::Clear();
    }
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool plot_little_game_get_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack;
        break;
      }

      // optional .SProtoSpace.pack_plot_little_game pack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void plot_little_game_get_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.pack_plot_little_game pack = 2;
  if (has_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pack(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* plot_little_game_get_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.pack_plot_little_game pack = 2;
  if (has_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pack(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int plot_little_game_get_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.pack_plot_little_game pack = 2;
    if (has_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void plot_little_game_get_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const plot_little_game_get_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const plot_little_game_get_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void plot_little_game_get_ack::MergeFrom(const plot_little_game_get_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pack()) {
      mutable_pack()->::SProtoSpace::pack_plot_little_game::MergeFrom(from.pack());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void plot_little_game_get_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void plot_little_game_get_ack::CopyFrom(const plot_little_game_get_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool plot_little_game_get_ack::IsInitialized() const {

  return true;
}

void plot_little_game_get_ack::Swap(plot_little_game_get_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pack_, other->pack_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata plot_little_game_get_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = plot_little_game_get_ack_descriptor_;
  metadata.reflection = plot_little_game_get_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_get_req::kProtoidFieldNumber;
const int pet_get_req::kAskPetIdSFieldNumber;
#endif  // !_MSC_VER

pet_get_req::pet_get_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_get_req::InitAsDefaultInstance() {
}

pet_get_req::pet_get_req(const pet_get_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_get_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7860;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_get_req::~pet_get_req() {
  SharedDtor();
}

void pet_get_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_get_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_get_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_get_req_descriptor_;
}

const pet_get_req& pet_get_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_get_req* pet_get_req::default_instance_ = NULL;

pet_get_req* pet_get_req::New() const {
  return new pet_get_req;
}

void pet_get_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7860;
  }
  ask_pet_id_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_get_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ask_pet_id_s;
        break;
      }

      // repeated int32 ask_pet_id_s = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ask_pet_id_s:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ask_pet_id_s())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ask_pet_id_s())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ask_pet_id_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_get_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated int32 ask_pet_id_s = 2;
  for (int i = 0; i < this->ask_pet_id_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ask_pet_id_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_get_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated int32 ask_pet_id_s = 2;
  for (int i = 0; i < this->ask_pet_id_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ask_pet_id_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_get_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated int32 ask_pet_id_s = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ask_pet_id_s_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ask_pet_id_s(i));
    }
    total_size += 1 * this->ask_pet_id_s_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_get_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_get_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_get_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_get_req::MergeFrom(const pet_get_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  ask_pet_id_s_.MergeFrom(from.ask_pet_id_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_get_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_get_req::CopyFrom(const pet_get_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_get_req::IsInitialized() const {

  return true;
}

void pet_get_req::Swap(pet_get_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    ask_pet_id_s_.Swap(&other->ask_pet_id_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_get_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_get_req_descriptor_;
  metadata.reflection = pet_get_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_get_ack::kProtoidFieldNumber;
const int pet_get_ack::kPetPackFieldNumber;
const int pet_get_ack::kCurShowPetIdFieldNumber;
const int pet_get_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

pet_get_ack::pet_get_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_get_ack::InitAsDefaultInstance() {
  pet_pack_ = const_cast< ::SProtoSpace::pet_pack_data*>(&::SProtoSpace::pet_pack_data::default_instance());
}

pet_get_ack::pet_get_ack(const pet_get_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_get_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7861;
  pet_pack_ = NULL;
  cur_show_pet_id_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_get_ack::~pet_get_ack() {
  SharedDtor();
}

void pet_get_ack::SharedDtor() {
  if (this != default_instance_) {
    delete pet_pack_;
  }
}

void pet_get_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_get_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_get_ack_descriptor_;
}

const pet_get_ack& pet_get_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_get_ack* pet_get_ack::default_instance_ = NULL;

pet_get_ack* pet_get_ack::New() const {
  return new pet_get_ack;
}

void pet_get_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7861;
    if (has_pet_pack()) {
      if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
    }
    cur_show_pet_id_ = 0;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_get_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pet_pack;
        break;
      }

      // optional .SProtoSpace.pet_pack_data pet_pack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_show_pet_id;
        break;
      }

      // optional int32 cur_show_pet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_show_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_show_pet_id_)));
          set_has_cur_show_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_get_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 2;
  if (has_pet_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pet_pack(), output);
  }

  // optional int32 cur_show_pet_id = 3;
  if (has_cur_show_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_show_pet_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_get_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 2;
  if (has_pet_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pet_pack(), target);
  }

  // optional int32 cur_show_pet_id = 3;
  if (has_cur_show_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_show_pet_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_get_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.pet_pack_data pet_pack = 2;
    if (has_pet_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_pack());
    }

    // optional int32 cur_show_pet_id = 3;
    if (has_cur_show_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_show_pet_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_get_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_get_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_get_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_get_ack::MergeFrom(const pet_get_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_pack()) {
      mutable_pet_pack()->::SProtoSpace::pet_pack_data::MergeFrom(from.pet_pack());
    }
    if (from.has_cur_show_pet_id()) {
      set_cur_show_pet_id(from.cur_show_pet_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_get_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_get_ack::CopyFrom(const pet_get_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_get_ack::IsInitialized() const {

  return true;
}

void pet_get_ack::Swap(pet_get_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_pack_, other->pet_pack_);
    std::swap(cur_show_pet_id_, other->cur_show_pet_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_get_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_get_ack_descriptor_;
  metadata.reflection = pet_get_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_change_name_req::kProtoidFieldNumber;
const int pet_change_name_req::kPetIdFieldNumber;
const int pet_change_name_req::kNewNameFieldNumber;
#endif  // !_MSC_VER

pet_change_name_req::pet_change_name_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_change_name_req::InitAsDefaultInstance() {
}

pet_change_name_req::pet_change_name_req(const pet_change_name_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_change_name_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7862;
  pet_id_ = 0;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_change_name_req::~pet_change_name_req() {
  SharedDtor();
}

void pet_change_name_req::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void pet_change_name_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_change_name_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_change_name_req_descriptor_;
}

const pet_change_name_req& pet_change_name_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_change_name_req* pet_change_name_req::default_instance_ = NULL;

pet_change_name_req* pet_change_name_req::New() const {
  return new pet_change_name_req;
}

void pet_change_name_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7862;
    pet_id_ = 0;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_change_name_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_name;
        break;
      }

      // optional string new_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_change_name_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional string new_name = 3;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_change_name_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional string new_name = 3;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_change_name_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional string new_name = 3;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_change_name_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_change_name_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_change_name_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_change_name_req::MergeFrom(const pet_change_name_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_change_name_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_change_name_req::CopyFrom(const pet_change_name_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_change_name_req::IsInitialized() const {

  return true;
}

void pet_change_name_req::Swap(pet_change_name_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(new_name_, other->new_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_change_name_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_change_name_req_descriptor_;
  metadata.reflection = pet_change_name_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_change_name_ack::kProtoidFieldNumber;
const int pet_change_name_ack::kPetIdFieldNumber;
const int pet_change_name_ack::kNewNameFieldNumber;
const int pet_change_name_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

pet_change_name_ack::pet_change_name_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_change_name_ack::InitAsDefaultInstance() {
}

pet_change_name_ack::pet_change_name_ack(const pet_change_name_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_change_name_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7863;
  pet_id_ = 0;
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_change_name_ack::~pet_change_name_ack() {
  SharedDtor();
}

void pet_change_name_ack::SharedDtor() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (this != default_instance_) {
  }
}

void pet_change_name_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_change_name_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_change_name_ack_descriptor_;
}

const pet_change_name_ack& pet_change_name_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_change_name_ack* pet_change_name_ack::default_instance_ = NULL;

pet_change_name_ack* pet_change_name_ack::New() const {
  return new pet_change_name_ack;
}

void pet_change_name_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7863;
    pet_id_ = 0;
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_change_name_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_new_name;
        break;
      }

      // optional string new_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_change_name_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional string new_name = 3;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->new_name(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_change_name_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional string new_name = 3;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->new_name(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_change_name_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional string new_name = 3;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_change_name_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_change_name_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_change_name_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_change_name_ack::MergeFrom(const pet_change_name_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_change_name_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_change_name_ack::CopyFrom(const pet_change_name_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_change_name_ack::IsInitialized() const {

  return true;
}

void pet_change_name_ack::Swap(pet_change_name_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(new_name_, other->new_name_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_change_name_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_change_name_ack_descriptor_;
  metadata.reflection = pet_change_name_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_do_action_req::kProtoidFieldNumber;
const int pet_do_action_req::kActionIdFieldNumber;
const int pet_do_action_req::kPetIdFieldNumber;
#endif  // !_MSC_VER

pet_do_action_req::pet_do_action_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_do_action_req::InitAsDefaultInstance() {
}

pet_do_action_req::pet_do_action_req(const pet_do_action_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_do_action_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7864;
  action_id_ = 0;
  pet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_do_action_req::~pet_do_action_req() {
  SharedDtor();
}

void pet_do_action_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_do_action_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_do_action_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_do_action_req_descriptor_;
}

const pet_do_action_req& pet_do_action_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_do_action_req* pet_do_action_req::default_instance_ = NULL;

pet_do_action_req* pet_do_action_req::New() const {
  return new pet_do_action_req;
}

void pet_do_action_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7864;
    action_id_ = 0;
    pet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_do_action_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // optional int32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_do_action_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_id(), output);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_do_action_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_id(), target);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_do_action_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

    // optional int32 pet_id = 3;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_do_action_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_do_action_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_do_action_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_do_action_req::MergeFrom(const pet_do_action_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_do_action_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_do_action_req::CopyFrom(const pet_do_action_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_do_action_req::IsInitialized() const {

  return true;
}

void pet_do_action_req::Swap(pet_do_action_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(action_id_, other->action_id_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_do_action_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_do_action_req_descriptor_;
  metadata.reflection = pet_do_action_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_do_action_ack::kProtoidFieldNumber;
const int pet_do_action_ack::kActionIdFieldNumber;
const int pet_do_action_ack::kPetIdFieldNumber;
const int pet_do_action_ack::kPetPackFieldNumber;
const int pet_do_action_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

pet_do_action_ack::pet_do_action_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_do_action_ack::InitAsDefaultInstance() {
  pet_pack_ = const_cast< ::SProtoSpace::pet_pack_data*>(&::SProtoSpace::pet_pack_data::default_instance());
}

pet_do_action_ack::pet_do_action_ack(const pet_do_action_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_do_action_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7865;
  action_id_ = 0;
  pet_id_ = 0;
  pet_pack_ = NULL;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_do_action_ack::~pet_do_action_ack() {
  SharedDtor();
}

void pet_do_action_ack::SharedDtor() {
  if (this != default_instance_) {
    delete pet_pack_;
  }
}

void pet_do_action_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_do_action_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_do_action_ack_descriptor_;
}

const pet_do_action_ack& pet_do_action_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_do_action_ack* pet_do_action_ack::default_instance_ = NULL;

pet_do_action_ack* pet_do_action_ack::New() const {
  return new pet_do_action_ack;
}

void pet_do_action_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7865;
    action_id_ = 0;
    pet_id_ = 0;
    if (has_pet_pack()) {
      if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
    }
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_do_action_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_action_id;
        break;
      }

      // optional int32 action_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_id_)));
          set_has_action_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet_pack;
        break;
      }

      // optional .SProtoSpace.pet_pack_data pet_pack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_do_action_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 action_id = 2;
  if (has_action_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->action_id(), output);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pet_id(), output);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 4;
  if (has_pet_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet_pack(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_do_action_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 action_id = 2;
  if (has_action_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->action_id(), target);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pet_id(), target);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 4;
  if (has_pet_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet_pack(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_do_action_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 action_id = 2;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action_id());
    }

    // optional int32 pet_id = 3;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional .SProtoSpace.pet_pack_data pet_pack = 4;
    if (has_pet_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_pack());
    }

    // optional .SProtoSpace.MsgErrorType error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_do_action_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_do_action_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_do_action_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_do_action_ack::MergeFrom(const pet_do_action_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_action_id()) {
      set_action_id(from.action_id());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_pet_pack()) {
      mutable_pet_pack()->::SProtoSpace::pet_pack_data::MergeFrom(from.pet_pack());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_do_action_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_do_action_ack::CopyFrom(const pet_do_action_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_do_action_ack::IsInitialized() const {

  return true;
}

void pet_do_action_ack::Swap(pet_do_action_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(action_id_, other->action_id_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_pack_, other->pet_pack_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_do_action_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_do_action_ack_descriptor_;
  metadata.reflection = pet_do_action_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_send_out_req::kProtoidFieldNumber;
const int pet_send_out_req::kOutIdFieldNumber;
const int pet_send_out_req::kPetIdFieldNumber;
#endif  // !_MSC_VER

pet_send_out_req::pet_send_out_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_send_out_req::InitAsDefaultInstance() {
}

pet_send_out_req::pet_send_out_req(const pet_send_out_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_send_out_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7866;
  out_id_ = 0;
  pet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_send_out_req::~pet_send_out_req() {
  SharedDtor();
}

void pet_send_out_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_send_out_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_send_out_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_send_out_req_descriptor_;
}

const pet_send_out_req& pet_send_out_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_send_out_req* pet_send_out_req::default_instance_ = NULL;

pet_send_out_req* pet_send_out_req::New() const {
  return new pet_send_out_req;
}

void pet_send_out_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7866;
    out_id_ = 0;
    pet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_send_out_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_id;
        break;
      }

      // optional int32 out_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_id_)));
          set_has_out_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_send_out_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 out_id = 2;
  if (has_out_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_id(), output);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_send_out_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 out_id = 2;
  if (has_out_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_id(), target);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_send_out_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 out_id = 2;
    if (has_out_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_id());
    }

    // optional int32 pet_id = 3;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_send_out_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_send_out_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_send_out_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_send_out_req::MergeFrom(const pet_send_out_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_out_id()) {
      set_out_id(from.out_id());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_send_out_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_send_out_req::CopyFrom(const pet_send_out_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_send_out_req::IsInitialized() const {

  return true;
}

void pet_send_out_req::Swap(pet_send_out_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(out_id_, other->out_id_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_send_out_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_send_out_req_descriptor_;
  metadata.reflection = pet_send_out_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_send_out_ack::kProtoidFieldNumber;
const int pet_send_out_ack::kOutIdFieldNumber;
const int pet_send_out_ack::kPetIdFieldNumber;
const int pet_send_out_ack::kPetPackFieldNumber;
const int pet_send_out_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

pet_send_out_ack::pet_send_out_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_send_out_ack::InitAsDefaultInstance() {
  pet_pack_ = const_cast< ::SProtoSpace::pet_pack_data*>(&::SProtoSpace::pet_pack_data::default_instance());
}

pet_send_out_ack::pet_send_out_ack(const pet_send_out_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_send_out_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7867;
  out_id_ = 0;
  pet_id_ = 0;
  pet_pack_ = NULL;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_send_out_ack::~pet_send_out_ack() {
  SharedDtor();
}

void pet_send_out_ack::SharedDtor() {
  if (this != default_instance_) {
    delete pet_pack_;
  }
}

void pet_send_out_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_send_out_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_send_out_ack_descriptor_;
}

const pet_send_out_ack& pet_send_out_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_send_out_ack* pet_send_out_ack::default_instance_ = NULL;

pet_send_out_ack* pet_send_out_ack::New() const {
  return new pet_send_out_ack;
}

void pet_send_out_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7867;
    out_id_ = 0;
    pet_id_ = 0;
    if (has_pet_pack()) {
      if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
    }
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_send_out_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_id;
        break;
      }

      // optional int32 out_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_id_)));
          set_has_out_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pet_pack;
        break;
      }

      // optional .SProtoSpace.pet_pack_data pet_pack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_send_out_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 out_id = 2;
  if (has_out_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->out_id(), output);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pet_id(), output);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 4;
  if (has_pet_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pet_pack(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_send_out_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 out_id = 2;
  if (has_out_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->out_id(), target);
  }

  // optional int32 pet_id = 3;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pet_id(), target);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 4;
  if (has_pet_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pet_pack(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_send_out_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 out_id = 2;
    if (has_out_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out_id());
    }

    // optional int32 pet_id = 3;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional .SProtoSpace.pet_pack_data pet_pack = 4;
    if (has_pet_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_pack());
    }

    // optional .SProtoSpace.MsgErrorType error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_send_out_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_send_out_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_send_out_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_send_out_ack::MergeFrom(const pet_send_out_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_out_id()) {
      set_out_id(from.out_id());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_pet_pack()) {
      mutable_pet_pack()->::SProtoSpace::pet_pack_data::MergeFrom(from.pet_pack());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_send_out_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_send_out_ack::CopyFrom(const pet_send_out_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_send_out_ack::IsInitialized() const {

  return true;
}

void pet_send_out_ack::Swap(pet_send_out_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(out_id_, other->out_id_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_pack_, other->pet_pack_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_send_out_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_send_out_ack_descriptor_;
  metadata.reflection = pet_send_out_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_get_out_award_req::kProtoidFieldNumber;
const int pet_get_out_award_req::kPetIdFieldNumber;
#endif  // !_MSC_VER

pet_get_out_award_req::pet_get_out_award_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_get_out_award_req::InitAsDefaultInstance() {
}

pet_get_out_award_req::pet_get_out_award_req(const pet_get_out_award_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_get_out_award_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7868;
  pet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_get_out_award_req::~pet_get_out_award_req() {
  SharedDtor();
}

void pet_get_out_award_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_get_out_award_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_get_out_award_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_get_out_award_req_descriptor_;
}

const pet_get_out_award_req& pet_get_out_award_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_get_out_award_req* pet_get_out_award_req::default_instance_ = NULL;

pet_get_out_award_req* pet_get_out_award_req::New() const {
  return new pet_get_out_award_req;
}

void pet_get_out_award_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7868;
    pet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_get_out_award_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_get_out_award_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_get_out_award_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_get_out_award_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_get_out_award_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_get_out_award_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_get_out_award_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_get_out_award_req::MergeFrom(const pet_get_out_award_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_get_out_award_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_get_out_award_req::CopyFrom(const pet_get_out_award_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_get_out_award_req::IsInitialized() const {

  return true;
}

void pet_get_out_award_req::Swap(pet_get_out_award_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_get_out_award_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_get_out_award_req_descriptor_;
  metadata.reflection = pet_get_out_award_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_get_out_award_ack::kProtoidFieldNumber;
const int pet_get_out_award_ack::kPetIdFieldNumber;
const int pet_get_out_award_ack::kPetPackFieldNumber;
const int pet_get_out_award_ack::kErrorFieldNumber;
const int pet_get_out_award_ack::kRandItemSFieldNumber;
const int pet_get_out_award_ack::kGetItemSFieldNumber;
#endif  // !_MSC_VER

pet_get_out_award_ack::pet_get_out_award_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_get_out_award_ack::InitAsDefaultInstance() {
  pet_pack_ = const_cast< ::SProtoSpace::pet_pack_data*>(&::SProtoSpace::pet_pack_data::default_instance());
}

pet_get_out_award_ack::pet_get_out_award_ack(const pet_get_out_award_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_get_out_award_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7869;
  pet_id_ = 0;
  pet_pack_ = NULL;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_get_out_award_ack::~pet_get_out_award_ack() {
  SharedDtor();
}

void pet_get_out_award_ack::SharedDtor() {
  if (this != default_instance_) {
    delete pet_pack_;
  }
}

void pet_get_out_award_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_get_out_award_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_get_out_award_ack_descriptor_;
}

const pet_get_out_award_ack& pet_get_out_award_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_get_out_award_ack* pet_get_out_award_ack::default_instance_ = NULL;

pet_get_out_award_ack* pet_get_out_award_ack::New() const {
  return new pet_get_out_award_ack;
}

void pet_get_out_award_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7869;
    pet_id_ = 0;
    if (has_pet_pack()) {
      if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
    }
    error_ = 0;
  }
  rand_item_s_.Clear();
  get_item_s_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_get_out_award_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pet_pack;
        break;
      }

      // optional .SProtoSpace.pet_pack_data pet_pack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rand_item_s;
        break;
      }

      // repeated .SProtoSpace.pet_out_event_item rand_item_s = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rand_item_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rand_item_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rand_item_s;
        if (input->ExpectTag(50)) goto parse_get_item_s;
        break;
      }

      // repeated .SProtoSpace.pet_out_event_item get_item_s = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_get_item_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_get_item_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_get_item_s;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_get_out_award_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 3;
  if (has_pet_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pet_pack(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  // repeated .SProtoSpace.pet_out_event_item rand_item_s = 5;
  for (int i = 0; i < this->rand_item_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rand_item_s(i), output);
  }

  // repeated .SProtoSpace.pet_out_event_item get_item_s = 6;
  for (int i = 0; i < this->get_item_s_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->get_item_s(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_get_out_award_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 3;
  if (has_pet_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pet_pack(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  // repeated .SProtoSpace.pet_out_event_item rand_item_s = 5;
  for (int i = 0; i < this->rand_item_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rand_item_s(i), target);
  }

  // repeated .SProtoSpace.pet_out_event_item get_item_s = 6;
  for (int i = 0; i < this->get_item_s_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->get_item_s(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_get_out_award_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional .SProtoSpace.pet_pack_data pet_pack = 3;
    if (has_pet_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_pack());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  // repeated .SProtoSpace.pet_out_event_item rand_item_s = 5;
  total_size += 1 * this->rand_item_s_size();
  for (int i = 0; i < this->rand_item_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rand_item_s(i));
  }

  // repeated .SProtoSpace.pet_out_event_item get_item_s = 6;
  total_size += 1 * this->get_item_s_size();
  for (int i = 0; i < this->get_item_s_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->get_item_s(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_get_out_award_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_get_out_award_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_get_out_award_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_get_out_award_ack::MergeFrom(const pet_get_out_award_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  rand_item_s_.MergeFrom(from.rand_item_s_);
  get_item_s_.MergeFrom(from.get_item_s_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_pet_pack()) {
      mutable_pet_pack()->::SProtoSpace::pet_pack_data::MergeFrom(from.pet_pack());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_get_out_award_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_get_out_award_ack::CopyFrom(const pet_get_out_award_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_get_out_award_ack::IsInitialized() const {

  return true;
}

void pet_get_out_award_ack::Swap(pet_get_out_award_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(pet_pack_, other->pet_pack_);
    std::swap(error_, other->error_);
    rand_item_s_.Swap(&other->rand_item_s_);
    get_item_s_.Swap(&other->get_item_s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_get_out_award_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_get_out_award_ack_descriptor_;
  metadata.reflection = pet_get_out_award_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_feed_food_req::kProtoidFieldNumber;
const int pet_feed_food_req::kPetIdFieldNumber;
const int pet_feed_food_req::kItemIdFieldNumber;
#endif  // !_MSC_VER

pet_feed_food_req::pet_feed_food_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_feed_food_req::InitAsDefaultInstance() {
}

pet_feed_food_req::pet_feed_food_req(const pet_feed_food_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_feed_food_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7870;
  pet_id_ = 0;
  item_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_feed_food_req::~pet_feed_food_req() {
  SharedDtor();
}

void pet_feed_food_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_feed_food_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_feed_food_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_feed_food_req_descriptor_;
}

const pet_feed_food_req& pet_feed_food_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_feed_food_req* pet_feed_food_req::default_instance_ = NULL;

pet_feed_food_req* pet_feed_food_req::New() const {
  return new pet_feed_food_req;
}

void pet_feed_food_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7870;
    pet_id_ = 0;
    item_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_feed_food_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_feed_food_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_feed_food_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_feed_food_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_feed_food_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_feed_food_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_feed_food_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_feed_food_req::MergeFrom(const pet_feed_food_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_feed_food_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_feed_food_req::CopyFrom(const pet_feed_food_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_feed_food_req::IsInitialized() const {

  return true;
}

void pet_feed_food_req::Swap(pet_feed_food_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_feed_food_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_feed_food_req_descriptor_;
  metadata.reflection = pet_feed_food_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_feed_food_ack::kProtoidFieldNumber;
const int pet_feed_food_ack::kPetIdFieldNumber;
const int pet_feed_food_ack::kItemIdFieldNumber;
const int pet_feed_food_ack::kErrorFieldNumber;
const int pet_feed_food_ack::kPetPackFieldNumber;
#endif  // !_MSC_VER

pet_feed_food_ack::pet_feed_food_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_feed_food_ack::InitAsDefaultInstance() {
  pet_pack_ = const_cast< ::SProtoSpace::pet_pack_data*>(&::SProtoSpace::pet_pack_data::default_instance());
}

pet_feed_food_ack::pet_feed_food_ack(const pet_feed_food_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_feed_food_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7871;
  pet_id_ = 0;
  item_id_ = 0;
  error_ = 0;
  pet_pack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_feed_food_ack::~pet_feed_food_ack() {
  SharedDtor();
}

void pet_feed_food_ack::SharedDtor() {
  if (this != default_instance_) {
    delete pet_pack_;
  }
}

void pet_feed_food_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_feed_food_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_feed_food_ack_descriptor_;
}

const pet_feed_food_ack& pet_feed_food_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_feed_food_ack* pet_feed_food_ack::default_instance_ = NULL;

pet_feed_food_ack* pet_feed_food_ack::New() const {
  return new pet_feed_food_ack;
}

void pet_feed_food_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7871;
    pet_id_ = 0;
    item_id_ = 0;
    error_ = 0;
    if (has_pet_pack()) {
      if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_feed_food_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional int32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pet_pack;
        break;
      }

      // optional .SProtoSpace.pet_pack_data pet_pack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_feed_food_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 5;
  if (has_pet_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pet_pack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_feed_food_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional int32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }

  // optional .SProtoSpace.pet_pack_data pet_pack = 5;
  if (has_pet_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pet_pack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_feed_food_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional int32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional .SProtoSpace.pet_pack_data pet_pack = 5;
    if (has_pet_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet_pack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_feed_food_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_feed_food_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_feed_food_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_feed_food_ack::MergeFrom(const pet_feed_food_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_pet_pack()) {
      mutable_pet_pack()->::SProtoSpace::pet_pack_data::MergeFrom(from.pet_pack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_feed_food_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_feed_food_ack::CopyFrom(const pet_feed_food_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_feed_food_ack::IsInitialized() const {

  return true;
}

void pet_feed_food_ack::Swap(pet_feed_food_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(error_, other->error_);
    std::swap(pet_pack_, other->pet_pack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_feed_food_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_feed_food_ack_descriptor_;
  metadata.reflection = pet_feed_food_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_set_show_pet_req::kProtoidFieldNumber;
const int pet_set_show_pet_req::kPetIdFieldNumber;
#endif  // !_MSC_VER

pet_set_show_pet_req::pet_set_show_pet_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_set_show_pet_req::InitAsDefaultInstance() {
}

pet_set_show_pet_req::pet_set_show_pet_req(const pet_set_show_pet_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_set_show_pet_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7872;
  pet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_set_show_pet_req::~pet_set_show_pet_req() {
  SharedDtor();
}

void pet_set_show_pet_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_set_show_pet_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_set_show_pet_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_set_show_pet_req_descriptor_;
}

const pet_set_show_pet_req& pet_set_show_pet_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_set_show_pet_req* pet_set_show_pet_req::default_instance_ = NULL;

pet_set_show_pet_req* pet_set_show_pet_req::New() const {
  return new pet_set_show_pet_req;
}

void pet_set_show_pet_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7872;
    pet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_set_show_pet_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_set_show_pet_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_set_show_pet_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_set_show_pet_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_set_show_pet_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_set_show_pet_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_set_show_pet_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_set_show_pet_req::MergeFrom(const pet_set_show_pet_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_set_show_pet_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_set_show_pet_req::CopyFrom(const pet_set_show_pet_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_set_show_pet_req::IsInitialized() const {

  return true;
}

void pet_set_show_pet_req::Swap(pet_set_show_pet_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_set_show_pet_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_set_show_pet_req_descriptor_;
  metadata.reflection = pet_set_show_pet_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_set_show_pet_ack::kProtoidFieldNumber;
const int pet_set_show_pet_ack::kPetIdFieldNumber;
const int pet_set_show_pet_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

pet_set_show_pet_ack::pet_set_show_pet_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_set_show_pet_ack::InitAsDefaultInstance() {
}

pet_set_show_pet_ack::pet_set_show_pet_ack(const pet_set_show_pet_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_set_show_pet_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7873;
  pet_id_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_set_show_pet_ack::~pet_set_show_pet_ack() {
  SharedDtor();
}

void pet_set_show_pet_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_set_show_pet_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_set_show_pet_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_set_show_pet_ack_descriptor_;
}

const pet_set_show_pet_ack& pet_set_show_pet_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_set_show_pet_ack* pet_set_show_pet_ack::default_instance_ = NULL;

pet_set_show_pet_ack* pet_set_show_pet_ack::New() const {
  return new pet_set_show_pet_ack;
}

void pet_set_show_pet_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7873;
    pet_id_ = 0;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_set_show_pet_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_set_show_pet_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_set_show_pet_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_set_show_pet_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_set_show_pet_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_set_show_pet_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_set_show_pet_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_set_show_pet_ack::MergeFrom(const pet_set_show_pet_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_set_show_pet_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_set_show_pet_ack::CopyFrom(const pet_set_show_pet_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_set_show_pet_ack::IsInitialized() const {

  return true;
}

void pet_set_show_pet_ack::Swap(pet_set_show_pet_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_set_show_pet_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_set_show_pet_ack_descriptor_;
  metadata.reflection = pet_set_show_pet_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_out_back_req::kProtoidFieldNumber;
const int pet_out_back_req::kPetIdFieldNumber;
#endif  // !_MSC_VER

pet_out_back_req::pet_out_back_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_out_back_req::InitAsDefaultInstance() {
}

pet_out_back_req::pet_out_back_req(const pet_out_back_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_out_back_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7874;
  pet_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_out_back_req::~pet_out_back_req() {
  SharedDtor();
}

void pet_out_back_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_out_back_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_out_back_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_out_back_req_descriptor_;
}

const pet_out_back_req& pet_out_back_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_out_back_req* pet_out_back_req::default_instance_ = NULL;

pet_out_back_req* pet_out_back_req::New() const {
  return new pet_out_back_req;
}

void pet_out_back_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7874;
    pet_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_out_back_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_out_back_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_out_back_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_out_back_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_out_back_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_out_back_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_out_back_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_out_back_req::MergeFrom(const pet_out_back_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_out_back_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_out_back_req::CopyFrom(const pet_out_back_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_out_back_req::IsInitialized() const {

  return true;
}

void pet_out_back_req::Swap(pet_out_back_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_out_back_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_out_back_req_descriptor_;
  metadata.reflection = pet_out_back_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pet_out_back_ack::kProtoidFieldNumber;
const int pet_out_back_ack::kPetIdFieldNumber;
const int pet_out_back_ack::kErrorFieldNumber;
#endif  // !_MSC_VER

pet_out_back_ack::pet_out_back_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pet_out_back_ack::InitAsDefaultInstance() {
}

pet_out_back_ack::pet_out_back_ack(const pet_out_back_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pet_out_back_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 7875;
  pet_id_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pet_out_back_ack::~pet_out_back_ack() {
  SharedDtor();
}

void pet_out_back_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pet_out_back_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pet_out_back_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pet_out_back_ack_descriptor_;
}

const pet_out_back_ack& pet_out_back_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5frole_2eproto();
  return *default_instance_;
}

pet_out_back_ack* pet_out_back_ack::default_instance_ = NULL;

pet_out_back_ack* pet_out_back_ack::New() const {
  return new pet_out_back_ack;
}

void pet_out_back_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 7875;
    pet_id_ = 0;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pet_out_back_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pet_id;
        break;
      }

      // optional int32 pet_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pet_id_)));
          set_has_pet_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional .SProtoSpace.MsgErrorType error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_error(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pet_out_back_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pet_id(), output);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pet_out_back_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 pet_id = 2;
  if (has_pet_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pet_id(), target);
  }

  // optional .SProtoSpace.MsgErrorType error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pet_out_back_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 pet_id = 2;
    if (has_pet_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pet_id());
    }

    // optional .SProtoSpace.MsgErrorType error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pet_out_back_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pet_out_back_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pet_out_back_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pet_out_back_ack::MergeFrom(const pet_out_back_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_pet_id()) {
      set_pet_id(from.pet_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pet_out_back_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pet_out_back_ack::CopyFrom(const pet_out_back_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pet_out_back_ack::IsInitialized() const {

  return true;
}

void pet_out_back_ack::Swap(pet_out_back_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(pet_id_, other->pet_id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pet_out_back_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pet_out_back_ack_descriptor_;
  metadata.reflection = pet_out_back_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
