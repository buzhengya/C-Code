// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ss_battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ss_battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* gs_create_battle_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_create_battle_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_create_battle_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_create_battle_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* check_pve_result_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  check_pve_result_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* check_pve_result_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  check_pve_result_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_create_office_battle_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_create_office_battle_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_create_office_battle_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_create_office_battle_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* gs_office_battle_end_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  gs_office_battle_end_ntf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ss_5fbattle_2eproto() {
  protobuf_AddDesc_ss_5fbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ss_battle.proto");
  GOOGLE_CHECK(file != NULL);
  gs_create_battle_req_descriptor_ = file->message_type(0);
  static const int gs_create_battle_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_req, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_req, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_req, source_game_id_),
  };
  gs_create_battle_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_create_battle_req_descriptor_,
      gs_create_battle_req::default_instance_,
      gs_create_battle_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_create_battle_req));
  gs_create_battle_ack_descriptor_ = file->message_type(1);
  static const int gs_create_battle_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_ack, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_ack, source_game_id_),
  };
  gs_create_battle_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_create_battle_ack_descriptor_,
      gs_create_battle_ack::default_instance_,
      gs_create_battle_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_battle_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_create_battle_ack));
  check_pve_result_req_descriptor_ = file->message_type(2);
  static const int check_pve_result_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_req, req_),
  };
  check_pve_result_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      check_pve_result_req_descriptor_,
      check_pve_result_req::default_instance_,
      check_pve_result_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(check_pve_result_req));
  check_pve_result_ack_descriptor_ = file->message_type(3);
  static const int check_pve_result_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_ack, req_),
  };
  check_pve_result_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      check_pve_result_ack_descriptor_,
      check_pve_result_ack::default_instance_,
      check_pve_result_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(check_pve_result_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(check_pve_result_ack));
  gs_create_office_battle_req_descriptor_ = file->message_type(4);
  static const int gs_create_office_battle_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_req, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_req, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_req, source_game_id_),
  };
  gs_create_office_battle_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_create_office_battle_req_descriptor_,
      gs_create_office_battle_req::default_instance_,
      gs_create_office_battle_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_create_office_battle_req));
  gs_create_office_battle_ack_descriptor_ = file->message_type(5);
  static const int gs_create_office_battle_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_ack, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_ack, source_game_id_),
  };
  gs_create_office_battle_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_create_office_battle_ack_descriptor_,
      gs_create_office_battle_ack::default_instance_,
      gs_create_office_battle_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_create_office_battle_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_create_office_battle_ack));
  gs_office_battle_end_ntf_descriptor_ = file->message_type(6);
  static const int gs_office_battle_end_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, winner_camp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, target_game_id_),
  };
  gs_office_battle_end_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      gs_office_battle_end_ntf_descriptor_,
      gs_office_battle_end_ntf::default_instance_,
      gs_office_battle_end_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(gs_office_battle_end_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(gs_office_battle_end_ntf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ss_5fbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_create_battle_req_descriptor_, &gs_create_battle_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_create_battle_ack_descriptor_, &gs_create_battle_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    check_pve_result_req_descriptor_, &check_pve_result_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    check_pve_result_ack_descriptor_, &check_pve_result_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_create_office_battle_req_descriptor_, &gs_create_office_battle_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_create_office_battle_ack_descriptor_, &gs_create_office_battle_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    gs_office_battle_end_ntf_descriptor_, &gs_office_battle_end_ntf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ss_5fbattle_2eproto() {
  delete gs_create_battle_req::default_instance_;
  delete gs_create_battle_req_reflection_;
  delete gs_create_battle_ack::default_instance_;
  delete gs_create_battle_ack_reflection_;
  delete check_pve_result_req::default_instance_;
  delete check_pve_result_req_reflection_;
  delete check_pve_result_ack::default_instance_;
  delete check_pve_result_ack_reflection_;
  delete gs_create_office_battle_req::default_instance_;
  delete gs_create_office_battle_req_reflection_;
  delete gs_create_office_battle_ack::default_instance_;
  delete gs_create_office_battle_ack_reflection_;
  delete gs_office_battle_end_ntf::default_instance_;
  delete gs_office_battle_end_ntf_reflection_;
}

void protobuf_AddDesc_ss_5fbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_ss_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ss_battle.proto\022\013SProtoSpace\032\020ss_proto"
    "id.proto\032\023cm_battletype.proto\"\265\001\n\024gs_cre"
    "ate_battle_req\022A\n\007protoid\030\001 \001(\0162\027.SProto"
    "Space.ESSProtoID:\027gs_create_battle_req_i"
    "d\022\023\n\013battle_uuid\030\002 \001(\004\022-\n\004data\030\003 \001(\0132\037.S"
    "ProtoSpace.create_battle_data\022\026\n\016source_"
    "game_id\030\004 \001(\004\"\223\001\n\024gs_create_battle_ack\022A"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProtoID"
    ":\027gs_create_battle_ack_id\022\023\n\013battle_uuid"
    "\030\002 \001(\004\022\013\n\003ret\030\003 \001(\005\022\026\n\016source_game_id\030\004 "
    "\001(\004\"\232\001\n\024check_pve_result_req\022A\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ESSProtoID:\027check_pv"
    "e_result_req_id\022\017\n\007role_id\030\002 \001(\004\022.\n\003req\030"
    "\003 \001(\0132!.SProtoSpace.gs_create_battle_req"
    "\"\247\001\n\024check_pve_result_ack\022A\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ESSProtoID:\027check_pve_r"
    "esult_ack_id\022\017\n\007role_id\030\002 \001(\004\022\013\n\003ret\030\003 \001"
    "(\r\022.\n\003req\030\004 \001(\0132!.SProtoSpace.gs_create_"
    "battle_req\"\303\001\n\033gs_create_office_battle_r"
    "eq\022H\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSPro"
    "toID:\036gs_create_office_battle_req_id\022\023\n\013"
    "battle_uuid\030\002 \001(\004\022-\n\004data\030\003 \001(\0132\037.SProto"
    "Space.create_battle_data\022\026\n\016source_game_"
    "id\030\004 \001(\004\"\241\001\n\033gs_create_office_battle_ack"
    "\022H\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProto"
    "ID:\036gs_create_office_battle_ack_id\022\023\n\013ba"
    "ttle_uuid\030\002 \001(\004\022\013\n\003ret\030\003 \001(\005\022\026\n\016source_g"
    "ame_id\030\004 \001(\004\"\365\001\n\030gs_office_battle_end_nt"
    "f\022E\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ESSProt"
    "oID:\033gs_office_battle_end_ntf_id\022\023\n\013batt"
    "le_uuid\030\002 \001(\004\022\023\n\013battle_type\030\003 \001(\r\022\021\n\twi"
    "nner_id\030\004 \001(\004\022\026\n\016winner_camp_id\030\005 \001(\005\022%\n"
    "\004data\030\006 \003(\0132\027.SProtoSpace.round_data\022\026\n\016"
    "target_game_id\030\007 \001(\004", 1340);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ss_battle.proto", &protobuf_RegisterTypes);
  gs_create_battle_req::default_instance_ = new gs_create_battle_req();
  gs_create_battle_ack::default_instance_ = new gs_create_battle_ack();
  check_pve_result_req::default_instance_ = new check_pve_result_req();
  check_pve_result_ack::default_instance_ = new check_pve_result_ack();
  gs_create_office_battle_req::default_instance_ = new gs_create_office_battle_req();
  gs_create_office_battle_ack::default_instance_ = new gs_create_office_battle_ack();
  gs_office_battle_end_ntf::default_instance_ = new gs_office_battle_end_ntf();
  gs_create_battle_req::default_instance_->InitAsDefaultInstance();
  gs_create_battle_ack::default_instance_->InitAsDefaultInstance();
  check_pve_result_req::default_instance_->InitAsDefaultInstance();
  check_pve_result_ack::default_instance_->InitAsDefaultInstance();
  gs_create_office_battle_req::default_instance_->InitAsDefaultInstance();
  gs_create_office_battle_ack::default_instance_->InitAsDefaultInstance();
  gs_office_battle_end_ntf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ss_5fbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ss_5fbattle_2eproto {
  StaticDescriptorInitializer_ss_5fbattle_2eproto() {
    protobuf_AddDesc_ss_5fbattle_2eproto();
  }
} static_descriptor_initializer_ss_5fbattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int gs_create_battle_req::kProtoidFieldNumber;
const int gs_create_battle_req::kBattleUuidFieldNumber;
const int gs_create_battle_req::kDataFieldNumber;
const int gs_create_battle_req::kSourceGameIdFieldNumber;
#endif  // !_MSC_VER

gs_create_battle_req::gs_create_battle_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_create_battle_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::create_battle_data*>(&::SProtoSpace::create_battle_data::default_instance());
}

gs_create_battle_req::gs_create_battle_req(const gs_create_battle_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_create_battle_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 400;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  source_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_create_battle_req::~gs_create_battle_req() {
  SharedDtor();
}

void gs_create_battle_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void gs_create_battle_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_create_battle_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_create_battle_req_descriptor_;
}

const gs_create_battle_req& gs_create_battle_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

gs_create_battle_req* gs_create_battle_req::default_instance_ = NULL;

gs_create_battle_req* gs_create_battle_req::New() const {
  return new gs_create_battle_req;
}

void gs_create_battle_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 400;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
    }
    source_game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_create_battle_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.create_battle_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_game_id;
        break;
      }

      // optional uint64 source_game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_game_id_)));
          set_has_source_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_create_battle_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional .SProtoSpace.create_battle_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->source_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_create_battle_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional .SProtoSpace.create_battle_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->source_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_create_battle_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional .SProtoSpace.create_battle_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint64 source_game_id = 4;
    if (has_source_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_create_battle_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_create_battle_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_create_battle_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_create_battle_req::MergeFrom(const gs_create_battle_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::create_battle_data::MergeFrom(from.data());
    }
    if (from.has_source_game_id()) {
      set_source_game_id(from.source_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_create_battle_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_create_battle_req::CopyFrom(const gs_create_battle_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_create_battle_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void gs_create_battle_req::Swap(gs_create_battle_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(data_, other->data_);
    std::swap(source_game_id_, other->source_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_create_battle_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_create_battle_req_descriptor_;
  metadata.reflection = gs_create_battle_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_create_battle_ack::kProtoidFieldNumber;
const int gs_create_battle_ack::kBattleUuidFieldNumber;
const int gs_create_battle_ack::kRetFieldNumber;
const int gs_create_battle_ack::kSourceGameIdFieldNumber;
#endif  // !_MSC_VER

gs_create_battle_ack::gs_create_battle_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_create_battle_ack::InitAsDefaultInstance() {
}

gs_create_battle_ack::gs_create_battle_ack(const gs_create_battle_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_create_battle_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 401;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  source_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_create_battle_ack::~gs_create_battle_ack() {
  SharedDtor();
}

void gs_create_battle_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_create_battle_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_create_battle_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_create_battle_ack_descriptor_;
}

const gs_create_battle_ack& gs_create_battle_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

gs_create_battle_ack* gs_create_battle_ack::default_instance_ = NULL;

gs_create_battle_ack* gs_create_battle_ack::New() const {
  return new gs_create_battle_ack;
}

void gs_create_battle_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 401;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
    source_game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_create_battle_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_game_id;
        break;
      }

      // optional uint64 source_game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_game_id_)));
          set_has_source_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_create_battle_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->source_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_create_battle_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->source_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_create_battle_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_battle_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 source_game_id = 4;
    if (has_source_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_create_battle_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_create_battle_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_create_battle_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_create_battle_ack::MergeFrom(const gs_create_battle_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_source_game_id()) {
      set_source_game_id(from.source_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_create_battle_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_create_battle_ack::CopyFrom(const gs_create_battle_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_create_battle_ack::IsInitialized() const {

  return true;
}

void gs_create_battle_ack::Swap(gs_create_battle_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(ret_, other->ret_);
    std::swap(source_game_id_, other->source_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_create_battle_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_create_battle_ack_descriptor_;
  metadata.reflection = gs_create_battle_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int check_pve_result_req::kProtoidFieldNumber;
const int check_pve_result_req::kRoleIdFieldNumber;
const int check_pve_result_req::kReqFieldNumber;
#endif  // !_MSC_VER

check_pve_result_req::check_pve_result_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void check_pve_result_req::InitAsDefaultInstance() {
  req_ = const_cast< ::SProtoSpace::gs_create_battle_req*>(&::SProtoSpace::gs_create_battle_req::default_instance());
}

check_pve_result_req::check_pve_result_req(const check_pve_result_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void check_pve_result_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 402;
  role_id_ = GOOGLE_ULONGLONG(0);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

check_pve_result_req::~check_pve_result_req() {
  SharedDtor();
}

void check_pve_result_req::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void check_pve_result_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* check_pve_result_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return check_pve_result_req_descriptor_;
}

const check_pve_result_req& check_pve_result_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

check_pve_result_req* check_pve_result_req::default_instance_ = NULL;

check_pve_result_req* check_pve_result_req::New() const {
  return new check_pve_result_req;
}

void check_pve_result_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 402;
    role_id_ = GOOGLE_ULONGLONG(0);
    if (has_req()) {
      if (req_ != NULL) req_->::SProtoSpace::gs_create_battle_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool check_pve_result_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .SProtoSpace.gs_create_battle_req req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void check_pve_result_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional .SProtoSpace.gs_create_battle_req req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* check_pve_result_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional .SProtoSpace.gs_create_battle_req req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int check_pve_result_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.gs_create_battle_req req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void check_pve_result_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const check_pve_result_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const check_pve_result_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void check_pve_result_req::MergeFrom(const check_pve_result_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_req()) {
      mutable_req()->::SProtoSpace::gs_create_battle_req::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void check_pve_result_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_pve_result_req::CopyFrom(const check_pve_result_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_pve_result_req::IsInitialized() const {

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void check_pve_result_req::Swap(check_pve_result_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata check_pve_result_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = check_pve_result_req_descriptor_;
  metadata.reflection = check_pve_result_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int check_pve_result_ack::kProtoidFieldNumber;
const int check_pve_result_ack::kRoleIdFieldNumber;
const int check_pve_result_ack::kRetFieldNumber;
const int check_pve_result_ack::kReqFieldNumber;
#endif  // !_MSC_VER

check_pve_result_ack::check_pve_result_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void check_pve_result_ack::InitAsDefaultInstance() {
  req_ = const_cast< ::SProtoSpace::gs_create_battle_req*>(&::SProtoSpace::gs_create_battle_req::default_instance());
}

check_pve_result_ack::check_pve_result_ack(const check_pve_result_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void check_pve_result_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 403;
  role_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

check_pve_result_ack::~check_pve_result_ack() {
  SharedDtor();
}

void check_pve_result_ack::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void check_pve_result_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* check_pve_result_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return check_pve_result_ack_descriptor_;
}

const check_pve_result_ack& check_pve_result_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

check_pve_result_ack* check_pve_result_ack::default_instance_ = NULL;

check_pve_result_ack* check_pve_result_ack::New() const {
  return new check_pve_result_ack;
}

void check_pve_result_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 403;
    role_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
    if (has_req()) {
      if (req_ != NULL) req_->::SProtoSpace::gs_create_battle_req::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool check_pve_result_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_req;
        break;
      }

      // optional .SProtoSpace.gs_create_battle_req req = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void check_pve_result_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->role_id(), output);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ret(), output);
  }

  // optional .SProtoSpace.gs_create_battle_req req = 4;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* check_pve_result_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 role_id = 2;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->role_id(), target);
  }

  // optional uint32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ret(), target);
  }

  // optional .SProtoSpace.gs_create_battle_req req = 4;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int check_pve_result_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = check_pve_result_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 role_id = 2;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .SProtoSpace.gs_create_battle_req req = 4;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void check_pve_result_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const check_pve_result_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const check_pve_result_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void check_pve_result_ack::MergeFrom(const check_pve_result_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_req()) {
      mutable_req()->::SProtoSpace::gs_create_battle_req::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void check_pve_result_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void check_pve_result_ack::CopyFrom(const check_pve_result_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool check_pve_result_ack::IsInitialized() const {

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void check_pve_result_ack::Swap(check_pve_result_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(role_id_, other->role_id_);
    std::swap(ret_, other->ret_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata check_pve_result_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = check_pve_result_ack_descriptor_;
  metadata.reflection = check_pve_result_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_create_office_battle_req::kProtoidFieldNumber;
const int gs_create_office_battle_req::kBattleUuidFieldNumber;
const int gs_create_office_battle_req::kDataFieldNumber;
const int gs_create_office_battle_req::kSourceGameIdFieldNumber;
#endif  // !_MSC_VER

gs_create_office_battle_req::gs_create_office_battle_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_create_office_battle_req::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::create_battle_data*>(&::SProtoSpace::create_battle_data::default_instance());
}

gs_create_office_battle_req::gs_create_office_battle_req(const gs_create_office_battle_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_create_office_battle_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 404;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  source_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_create_office_battle_req::~gs_create_office_battle_req() {
  SharedDtor();
}

void gs_create_office_battle_req::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void gs_create_office_battle_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_create_office_battle_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_create_office_battle_req_descriptor_;
}

const gs_create_office_battle_req& gs_create_office_battle_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

gs_create_office_battle_req* gs_create_office_battle_req::default_instance_ = NULL;

gs_create_office_battle_req* gs_create_office_battle_req::New() const {
  return new gs_create_office_battle_req;
}

void gs_create_office_battle_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 404;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::create_battle_data::Clear();
    }
    source_game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_create_office_battle_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.create_battle_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_game_id;
        break;
      }

      // optional uint64 source_game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_game_id_)));
          set_has_source_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_create_office_battle_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional .SProtoSpace.create_battle_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->source_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_create_office_battle_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional .SProtoSpace.create_battle_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->source_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_create_office_battle_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional .SProtoSpace.create_battle_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint64 source_game_id = 4;
    if (has_source_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_create_office_battle_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_create_office_battle_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_create_office_battle_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_create_office_battle_req::MergeFrom(const gs_create_office_battle_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::create_battle_data::MergeFrom(from.data());
    }
    if (from.has_source_game_id()) {
      set_source_game_id(from.source_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_create_office_battle_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_create_office_battle_req::CopyFrom(const gs_create_office_battle_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_create_office_battle_req::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void gs_create_office_battle_req::Swap(gs_create_office_battle_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(data_, other->data_);
    std::swap(source_game_id_, other->source_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_create_office_battle_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_create_office_battle_req_descriptor_;
  metadata.reflection = gs_create_office_battle_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_create_office_battle_ack::kProtoidFieldNumber;
const int gs_create_office_battle_ack::kBattleUuidFieldNumber;
const int gs_create_office_battle_ack::kRetFieldNumber;
const int gs_create_office_battle_ack::kSourceGameIdFieldNumber;
#endif  // !_MSC_VER

gs_create_office_battle_ack::gs_create_office_battle_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_create_office_battle_ack::InitAsDefaultInstance() {
}

gs_create_office_battle_ack::gs_create_office_battle_ack(const gs_create_office_battle_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_create_office_battle_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 405;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  source_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_create_office_battle_ack::~gs_create_office_battle_ack() {
  SharedDtor();
}

void gs_create_office_battle_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_create_office_battle_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_create_office_battle_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_create_office_battle_ack_descriptor_;
}

const gs_create_office_battle_ack& gs_create_office_battle_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

gs_create_office_battle_ack* gs_create_office_battle_ack::default_instance_ = NULL;

gs_create_office_battle_ack* gs_create_office_battle_ack::New() const {
  return new gs_create_office_battle_ack;
}

void gs_create_office_battle_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 405;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
    source_game_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_create_office_battle_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source_game_id;
        break;
      }

      // optional uint64 source_game_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_game_id_)));
          set_has_source_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_create_office_battle_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->source_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_create_office_battle_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  // optional uint64 source_game_id = 4;
  if (has_source_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->source_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_create_office_battle_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_create_office_battle_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 source_game_id = 4;
    if (has_source_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_game_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_create_office_battle_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_create_office_battle_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_create_office_battle_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_create_office_battle_ack::MergeFrom(const gs_create_office_battle_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_source_game_id()) {
      set_source_game_id(from.source_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_create_office_battle_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_create_office_battle_ack::CopyFrom(const gs_create_office_battle_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_create_office_battle_ack::IsInitialized() const {

  return true;
}

void gs_create_office_battle_ack::Swap(gs_create_office_battle_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(ret_, other->ret_);
    std::swap(source_game_id_, other->source_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_create_office_battle_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_create_office_battle_ack_descriptor_;
  metadata.reflection = gs_create_office_battle_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int gs_office_battle_end_ntf::kProtoidFieldNumber;
const int gs_office_battle_end_ntf::kBattleUuidFieldNumber;
const int gs_office_battle_end_ntf::kBattleTypeFieldNumber;
const int gs_office_battle_end_ntf::kWinnerIdFieldNumber;
const int gs_office_battle_end_ntf::kWinnerCampIdFieldNumber;
const int gs_office_battle_end_ntf::kDataFieldNumber;
const int gs_office_battle_end_ntf::kTargetGameIdFieldNumber;
#endif  // !_MSC_VER

gs_office_battle_end_ntf::gs_office_battle_end_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void gs_office_battle_end_ntf::InitAsDefaultInstance() {
}

gs_office_battle_end_ntf::gs_office_battle_end_ntf(const gs_office_battle_end_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void gs_office_battle_end_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 406;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0u;
  winner_id_ = GOOGLE_ULONGLONG(0);
  winner_camp_id_ = 0;
  target_game_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

gs_office_battle_end_ntf::~gs_office_battle_end_ntf() {
  SharedDtor();
}

void gs_office_battle_end_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void gs_office_battle_end_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* gs_office_battle_end_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return gs_office_battle_end_ntf_descriptor_;
}

const gs_office_battle_end_ntf& gs_office_battle_end_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ss_5fbattle_2eproto();
  return *default_instance_;
}

gs_office_battle_end_ntf* gs_office_battle_end_ntf::default_instance_ = NULL;

gs_office_battle_end_ntf* gs_office_battle_end_ntf::New() const {
  return new gs_office_battle_end_ntf;
}

void gs_office_battle_end_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 406;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0u;
    winner_id_ = GOOGLE_ULONGLONG(0);
    winner_camp_id_ = 0;
    target_game_id_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool gs_office_battle_end_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_office_battle_end_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ESSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ESSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional uint32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winner_id;
        break;
      }

      // optional uint64 winner_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winner_id_)));
          set_has_winner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winner_camp_id;
        break;
      }

      // optional int32 winner_camp_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_id_)));
          set_has_winner_camp_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.round_data data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectTag(56)) goto parse_target_game_id;
        break;
      }

      // optional uint64 target_game_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_game_id_)));
          set_has_target_game_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void gs_office_battle_end_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_office_battle_end_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_type(), output);
  }

  // optional uint64 winner_id = 4;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->winner_id(), output);
  }

  // optional int32 winner_camp_id = 5;
  if (has_winner_camp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winner_camp_id(), output);
  }

  // repeated .SProtoSpace.round_data data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  // optional uint64 target_game_id = 7;
  if (has_target_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->target_game_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* gs_office_battle_end_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_office_battle_end_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_type(), target);
  }

  // optional uint64 winner_id = 4;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->winner_id(), target);
  }

  // optional int32 winner_camp_id = 5;
  if (has_winner_camp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winner_camp_id(), target);
  }

  // repeated .SProtoSpace.round_data data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  // optional uint64 target_game_id = 7;
  if (has_target_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->target_game_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int gs_office_battle_end_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ESSProtoID protoid = 1 [default = gs_office_battle_end_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_type());
    }

    // optional uint64 winner_id = 4;
    if (has_winner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winner_id());
    }

    // optional int32 winner_camp_id = 5;
    if (has_winner_camp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp_id());
    }

    // optional uint64 target_game_id = 7;
    if (has_target_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_game_id());
    }

  }
  // repeated .SProtoSpace.round_data data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void gs_office_battle_end_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const gs_office_battle_end_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const gs_office_battle_end_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void gs_office_battle_end_ntf::MergeFrom(const gs_office_battle_end_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_winner_id()) {
      set_winner_id(from.winner_id());
    }
    if (from.has_winner_camp_id()) {
      set_winner_camp_id(from.winner_camp_id());
    }
    if (from.has_target_game_id()) {
      set_target_game_id(from.target_game_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void gs_office_battle_end_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gs_office_battle_end_ntf::CopyFrom(const gs_office_battle_end_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gs_office_battle_end_ntf::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void gs_office_battle_end_ntf::Swap(gs_office_battle_end_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(winner_id_, other->winner_id_);
    std::swap(winner_camp_id_, other->winner_camp_id_);
    data_.Swap(&other->data_);
    std::swap(target_game_id_, other->target_game_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata gs_office_battle_end_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = gs_office_battle_end_ntf_descriptor_;
  metadata.reflection = gs_office_battle_end_ntf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
