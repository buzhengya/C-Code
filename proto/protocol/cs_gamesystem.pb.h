// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_gamesystem.proto

#ifndef PROTOBUF_cs_5fgamesystem_2eproto__INCLUDED
#define PROTOBUF_cs_5fgamesystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5fgamesystem_2eproto();
void protobuf_AssignDesc_cs_5fgamesystem_2eproto();
void protobuf_ShutdownFile_cs_5fgamesystem_2eproto();


enum EGameSystem {
  GAME_SYSTEM_BASE = 1,
  GAME_SYSTEM_ITEM = 2,
  GAME_SYSTEM_PLAYER = 3,
  GAME_SYSTEM_HERO = 4,
  GAME_SYSTEM_SOUL = 5,
  GAME_SYSTEM_QUEST = 6,
  GAME_SYSTEM_LEVEL = 7,
  GAME_SYSTEM_ROYAL = 8,
  GAME_SYSTEM_SHOW = 9,
  GAME_SYSTEM_FRIEND = 10,
  GAME_SYSTEM_SHOP = 11,
  GAME_SYSTEM_TOWER = 12,
  GAME_SYSTEM_CHAT = 13,
  GAME_SYSTEM_ADV = 14,
  GAME_SYSTEM_MAX = 63
};
bool EGameSystem_IsValid(int value);
const EGameSystem EGameSystem_MIN = GAME_SYSTEM_BASE;
const EGameSystem EGameSystem_MAX = GAME_SYSTEM_MAX;
const int EGameSystem_ARRAYSIZE = EGameSystem_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGameSystem_descriptor();
inline const ::std::string& EGameSystem_Name(EGameSystem value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameSystem_descriptor(), value);
}
inline bool EGameSystem_Parse(
    const ::std::string& name, EGameSystem* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameSystem>(
    EGameSystem_descriptor(), name, value);
}
enum ESystemModule {
  ESYSTEMMODULE_NONE = 0,
  ESYSTEMMODULE_TOWER = 1,
  ESYSTEMMODULE_DAILYTASK = 2,
  ESYSTEMMODULE_BRANCHTASK = 3,
  ESYSTEMMODULE_DIFFLEVEL = 4,
  ESYSTEMMODULE_MAIL = 5,
  ESYSTEMMODULE_PET = 6,
  ESYSTEMMODULE_OFFICAL = 7
};
bool ESystemModule_IsValid(int value);
const ESystemModule ESystemModule_MIN = ESYSTEMMODULE_NONE;
const ESystemModule ESystemModule_MAX = ESYSTEMMODULE_OFFICAL;
const int ESystemModule_ARRAYSIZE = ESystemModule_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESystemModule_descriptor();
inline const ::std::string& ESystemModule_Name(ESystemModule value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESystemModule_descriptor(), value);
}
inline bool ESystemModule_Parse(
    const ::std::string& name, ESystemModule* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESystemModule>(
    ESystemModule_descriptor(), name, value);
}
enum ELevelMode {
  ELEVELMODE_EASY = 1,
  ELEVELMODE_DIFFICULTY = 2
};
bool ELevelMode_IsValid(int value);
const ELevelMode ELevelMode_MIN = ELEVELMODE_EASY;
const ELevelMode ELevelMode_MAX = ELEVELMODE_DIFFICULTY;
const int ELevelMode_ARRAYSIZE = ELevelMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELevelMode_descriptor();
inline const ::std::string& ELevelMode_Name(ELevelMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELevelMode_descriptor(), value);
}
inline bool ELevelMode_Parse(
    const ::std::string& name, ELevelMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELevelMode>(
    ELevelMode_descriptor(), name, value);
}
enum ESystemConditionType {
  SYSTEM_CONDITION_NONE = 0,
  SYSTEM_CONDITION_LEVEL = 1,
  SYSTEM_CONDITION_TASK_ID = 2,
  SYSTEM_CONDITION_STAGE_ID = 3,
  SYSTEM_CONDITION_OFFICE_GRADE = 4
};
bool ESystemConditionType_IsValid(int value);
const ESystemConditionType ESystemConditionType_MIN = SYSTEM_CONDITION_NONE;
const ESystemConditionType ESystemConditionType_MAX = SYSTEM_CONDITION_OFFICE_GRADE;
const int ESystemConditionType_ARRAYSIZE = ESystemConditionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESystemConditionType_descriptor();
inline const ::std::string& ESystemConditionType_Name(ESystemConditionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESystemConditionType_descriptor(), value);
}
inline bool ESystemConditionType_Parse(
    const ::std::string& name, ESystemConditionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESystemConditionType>(
    ESystemConditionType_descriptor(), name, value);
}
enum ETowerFloorType {
  ETower_Floor_TP_Battle = 1,
  ETower_Floor_TP_Question = 2,
  ETower_Floor_TP_Raids = 3
};
bool ETowerFloorType_IsValid(int value);
const ETowerFloorType ETowerFloorType_MIN = ETower_Floor_TP_Battle;
const ETowerFloorType ETowerFloorType_MAX = ETower_Floor_TP_Raids;
const int ETowerFloorType_ARRAYSIZE = ETowerFloorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETowerFloorType_descriptor();
inline const ::std::string& ETowerFloorType_Name(ETowerFloorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETowerFloorType_descriptor(), value);
}
inline bool ETowerFloorType_Parse(
    const ::std::string& name, ETowerFloorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETowerFloorType>(
    ETowerFloorType_descriptor(), name, value);
}
enum EFloorLevelType {
  EFloor_Level_TP_None = 0,
  EFloor_Level_TP_Battle = 1,
  EFloor_Level_TP_Question = 2,
  EFloor_Level_TP_Opera = 3,
  EFloor_Level_TP_Box = 4,
  EFloor_Level_TP_Raids = 10,
  EFloor_Level_TP_FIRST_IN = 11
};
bool EFloorLevelType_IsValid(int value);
const EFloorLevelType EFloorLevelType_MIN = EFloor_Level_TP_None;
const EFloorLevelType EFloorLevelType_MAX = EFloor_Level_TP_FIRST_IN;
const int EFloorLevelType_ARRAYSIZE = EFloorLevelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFloorLevelType_descriptor();
inline const ::std::string& EFloorLevelType_Name(EFloorLevelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFloorLevelType_descriptor(), value);
}
inline bool EFloorLevelType_Parse(
    const ::std::string& name, EFloorLevelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFloorLevelType>(
    EFloorLevelType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGameSystem>() {
  return ::SProtoSpace::EGameSystem_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESystemModule>() {
  return ::SProtoSpace::ESystemModule_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ELevelMode>() {
  return ::SProtoSpace::ELevelMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ESystemConditionType>() {
  return ::SProtoSpace::ESystemConditionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::ETowerFloorType>() {
  return ::SProtoSpace::ETowerFloorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EFloorLevelType>() {
  return ::SProtoSpace::EFloorLevelType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5fgamesystem_2eproto__INCLUDED
