// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cm_activitytype.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cm_activitytype.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* quest_progress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quest_progress_reflection_ = NULL;
const ::google::protobuf::Descriptor* quest_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  quest_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* task_activity_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  task_activity_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_task_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_task_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_gift_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_gift_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_task_update_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_task_update_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* royal_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  royal_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_cost_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_cost_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_item_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_item_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* shop_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  shop_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* refresh_time_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  refresh_time_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* tower_base_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  tower_base_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* question_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  question_info_reflection_ = NULL;
const ::google::protobuf::Descriptor* question_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  question_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_city_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_city_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* adv_event_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  adv_event_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_events_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_events_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* city_events_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  city_events_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_favor_info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_favor_info_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoyalTaskStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGameTaskType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoyalEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERoyalOpenCondiType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESHOP_OPT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EShopOpenCondiType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESHOP_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESHOP_GOODS_LIMIT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESHOP_BUY_LIMIT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQuestionClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EWEATHER_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EShiChen_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEventClass_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEventFuncTYpe_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cm_5factivitytype_2eproto() {
  protobuf_AddDesc_cm_5factivitytype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cm_activitytype.proto");
  GOOGLE_CHECK(file != NULL);
  quest_progress_descriptor_ = file->message_type(0);
  static const int quest_progress_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_progress, cond_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_progress, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_progress, max_step_),
  };
  quest_progress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quest_progress_descriptor_,
      quest_progress::default_instance_,
      quest_progress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_progress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_progress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quest_progress));
  quest_data_descriptor_ = file->message_type(1);
  static const int quest_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, prog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, achievement_utc_time_),
  };
  quest_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      quest_data_descriptor_,
      quest_data::default_instance_,
      quest_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(quest_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(quest_data));
  task_activity_data_descriptor_ = file->message_type(2);
  static const int task_activity_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_activity_data, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_activity_data, reward_),
  };
  task_activity_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      task_activity_data_descriptor_,
      task_activity_data::default_instance_,
      task_activity_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_activity_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(task_activity_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(task_activity_data));
  royal_task_info_descriptor_ = file->message_type(3);
  static const int royal_task_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_info, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_info, max_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_info, cur_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_info, status_),
  };
  royal_task_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_task_info_descriptor_,
      royal_task_info::default_instance_,
      royal_task_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_task_info));
  royal_info_descriptor_ = file->message_type(4);
  static const int royal_info_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, intimacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, has_received_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, active_),
  };
  royal_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_info_descriptor_,
      royal_info::default_instance_,
      royal_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_info));
  royal_gift_info_descriptor_ = file->message_type(5);
  static const int royal_gift_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_gift_info, gift_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_gift_info, count_),
  };
  royal_gift_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_gift_info_descriptor_,
      royal_gift_info::default_instance_,
      royal_gift_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_gift_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_gift_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_gift_info));
  royal_task_update_info_descriptor_ = file->message_type(6);
  static const int royal_task_update_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_update_info, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_update_info, task_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_update_info, cur_step_),
  };
  royal_task_update_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_task_update_info_descriptor_,
      royal_task_update_info::default_instance_,
      royal_task_update_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_update_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_task_update_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_task_update_info));
  royal_base_info_descriptor_ = file->message_type(7);
  static const int royal_base_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info, refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info, visit_times_),
  };
  royal_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      royal_base_info_descriptor_,
      royal_base_info::default_instance_,
      royal_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(royal_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(royal_base_info));
  shop_cost_info_descriptor_ = file->message_type(8);
  static const int shop_cost_info_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_cost_info, cost_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_cost_info, cost_num_),
  };
  shop_cost_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_cost_info_descriptor_,
      shop_cost_info::default_instance_,
      shop_cost_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_cost_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_cost_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_cost_info));
  shop_item_info_descriptor_ = file->message_type(9);
  static const int shop_item_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_info, sale_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_info, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_info, buy_cur_num_),
  };
  shop_item_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_item_info_descriptor_,
      shop_item_info::default_instance_,
      shop_item_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_item_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_item_info));
  shop_info_descriptor_ = file->message_type(10);
  static const int shop_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, shop_config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, user_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, sys_next_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, sale_items_),
  };
  shop_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      shop_info_descriptor_,
      shop_info::default_instance_,
      shop_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(shop_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(shop_info));
  refresh_time_info_descriptor_ = file->message_type(11);
  static const int refresh_time_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(refresh_time_info, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(refresh_time_info, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(refresh_time_info, minute_),
  };
  refresh_time_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      refresh_time_info_descriptor_,
      refresh_time_info::default_instance_,
      refresh_time_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(refresh_time_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(refresh_time_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(refresh_time_info));
  tower_base_info_descriptor_ = file->message_type(12);
  static const int tower_base_info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_base_info, max_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_base_info, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_base_info, cur_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_base_info, cur_step_),
  };
  tower_base_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      tower_base_info_descriptor_,
      tower_base_info::default_instance_,
      tower_base_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_base_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tower_base_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(tower_base_info));
  question_info_descriptor_ = file->message_type(13);
  static const int question_info_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_info, question_id_),
  };
  question_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      question_info_descriptor_,
      question_info::default_instance_,
      question_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(question_info));
  question_data_descriptor_ = file->message_type(14);
  static const int question_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_data, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_data, questions_),
  };
  question_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      question_data_descriptor_,
      question_data::default_instance_,
      question_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(question_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(question_data));
  adv_city_data_descriptor_ = file->message_type(15);
  static const int adv_city_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_city_data, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_city_data, unlock_),
  };
  adv_city_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_city_data_descriptor_,
      adv_city_data::default_instance_,
      adv_city_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_city_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_city_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_city_data));
  adv_event_data_descriptor_ = file->message_type(16);
  static const int adv_event_data_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_data, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_data, weather_),
  };
  adv_event_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      adv_event_data_descriptor_,
      adv_event_data::default_instance_,
      adv_event_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(adv_event_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(adv_event_data));
  hero_events_data_descriptor_ = file->message_type(17);
  static const int hero_events_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, hero_favor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, hero_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, open_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, all_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, event_ids_),
  };
  hero_events_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_events_data_descriptor_,
      hero_events_data::default_instance_,
      hero_events_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_events_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_events_data));
  city_events_data_descriptor_ = file->message_type(18);
  static const int city_events_data_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_events_data, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_events_data, open_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_events_data, all_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_events_data, event_ids_),
  };
  city_events_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      city_events_data_descriptor_,
      city_events_data::default_instance_,
      city_events_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_events_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(city_events_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(city_events_data));
  hero_favor_info_descriptor_ = file->message_type(19);
  static const int hero_favor_info_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_favor_info, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_favor_info, favor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_favor_info, lv_),
  };
  hero_favor_info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_favor_info_descriptor_,
      hero_favor_info::default_instance_,
      hero_favor_info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_favor_info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_favor_info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_favor_info));
  EQuestStatus_descriptor_ = file->enum_type(0);
  ERoyalTaskStatus_descriptor_ = file->enum_type(1);
  EGameTaskType_descriptor_ = file->enum_type(2);
  ERoyalEventType_descriptor_ = file->enum_type(3);
  ERoyalOpenCondiType_descriptor_ = file->enum_type(4);
  ESHOP_OPT_TYPE_descriptor_ = file->enum_type(5);
  EShopOpenCondiType_descriptor_ = file->enum_type(6);
  ESHOP_TYPE_descriptor_ = file->enum_type(7);
  ESHOP_GOODS_LIMIT_TYPE_descriptor_ = file->enum_type(8);
  ESHOP_BUY_LIMIT_TYPE_descriptor_ = file->enum_type(9);
  EQuestionType_descriptor_ = file->enum_type(10);
  EQuestionClass_descriptor_ = file->enum_type(11);
  EWEATHER_TYPE_descriptor_ = file->enum_type(12);
  EShiChen_TYPE_descriptor_ = file->enum_type(13);
  EEventClass_descriptor_ = file->enum_type(14);
  EEventType_descriptor_ = file->enum_type(15);
  EEventFuncTYpe_descriptor_ = file->enum_type(16);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cm_5factivitytype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quest_progress_descriptor_, &quest_progress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    quest_data_descriptor_, &quest_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    task_activity_data_descriptor_, &task_activity_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_task_info_descriptor_, &royal_task_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_info_descriptor_, &royal_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_gift_info_descriptor_, &royal_gift_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_task_update_info_descriptor_, &royal_task_update_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    royal_base_info_descriptor_, &royal_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_cost_info_descriptor_, &shop_cost_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_item_info_descriptor_, &shop_item_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    shop_info_descriptor_, &shop_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    refresh_time_info_descriptor_, &refresh_time_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    tower_base_info_descriptor_, &tower_base_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    question_info_descriptor_, &question_info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    question_data_descriptor_, &question_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_city_data_descriptor_, &adv_city_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    adv_event_data_descriptor_, &adv_event_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_events_data_descriptor_, &hero_events_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    city_events_data_descriptor_, &city_events_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_favor_info_descriptor_, &hero_favor_info::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cm_5factivitytype_2eproto() {
  delete quest_progress::default_instance_;
  delete quest_progress_reflection_;
  delete quest_data::default_instance_;
  delete quest_data_reflection_;
  delete task_activity_data::default_instance_;
  delete task_activity_data_reflection_;
  delete royal_task_info::default_instance_;
  delete royal_task_info_reflection_;
  delete royal_info::default_instance_;
  delete royal_info_reflection_;
  delete royal_gift_info::default_instance_;
  delete royal_gift_info_reflection_;
  delete royal_task_update_info::default_instance_;
  delete royal_task_update_info_reflection_;
  delete royal_base_info::default_instance_;
  delete royal_base_info_reflection_;
  delete shop_cost_info::default_instance_;
  delete shop_cost_info_reflection_;
  delete shop_item_info::default_instance_;
  delete shop_item_info_reflection_;
  delete shop_info::default_instance_;
  delete shop_info_reflection_;
  delete refresh_time_info::default_instance_;
  delete refresh_time_info_reflection_;
  delete tower_base_info::default_instance_;
  delete tower_base_info_reflection_;
  delete question_info::default_instance_;
  delete question_info_reflection_;
  delete question_data::default_instance_;
  delete question_data_reflection_;
  delete adv_city_data::default_instance_;
  delete adv_city_data_reflection_;
  delete adv_event_data::default_instance_;
  delete adv_event_data_reflection_;
  delete hero_events_data::default_instance_;
  delete hero_events_data_reflection_;
  delete city_events_data::default_instance_;
  delete city_events_data_reflection_;
  delete hero_favor_info::default_instance_;
  delete hero_favor_info_reflection_;
}

void protobuf_AddDesc_cm_5factivitytype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025cm_activitytype.proto\022\013SProtoSpace\"E\n\016"
    "quest_progress\022\017\n\007cond_id\030\001 \001(\005\022\020\n\010cur_s"
    "tep\030\002 \001(\005\022\020\n\010max_step\030\003 \001(\005\"\241\001\n\nquest_da"
    "ta\022\021\n\tconfig_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022)\n\006s"
    "tatus\030\003 \001(\0162\031.SProtoSpace.EQuestStatus\022)"
    "\n\004prog\030\004 \003(\0132\033.SProtoSpace.quest_progres"
    "s\022\034\n\024achievement_utc_time\030\005 \001(\r\"7\n\022task_"
    "activity_data\022\021\n\tconfig_id\030\001 \001(\005\022\016\n\006rewa"
    "rd\030\002 \001(\010\"w\n\017royal_task_info\022\021\n\tconfig_id"
    "\030\001 \001(\r\022\020\n\010max_step\030\002 \001(\005\022\020\n\010cur_step\030\003 \001"
    "(\005\022-\n\006status\030\004 \001(\0162\035.SProtoSpace.ERoyalT"
    "askStatus\"h\n\nroyal_info\022\021\n\tconfig_id\030\001 \001"
    "(\005\022\020\n\010intimacy\030\002 \001(\005\022\017\n\007quality\030\003 \001(\005\022\024\n"
    "\014has_received\030\004 \003(\005\022\016\n\006active\030\005 \001(\010\"1\n\017r"
    "oyal_gift_info\022\017\n\007gift_id\030\001 \001(\r\022\r\n\005count"
    "\030\002 \001(\r\"U\n\026royal_task_update_info\022\021\n\tconf"
    "ig_id\030\001 \001(\r\022\026\n\016task_config_id\030\002 \001(\r\022\020\n\010c"
    "ur_step\030\003 \001(\r\"=\n\017royal_base_info\022\025\n\rrefr"
    "esh_times\030\001 \001(\005\022\023\n\013visit_times\030\002 \001(\r\"5\n\016"
    "shop_cost_info\022\021\n\tcost_type\030\001 \001(\r\022\020\n\010cos"
    "t_num\030\002 \001(\r\"N\n\016shop_item_info\022\026\n\016sale_co"
    "nfig_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\r\022\023\n\013buy_cu"
    "r_num\030\003 \001(\r\"\220\001\n\tshop_info\022\026\n\016shop_config"
    "_id\030\001 \001(\005\022\032\n\022user_refresh_times\030\002 \001(\r\022\036\n"
    "\026sys_next_refresh_times\030\003 \001(\004\022/\n\nsale_it"
    "ems\030\004 \003(\0132\033.SProtoSpace.shop_item_info\">"
    "\n\021refresh_time_info\022\013\n\003day\030\001 \001(\r\022\014\n\004hour"
    "\030\002 \001(\r\022\016\n\006minute\030\003 \001(\r\"g\n\017tower_base_inf"
    "o\022\024\n\tmax_floor\030\002 \001(\r:\0010\022\026\n\013reset_times\030\003"
    " \001(\r:\0011\022\024\n\tcur_floor\030\004 \001(\r:\0011\022\020\n\010cur_ste"
    "p\030\005 \001(\r\"$\n\rquestion_info\022\023\n\013question_id\030"
    "\001 \001(\r\"0\n\rquestion_data\022\014\n\004type\030\001 \001(\r\022\021\n\t"
    "questions\030\002 \003(\r\"0\n\radv_city_data\022\017\n\007city"
    "_id\030\001 \001(\005\022\016\n\006unlock\030\002 \001(\010\"3\n\016adv_event_d"
    "ata\022\020\n\010event_id\030\001 \001(\005\022\017\n\007weather\030\002 \001(\005\"\237"
    "\001\n\020hero_events_data\022\017\n\007hero_id\030\001 \001(\005\022\022\n\n"
    "hero_favor\030\002 \001(\005\022\017\n\007hero_lv\030\003 \001(\005\022\022\n\nope"
    "n_count\030\004 \001(\005\022\021\n\tall_count\030\005 \001(\005\022.\n\teven"
    "t_ids\030\006 \003(\0132\033.SProtoSpace.adv_event_data"
    "\"z\n\020city_events_data\022\017\n\007city_id\030\001 \001(\005\022\022\n"
    "\nopen_count\030\002 \001(\005\022\021\n\tall_count\030\003 \001(\005\022.\n\t"
    "event_ids\030\004 \003(\0132\033.SProtoSpace.adv_event_"
    "data\"=\n\017hero_favor_info\022\017\n\007hero_id\030\001 \001(\005"
    "\022\r\n\005favor\030\002 \001(\005\022\n\n\002lv\030\003 \001(\005*}\n\014EQuestSta"
    "tus\022\022\n\016E_QUEST_LOCKED\020\000\022\026\n\022E_QUEST_UNACC"
    "EPTED\020\001\022\024\n\020E_QUEST_ACCEPTED\020\002\022\025\n\021E_QUEST"
    "_COMPLETED\020\003\022\024\n\020E_QUEST_FINISHED\020\004*\206\001\n\020E"
    "RoyalTaskStatus\022\032\n\026ROYAL_TASK_STATUS_NON"
    "E\020\000\022\033\n\027ROYAL_TASK_STATUS_DOING\020\001\022\036\n\032ROYA"
    "L_TASK_STATUS_FINISHED\020\002\022\031\n\025ROYAL_TASK_S"
    "TATUS_END\020\003*e\n\rEGameTaskType\022\021\n\rTASK_MAI"
    "NLINE\020\000\022\016\n\nTASK_DAILY\020\001\022\020\n\014TASK_ACHIEVE\020"
    "\002\022\016\n\nTASK_ROYAL\020\003\022\017\n\013TASK_BRANCH\020\004*z\n\017ER"
    "oyalEventType\022\027\n\023Royal_Event_TP_None\020\000\022\033"
    "\n\027Royal_Event_TP_Question\020\001\022\026\n\022Royal_Eve"
    "nt_TP_AVG\020\002\022\031\n\025Royal_Event_TP_Combat\020\003*R"
    "\n\023ERoyalOpenCondiType\022\033\n\027Royal_Condi_TP_"
    "Intimacy\020\001\022\036\n\032Royal_Condi_TP_Royal_Level"
    "\020\002*R\n\016ESHOP_OPT_TYPE\022\024\n\020SHOP_OPT_TP_GIVE"
    "\020\001\022\024\n\020SHOP_OPT_TP_WISH\020\002\022\024\n\020SHOP_OPT_TP_"
    "RECV\020\003*M\n\022EShopOpenCondiType\022\032\n\026EShopOpe"
    "nCondiTP_LEVEL\020\001\022\033\n\027EShopOpenCondiTP_MOD"
    "ULE\020\002*\210\002\n\nESHOP_TYPE\022\024\n\020SHOP_TP_ITEM_DAY"
    "\020e\022\030\n\024SHOP_TP_ITEM_GROCERY\020f\022\026\n\022SHOP_TP_"
    "ITEM_TOWER\020g\022\027\n\023SHOP_TP_ITEM_OFFICE\020h\022\027\n"
    "\023SHOP_TP_ITEM_FAMILY\020i\022\032\n\025SHOP_TP_GIFT_D"
    "ISCOUNT\020\311\001\022\025\n\020SHOP_TP_GIFT_VIP\020\312\001\022\026\n\021SHO"
    "P_TP_GIFT_SKIN\020\255\002\022\030\n\023SHOP_TP_GIFT_CHARGE"
    "\020\221\003\022\033\n\026SHOP_TP_GIFT_TIMELIMIT\020\365\003*\242\001\n\026ESH"
    "OP_GOODS_LIMIT_TYPE\022\025\n\021GOODS_LIMIT_TP_LV"
    "\020\001\022\031\n\025GOODS_LIMIT_TP_VIP_LV\020\002\022\034\n\030GOODS_L"
    "IMIT_TP_FAMILY_LV\020\003\022\030\n\024GOODS_LIMIT_TP_GR"
    "ADE\020\004\022\036\n\032GOODS_LIMIT_TP_TOWER_FLOOR\020\005*\217\001"
    "\n\024ESHOP_BUY_LIMIT_TYPE\022\024\n\020BUY_LIMIT_TP_D"
    "AY\020\001\022\025\n\021BUY_LIMIT_TP_WEEK\020\002\022\026\n\022BUY_LIMIT"
    "_TP_MONTH\020\003\022\030\n\024BUY_LIMIT_TP_REFRESH\020\004\022\030\n"
    "\024BUY_LIMIT_TP_FOREVER\020\005*t\n\rEQuestionType"
    "\022\026\n\022EQuestion_TP_Scene\020\001\022\026\n\022EQuestion_TP"
    "_Video\020\002\022\030\n\024EQuestion_TP_Science\020\003\022\031\n\025EQ"
    "uestion_TP_Humanity\020\004*;\n\016EQuestionClass\022"
    "\024\n\020EQuestion_Single\020\001\022\023\n\017EQuestion_Multi"
    "\020\002*m\n\rEWEATHER_TYPE\022\024\n\020EWEATHER_TP_NONE\020"
    "\000\022\030\n\024EWEATHER_TP_QINGTIAN\020\001\022\025\n\021EWEATHER_"
    "TP_XIAYU\020\002\022\025\n\021EWEATHER_TP_DALEI\020\003*\211\001\n\rES"
    "hiChen_TYPE\022\024\n\020ESHICHEN_TP_NONE\020\000\022\030\n\024ESH"
    "ICHEN_TP_QINGCHEN\020\001\022\027\n\023ESHICHEN_TP_BAITI"
    "AN\020\002\022\027\n\023ESHICHEN_TP_BANGWAN\020\003\022\026\n\022ESHICHE"
    "N_TP_SHENYE\020\004*6\n\013EEventClass\022\022\n\016EVENT_TP"
    "_FIXED\020\000\022\023\n\017EVENT_TP_RANDOM\020\001*1\n\nEEventT"
    "ype\022\021\n\rEVENT_TP_FUNC\020\001\022\020\n\014EVENT_TP_AVG\020\002"
    "*>\n\016EEventFuncTYpe\022\027\n\023EVENT_FUNC_QUESTIO"
    "N\020\001\022\023\n\017EVENT_FUNC_SHOP\020\002", 3664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cm_activitytype.proto", &protobuf_RegisterTypes);
  quest_progress::default_instance_ = new quest_progress();
  quest_data::default_instance_ = new quest_data();
  task_activity_data::default_instance_ = new task_activity_data();
  royal_task_info::default_instance_ = new royal_task_info();
  royal_info::default_instance_ = new royal_info();
  royal_gift_info::default_instance_ = new royal_gift_info();
  royal_task_update_info::default_instance_ = new royal_task_update_info();
  royal_base_info::default_instance_ = new royal_base_info();
  shop_cost_info::default_instance_ = new shop_cost_info();
  shop_item_info::default_instance_ = new shop_item_info();
  shop_info::default_instance_ = new shop_info();
  refresh_time_info::default_instance_ = new refresh_time_info();
  tower_base_info::default_instance_ = new tower_base_info();
  question_info::default_instance_ = new question_info();
  question_data::default_instance_ = new question_data();
  adv_city_data::default_instance_ = new adv_city_data();
  adv_event_data::default_instance_ = new adv_event_data();
  hero_events_data::default_instance_ = new hero_events_data();
  city_events_data::default_instance_ = new city_events_data();
  hero_favor_info::default_instance_ = new hero_favor_info();
  quest_progress::default_instance_->InitAsDefaultInstance();
  quest_data::default_instance_->InitAsDefaultInstance();
  task_activity_data::default_instance_->InitAsDefaultInstance();
  royal_task_info::default_instance_->InitAsDefaultInstance();
  royal_info::default_instance_->InitAsDefaultInstance();
  royal_gift_info::default_instance_->InitAsDefaultInstance();
  royal_task_update_info::default_instance_->InitAsDefaultInstance();
  royal_base_info::default_instance_->InitAsDefaultInstance();
  shop_cost_info::default_instance_->InitAsDefaultInstance();
  shop_item_info::default_instance_->InitAsDefaultInstance();
  shop_info::default_instance_->InitAsDefaultInstance();
  refresh_time_info::default_instance_->InitAsDefaultInstance();
  tower_base_info::default_instance_->InitAsDefaultInstance();
  question_info::default_instance_->InitAsDefaultInstance();
  question_data::default_instance_->InitAsDefaultInstance();
  adv_city_data::default_instance_->InitAsDefaultInstance();
  adv_event_data::default_instance_->InitAsDefaultInstance();
  hero_events_data::default_instance_->InitAsDefaultInstance();
  city_events_data::default_instance_->InitAsDefaultInstance();
  hero_favor_info::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cm_5factivitytype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cm_5factivitytype_2eproto {
  StaticDescriptorInitializer_cm_5factivitytype_2eproto() {
    protobuf_AddDesc_cm_5factivitytype_2eproto();
  }
} static_descriptor_initializer_cm_5factivitytype_2eproto_;
const ::google::protobuf::EnumDescriptor* EQuestStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestStatus_descriptor_;
}
bool EQuestStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoyalTaskStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoyalTaskStatus_descriptor_;
}
bool ERoyalTaskStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGameTaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGameTaskType_descriptor_;
}
bool EGameTaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoyalEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoyalEventType_descriptor_;
}
bool ERoyalEventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERoyalOpenCondiType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERoyalOpenCondiType_descriptor_;
}
bool ERoyalOpenCondiType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESHOP_OPT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESHOP_OPT_TYPE_descriptor_;
}
bool ESHOP_OPT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EShopOpenCondiType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EShopOpenCondiType_descriptor_;
}
bool EShopOpenCondiType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESHOP_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESHOP_TYPE_descriptor_;
}
bool ESHOP_TYPE_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 201:
    case 202:
    case 301:
    case 401:
    case 501:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESHOP_GOODS_LIMIT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESHOP_GOODS_LIMIT_TYPE_descriptor_;
}
bool ESHOP_GOODS_LIMIT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESHOP_BUY_LIMIT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESHOP_BUY_LIMIT_TYPE_descriptor_;
}
bool ESHOP_BUY_LIMIT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestionType_descriptor_;
}
bool EQuestionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQuestionClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQuestionClass_descriptor_;
}
bool EQuestionClass_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWEATHER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EWEATHER_TYPE_descriptor_;
}
bool EWEATHER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EShiChen_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EShiChen_TYPE_descriptor_;
}
bool EShiChen_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEventClass_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEventClass_descriptor_;
}
bool EEventClass_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEventType_descriptor_;
}
bool EEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEventFuncTYpe_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEventFuncTYpe_descriptor_;
}
bool EEventFuncTYpe_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int quest_progress::kCondIdFieldNumber;
const int quest_progress::kCurStepFieldNumber;
const int quest_progress::kMaxStepFieldNumber;
#endif  // !_MSC_VER

quest_progress::quest_progress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quest_progress::InitAsDefaultInstance() {
}

quest_progress::quest_progress(const quest_progress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quest_progress::SharedCtor() {
  _cached_size_ = 0;
  cond_id_ = 0;
  cur_step_ = 0;
  max_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quest_progress::~quest_progress() {
  SharedDtor();
}

void quest_progress::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quest_progress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quest_progress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quest_progress_descriptor_;
}

const quest_progress& quest_progress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

quest_progress* quest_progress::default_instance_ = NULL;

quest_progress* quest_progress::New() const {
  return new quest_progress;
}

void quest_progress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cond_id_ = 0;
    cur_step_ = 0;
    max_step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quest_progress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cond_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cond_id_)));
          set_has_cond_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_step;
        break;
      }

      // optional int32 cur_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_step;
        break;
      }

      // optional int32 max_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_step_)));
          set_has_max_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quest_progress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cond_id = 1;
  if (has_cond_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cond_id(), output);
  }

  // optional int32 cur_step = 2;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_step(), output);
  }

  // optional int32 max_step = 3;
  if (has_max_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quest_progress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cond_id = 1;
  if (has_cond_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cond_id(), target);
  }

  // optional int32 cur_step = 2;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_step(), target);
  }

  // optional int32 max_step = 3;
  if (has_max_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quest_progress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cond_id = 1;
    if (has_cond_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cond_id());
    }

    // optional int32 cur_step = 2;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_step());
    }

    // optional int32 max_step = 3;
    if (has_max_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quest_progress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quest_progress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quest_progress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quest_progress::MergeFrom(const quest_progress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cond_id()) {
      set_cond_id(from.cond_id());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_max_step()) {
      set_max_step(from.max_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quest_progress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quest_progress::CopyFrom(const quest_progress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quest_progress::IsInitialized() const {

  return true;
}

void quest_progress::Swap(quest_progress* other) {
  if (other != this) {
    std::swap(cond_id_, other->cond_id_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(max_step_, other->max_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quest_progress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quest_progress_descriptor_;
  metadata.reflection = quest_progress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int quest_data::kConfigIdFieldNumber;
const int quest_data::kTypeFieldNumber;
const int quest_data::kStatusFieldNumber;
const int quest_data::kProgFieldNumber;
const int quest_data::kAchievementUtcTimeFieldNumber;
#endif  // !_MSC_VER

quest_data::quest_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void quest_data::InitAsDefaultInstance() {
}

quest_data::quest_data(const quest_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void quest_data::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  type_ = 0;
  status_ = 0;
  achievement_utc_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

quest_data::~quest_data() {
  SharedDtor();
}

void quest_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void quest_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* quest_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return quest_data_descriptor_;
}

const quest_data& quest_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

quest_data* quest_data::default_instance_ = NULL;

quest_data* quest_data::New() const {
  return new quest_data;
}

void quest_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    type_ = 0;
    status_ = 0;
    achievement_utc_time_ = 0u;
  }
  prog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool quest_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .SProtoSpace.EQuestStatus status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EQuestStatus_IsValid(value)) {
            set_status(static_cast< ::SProtoSpace::EQuestStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prog;
        break;
      }

      // repeated .SProtoSpace.quest_progress prog = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prog()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prog;
        if (input->ExpectTag(40)) goto parse_achievement_utc_time;
        break;
      }

      // optional uint32 achievement_utc_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement_utc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_utc_time_)));
          set_has_achievement_utc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void quest_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .SProtoSpace.EQuestStatus status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // repeated .SProtoSpace.quest_progress prog = 4;
  for (int i = 0; i < this->prog_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prog(i), output);
  }

  // optional uint32 achievement_utc_time = 5;
  if (has_achievement_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->achievement_utc_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* quest_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .SProtoSpace.EQuestStatus status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // repeated .SProtoSpace.quest_progress prog = 4;
  for (int i = 0; i < this->prog_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prog(i), target);
  }

  // optional uint32 achievement_utc_time = 5;
  if (has_achievement_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->achievement_utc_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int quest_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .SProtoSpace.EQuestStatus status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 achievement_utc_time = 5;
    if (has_achievement_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_utc_time());
    }

  }
  // repeated .SProtoSpace.quest_progress prog = 4;
  total_size += 1 * this->prog_size();
  for (int i = 0; i < this->prog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prog(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void quest_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const quest_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const quest_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void quest_data::MergeFrom(const quest_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  prog_.MergeFrom(from.prog_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_achievement_utc_time()) {
      set_achievement_utc_time(from.achievement_utc_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void quest_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void quest_data::CopyFrom(const quest_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool quest_data::IsInitialized() const {

  return true;
}

void quest_data::Swap(quest_data* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    prog_.Swap(&other->prog_);
    std::swap(achievement_utc_time_, other->achievement_utc_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata quest_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = quest_data_descriptor_;
  metadata.reflection = quest_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int task_activity_data::kConfigIdFieldNumber;
const int task_activity_data::kRewardFieldNumber;
#endif  // !_MSC_VER

task_activity_data::task_activity_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void task_activity_data::InitAsDefaultInstance() {
}

task_activity_data::task_activity_data(const task_activity_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void task_activity_data::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

task_activity_data::~task_activity_data() {
  SharedDtor();
}

void task_activity_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void task_activity_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* task_activity_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return task_activity_data_descriptor_;
}

const task_activity_data& task_activity_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

task_activity_data* task_activity_data::default_instance_ = NULL;

task_activity_data* task_activity_data::New() const {
  return new task_activity_data;
}

void task_activity_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool task_activity_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward;
        break;
      }

      // optional bool reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void task_activity_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // optional bool reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* task_activity_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // optional bool reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int task_activity_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional bool reward = 2;
    if (has_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void task_activity_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const task_activity_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const task_activity_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void task_activity_data::MergeFrom(const task_activity_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void task_activity_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void task_activity_data::CopyFrom(const task_activity_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool task_activity_data::IsInitialized() const {

  return true;
}

void task_activity_data::Swap(task_activity_data* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata task_activity_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = task_activity_data_descriptor_;
  metadata.reflection = task_activity_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_task_info::kConfigIdFieldNumber;
const int royal_task_info::kMaxStepFieldNumber;
const int royal_task_info::kCurStepFieldNumber;
const int royal_task_info::kStatusFieldNumber;
#endif  // !_MSC_VER

royal_task_info::royal_task_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_task_info::InitAsDefaultInstance() {
}

royal_task_info::royal_task_info(const royal_task_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_task_info::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0u;
  max_step_ = 0;
  cur_step_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_task_info::~royal_task_info() {
  SharedDtor();
}

void royal_task_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_task_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_task_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_task_info_descriptor_;
}

const royal_task_info& royal_task_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

royal_task_info* royal_task_info::default_instance_ = NULL;

royal_task_info* royal_task_info::New() const {
  return new royal_task_info;
}

void royal_task_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0u;
    max_step_ = 0;
    cur_step_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_task_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_step;
        break;
      }

      // optional int32 max_step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_step_)));
          set_has_max_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional int32 cur_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .SProtoSpace.ERoyalTaskStatus status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ERoyalTaskStatus_IsValid(value)) {
            set_status(static_cast< ::SProtoSpace::ERoyalTaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_task_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  // optional int32 max_step = 2;
  if (has_max_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_step(), output);
  }

  // optional int32 cur_step = 3;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_step(), output);
  }

  // optional .SProtoSpace.ERoyalTaskStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_task_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  // optional int32 max_step = 2;
  if (has_max_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_step(), target);
  }

  // optional int32 cur_step = 3;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_step(), target);
  }

  // optional .SProtoSpace.ERoyalTaskStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_task_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional int32 max_step = 2;
    if (has_max_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_step());
    }

    // optional int32 cur_step = 3;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_step());
    }

    // optional .SProtoSpace.ERoyalTaskStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_task_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_task_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_task_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_task_info::MergeFrom(const royal_task_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_max_step()) {
      set_max_step(from.max_step());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_task_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_task_info::CopyFrom(const royal_task_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_task_info::IsInitialized() const {

  return true;
}

void royal_task_info::Swap(royal_task_info* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(max_step_, other->max_step_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_task_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_task_info_descriptor_;
  metadata.reflection = royal_task_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_info::kConfigIdFieldNumber;
const int royal_info::kIntimacyFieldNumber;
const int royal_info::kQualityFieldNumber;
const int royal_info::kHasReceivedFieldNumber;
const int royal_info::kActiveFieldNumber;
#endif  // !_MSC_VER

royal_info::royal_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_info::InitAsDefaultInstance() {
}

royal_info::royal_info(const royal_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_info::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0;
  intimacy_ = 0;
  quality_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_info::~royal_info() {
  SharedDtor();
}

void royal_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_info_descriptor_;
}

const royal_info& royal_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

royal_info* royal_info::default_instance_ = NULL;

royal_info* royal_info::New() const {
  return new royal_info;
}

void royal_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0;
    intimacy_ = 0;
    quality_ = 0;
    active_ = false;
  }
  has_received_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intimacy;
        break;
      }

      // optional int32 intimacy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimacy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimacy_)));
          set_has_intimacy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_received;
        break;
      }

      // repeated int32 has_received = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_received:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_has_received())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_has_received())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_has_received;
        if (input->ExpectTag(40)) goto parse_active;
        break;
      }

      // optional bool active = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->config_id(), output);
  }

  // optional int32 intimacy = 2;
  if (has_intimacy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->intimacy(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // repeated int32 has_received = 4;
  for (int i = 0; i < this->has_received_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->has_received(i), output);
  }

  // optional bool active = 5;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->config_id(), target);
  }

  // optional int32 intimacy = 2;
  if (has_intimacy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->intimacy(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // repeated int32 has_received = 4;
  for (int i = 0; i < this->has_received_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->has_received(i), target);
  }

  // optional bool active = 5;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->config_id());
    }

    // optional int32 intimacy = 2;
    if (has_intimacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimacy());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional bool active = 5;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 has_received = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->has_received_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->has_received(i));
    }
    total_size += 1 * this->has_received_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_info::MergeFrom(const royal_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  has_received_.MergeFrom(from.has_received_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_intimacy()) {
      set_intimacy(from.intimacy());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_info::CopyFrom(const royal_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_info::IsInitialized() const {

  return true;
}

void royal_info::Swap(royal_info* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(intimacy_, other->intimacy_);
    std::swap(quality_, other->quality_);
    has_received_.Swap(&other->has_received_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_info_descriptor_;
  metadata.reflection = royal_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_gift_info::kGiftIdFieldNumber;
const int royal_gift_info::kCountFieldNumber;
#endif  // !_MSC_VER

royal_gift_info::royal_gift_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_gift_info::InitAsDefaultInstance() {
}

royal_gift_info::royal_gift_info(const royal_gift_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_gift_info::SharedCtor() {
  _cached_size_ = 0;
  gift_id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_gift_info::~royal_gift_info() {
  SharedDtor();
}

void royal_gift_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_gift_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_gift_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_gift_info_descriptor_;
}

const royal_gift_info& royal_gift_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

royal_gift_info* royal_gift_info::default_instance_ = NULL;

royal_gift_info* royal_gift_info::New() const {
  return new royal_gift_info;
}

void royal_gift_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gift_id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_gift_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gift_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gift_id_)));
          set_has_gift_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_gift_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gift_id = 1;
  if (has_gift_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gift_id(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_gift_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gift_id = 1;
  if (has_gift_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gift_id(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_gift_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gift_id = 1;
    if (has_gift_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gift_id());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_gift_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_gift_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_gift_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_gift_info::MergeFrom(const royal_gift_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gift_id()) {
      set_gift_id(from.gift_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_gift_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_gift_info::CopyFrom(const royal_gift_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_gift_info::IsInitialized() const {

  return true;
}

void royal_gift_info::Swap(royal_gift_info* other) {
  if (other != this) {
    std::swap(gift_id_, other->gift_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_gift_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_gift_info_descriptor_;
  metadata.reflection = royal_gift_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_task_update_info::kConfigIdFieldNumber;
const int royal_task_update_info::kTaskConfigIdFieldNumber;
const int royal_task_update_info::kCurStepFieldNumber;
#endif  // !_MSC_VER

royal_task_update_info::royal_task_update_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_task_update_info::InitAsDefaultInstance() {
}

royal_task_update_info::royal_task_update_info(const royal_task_update_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_task_update_info::SharedCtor() {
  _cached_size_ = 0;
  config_id_ = 0u;
  task_config_id_ = 0u;
  cur_step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_task_update_info::~royal_task_update_info() {
  SharedDtor();
}

void royal_task_update_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_task_update_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_task_update_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_task_update_info_descriptor_;
}

const royal_task_update_info& royal_task_update_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

royal_task_update_info* royal_task_update_info::default_instance_ = NULL;

royal_task_update_info* royal_task_update_info::New() const {
  return new royal_task_update_info;
}

void royal_task_update_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    config_id_ = 0u;
    task_config_id_ = 0u;
    cur_step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_task_update_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
          set_has_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_config_id;
        break;
      }

      // optional uint32 task_config_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_config_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_config_id_)));
          set_has_task_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_task_update_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->config_id(), output);
  }

  // optional uint32 task_config_id = 2;
  if (has_task_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->task_config_id(), output);
  }

  // optional uint32 cur_step = 3;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_task_update_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 config_id = 1;
  if (has_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->config_id(), target);
  }

  // optional uint32 task_config_id = 2;
  if (has_task_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->task_config_id(), target);
  }

  // optional uint32 cur_step = 3;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_task_update_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 config_id = 1;
    if (has_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->config_id());
    }

    // optional uint32 task_config_id = 2;
    if (has_task_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_config_id());
    }

    // optional uint32 cur_step = 3;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_task_update_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_task_update_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_task_update_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_task_update_info::MergeFrom(const royal_task_update_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config_id()) {
      set_config_id(from.config_id());
    }
    if (from.has_task_config_id()) {
      set_task_config_id(from.task_config_id());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_task_update_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_task_update_info::CopyFrom(const royal_task_update_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_task_update_info::IsInitialized() const {

  return true;
}

void royal_task_update_info::Swap(royal_task_update_info* other) {
  if (other != this) {
    std::swap(config_id_, other->config_id_);
    std::swap(task_config_id_, other->task_config_id_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_task_update_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_task_update_info_descriptor_;
  metadata.reflection = royal_task_update_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int royal_base_info::kRefreshTimesFieldNumber;
const int royal_base_info::kVisitTimesFieldNumber;
#endif  // !_MSC_VER

royal_base_info::royal_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void royal_base_info::InitAsDefaultInstance() {
}

royal_base_info::royal_base_info(const royal_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void royal_base_info::SharedCtor() {
  _cached_size_ = 0;
  refresh_times_ = 0;
  visit_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

royal_base_info::~royal_base_info() {
  SharedDtor();
}

void royal_base_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void royal_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* royal_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return royal_base_info_descriptor_;
}

const royal_base_info& royal_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

royal_base_info* royal_base_info::default_instance_ = NULL;

royal_base_info* royal_base_info::New() const {
  return new royal_base_info;
}

void royal_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_times_ = 0;
    visit_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool royal_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refresh_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_visit_times;
        break;
      }

      // optional uint32 visit_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visit_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &visit_times_)));
          set_has_visit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void royal_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refresh_times = 1;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refresh_times(), output);
  }

  // optional uint32 visit_times = 2;
  if (has_visit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->visit_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* royal_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refresh_times = 1;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refresh_times(), target);
  }

  // optional uint32 visit_times = 2;
  if (has_visit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->visit_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int royal_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refresh_times = 1;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_times());
    }

    // optional uint32 visit_times = 2;
    if (has_visit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->visit_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void royal_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const royal_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const royal_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void royal_base_info::MergeFrom(const royal_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
    if (from.has_visit_times()) {
      set_visit_times(from.visit_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void royal_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void royal_base_info::CopyFrom(const royal_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool royal_base_info::IsInitialized() const {

  return true;
}

void royal_base_info::Swap(royal_base_info* other) {
  if (other != this) {
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(visit_times_, other->visit_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata royal_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = royal_base_info_descriptor_;
  metadata.reflection = royal_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_cost_info::kCostTypeFieldNumber;
const int shop_cost_info::kCostNumFieldNumber;
#endif  // !_MSC_VER

shop_cost_info::shop_cost_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_cost_info::InitAsDefaultInstance() {
}

shop_cost_info::shop_cost_info(const shop_cost_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_cost_info::SharedCtor() {
  _cached_size_ = 0;
  cost_type_ = 0u;
  cost_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_cost_info::~shop_cost_info() {
  SharedDtor();
}

void shop_cost_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_cost_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_cost_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_cost_info_descriptor_;
}

const shop_cost_info& shop_cost_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

shop_cost_info* shop_cost_info::default_instance_ = NULL;

shop_cost_info* shop_cost_info::New() const {
  return new shop_cost_info;
}

void shop_cost_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cost_type_ = 0u;
    cost_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_cost_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cost_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_num;
        break;
      }

      // optional uint32 cost_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_num_)));
          set_has_cost_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_cost_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cost_type = 1;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cost_type(), output);
  }

  // optional uint32 cost_num = 2;
  if (has_cost_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_cost_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cost_type = 1;
  if (has_cost_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cost_type(), target);
  }

  // optional uint32 cost_num = 2;
  if (has_cost_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_cost_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cost_type = 1;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_type());
    }

    // optional uint32 cost_num = 2;
    if (has_cost_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_cost_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_cost_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_cost_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_cost_info::MergeFrom(const shop_cost_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_cost_num()) {
      set_cost_num(from.cost_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_cost_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_cost_info::CopyFrom(const shop_cost_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_cost_info::IsInitialized() const {

  return true;
}

void shop_cost_info::Swap(shop_cost_info* other) {
  if (other != this) {
    std::swap(cost_type_, other->cost_type_);
    std::swap(cost_num_, other->cost_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_cost_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_cost_info_descriptor_;
  metadata.reflection = shop_cost_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_item_info::kSaleConfigIdFieldNumber;
const int shop_item_info::kItemIdFieldNumber;
const int shop_item_info::kBuyCurNumFieldNumber;
#endif  // !_MSC_VER

shop_item_info::shop_item_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_item_info::InitAsDefaultInstance() {
}

shop_item_info::shop_item_info(const shop_item_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_item_info::SharedCtor() {
  _cached_size_ = 0;
  sale_config_id_ = 0u;
  item_id_ = 0u;
  buy_cur_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_item_info::~shop_item_info() {
  SharedDtor();
}

void shop_item_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_item_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_item_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_item_info_descriptor_;
}

const shop_item_info& shop_item_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

shop_item_info* shop_item_info::default_instance_ = NULL;

shop_item_info* shop_item_info::New() const {
  return new shop_item_info;
}

void shop_item_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sale_config_id_ = 0u;
    item_id_ = 0u;
    buy_cur_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_item_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sale_config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sale_config_id_)));
          set_has_sale_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_cur_num;
        break;
      }

      // optional uint32 buy_cur_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_cur_num_)));
          set_has_buy_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_item_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sale_config_id = 1;
  if (has_sale_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sale_config_id(), output);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_id(), output);
  }

  // optional uint32 buy_cur_num = 3;
  if (has_buy_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_cur_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_item_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sale_config_id = 1;
  if (has_sale_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sale_config_id(), target);
  }

  // optional uint32 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_id(), target);
  }

  // optional uint32 buy_cur_num = 3;
  if (has_buy_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_cur_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_item_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sale_config_id = 1;
    if (has_sale_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sale_config_id());
    }

    // optional uint32 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 buy_cur_num = 3;
    if (has_buy_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_cur_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_item_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_item_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_item_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_item_info::MergeFrom(const shop_item_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sale_config_id()) {
      set_sale_config_id(from.sale_config_id());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_buy_cur_num()) {
      set_buy_cur_num(from.buy_cur_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_item_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_item_info::CopyFrom(const shop_item_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_item_info::IsInitialized() const {

  return true;
}

void shop_item_info::Swap(shop_item_info* other) {
  if (other != this) {
    std::swap(sale_config_id_, other->sale_config_id_);
    std::swap(item_id_, other->item_id_);
    std::swap(buy_cur_num_, other->buy_cur_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_item_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_item_info_descriptor_;
  metadata.reflection = shop_item_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int shop_info::kShopConfigIdFieldNumber;
const int shop_info::kUserRefreshTimesFieldNumber;
const int shop_info::kSysNextRefreshTimesFieldNumber;
const int shop_info::kSaleItemsFieldNumber;
#endif  // !_MSC_VER

shop_info::shop_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void shop_info::InitAsDefaultInstance() {
}

shop_info::shop_info(const shop_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void shop_info::SharedCtor() {
  _cached_size_ = 0;
  shop_config_id_ = 0;
  user_refresh_times_ = 0u;
  sys_next_refresh_times_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

shop_info::~shop_info() {
  SharedDtor();
}

void shop_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void shop_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* shop_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return shop_info_descriptor_;
}

const shop_info& shop_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

shop_info* shop_info::default_instance_ = NULL;

shop_info* shop_info::New() const {
  return new shop_info;
}

void shop_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shop_config_id_ = 0;
    user_refresh_times_ = 0u;
    sys_next_refresh_times_ = GOOGLE_ULONGLONG(0);
  }
  sale_items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool shop_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 shop_config_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_config_id_)));
          set_has_shop_config_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_refresh_times;
        break;
      }

      // optional uint32 user_refresh_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_refresh_times_)));
          set_has_user_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sys_next_refresh_times;
        break;
      }

      // optional uint64 sys_next_refresh_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sys_next_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sys_next_refresh_times_)));
          set_has_sys_next_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sale_items;
        break;
      }

      // repeated .SProtoSpace.shop_item_info sale_items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sale_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sale_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sale_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void shop_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 shop_config_id = 1;
  if (has_shop_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shop_config_id(), output);
  }

  // optional uint32 user_refresh_times = 2;
  if (has_user_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_refresh_times(), output);
  }

  // optional uint64 sys_next_refresh_times = 3;
  if (has_sys_next_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sys_next_refresh_times(), output);
  }

  // repeated .SProtoSpace.shop_item_info sale_items = 4;
  for (int i = 0; i < this->sale_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sale_items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* shop_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 shop_config_id = 1;
  if (has_shop_config_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shop_config_id(), target);
  }

  // optional uint32 user_refresh_times = 2;
  if (has_user_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_refresh_times(), target);
  }

  // optional uint64 sys_next_refresh_times = 3;
  if (has_sys_next_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sys_next_refresh_times(), target);
  }

  // repeated .SProtoSpace.shop_item_info sale_items = 4;
  for (int i = 0; i < this->sale_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sale_items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int shop_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 shop_config_id = 1;
    if (has_shop_config_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_config_id());
    }

    // optional uint32 user_refresh_times = 2;
    if (has_user_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_refresh_times());
    }

    // optional uint64 sys_next_refresh_times = 3;
    if (has_sys_next_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sys_next_refresh_times());
    }

  }
  // repeated .SProtoSpace.shop_item_info sale_items = 4;
  total_size += 1 * this->sale_items_size();
  for (int i = 0; i < this->sale_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sale_items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void shop_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const shop_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const shop_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void shop_info::MergeFrom(const shop_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  sale_items_.MergeFrom(from.sale_items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_config_id()) {
      set_shop_config_id(from.shop_config_id());
    }
    if (from.has_user_refresh_times()) {
      set_user_refresh_times(from.user_refresh_times());
    }
    if (from.has_sys_next_refresh_times()) {
      set_sys_next_refresh_times(from.sys_next_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void shop_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void shop_info::CopyFrom(const shop_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool shop_info::IsInitialized() const {

  return true;
}

void shop_info::Swap(shop_info* other) {
  if (other != this) {
    std::swap(shop_config_id_, other->shop_config_id_);
    std::swap(user_refresh_times_, other->user_refresh_times_);
    std::swap(sys_next_refresh_times_, other->sys_next_refresh_times_);
    sale_items_.Swap(&other->sale_items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata shop_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = shop_info_descriptor_;
  metadata.reflection = shop_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int refresh_time_info::kDayFieldNumber;
const int refresh_time_info::kHourFieldNumber;
const int refresh_time_info::kMinuteFieldNumber;
#endif  // !_MSC_VER

refresh_time_info::refresh_time_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void refresh_time_info::InitAsDefaultInstance() {
}

refresh_time_info::refresh_time_info(const refresh_time_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void refresh_time_info::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  hour_ = 0u;
  minute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

refresh_time_info::~refresh_time_info() {
  SharedDtor();
}

void refresh_time_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void refresh_time_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* refresh_time_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return refresh_time_info_descriptor_;
}

const refresh_time_info& refresh_time_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

refresh_time_info* refresh_time_info::default_instance_ = NULL;

refresh_time_info* refresh_time_info::New() const {
  return new refresh_time_info;
}

void refresh_time_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    hour_ = 0u;
    minute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool refresh_time_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_minute;
        break;
      }

      // optional uint32 minute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void refresh_time_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional uint32 hour = 2;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hour(), output);
  }

  // optional uint32 minute = 3;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->minute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* refresh_time_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional uint32 hour = 2;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hour(), target);
  }

  // optional uint32 minute = 3;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->minute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int refresh_time_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 hour = 2;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

    // optional uint32 minute = 3;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void refresh_time_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const refresh_time_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const refresh_time_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void refresh_time_info::MergeFrom(const refresh_time_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void refresh_time_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void refresh_time_info::CopyFrom(const refresh_time_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool refresh_time_info::IsInitialized() const {

  return true;
}

void refresh_time_info::Swap(refresh_time_info* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata refresh_time_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = refresh_time_info_descriptor_;
  metadata.reflection = refresh_time_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int tower_base_info::kMaxFloorFieldNumber;
const int tower_base_info::kResetTimesFieldNumber;
const int tower_base_info::kCurFloorFieldNumber;
const int tower_base_info::kCurStepFieldNumber;
#endif  // !_MSC_VER

tower_base_info::tower_base_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void tower_base_info::InitAsDefaultInstance() {
}

tower_base_info::tower_base_info(const tower_base_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void tower_base_info::SharedCtor() {
  _cached_size_ = 0;
  max_floor_ = 0u;
  reset_times_ = 1u;
  cur_floor_ = 1u;
  cur_step_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

tower_base_info::~tower_base_info() {
  SharedDtor();
}

void tower_base_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void tower_base_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tower_base_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return tower_base_info_descriptor_;
}

const tower_base_info& tower_base_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

tower_base_info* tower_base_info::default_instance_ = NULL;

tower_base_info* tower_base_info::New() const {
  return new tower_base_info;
}

void tower_base_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_floor_ = 0u;
    reset_times_ = 1u;
    cur_floor_ = 1u;
    cur_step_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool tower_base_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 max_floor = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_floor_)));
          set_has_max_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reset_times;
        break;
      }

      // optional uint32 reset_times = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_floor;
        break;
      }

      // optional uint32 cur_floor = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_floor_)));
          set_has_cur_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cur_step;
        break;
      }

      // optional uint32 cur_step = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_step_)));
          set_has_cur_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void tower_base_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 max_floor = 2 [default = 0];
  if (has_max_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max_floor(), output);
  }

  // optional uint32 reset_times = 3 [default = 1];
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reset_times(), output);
  }

  // optional uint32 cur_floor = 4 [default = 1];
  if (has_cur_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_floor(), output);
  }

  // optional uint32 cur_step = 5;
  if (has_cur_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* tower_base_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 max_floor = 2 [default = 0];
  if (has_max_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max_floor(), target);
  }

  // optional uint32 reset_times = 3 [default = 1];
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reset_times(), target);
  }

  // optional uint32 cur_floor = 4 [default = 1];
  if (has_cur_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_floor(), target);
  }

  // optional uint32 cur_step = 5;
  if (has_cur_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int tower_base_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 max_floor = 2 [default = 0];
    if (has_max_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_floor());
    }

    // optional uint32 reset_times = 3 [default = 1];
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_times());
    }

    // optional uint32 cur_floor = 4 [default = 1];
    if (has_cur_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_floor());
    }

    // optional uint32 cur_step = 5;
    if (has_cur_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tower_base_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const tower_base_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const tower_base_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void tower_base_info::MergeFrom(const tower_base_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_floor()) {
      set_max_floor(from.max_floor());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_cur_floor()) {
      set_cur_floor(from.cur_floor());
    }
    if (from.has_cur_step()) {
      set_cur_step(from.cur_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void tower_base_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tower_base_info::CopyFrom(const tower_base_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tower_base_info::IsInitialized() const {

  return true;
}

void tower_base_info::Swap(tower_base_info* other) {
  if (other != this) {
    std::swap(max_floor_, other->max_floor_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(cur_floor_, other->cur_floor_);
    std::swap(cur_step_, other->cur_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata tower_base_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = tower_base_info_descriptor_;
  metadata.reflection = tower_base_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int question_info::kQuestionIdFieldNumber;
#endif  // !_MSC_VER

question_info::question_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void question_info::InitAsDefaultInstance() {
}

question_info::question_info(const question_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void question_info::SharedCtor() {
  _cached_size_ = 0;
  question_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

question_info::~question_info() {
  SharedDtor();
}

void question_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void question_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* question_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return question_info_descriptor_;
}

const question_info& question_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

question_info* question_info::default_instance_ = NULL;

question_info* question_info::New() const {
  return new question_info;
}

void question_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    question_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool question_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 question_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
          set_has_question_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void question_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 question_id = 1;
  if (has_question_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->question_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* question_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 question_id = 1;
  if (has_question_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->question_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int question_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 question_id = 1;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void question_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const question_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const question_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void question_info::MergeFrom(const question_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_question_id()) {
      set_question_id(from.question_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void question_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void question_info::CopyFrom(const question_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool question_info::IsInitialized() const {

  return true;
}

void question_info::Swap(question_info* other) {
  if (other != this) {
    std::swap(question_id_, other->question_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata question_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = question_info_descriptor_;
  metadata.reflection = question_info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int question_data::kTypeFieldNumber;
const int question_data::kQuestionsFieldNumber;
#endif  // !_MSC_VER

question_data::question_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void question_data::InitAsDefaultInstance() {
}

question_data::question_data(const question_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void question_data::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

question_data::~question_data() {
  SharedDtor();
}

void question_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void question_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* question_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return question_data_descriptor_;
}

const question_data& question_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

question_data* question_data::default_instance_ = NULL;

question_data* question_data::New() const {
  return new question_data;
}

void question_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  questions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool question_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questions;
        break;
      }

      // repeated uint32 questions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_questions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_questions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_questions;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void question_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated uint32 questions = 2;
  for (int i = 0; i < this->questions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->questions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* question_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated uint32 questions = 2;
  for (int i = 0; i < this->questions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->questions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int question_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated uint32 questions = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->questions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->questions(i));
    }
    total_size += 1 * this->questions_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void question_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const question_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const question_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void question_data::MergeFrom(const question_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  questions_.MergeFrom(from.questions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void question_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void question_data::CopyFrom(const question_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool question_data::IsInitialized() const {

  return true;
}

void question_data::Swap(question_data* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    questions_.Swap(&other->questions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata question_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = question_data_descriptor_;
  metadata.reflection = question_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_city_data::kCityIdFieldNumber;
const int adv_city_data::kUnlockFieldNumber;
#endif  // !_MSC_VER

adv_city_data::adv_city_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_city_data::InitAsDefaultInstance() {
}

adv_city_data::adv_city_data(const adv_city_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_city_data::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0;
  unlock_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_city_data::~adv_city_data() {
  SharedDtor();
}

void adv_city_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_city_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_city_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_city_data_descriptor_;
}

const adv_city_data& adv_city_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

adv_city_data* adv_city_data::default_instance_ = NULL;

adv_city_data* adv_city_data::New() const {
  return new adv_city_data;
}

void adv_city_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0;
    unlock_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_city_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlock;
        break;
      }

      // optional bool unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_city_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->city_id(), output);
  }

  // optional bool unlock = 2;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_city_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->city_id(), target);
  }

  // optional bool unlock = 2;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_city_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

    // optional bool unlock = 2;
    if (has_unlock()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_city_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_city_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_city_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_city_data::MergeFrom(const adv_city_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_city_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_city_data::CopyFrom(const adv_city_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_city_data::IsInitialized() const {

  return true;
}

void adv_city_data::Swap(adv_city_data* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_city_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_city_data_descriptor_;
  metadata.reflection = adv_city_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int adv_event_data::kEventIdFieldNumber;
const int adv_event_data::kWeatherFieldNumber;
#endif  // !_MSC_VER

adv_event_data::adv_event_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void adv_event_data::InitAsDefaultInstance() {
}

adv_event_data::adv_event_data(const adv_event_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void adv_event_data::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  weather_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

adv_event_data::~adv_event_data() {
  SharedDtor();
}

void adv_event_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void adv_event_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* adv_event_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return adv_event_data_descriptor_;
}

const adv_event_data& adv_event_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

adv_event_data* adv_event_data::default_instance_ = NULL;

adv_event_data* adv_event_data::New() const {
  return new adv_event_data;
}

void adv_event_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0;
    weather_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool adv_event_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weather;
        break;
      }

      // optional int32 weather = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weather:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weather_)));
          set_has_weather();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void adv_event_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // optional int32 weather = 2;
  if (has_weather()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weather(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* adv_event_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // optional int32 weather = 2;
  if (has_weather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weather(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int adv_event_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // optional int32 weather = 2;
    if (has_weather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weather());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void adv_event_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const adv_event_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const adv_event_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void adv_event_data::MergeFrom(const adv_event_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_weather()) {
      set_weather(from.weather());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void adv_event_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void adv_event_data::CopyFrom(const adv_event_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool adv_event_data::IsInitialized() const {

  return true;
}

void adv_event_data::Swap(adv_event_data* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(weather_, other->weather_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata adv_event_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = adv_event_data_descriptor_;
  metadata.reflection = adv_event_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_events_data::kHeroIdFieldNumber;
const int hero_events_data::kHeroFavorFieldNumber;
const int hero_events_data::kHeroLvFieldNumber;
const int hero_events_data::kOpenCountFieldNumber;
const int hero_events_data::kAllCountFieldNumber;
const int hero_events_data::kEventIdsFieldNumber;
#endif  // !_MSC_VER

hero_events_data::hero_events_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_events_data::InitAsDefaultInstance() {
}

hero_events_data::hero_events_data(const hero_events_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_events_data::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0;
  hero_favor_ = 0;
  hero_lv_ = 0;
  open_count_ = 0;
  all_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_events_data::~hero_events_data() {
  SharedDtor();
}

void hero_events_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_events_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_events_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_events_data_descriptor_;
}

const hero_events_data& hero_events_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

hero_events_data* hero_events_data::default_instance_ = NULL;

hero_events_data* hero_events_data::New() const {
  return new hero_events_data;
}

void hero_events_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0;
    hero_favor_ = 0;
    hero_lv_ = 0;
    open_count_ = 0;
    all_count_ = 0;
  }
  event_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_events_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_favor;
        break;
      }

      // optional int32 hero_favor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_favor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_favor_)));
          set_has_hero_favor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hero_lv;
        break;
      }

      // optional int32 hero_lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_lv_)));
          set_has_hero_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_count;
        break;
      }

      // optional int32 open_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_count_)));
          set_has_open_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_all_count;
        break;
      }

      // optional int32 all_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_count_)));
          set_has_all_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_event_ids;
        break;
      }

      // repeated .SProtoSpace.adv_event_data event_ids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_event_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_events_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 hero_favor = 2;
  if (has_hero_favor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hero_favor(), output);
  }

  // optional int32 hero_lv = 3;
  if (has_hero_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hero_lv(), output);
  }

  // optional int32 open_count = 4;
  if (has_open_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->open_count(), output);
  }

  // optional int32 all_count = 5;
  if (has_all_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->all_count(), output);
  }

  // repeated .SProtoSpace.adv_event_data event_ids = 6;
  for (int i = 0; i < this->event_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->event_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_events_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 hero_favor = 2;
  if (has_hero_favor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hero_favor(), target);
  }

  // optional int32 hero_lv = 3;
  if (has_hero_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hero_lv(), target);
  }

  // optional int32 open_count = 4;
  if (has_open_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->open_count(), target);
  }

  // optional int32 all_count = 5;
  if (has_all_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->all_count(), target);
  }

  // repeated .SProtoSpace.adv_event_data event_ids = 6;
  for (int i = 0; i < this->event_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->event_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_events_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 hero_favor = 2;
    if (has_hero_favor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_favor());
    }

    // optional int32 hero_lv = 3;
    if (has_hero_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_lv());
    }

    // optional int32 open_count = 4;
    if (has_open_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_count());
    }

    // optional int32 all_count = 5;
    if (has_all_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_count());
    }

  }
  // repeated .SProtoSpace.adv_event_data event_ids = 6;
  total_size += 1 * this->event_ids_size();
  for (int i = 0; i < this->event_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_events_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_events_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_events_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_events_data::MergeFrom(const hero_events_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_ids_.MergeFrom(from.event_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_hero_favor()) {
      set_hero_favor(from.hero_favor());
    }
    if (from.has_hero_lv()) {
      set_hero_lv(from.hero_lv());
    }
    if (from.has_open_count()) {
      set_open_count(from.open_count());
    }
    if (from.has_all_count()) {
      set_all_count(from.all_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_events_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_events_data::CopyFrom(const hero_events_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_events_data::IsInitialized() const {

  return true;
}

void hero_events_data::Swap(hero_events_data* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(hero_favor_, other->hero_favor_);
    std::swap(hero_lv_, other->hero_lv_);
    std::swap(open_count_, other->open_count_);
    std::swap(all_count_, other->all_count_);
    event_ids_.Swap(&other->event_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_events_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_events_data_descriptor_;
  metadata.reflection = hero_events_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int city_events_data::kCityIdFieldNumber;
const int city_events_data::kOpenCountFieldNumber;
const int city_events_data::kAllCountFieldNumber;
const int city_events_data::kEventIdsFieldNumber;
#endif  // !_MSC_VER

city_events_data::city_events_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void city_events_data::InitAsDefaultInstance() {
}

city_events_data::city_events_data(const city_events_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void city_events_data::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0;
  open_count_ = 0;
  all_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

city_events_data::~city_events_data() {
  SharedDtor();
}

void city_events_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void city_events_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* city_events_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return city_events_data_descriptor_;
}

const city_events_data& city_events_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

city_events_data* city_events_data::default_instance_ = NULL;

city_events_data* city_events_data::New() const {
  return new city_events_data;
}

void city_events_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0;
    open_count_ = 0;
    all_count_ = 0;
  }
  event_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool city_events_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_open_count;
        break;
      }

      // optional int32 open_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_count_)));
          set_has_open_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_all_count;
        break;
      }

      // optional int32 all_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_count_)));
          set_has_all_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_ids;
        break;
      }

      // repeated .SProtoSpace.adv_event_data event_ids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void city_events_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->city_id(), output);
  }

  // optional int32 open_count = 2;
  if (has_open_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_count(), output);
  }

  // optional int32 all_count = 3;
  if (has_all_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->all_count(), output);
  }

  // repeated .SProtoSpace.adv_event_data event_ids = 4;
  for (int i = 0; i < this->event_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* city_events_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->city_id(), target);
  }

  // optional int32 open_count = 2;
  if (has_open_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_count(), target);
  }

  // optional int32 all_count = 3;
  if (has_all_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->all_count(), target);
  }

  // repeated .SProtoSpace.adv_event_data event_ids = 4;
  for (int i = 0; i < this->event_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int city_events_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->city_id());
    }

    // optional int32 open_count = 2;
    if (has_open_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_count());
    }

    // optional int32 all_count = 3;
    if (has_all_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_count());
    }

  }
  // repeated .SProtoSpace.adv_event_data event_ids = 4;
  total_size += 1 * this->event_ids_size();
  for (int i = 0; i < this->event_ids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_ids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void city_events_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const city_events_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const city_events_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void city_events_data::MergeFrom(const city_events_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_ids_.MergeFrom(from.event_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_open_count()) {
      set_open_count(from.open_count());
    }
    if (from.has_all_count()) {
      set_all_count(from.all_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void city_events_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void city_events_data::CopyFrom(const city_events_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool city_events_data::IsInitialized() const {

  return true;
}

void city_events_data::Swap(city_events_data* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(open_count_, other->open_count_);
    std::swap(all_count_, other->all_count_);
    event_ids_.Swap(&other->event_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata city_events_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = city_events_data_descriptor_;
  metadata.reflection = city_events_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_favor_info::kHeroIdFieldNumber;
const int hero_favor_info::kFavorFieldNumber;
const int hero_favor_info::kLvFieldNumber;
#endif  // !_MSC_VER

hero_favor_info::hero_favor_info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_favor_info::InitAsDefaultInstance() {
}

hero_favor_info::hero_favor_info(const hero_favor_info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_favor_info::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0;
  favor_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_favor_info::~hero_favor_info() {
  SharedDtor();
}

void hero_favor_info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_favor_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_favor_info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_favor_info_descriptor_;
}

const hero_favor_info& hero_favor_info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cm_5factivitytype_2eproto();
  return *default_instance_;
}

hero_favor_info* hero_favor_info::default_instance_ = NULL;

hero_favor_info* hero_favor_info::New() const {
  return new hero_favor_info;
}

void hero_favor_info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0;
    favor_ = 0;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_favor_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_favor;
        break;
      }

      // optional int32 favor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_favor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &favor_)));
          set_has_favor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_favor_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_id(), output);
  }

  // optional int32 favor = 2;
  if (has_favor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->favor(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_favor_info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_id(), target);
  }

  // optional int32 favor = 2;
  if (has_favor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->favor(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_favor_info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_id());
    }

    // optional int32 favor = 2;
    if (has_favor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->favor());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_favor_info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_favor_info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_favor_info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_favor_info::MergeFrom(const hero_favor_info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_favor()) {
      set_favor(from.favor());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_favor_info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_favor_info::CopyFrom(const hero_favor_info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_favor_info::IsInitialized() const {

  return true;
}

void hero_favor_info::Swap(hero_favor_info* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    std::swap(favor_, other->favor_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_favor_info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_favor_info_descriptor_;
  metadata.reflection = hero_favor_info_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
