// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cs_battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

namespace {

const ::google::protobuf::Descriptor* battle_1v1_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_1v1_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_1v1_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_1v1_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_ready_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_ready_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_ready_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_ready_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_ready_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_ready_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_change_hero_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_change_hero_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_change_hero_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_change_hero_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_change_hero_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_change_hero_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_shot_operate_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_shot_operate_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_shot_operate_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_shot_operate_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_turn_begin_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_turn_begin_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_turn_end_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_turn_end_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_round_begin_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_round_begin_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_round_end_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_round_end_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_shot_begin_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_shot_begin_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_shot_end_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_shot_end_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_info_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_info_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_begin_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_begin_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_end_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_end_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_extra_operator_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_extra_operator_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_extra_operator_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_extra_operator_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_extra_operator_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_extra_operator_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_shot_ready_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_shot_ready_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_jump_over_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_jump_over_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_begin_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_begin_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_begin_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_begin_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_end_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_end_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_end_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_end_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_replay_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_replay_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* battle_replay_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  battle_replay_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_office_battle_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_office_battle_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* test_office_battle_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  test_office_battle_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* hero_formation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hero_formation_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_formation_get_ntf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_formation_get_ntf_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_formation_save_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_formation_save_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_formation_save_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_formation_save_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_formation_fight_power_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_formation_fight_power_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_formation_fight_power_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_formation_fight_power_ack_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_hero_fight_power_req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_hero_fight_power_req_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_battle_hero_fight_power_ack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_battle_hero_fight_power_ack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cs_5fbattle_2eproto() {
  protobuf_AddDesc_cs_5fbattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cs_battle.proto");
  GOOGLE_CHECK(file != NULL);
  battle_1v1_req_descriptor_ = file->message_type(0);
  static const int battle_1v1_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_req, battle_type_),
  };
  battle_1v1_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_1v1_req_descriptor_,
      battle_1v1_req::default_instance_,
      battle_1v1_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_1v1_req));
  battle_1v1_ack_descriptor_ = file->message_type(1);
  static const int battle_1v1_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_ack, ret_),
  };
  battle_1v1_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_1v1_ack_descriptor_,
      battle_1v1_ack::default_instance_,
      battle_1v1_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_1v1_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_1v1_ack));
  battle_ready_req_descriptor_ = file->message_type(2);
  static const int battle_ready_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_req, battle_uuid_),
  };
  battle_ready_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_ready_req_descriptor_,
      battle_ready_req::default_instance_,
      battle_ready_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_ready_req));
  battle_ready_ack_descriptor_ = file->message_type(3);
  static const int battle_ready_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ack, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ack, ret_),
  };
  battle_ready_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_ready_ack_descriptor_,
      battle_ready_ack::default_instance_,
      battle_ready_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_ready_ack));
  battle_ready_ntf_descriptor_ = file->message_type(4);
  static const int battle_ready_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ntf, role_id_),
  };
  battle_ready_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_ready_ntf_descriptor_,
      battle_ready_ntf::default_instance_,
      battle_ready_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_ready_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_ready_ntf));
  battle_change_hero_req_descriptor_ = file->message_type(5);
  static const int battle_change_hero_req_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, hero_id_),
  };
  battle_change_hero_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_change_hero_req_descriptor_,
      battle_change_hero_req::default_instance_,
      battle_change_hero_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_change_hero_req));
  battle_change_hero_ack_descriptor_ = file->message_type(6);
  static const int battle_change_hero_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, ret_),
  };
  battle_change_hero_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_change_hero_ack_descriptor_,
      battle_change_hero_ack::default_instance_,
      battle_change_hero_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_change_hero_ack));
  battle_change_hero_ntf_descriptor_ = file->message_type(7);
  static const int battle_change_hero_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, old_hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, new_hero_info_),
  };
  battle_change_hero_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_change_hero_ntf_descriptor_,
      battle_change_hero_ntf::default_instance_,
      battle_change_hero_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_change_hero_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_change_hero_ntf));
  battle_shot_operate_req_descriptor_ = file->message_type(8);
  static const int battle_shot_operate_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_req, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_req, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_req, op_param_),
  };
  battle_shot_operate_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_shot_operate_req_descriptor_,
      battle_shot_operate_req::default_instance_,
      battle_shot_operate_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_shot_operate_req));
  battle_shot_operate_ack_descriptor_ = file->message_type(9);
  static const int battle_shot_operate_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, op_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, ret_),
  };
  battle_shot_operate_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_shot_operate_ack_descriptor_,
      battle_shot_operate_ack::default_instance_,
      battle_shot_operate_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_operate_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_shot_operate_ack));
  battle_turn_begin_ntf_descriptor_ = file->message_type(10);
  static const int battle_turn_begin_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_begin_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_begin_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_begin_ntf, turn_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_begin_ntf, seqs_),
  };
  battle_turn_begin_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_turn_begin_ntf_descriptor_,
      battle_turn_begin_ntf::default_instance_,
      battle_turn_begin_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_begin_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_begin_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_turn_begin_ntf));
  battle_turn_end_ntf_descriptor_ = file->message_type(11);
  static const int battle_turn_end_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, turn_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, seqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, winner_camp_),
  };
  battle_turn_end_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_turn_end_ntf_descriptor_,
      battle_turn_end_ntf::default_instance_,
      battle_turn_end_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_turn_end_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_turn_end_ntf));
  battle_round_begin_ntf_descriptor_ = file->message_type(12);
  static const int battle_round_begin_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_begin_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_begin_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_begin_ntf, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_begin_ntf, seqs_),
  };
  battle_round_begin_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_round_begin_ntf_descriptor_,
      battle_round_begin_ntf::default_instance_,
      battle_round_begin_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_begin_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_begin_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_round_begin_ntf));
  battle_round_end_ntf_descriptor_ = file->message_type(13);
  static const int battle_round_end_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, round_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, seqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, winner_camp_),
  };
  battle_round_end_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_round_end_ntf_descriptor_,
      battle_round_end_ntf::default_instance_,
      battle_round_end_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_round_end_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_round_end_ntf));
  battle_shot_begin_ntf_descriptor_ = file->message_type(14);
  static const int battle_shot_begin_ntf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, seqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, shot_index_),
  };
  battle_shot_begin_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_shot_begin_ntf_descriptor_,
      battle_shot_begin_ntf::default_instance_,
      battle_shot_begin_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_begin_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_shot_begin_ntf));
  battle_shot_end_ntf_descriptor_ = file->message_type(15);
  static const int battle_shot_end_ntf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, shot_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, seqs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, sp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, winner_camp_),
  };
  battle_shot_end_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_shot_end_ntf_descriptor_,
      battle_shot_end_ntf::default_instance_,
      battle_shot_end_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_end_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_shot_end_ntf));
  battle_info_ntf_descriptor_ = file->message_type(16);
  static const int battle_info_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_ntf, data_),
  };
  battle_info_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_info_ntf_descriptor_,
      battle_info_ntf::default_instance_,
      battle_info_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_info_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_info_ntf));
  battle_begin_ntf_descriptor_ = file->message_type(17);
  static const int battle_begin_ntf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ntf, battle_type_),
  };
  battle_begin_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_begin_ntf_descriptor_,
      battle_begin_ntf::default_instance_,
      battle_begin_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_begin_ntf));
  battle_end_ntf_descriptor_ = file->message_type(18);
  static const int battle_end_ntf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, battle_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, winner_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, turn_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, round_index_),
  };
  battle_end_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_end_ntf_descriptor_,
      battle_end_ntf::default_instance_,
      battle_end_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_end_ntf));
  battle_extra_operator_req_descriptor_ = file->message_type(19);
  static const int battle_extra_operator_req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_req, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_req, obj_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_req, skill_id_),
  };
  battle_extra_operator_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_extra_operator_req_descriptor_,
      battle_extra_operator_req::default_instance_,
      battle_extra_operator_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_extra_operator_req));
  battle_extra_operator_ack_descriptor_ = file->message_type(20);
  static const int battle_extra_operator_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, obj_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, skill_id_),
  };
  battle_extra_operator_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_extra_operator_ack_descriptor_,
      battle_extra_operator_ack::default_instance_,
      battle_extra_operator_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_extra_operator_ack));
  battle_extra_operator_ntf_descriptor_ = file->message_type(21);
  static const int battle_extra_operator_ntf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ntf, battle_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ntf, obj_uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ntf, skill_id_),
  };
  battle_extra_operator_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_extra_operator_ntf_descriptor_,
      battle_extra_operator_ntf::default_instance_,
      battle_extra_operator_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_extra_operator_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_extra_operator_ntf));
  battle_shot_ready_ntf_descriptor_ = file->message_type(22);
  static const int battle_shot_ready_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_ready_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_ready_ntf, battle_uuid_),
  };
  battle_shot_ready_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_shot_ready_ntf_descriptor_,
      battle_shot_ready_ntf::default_instance_,
      battle_shot_ready_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_ready_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_shot_ready_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_shot_ready_ntf));
  battle_jump_over_ntf_descriptor_ = file->message_type(23);
  static const int battle_jump_over_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_jump_over_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_jump_over_ntf, battle_uuid_),
  };
  battle_jump_over_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_jump_over_ntf_descriptor_,
      battle_jump_over_ntf::default_instance_,
      battle_jump_over_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_jump_over_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_jump_over_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_jump_over_ntf));
  battle_begin_req_descriptor_ = file->message_type(24);
  static const int battle_begin_req_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, formation_type_),
  };
  battle_begin_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_begin_req_descriptor_,
      battle_begin_req::default_instance_,
      battle_begin_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_begin_req));
  battle_begin_ack_descriptor_ = file->message_type(25);
  static const int battle_begin_ack_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, formation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, role_info_),
  };
  battle_begin_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_begin_ack_descriptor_,
      battle_begin_ack::default_instance_,
      battle_begin_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_begin_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_begin_ack));
  battle_end_req_descriptor_ = file->message_type(26);
  static const int battle_end_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_req, end_data_),
  };
  battle_end_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_end_req_descriptor_,
      battle_end_req::default_instance_,
      battle_end_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_end_req));
  battle_end_ack_descriptor_ = file->message_type(27);
  static const int battle_end_ack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, battle_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, is_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, is_cheat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, formation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, stars_),
  };
  battle_end_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_end_ack_descriptor_,
      battle_end_ack::default_instance_,
      battle_end_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_end_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_end_ack));
  battle_replay_req_descriptor_ = file->message_type(28);
  static const int battle_replay_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_req, replay_id_),
  };
  battle_replay_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_replay_req_descriptor_,
      battle_replay_req::default_instance_,
      battle_replay_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_replay_req));
  battle_replay_ack_descriptor_ = file->message_type(29);
  static const int battle_replay_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_ack, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_ack, replay_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_ack, data_),
  };
  battle_replay_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      battle_replay_ack_descriptor_,
      battle_replay_ack::default_instance_,
      battle_replay_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(battle_replay_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(battle_replay_ack));
  test_office_battle_req_descriptor_ = file->message_type(30);
  static const int test_office_battle_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_req, index_),
  };
  test_office_battle_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_office_battle_req_descriptor_,
      test_office_battle_req::default_instance_,
      test_office_battle_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_office_battle_req));
  test_office_battle_ack_descriptor_ = file->message_type(31);
  static const int test_office_battle_ack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_ack, index_),
  };
  test_office_battle_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      test_office_battle_ack_descriptor_,
      test_office_battle_ack::default_instance_,
      test_office_battle_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(test_office_battle_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(test_office_battle_ack));
  hero_formation_descriptor_ = file->message_type(32);
  static const int hero_formation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_formation, formation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_formation, hero_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_formation, role_position_),
  };
  hero_formation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hero_formation_descriptor_,
      hero_formation::default_instance_,
      hero_formation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_formation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hero_formation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hero_formation));
  role_battle_formation_get_ntf_descriptor_ = file->message_type(33);
  static const int role_battle_formation_get_ntf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_get_ntf, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_get_ntf, formations_),
  };
  role_battle_formation_get_ntf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_formation_get_ntf_descriptor_,
      role_battle_formation_get_ntf::default_instance_,
      role_battle_formation_get_ntf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_get_ntf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_get_ntf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_formation_get_ntf));
  role_battle_formation_save_req_descriptor_ = file->message_type(34);
  static const int role_battle_formation_save_req_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_req, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_req, formations_),
  };
  role_battle_formation_save_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_formation_save_req_descriptor_,
      role_battle_formation_save_req::default_instance_,
      role_battle_formation_save_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_formation_save_req));
  role_battle_formation_save_ack_descriptor_ = file->message_type(35);
  static const int role_battle_formation_save_ack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, rec_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, formation_fight_power_buff_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, formation_fight_power_buff_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, ret_),
  };
  role_battle_formation_save_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_formation_save_ack_descriptor_,
      role_battle_formation_save_ack::default_instance_,
      role_battle_formation_save_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_save_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_formation_save_ack));
  role_battle_formation_fight_power_req_descriptor_ = file->message_type(36);
  static const int role_battle_formation_fight_power_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_req, formation_type_),
  };
  role_battle_formation_fight_power_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_formation_fight_power_req_descriptor_,
      role_battle_formation_fight_power_req::default_instance_,
      role_battle_formation_fight_power_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_formation_fight_power_req));
  role_battle_formation_fight_power_ack_descriptor_ = file->message_type(37);
  static const int role_battle_formation_fight_power_ack_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_ack, formation_fight_power_buff_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_ack, formation_fight_power_buff_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_ack, rec_code_),
  };
  role_battle_formation_fight_power_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_formation_fight_power_ack_descriptor_,
      role_battle_formation_fight_power_ack::default_instance_,
      role_battle_formation_fight_power_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_formation_fight_power_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_formation_fight_power_ack));
  role_battle_hero_fight_power_req_descriptor_ = file->message_type(38);
  static const int role_battle_hero_fight_power_req_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_req, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_req, hero_id_),
  };
  role_battle_hero_fight_power_req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_hero_fight_power_req_descriptor_,
      role_battle_hero_fight_power_req::default_instance_,
      role_battle_hero_fight_power_req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_hero_fight_power_req));
  role_battle_hero_fight_power_ack_descriptor_ = file->message_type(39);
  static const int role_battle_hero_fight_power_ack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_ack, protoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_ack, hero_fight_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_ack, rec_code_),
  };
  role_battle_hero_fight_power_ack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_battle_hero_fight_power_ack_descriptor_,
      role_battle_hero_fight_power_ack::default_instance_,
      role_battle_hero_fight_power_ack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_ack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_battle_hero_fight_power_ack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_battle_hero_fight_power_ack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cs_5fbattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_1v1_req_descriptor_, &battle_1v1_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_1v1_ack_descriptor_, &battle_1v1_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_ready_req_descriptor_, &battle_ready_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_ready_ack_descriptor_, &battle_ready_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_ready_ntf_descriptor_, &battle_ready_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_change_hero_req_descriptor_, &battle_change_hero_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_change_hero_ack_descriptor_, &battle_change_hero_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_change_hero_ntf_descriptor_, &battle_change_hero_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_shot_operate_req_descriptor_, &battle_shot_operate_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_shot_operate_ack_descriptor_, &battle_shot_operate_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_turn_begin_ntf_descriptor_, &battle_turn_begin_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_turn_end_ntf_descriptor_, &battle_turn_end_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_round_begin_ntf_descriptor_, &battle_round_begin_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_round_end_ntf_descriptor_, &battle_round_end_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_shot_begin_ntf_descriptor_, &battle_shot_begin_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_shot_end_ntf_descriptor_, &battle_shot_end_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_info_ntf_descriptor_, &battle_info_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_begin_ntf_descriptor_, &battle_begin_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_end_ntf_descriptor_, &battle_end_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_extra_operator_req_descriptor_, &battle_extra_operator_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_extra_operator_ack_descriptor_, &battle_extra_operator_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_extra_operator_ntf_descriptor_, &battle_extra_operator_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_shot_ready_ntf_descriptor_, &battle_shot_ready_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_jump_over_ntf_descriptor_, &battle_jump_over_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_begin_req_descriptor_, &battle_begin_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_begin_ack_descriptor_, &battle_begin_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_end_req_descriptor_, &battle_end_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_end_ack_descriptor_, &battle_end_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_replay_req_descriptor_, &battle_replay_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    battle_replay_ack_descriptor_, &battle_replay_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_office_battle_req_descriptor_, &test_office_battle_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    test_office_battle_ack_descriptor_, &test_office_battle_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hero_formation_descriptor_, &hero_formation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_formation_get_ntf_descriptor_, &role_battle_formation_get_ntf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_formation_save_req_descriptor_, &role_battle_formation_save_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_formation_save_ack_descriptor_, &role_battle_formation_save_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_formation_fight_power_req_descriptor_, &role_battle_formation_fight_power_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_formation_fight_power_ack_descriptor_, &role_battle_formation_fight_power_ack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_hero_fight_power_req_descriptor_, &role_battle_hero_fight_power_req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_battle_hero_fight_power_ack_descriptor_, &role_battle_hero_fight_power_ack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cs_5fbattle_2eproto() {
  delete battle_1v1_req::default_instance_;
  delete battle_1v1_req_reflection_;
  delete battle_1v1_ack::default_instance_;
  delete battle_1v1_ack_reflection_;
  delete battle_ready_req::default_instance_;
  delete battle_ready_req_reflection_;
  delete battle_ready_ack::default_instance_;
  delete battle_ready_ack_reflection_;
  delete battle_ready_ntf::default_instance_;
  delete battle_ready_ntf_reflection_;
  delete battle_change_hero_req::default_instance_;
  delete battle_change_hero_req_reflection_;
  delete battle_change_hero_ack::default_instance_;
  delete battle_change_hero_ack_reflection_;
  delete battle_change_hero_ntf::default_instance_;
  delete battle_change_hero_ntf_reflection_;
  delete battle_shot_operate_req::default_instance_;
  delete battle_shot_operate_req_reflection_;
  delete battle_shot_operate_ack::default_instance_;
  delete battle_shot_operate_ack_reflection_;
  delete battle_turn_begin_ntf::default_instance_;
  delete battle_turn_begin_ntf_reflection_;
  delete battle_turn_end_ntf::default_instance_;
  delete battle_turn_end_ntf_reflection_;
  delete battle_round_begin_ntf::default_instance_;
  delete battle_round_begin_ntf_reflection_;
  delete battle_round_end_ntf::default_instance_;
  delete battle_round_end_ntf_reflection_;
  delete battle_shot_begin_ntf::default_instance_;
  delete battle_shot_begin_ntf_reflection_;
  delete battle_shot_end_ntf::default_instance_;
  delete battle_shot_end_ntf_reflection_;
  delete battle_info_ntf::default_instance_;
  delete battle_info_ntf_reflection_;
  delete battle_begin_ntf::default_instance_;
  delete battle_begin_ntf_reflection_;
  delete battle_end_ntf::default_instance_;
  delete battle_end_ntf_reflection_;
  delete battle_extra_operator_req::default_instance_;
  delete battle_extra_operator_req_reflection_;
  delete battle_extra_operator_ack::default_instance_;
  delete battle_extra_operator_ack_reflection_;
  delete battle_extra_operator_ntf::default_instance_;
  delete battle_extra_operator_ntf_reflection_;
  delete battle_shot_ready_ntf::default_instance_;
  delete battle_shot_ready_ntf_reflection_;
  delete battle_jump_over_ntf::default_instance_;
  delete battle_jump_over_ntf_reflection_;
  delete battle_begin_req::default_instance_;
  delete battle_begin_req_reflection_;
  delete battle_begin_ack::default_instance_;
  delete battle_begin_ack_reflection_;
  delete battle_end_req::default_instance_;
  delete battle_end_req_reflection_;
  delete battle_end_ack::default_instance_;
  delete battle_end_ack_reflection_;
  delete battle_replay_req::default_instance_;
  delete battle_replay_req_reflection_;
  delete battle_replay_ack::default_instance_;
  delete battle_replay_ack_reflection_;
  delete test_office_battle_req::default_instance_;
  delete test_office_battle_req_reflection_;
  delete test_office_battle_ack::default_instance_;
  delete test_office_battle_ack_reflection_;
  delete hero_formation::default_instance_;
  delete hero_formation_reflection_;
  delete role_battle_formation_get_ntf::default_instance_;
  delete role_battle_formation_get_ntf_reflection_;
  delete role_battle_formation_save_req::default_instance_;
  delete role_battle_formation_save_req_reflection_;
  delete role_battle_formation_save_ack::default_instance_;
  delete role_battle_formation_save_ack_reflection_;
  delete role_battle_formation_fight_power_req::default_instance_;
  delete role_battle_formation_fight_power_req_reflection_;
  delete role_battle_formation_fight_power_ack::default_instance_;
  delete role_battle_formation_fight_power_ack_reflection_;
  delete role_battle_hero_fight_power_req::default_instance_;
  delete role_battle_hero_fight_power_req_reflection_;
  delete role_battle_hero_fight_power_ack::default_instance_;
  delete role_battle_hero_fight_power_ack_reflection_;
}

void protobuf_AddDesc_cs_5fbattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SProtoSpace::protobuf_AddDesc_cs_5fprotoid_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cm_5fbattletype_2eproto();
  ::SProtoSpace::protobuf_AddDesc_cs_5ferrorcode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cs_battle.proto\022\013SProtoSpace\032\020cs_proto"
    "id.proto\032\023cm_battletype.proto\032\022cs_errorc"
    "ode.proto\"|\n\016battle_1v1_req\022;\n\007protoid\030\001"
    " \001(\0162\027.SProtoSpace.ECSProtoID:\021battle_1v"
    "1_req_id\022-\n\013battle_type\030\002 \001(\0162\030.SProtoSp"
    "ace.EBattleType\"Z\n\016battle_1v1_ack\022;\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\021bat"
    "tle_1v1_ack_id\022\013\n\003ret\030\002 \001(\005\"f\n\020battle_re"
    "ady_req\022=\n\007protoid\030\001 \001(\0162\027.SProtoSpace.E"
    "CSProtoID:\023battle_ready_req_id\022\023\n\013battle"
    "_uuid\030\002 \001(\004\"s\n\020battle_ready_ack\022=\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023battl"
    "e_ready_ack_id\022\023\n\013battle_uuid\030\002 \001(\004\022\013\n\003r"
    "et\030\003 \001(\005\"w\n\020battle_ready_ntf\022=\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023battle_r"
    "eady_ntf_id\022\023\n\013battle_uuid\030\002 \001(\004\022\017\n\007role"
    "_id\030\003 \001(\004\"\245\001\n\026battle_change_hero_req\022C\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031"
    "battle_change_hero_req_id\022\023\n\013battle_uuid"
    "\030\002 \001(\004\022\023\n\013battle_type\030\003 \001(\005\022\013\n\003pos\030\004 \001(\005"
    "\022\017\n\007hero_id\030\005 \001(\004\"\245\001\n\026battle_change_hero"
    "_ack\022C\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\031battle_change_hero_ack_id\022\023\n\013bat"
    "tle_uuid\030\002 \001(\004\022\023\n\013battle_type\030\003 \001(\005\022\017\n\007h"
    "ero_id\030\004 \001(\004\022\013\n\003ret\030\005 \001(\005\"\343\001\n\026battle_cha"
    "nge_hero_ntf\022C\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\031battle_change_hero_ntf_i"
    "d\022\023\n\013battle_uuid\030\002 \001(\004\022\023\n\013battle_type\030\003 "
    "\001(\005\022\017\n\007role_id\030\004 \001(\004\022\023\n\013old_hero_id\030\005 \001("
    "\004\0224\n\rnew_hero_info\030\006 \001(\0132\035.SProtoSpace.b"
    "attle_hero_info\"\270\001\n\027battle_shot_operate_"
    "req\022D\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\032battle_shot_operate_req_id\022\023\n\013bat"
    "tle_uuid\030\002 \001(\004\022\023\n\013battle_type\030\003 \001(\005\022-\n\010o"
    "p_param\030\004 \001(\0132\033.SProtoSpace.round_op_par"
    "am\"\305\001\n\027battle_shot_operate_ack\022D\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\032battle"
    "_shot_operate_ack_id\022\023\n\013battle_uuid\030\002 \001("
    "\004\022\023\n\013battle_type\030\003 \001(\005\022-\n\010op_param\030\004 \001(\013"
    "2\033.SProtoSpace.round_op_param\022\013\n\003ret\030\005 \001"
    "(\005\"\251\001\n\025battle_turn_begin_ntf\022B\n\007protoid\030"
    "\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030battle_t"
    "urn_begin_ntf_id\022\023\n\013battle_uuid\030\002 \001(\004\022\022\n"
    "\nturn_index\030\003 \001(\r\022#\n\004seqs\030\004 \001(\0132\025.SProto"
    "Space.opt_seqs\"\272\001\n\023battle_turn_end_ntf\022@"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\026battle_turn_end_ntf_id\022\023\n\013battle_uuid\030"
    "\002 \001(\004\022\022\n\nturn_index\030\003 \001(\r\022#\n\004seqs\030\004 \001(\0132"
    "\025.SProtoSpace.opt_seqs\022\023\n\013winner_camp\030\005 "
    "\001(\005\"\254\001\n\026battle_round_begin_ntf\022C\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\031battle"
    "_round_begin_ntf_id\022\023\n\013battle_uuid\030\002 \001(\004"
    "\022\023\n\013round_index\030\003 \001(\r\022#\n\004seqs\030\004 \001(\0132\025.SP"
    "rotoSpace.opt_seqs\"\275\001\n\024battle_round_end_"
    "ntf\022A\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSPr"
    "otoID:\027battle_round_end_ntf_id\022\023\n\013battle"
    "_uuid\030\002 \001(\004\022\023\n\013round_index\030\003 \001(\r\022#\n\004seqs"
    "\030\004 \001(\0132\025.SProtoSpace.opt_seqs\022\023\n\013winner_"
    "camp\030\005 \001(\005\"\271\001\n\025battle_shot_begin_ntf\022B\n\007"
    "protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\030"
    "battle_shot_begin_ntf_id\022\023\n\013battle_uuid\030"
    "\002 \001(\004\022\016\n\006obj_id\030\003 \001(\004\022#\n\004seqs\030\004 \001(\0132\025.SP"
    "rotoSpace.opt_seqs\022\022\n\nshot_index\030\005 \001(\005\"\340"
    "\001\n\023battle_shot_end_ntf\022@\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\026battle_shot_en"
    "d_ntf_id\022\023\n\013battle_uuid\030\002 \001(\004\022\022\n\nshot_in"
    "dex\030\003 \001(\005\022#\n\004seqs\030\005 \003(\0132\025.SProtoSpace.op"
    "t_seqs\022$\n\007sp_info\030\006 \001(\0132\023.SProtoSpace.se"
    "q_sp\022\023\n\013winner_camp\030\007 \001(\005\"\223\001\n\017battle_inf"
    "o_ntf\022<\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\022battle_info_ntf_id\022\023\n\013battle_uu"
    "id\030\002 \001(\004\022-\n\004data\030\003 \001(\0132\037.SProtoSpace.cli"
    "ent_battle_data\"{\n\020battle_begin_ntf\022=\n\007p"
    "rotoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023b"
    "attle_begin_ntf_id\022\023\n\013battle_uuid\030\002 \001(\004\022"
    "\023\n\013battle_type\030\003 \001(\r\"\334\001\n\016battle_end_ntf\022"
    ";\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoI"
    "D:\021battle_end_ntf_id\022\023\n\013battle_uuid\030\002 \001("
    "\004\022\023\n\013battle_type\030\003 \001(\r\022\023\n\013winner_camp\030\004 "
    "\001(\005\022%\n\004data\030\005 \003(\0132\027.SProtoSpace.round_da"
    "ta\022\022\n\nturn_index\030\006 \001(\005\022\023\n\013round_index\030\007 "
    "\001(\005\"\234\001\n\031battle_extra_operator_req\022F\n\007pro"
    "toid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\034bat"
    "tle_extra_operator_req_id\022\023\n\013battle_uuid"
    "\030\002 \001(\004\022\020\n\010obj_uuid\030\003 \001(\004\022\020\n\010skill_id\030\004 \001"
    "(\005\"\251\001\n\031battle_extra_operator_ack\022F\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\034batt"
    "le_extra_operator_ack_id\022\013\n\003ret\030\002 \001(\005\022\023\n"
    "\013battle_uuid\030\003 \001(\004\022\020\n\010obj_uuid\030\004 \001(\004\022\020\n\010"
    "skill_id\030\005 \001(\005\"\234\001\n\031battle_extra_operator"
    "_ntf\022F\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSP"
    "rotoID:\034battle_extra_operator_ntf_id\022\023\n\013"
    "battle_uuid\030\002 \001(\004\022\020\n\010obj_uuid\030\003 \001(\004\022\020\n\010s"
    "kill_id\030\004 \001(\005\"p\n\025battle_shot_ready_ntf\022B"
    "\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID"
    ":\030battle_shot_ready_ntf_id\022\023\n\013battle_uui"
    "d\030\002 \001(\004\"n\n\024battle_jump_over_ntf\022A\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\027battl"
    "e_jump_over_ntf_id\022\023\n\013battle_uuid\030\002 \001(\004\""
    "\317\001\n\020battle_begin_req\022=\n\007protoid\030\001 \001(\0162\027."
    "SProtoSpace.ECSProtoID:\023battle_begin_req"
    "_id\022\014\n\004type\030\002 \001(\005\022\021\n\tbattle_id\030\003 \001(\005\022\021\n\t"
    "module_id\030\004 \001(\005\022\017\n\007role_id\030\005 \001(\004\0227\n\016form"
    "ation_type\030\006 \001(\0162\037.SProtoSpace.EHeroForm"
    "ationType\"\237\002\n\020battle_begin_ack\022=\n\007protoi"
    "d\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:\023battle"
    "_begin_ack_id\022\016\n\003ret\030\002 \001(\005:\0010\022\014\n\004type\030\003 "
    "\001(\005\022\021\n\tbattle_id\030\004 \001(\005\022\021\n\tmodule_id\030\005 \001("
    "\005\022\014\n\004seed\030\006 \001(\r\022\017\n\007role_id\030\007 \001(\004\0227\n\016form"
    "ation_type\030\010 \001(\0162\037.SProtoSpace.EHeroForm"
    "ationType\0220\n\trole_info\030\t \001(\0132\035.SProtoSpa"
    "ce.battle_role_info\"}\n\016battle_end_req\022;\n"
    "\007protoid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:"
    "\021battle_end_req_id\022.\n\010end_data\030\002 \001(\0132\034.S"
    "ProtoSpace.battle_end_data\"\247\002\n\016battle_en"
    "d_ack\022;\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:\021battle_end_ack_id\022\016\n\003ret\030\002 \001(\005:"
    "\0010\022\014\n\004type\030\003 \001(\005\022\021\n\tbattle_id\030\004 \001(\005\022\016\n\006i"
    "s_win\030\005 \001(\010\022\020\n\010is_cheat\030\006 \001(\010\022\021\n\tmodule_"
    "id\030\007 \001(\005\0227\n\016formation_type\030\010 \001(\0162\037.SProt"
    "oSpace.EHeroFormationType\022*\n\006reward\030\t \001("
    "\0132\032.SProtoSpace.battle_reward\022\r\n\005stars\030\n"
    " \001(\005\"f\n\021battle_replay_req\022>\n\007protoid\030\001 \001"
    "(\0162\027.SProtoSpace.ECSProtoID:\024battle_repl"
    "ay_req_id\022\021\n\treplay_id\030\002 \001(\004\"\245\001\n\021battle_"
    "replay_ack\022>\n\007protoid\030\001 \001(\0162\027.SProtoSpac"
    "e.ECSProtoID:\024battle_replay_ack_id\022\016\n\003re"
    "t\030\002 \001(\005:\0010\022\021\n\treplay_id\030\003 \001(\004\022-\n\004data\030\004 "
    "\001(\0132\037.SProtoSpace.battle_replay_info\"l\n\026"
    "test_office_battle_req\022C\n\007protoid\030\001 \001(\0162"
    "\027.SProtoSpace.ECSProtoID:\031test_office_ba"
    "ttle_req_id\022\r\n\005index\030\002 \001(\004\"l\n\026test_offic"
    "e_battle_ack\022C\n\007protoid\030\001 \001(\0162\027.SProtoSp"
    "ace.ECSProtoID:\031test_office_battle_ack_i"
    "d\022\r\n\005index\030\002 \001(\004\"r\n\016hero_formation\0227\n\016fo"
    "rmation_type\030\001 \001(\0162\037.SProtoSpace.EHeroFo"
    "rmationType\022\020\n\010hero_ids\030\002 \003(\004\022\025\n\rrole_po"
    "sition\030\003 \001(\005\"\234\001\n\035role_battle_formation_g"
    "et_ntf\022J\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID: role_battle_formation_get_ntf_"
    "id\022/\n\nformations\030\002 \003(\0132\033.SProtoSpace.her"
    "o_formation\"\316\001\n\036role_battle_formation_sa"
    "ve_req\022K\n\007protoid\030\001 \001(\0162\027.SProtoSpace.EC"
    "SProtoID:!role_battle_formation_save_req"
    "_id\022.\n\tformation\030\002 \001(\0132\033.SProtoSpace.her"
    "o_formation\022/\n\nformations\030\003 \003(\0132\033.SProto"
    "Space.hero_formation\"\366\001\n\036role_battle_for"
    "mation_save_ack\022K\n\007protoid\030\001 \001(\0162\027.SProt"
    "oSpace.ECSProtoID:!role_battle_formation"
    "_save_ack_id\022\020\n\010rec_code\030\002 \001(\r\022&\n\036format"
    "ion_fight_power_buff_add\030\003 \001(\003\022%\n\035format"
    "ion_fight_power_buff_no\030\004 \001(\003\022&\n\003ret\030\005 \001"
    "(\0162\031.SProtoSpace.MsgErrorType\"\264\001\n%role_b"
    "attle_formation_fight_power_req\022R\n\007proto"
    "id\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:(role_"
    "battle_formation_fight_power_req_id\0227\n\016f"
    "ormation_type\030\002 \001(\0162\037.SProtoSpace.EHeroF"
    "ormationType\"\334\001\n%role_battle_formation_f"
    "ight_power_ack\022R\n\007protoid\030\001 \001(\0162\027.SProto"
    "Space.ECSProtoID:(role_battle_formation_"
    "fight_power_ack_id\022&\n\036formation_fight_po"
    "wer_buff_add\030\002 \001(\003\022%\n\035formation_fight_po"
    "wer_buff_no\030\003 \001(\003\022\020\n\010rec_code\030\004 \001(\021\"\202\001\n "
    "role_battle_hero_fight_power_req\022M\n\007prot"
    "oid\030\001 \001(\0162\027.SProtoSpace.ECSProtoID:#role"
    "_battle_hero_fight_power_req_id\022\017\n\007hero_"
    "id\030\002 \001(\004\"\235\001\n role_battle_hero_fight_powe"
    "r_ack\022M\n\007protoid\030\001 \001(\0162\027.SProtoSpace.ECS"
    "ProtoID:#role_battle_hero_fight_power_ac"
    "k_id\022\030\n\020hero_fight_power\030\002 \001(\003\022\020\n\010rec_co"
    "de\030\003 \001(\021", 6808);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cs_battle.proto", &protobuf_RegisterTypes);
  battle_1v1_req::default_instance_ = new battle_1v1_req();
  battle_1v1_ack::default_instance_ = new battle_1v1_ack();
  battle_ready_req::default_instance_ = new battle_ready_req();
  battle_ready_ack::default_instance_ = new battle_ready_ack();
  battle_ready_ntf::default_instance_ = new battle_ready_ntf();
  battle_change_hero_req::default_instance_ = new battle_change_hero_req();
  battle_change_hero_ack::default_instance_ = new battle_change_hero_ack();
  battle_change_hero_ntf::default_instance_ = new battle_change_hero_ntf();
  battle_shot_operate_req::default_instance_ = new battle_shot_operate_req();
  battle_shot_operate_ack::default_instance_ = new battle_shot_operate_ack();
  battle_turn_begin_ntf::default_instance_ = new battle_turn_begin_ntf();
  battle_turn_end_ntf::default_instance_ = new battle_turn_end_ntf();
  battle_round_begin_ntf::default_instance_ = new battle_round_begin_ntf();
  battle_round_end_ntf::default_instance_ = new battle_round_end_ntf();
  battle_shot_begin_ntf::default_instance_ = new battle_shot_begin_ntf();
  battle_shot_end_ntf::default_instance_ = new battle_shot_end_ntf();
  battle_info_ntf::default_instance_ = new battle_info_ntf();
  battle_begin_ntf::default_instance_ = new battle_begin_ntf();
  battle_end_ntf::default_instance_ = new battle_end_ntf();
  battle_extra_operator_req::default_instance_ = new battle_extra_operator_req();
  battle_extra_operator_ack::default_instance_ = new battle_extra_operator_ack();
  battle_extra_operator_ntf::default_instance_ = new battle_extra_operator_ntf();
  battle_shot_ready_ntf::default_instance_ = new battle_shot_ready_ntf();
  battle_jump_over_ntf::default_instance_ = new battle_jump_over_ntf();
  battle_begin_req::default_instance_ = new battle_begin_req();
  battle_begin_ack::default_instance_ = new battle_begin_ack();
  battle_end_req::default_instance_ = new battle_end_req();
  battle_end_ack::default_instance_ = new battle_end_ack();
  battle_replay_req::default_instance_ = new battle_replay_req();
  battle_replay_ack::default_instance_ = new battle_replay_ack();
  test_office_battle_req::default_instance_ = new test_office_battle_req();
  test_office_battle_ack::default_instance_ = new test_office_battle_ack();
  hero_formation::default_instance_ = new hero_formation();
  role_battle_formation_get_ntf::default_instance_ = new role_battle_formation_get_ntf();
  role_battle_formation_save_req::default_instance_ = new role_battle_formation_save_req();
  role_battle_formation_save_ack::default_instance_ = new role_battle_formation_save_ack();
  role_battle_formation_fight_power_req::default_instance_ = new role_battle_formation_fight_power_req();
  role_battle_formation_fight_power_ack::default_instance_ = new role_battle_formation_fight_power_ack();
  role_battle_hero_fight_power_req::default_instance_ = new role_battle_hero_fight_power_req();
  role_battle_hero_fight_power_ack::default_instance_ = new role_battle_hero_fight_power_ack();
  battle_1v1_req::default_instance_->InitAsDefaultInstance();
  battle_1v1_ack::default_instance_->InitAsDefaultInstance();
  battle_ready_req::default_instance_->InitAsDefaultInstance();
  battle_ready_ack::default_instance_->InitAsDefaultInstance();
  battle_ready_ntf::default_instance_->InitAsDefaultInstance();
  battle_change_hero_req::default_instance_->InitAsDefaultInstance();
  battle_change_hero_ack::default_instance_->InitAsDefaultInstance();
  battle_change_hero_ntf::default_instance_->InitAsDefaultInstance();
  battle_shot_operate_req::default_instance_->InitAsDefaultInstance();
  battle_shot_operate_ack::default_instance_->InitAsDefaultInstance();
  battle_turn_begin_ntf::default_instance_->InitAsDefaultInstance();
  battle_turn_end_ntf::default_instance_->InitAsDefaultInstance();
  battle_round_begin_ntf::default_instance_->InitAsDefaultInstance();
  battle_round_end_ntf::default_instance_->InitAsDefaultInstance();
  battle_shot_begin_ntf::default_instance_->InitAsDefaultInstance();
  battle_shot_end_ntf::default_instance_->InitAsDefaultInstance();
  battle_info_ntf::default_instance_->InitAsDefaultInstance();
  battle_begin_ntf::default_instance_->InitAsDefaultInstance();
  battle_end_ntf::default_instance_->InitAsDefaultInstance();
  battle_extra_operator_req::default_instance_->InitAsDefaultInstance();
  battle_extra_operator_ack::default_instance_->InitAsDefaultInstance();
  battle_extra_operator_ntf::default_instance_->InitAsDefaultInstance();
  battle_shot_ready_ntf::default_instance_->InitAsDefaultInstance();
  battle_jump_over_ntf::default_instance_->InitAsDefaultInstance();
  battle_begin_req::default_instance_->InitAsDefaultInstance();
  battle_begin_ack::default_instance_->InitAsDefaultInstance();
  battle_end_req::default_instance_->InitAsDefaultInstance();
  battle_end_ack::default_instance_->InitAsDefaultInstance();
  battle_replay_req::default_instance_->InitAsDefaultInstance();
  battle_replay_ack::default_instance_->InitAsDefaultInstance();
  test_office_battle_req::default_instance_->InitAsDefaultInstance();
  test_office_battle_ack::default_instance_->InitAsDefaultInstance();
  hero_formation::default_instance_->InitAsDefaultInstance();
  role_battle_formation_get_ntf::default_instance_->InitAsDefaultInstance();
  role_battle_formation_save_req::default_instance_->InitAsDefaultInstance();
  role_battle_formation_save_ack::default_instance_->InitAsDefaultInstance();
  role_battle_formation_fight_power_req::default_instance_->InitAsDefaultInstance();
  role_battle_formation_fight_power_ack::default_instance_->InitAsDefaultInstance();
  role_battle_hero_fight_power_req::default_instance_->InitAsDefaultInstance();
  role_battle_hero_fight_power_ack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cs_5fbattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cs_5fbattle_2eproto {
  StaticDescriptorInitializer_cs_5fbattle_2eproto() {
    protobuf_AddDesc_cs_5fbattle_2eproto();
  }
} static_descriptor_initializer_cs_5fbattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int battle_1v1_req::kProtoidFieldNumber;
const int battle_1v1_req::kBattleTypeFieldNumber;
#endif  // !_MSC_VER

battle_1v1_req::battle_1v1_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_1v1_req::InitAsDefaultInstance() {
}

battle_1v1_req::battle_1v1_req(const battle_1v1_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_1v1_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5713;
  battle_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_1v1_req::~battle_1v1_req() {
  SharedDtor();
}

void battle_1v1_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_1v1_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_1v1_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_1v1_req_descriptor_;
}

const battle_1v1_req& battle_1v1_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_1v1_req* battle_1v1_req::default_instance_ = NULL;

battle_1v1_req* battle_1v1_req::New() const {
  return new battle_1v1_req;
}

void battle_1v1_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5713;
    battle_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_1v1_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_type;
        break;
      }

      // optional .SProtoSpace.EBattleType battle_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EBattleType_IsValid(value)) {
            set_battle_type(static_cast< ::SProtoSpace::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_1v1_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.EBattleType battle_type = 2;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->battle_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_1v1_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.EBattleType battle_type = 2;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->battle_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_1v1_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.EBattleType battle_type = 2;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_1v1_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_1v1_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_1v1_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_1v1_req::MergeFrom(const battle_1v1_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_1v1_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_1v1_req::CopyFrom(const battle_1v1_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_1v1_req::IsInitialized() const {

  return true;
}

void battle_1v1_req::Swap(battle_1v1_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_1v1_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_1v1_req_descriptor_;
  metadata.reflection = battle_1v1_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_1v1_ack::kProtoidFieldNumber;
const int battle_1v1_ack::kRetFieldNumber;
#endif  // !_MSC_VER

battle_1v1_ack::battle_1v1_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_1v1_ack::InitAsDefaultInstance() {
}

battle_1v1_ack::battle_1v1_ack(const battle_1v1_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_1v1_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5714;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_1v1_ack::~battle_1v1_ack() {
  SharedDtor();
}

void battle_1v1_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_1v1_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_1v1_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_1v1_ack_descriptor_;
}

const battle_1v1_ack& battle_1v1_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_1v1_ack* battle_1v1_ack::default_instance_ = NULL;

battle_1v1_ack* battle_1v1_ack::New() const {
  return new battle_1v1_ack;
}

void battle_1v1_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5714;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_1v1_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_1v1_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_1v1_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_1v1_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_1v1_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_1v1_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_1v1_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_1v1_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_1v1_ack::MergeFrom(const battle_1v1_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_1v1_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_1v1_ack::CopyFrom(const battle_1v1_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_1v1_ack::IsInitialized() const {

  return true;
}

void battle_1v1_ack::Swap(battle_1v1_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_1v1_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_1v1_ack_descriptor_;
  metadata.reflection = battle_1v1_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_ready_req::kProtoidFieldNumber;
const int battle_ready_req::kBattleUuidFieldNumber;
#endif  // !_MSC_VER

battle_ready_req::battle_ready_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_ready_req::InitAsDefaultInstance() {
}

battle_ready_req::battle_ready_req(const battle_ready_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_ready_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5700;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_ready_req::~battle_ready_req() {
  SharedDtor();
}

void battle_ready_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_ready_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_ready_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_ready_req_descriptor_;
}

const battle_ready_req& battle_ready_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_ready_req* battle_ready_req::default_instance_ = NULL;

battle_ready_req* battle_ready_req::New() const {
  return new battle_ready_req;
}

void battle_ready_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5700;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_ready_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_ready_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_ready_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_ready_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_ready_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_ready_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_ready_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_ready_req::MergeFrom(const battle_ready_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_ready_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_ready_req::CopyFrom(const battle_ready_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_ready_req::IsInitialized() const {

  return true;
}

void battle_ready_req::Swap(battle_ready_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_ready_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_ready_req_descriptor_;
  metadata.reflection = battle_ready_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_ready_ack::kProtoidFieldNumber;
const int battle_ready_ack::kBattleUuidFieldNumber;
const int battle_ready_ack::kRetFieldNumber;
#endif  // !_MSC_VER

battle_ready_ack::battle_ready_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_ready_ack::InitAsDefaultInstance() {
}

battle_ready_ack::battle_ready_ack(const battle_ready_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_ready_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5701;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_ready_ack::~battle_ready_ack() {
  SharedDtor();
}

void battle_ready_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_ready_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_ready_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_ready_ack_descriptor_;
}

const battle_ready_ack& battle_ready_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_ready_ack* battle_ready_ack::default_instance_ = NULL;

battle_ready_ack* battle_ready_ack::New() const {
  return new battle_ready_ack;
}

void battle_ready_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5701;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_ready_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_ready_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_ready_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_ready_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_ready_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_ready_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_ready_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_ready_ack::MergeFrom(const battle_ready_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_ready_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_ready_ack::CopyFrom(const battle_ready_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_ready_ack::IsInitialized() const {

  return true;
}

void battle_ready_ack::Swap(battle_ready_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_ready_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_ready_ack_descriptor_;
  metadata.reflection = battle_ready_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_ready_ntf::kProtoidFieldNumber;
const int battle_ready_ntf::kBattleUuidFieldNumber;
const int battle_ready_ntf::kRoleIdFieldNumber;
#endif  // !_MSC_VER

battle_ready_ntf::battle_ready_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_ready_ntf::InitAsDefaultInstance() {
}

battle_ready_ntf::battle_ready_ntf(const battle_ready_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_ready_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5702;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_ready_ntf::~battle_ready_ntf() {
  SharedDtor();
}

void battle_ready_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_ready_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_ready_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_ready_ntf_descriptor_;
}

const battle_ready_ntf& battle_ready_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_ready_ntf* battle_ready_ntf::default_instance_ = NULL;

battle_ready_ntf* battle_ready_ntf::New() const {
  return new battle_ready_ntf;
}

void battle_ready_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5702;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_ready_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_ready_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_ready_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint64 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_ready_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_ready_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint64 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_ready_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_ready_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_ready_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_ready_ntf::MergeFrom(const battle_ready_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_ready_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_ready_ntf::CopyFrom(const battle_ready_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_ready_ntf::IsInitialized() const {

  return true;
}

void battle_ready_ntf::Swap(battle_ready_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_ready_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_ready_ntf_descriptor_;
  metadata.reflection = battle_ready_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_change_hero_req::kProtoidFieldNumber;
const int battle_change_hero_req::kBattleUuidFieldNumber;
const int battle_change_hero_req::kBattleTypeFieldNumber;
const int battle_change_hero_req::kPosFieldNumber;
const int battle_change_hero_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

battle_change_hero_req::battle_change_hero_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_change_hero_req::InitAsDefaultInstance() {
}

battle_change_hero_req::battle_change_hero_req(const battle_change_hero_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_change_hero_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5703;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0;
  pos_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_change_hero_req::~battle_change_hero_req() {
  SharedDtor();
}

void battle_change_hero_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_change_hero_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_change_hero_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_change_hero_req_descriptor_;
}

const battle_change_hero_req& battle_change_hero_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_change_hero_req* battle_change_hero_req::default_instance_ = NULL;

battle_change_hero_req* battle_change_hero_req::New() const {
  return new battle_change_hero_req;
}

void battle_change_hero_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5703;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0;
    pos_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_change_hero_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional int32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_change_hero_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_type(), output);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  // optional uint64 hero_id = 5;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_change_hero_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_type(), target);
  }

  // optional int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  // optional uint64 hero_id = 5;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_change_hero_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_type());
    }

    // optional int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional uint64 hero_id = 5;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_change_hero_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_change_hero_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_change_hero_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_change_hero_req::MergeFrom(const battle_change_hero_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_change_hero_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_change_hero_req::CopyFrom(const battle_change_hero_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_change_hero_req::IsInitialized() const {

  return true;
}

void battle_change_hero_req::Swap(battle_change_hero_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(pos_, other->pos_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_change_hero_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_change_hero_req_descriptor_;
  metadata.reflection = battle_change_hero_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_change_hero_ack::kProtoidFieldNumber;
const int battle_change_hero_ack::kBattleUuidFieldNumber;
const int battle_change_hero_ack::kBattleTypeFieldNumber;
const int battle_change_hero_ack::kHeroIdFieldNumber;
const int battle_change_hero_ack::kRetFieldNumber;
#endif  // !_MSC_VER

battle_change_hero_ack::battle_change_hero_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_change_hero_ack::InitAsDefaultInstance() {
}

battle_change_hero_ack::battle_change_hero_ack(const battle_change_hero_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_change_hero_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5704;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_change_hero_ack::~battle_change_hero_ack() {
  SharedDtor();
}

void battle_change_hero_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_change_hero_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_change_hero_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_change_hero_ack_descriptor_;
}

const battle_change_hero_ack& battle_change_hero_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_change_hero_ack* battle_change_hero_ack::default_instance_ = NULL;

battle_change_hero_ack* battle_change_hero_ack::New() const {
  return new battle_change_hero_ack;
}

void battle_change_hero_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5704;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0;
    hero_id_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_change_hero_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional int32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional int32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_change_hero_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_type(), output);
  }

  // optional uint64 hero_id = 4;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->hero_id(), output);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_change_hero_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_type(), target);
  }

  // optional uint64 hero_id = 4;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->hero_id(), target);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_change_hero_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_type());
    }

    // optional uint64 hero_id = 4;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

    // optional int32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_change_hero_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_change_hero_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_change_hero_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_change_hero_ack::MergeFrom(const battle_change_hero_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_change_hero_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_change_hero_ack::CopyFrom(const battle_change_hero_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_change_hero_ack::IsInitialized() const {

  return true;
}

void battle_change_hero_ack::Swap(battle_change_hero_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_change_hero_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_change_hero_ack_descriptor_;
  metadata.reflection = battle_change_hero_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_change_hero_ntf::kProtoidFieldNumber;
const int battle_change_hero_ntf::kBattleUuidFieldNumber;
const int battle_change_hero_ntf::kBattleTypeFieldNumber;
const int battle_change_hero_ntf::kRoleIdFieldNumber;
const int battle_change_hero_ntf::kOldHeroIdFieldNumber;
const int battle_change_hero_ntf::kNewHeroInfoFieldNumber;
#endif  // !_MSC_VER

battle_change_hero_ntf::battle_change_hero_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_change_hero_ntf::InitAsDefaultInstance() {
  new_hero_info_ = const_cast< ::SProtoSpace::battle_hero_info*>(&::SProtoSpace::battle_hero_info::default_instance());
}

battle_change_hero_ntf::battle_change_hero_ntf(const battle_change_hero_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_change_hero_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5705;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  old_hero_id_ = GOOGLE_ULONGLONG(0);
  new_hero_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_change_hero_ntf::~battle_change_hero_ntf() {
  SharedDtor();
}

void battle_change_hero_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete new_hero_info_;
  }
}

void battle_change_hero_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_change_hero_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_change_hero_ntf_descriptor_;
}

const battle_change_hero_ntf& battle_change_hero_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_change_hero_ntf* battle_change_hero_ntf::default_instance_ = NULL;

battle_change_hero_ntf* battle_change_hero_ntf::New() const {
  return new battle_change_hero_ntf;
}

void battle_change_hero_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5705;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    old_hero_id_ = GOOGLE_ULONGLONG(0);
    if (has_new_hero_info()) {
      if (new_hero_info_ != NULL) new_hero_info_->::SProtoSpace::battle_hero_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_change_hero_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional int32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_old_hero_id;
        break;
      }

      // optional uint64 old_hero_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_old_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &old_hero_id_)));
          set_has_old_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_new_hero_info;
        break;
      }

      // optional .SProtoSpace.battle_hero_info new_hero_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_hero_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_hero_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_change_hero_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_type(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional uint64 old_hero_id = 5;
  if (has_old_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->old_hero_id(), output);
  }

  // optional .SProtoSpace.battle_hero_info new_hero_info = 6;
  if (has_new_hero_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->new_hero_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_change_hero_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_type(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional uint64 old_hero_id = 5;
  if (has_old_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->old_hero_id(), target);
  }

  // optional .SProtoSpace.battle_hero_info new_hero_info = 6;
  if (has_new_hero_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->new_hero_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_change_hero_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_change_hero_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_type());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 old_hero_id = 5;
    if (has_old_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->old_hero_id());
    }

    // optional .SProtoSpace.battle_hero_info new_hero_info = 6;
    if (has_new_hero_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_hero_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_change_hero_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_change_hero_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_change_hero_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_change_hero_ntf::MergeFrom(const battle_change_hero_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_old_hero_id()) {
      set_old_hero_id(from.old_hero_id());
    }
    if (from.has_new_hero_info()) {
      mutable_new_hero_info()->::SProtoSpace::battle_hero_info::MergeFrom(from.new_hero_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_change_hero_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_change_hero_ntf::CopyFrom(const battle_change_hero_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_change_hero_ntf::IsInitialized() const {

  if (has_new_hero_info()) {
    if (!this->new_hero_info().IsInitialized()) return false;
  }
  return true;
}

void battle_change_hero_ntf::Swap(battle_change_hero_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(role_id_, other->role_id_);
    std::swap(old_hero_id_, other->old_hero_id_);
    std::swap(new_hero_info_, other->new_hero_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_change_hero_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_change_hero_ntf_descriptor_;
  metadata.reflection = battle_change_hero_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_shot_operate_req::kProtoidFieldNumber;
const int battle_shot_operate_req::kBattleUuidFieldNumber;
const int battle_shot_operate_req::kBattleTypeFieldNumber;
const int battle_shot_operate_req::kOpParamFieldNumber;
#endif  // !_MSC_VER

battle_shot_operate_req::battle_shot_operate_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_shot_operate_req::InitAsDefaultInstance() {
  op_param_ = const_cast< ::SProtoSpace::round_op_param*>(&::SProtoSpace::round_op_param::default_instance());
}

battle_shot_operate_req::battle_shot_operate_req(const battle_shot_operate_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_shot_operate_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5706;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0;
  op_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_shot_operate_req::~battle_shot_operate_req() {
  SharedDtor();
}

void battle_shot_operate_req::SharedDtor() {
  if (this != default_instance_) {
    delete op_param_;
  }
}

void battle_shot_operate_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_shot_operate_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_shot_operate_req_descriptor_;
}

const battle_shot_operate_req& battle_shot_operate_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_shot_operate_req* battle_shot_operate_req::default_instance_ = NULL;

battle_shot_operate_req* battle_shot_operate_req::New() const {
  return new battle_shot_operate_req;
}

void battle_shot_operate_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5706;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0;
    if (has_op_param()) {
      if (op_param_ != NULL) op_param_->::SProtoSpace::round_op_param::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_shot_operate_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional int32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_op_param;
        break;
      }

      // optional .SProtoSpace.round_op_param op_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_shot_operate_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_type(), output);
  }

  // optional .SProtoSpace.round_op_param op_param = 4;
  if (has_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->op_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_shot_operate_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_type(), target);
  }

  // optional .SProtoSpace.round_op_param op_param = 4;
  if (has_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->op_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_shot_operate_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_type());
    }

    // optional .SProtoSpace.round_op_param op_param = 4;
    if (has_op_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_shot_operate_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_shot_operate_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_shot_operate_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_shot_operate_req::MergeFrom(const battle_shot_operate_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_op_param()) {
      mutable_op_param()->::SProtoSpace::round_op_param::MergeFrom(from.op_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_shot_operate_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_shot_operate_req::CopyFrom(const battle_shot_operate_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_shot_operate_req::IsInitialized() const {

  return true;
}

void battle_shot_operate_req::Swap(battle_shot_operate_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(op_param_, other->op_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_shot_operate_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_shot_operate_req_descriptor_;
  metadata.reflection = battle_shot_operate_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_shot_operate_ack::kProtoidFieldNumber;
const int battle_shot_operate_ack::kBattleUuidFieldNumber;
const int battle_shot_operate_ack::kBattleTypeFieldNumber;
const int battle_shot_operate_ack::kOpParamFieldNumber;
const int battle_shot_operate_ack::kRetFieldNumber;
#endif  // !_MSC_VER

battle_shot_operate_ack::battle_shot_operate_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_shot_operate_ack::InitAsDefaultInstance() {
  op_param_ = const_cast< ::SProtoSpace::round_op_param*>(&::SProtoSpace::round_op_param::default_instance());
}

battle_shot_operate_ack::battle_shot_operate_ack(const battle_shot_operate_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_shot_operate_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5707;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0;
  op_param_ = NULL;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_shot_operate_ack::~battle_shot_operate_ack() {
  SharedDtor();
}

void battle_shot_operate_ack::SharedDtor() {
  if (this != default_instance_) {
    delete op_param_;
  }
}

void battle_shot_operate_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_shot_operate_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_shot_operate_ack_descriptor_;
}

const battle_shot_operate_ack& battle_shot_operate_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_shot_operate_ack* battle_shot_operate_ack::default_instance_ = NULL;

battle_shot_operate_ack* battle_shot_operate_ack::New() const {
  return new battle_shot_operate_ack;
}

void battle_shot_operate_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5707;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0;
    if (has_op_param()) {
      if (op_param_ != NULL) op_param_->::SProtoSpace::round_op_param::Clear();
    }
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_shot_operate_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional int32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_op_param;
        break;
      }

      // optional .SProtoSpace.round_op_param op_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional int32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_shot_operate_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_type(), output);
  }

  // optional .SProtoSpace.round_op_param op_param = 4;
  if (has_op_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->op_param(), output);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_shot_operate_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_type(), target);
  }

  // optional .SProtoSpace.round_op_param op_param = 4;
  if (has_op_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->op_param(), target);
  }

  // optional int32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_shot_operate_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_operate_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_type());
    }

    // optional .SProtoSpace.round_op_param op_param = 4;
    if (has_op_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->op_param());
    }

    // optional int32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_shot_operate_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_shot_operate_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_shot_operate_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_shot_operate_ack::MergeFrom(const battle_shot_operate_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_op_param()) {
      mutable_op_param()->::SProtoSpace::round_op_param::MergeFrom(from.op_param());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_shot_operate_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_shot_operate_ack::CopyFrom(const battle_shot_operate_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_shot_operate_ack::IsInitialized() const {

  return true;
}

void battle_shot_operate_ack::Swap(battle_shot_operate_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(op_param_, other->op_param_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_shot_operate_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_shot_operate_ack_descriptor_;
  metadata.reflection = battle_shot_operate_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_turn_begin_ntf::kProtoidFieldNumber;
const int battle_turn_begin_ntf::kBattleUuidFieldNumber;
const int battle_turn_begin_ntf::kTurnIndexFieldNumber;
const int battle_turn_begin_ntf::kSeqsFieldNumber;
#endif  // !_MSC_VER

battle_turn_begin_ntf::battle_turn_begin_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_turn_begin_ntf::InitAsDefaultInstance() {
  seqs_ = const_cast< ::SProtoSpace::opt_seqs*>(&::SProtoSpace::opt_seqs::default_instance());
}

battle_turn_begin_ntf::battle_turn_begin_ntf(const battle_turn_begin_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_turn_begin_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5717;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  turn_index_ = 0u;
  seqs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_turn_begin_ntf::~battle_turn_begin_ntf() {
  SharedDtor();
}

void battle_turn_begin_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete seqs_;
  }
}

void battle_turn_begin_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_turn_begin_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_turn_begin_ntf_descriptor_;
}

const battle_turn_begin_ntf& battle_turn_begin_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_turn_begin_ntf* battle_turn_begin_ntf::default_instance_ = NULL;

battle_turn_begin_ntf* battle_turn_begin_ntf::New() const {
  return new battle_turn_begin_ntf;
}

void battle_turn_begin_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5717;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    turn_index_ = 0u;
    if (has_seqs()) {
      if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_turn_begin_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_begin_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_index;
        break;
      }

      // optional uint32 turn_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_index_)));
          set_has_turn_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seqs;
        break;
      }

      // optional .SProtoSpace.opt_seqs seqs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_turn_begin_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_begin_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 turn_index = 3;
  if (has_turn_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->turn_index(), output);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seqs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_turn_begin_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_begin_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 turn_index = 3;
  if (has_turn_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->turn_index(), target);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seqs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_turn_begin_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_begin_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 turn_index = 3;
    if (has_turn_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_index());
    }

    // optional .SProtoSpace.opt_seqs seqs = 4;
    if (has_seqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seqs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_turn_begin_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_turn_begin_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_turn_begin_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_turn_begin_ntf::MergeFrom(const battle_turn_begin_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_turn_index()) {
      set_turn_index(from.turn_index());
    }
    if (from.has_seqs()) {
      mutable_seqs()->::SProtoSpace::opt_seqs::MergeFrom(from.seqs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_turn_begin_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_turn_begin_ntf::CopyFrom(const battle_turn_begin_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_turn_begin_ntf::IsInitialized() const {

  return true;
}

void battle_turn_begin_ntf::Swap(battle_turn_begin_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(turn_index_, other->turn_index_);
    std::swap(seqs_, other->seqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_turn_begin_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_turn_begin_ntf_descriptor_;
  metadata.reflection = battle_turn_begin_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_turn_end_ntf::kProtoidFieldNumber;
const int battle_turn_end_ntf::kBattleUuidFieldNumber;
const int battle_turn_end_ntf::kTurnIndexFieldNumber;
const int battle_turn_end_ntf::kSeqsFieldNumber;
const int battle_turn_end_ntf::kWinnerCampFieldNumber;
#endif  // !_MSC_VER

battle_turn_end_ntf::battle_turn_end_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_turn_end_ntf::InitAsDefaultInstance() {
  seqs_ = const_cast< ::SProtoSpace::opt_seqs*>(&::SProtoSpace::opt_seqs::default_instance());
}

battle_turn_end_ntf::battle_turn_end_ntf(const battle_turn_end_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_turn_end_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5718;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  turn_index_ = 0u;
  seqs_ = NULL;
  winner_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_turn_end_ntf::~battle_turn_end_ntf() {
  SharedDtor();
}

void battle_turn_end_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete seqs_;
  }
}

void battle_turn_end_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_turn_end_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_turn_end_ntf_descriptor_;
}

const battle_turn_end_ntf& battle_turn_end_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_turn_end_ntf* battle_turn_end_ntf::default_instance_ = NULL;

battle_turn_end_ntf* battle_turn_end_ntf::New() const {
  return new battle_turn_end_ntf;
}

void battle_turn_end_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5718;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    turn_index_ = 0u;
    if (has_seqs()) {
      if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
    }
    winner_camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_turn_end_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_end_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_turn_index;
        break;
      }

      // optional uint32 turn_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turn_index_)));
          set_has_turn_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seqs;
        break;
      }

      // optional .SProtoSpace.opt_seqs seqs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winner_camp;
        break;
      }

      // optional int32 winner_camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_)));
          set_has_winner_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_turn_end_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_end_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 turn_index = 3;
  if (has_turn_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->turn_index(), output);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seqs(), output);
  }

  // optional int32 winner_camp = 5;
  if (has_winner_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winner_camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_turn_end_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_end_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 turn_index = 3;
  if (has_turn_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->turn_index(), target);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seqs(), target);
  }

  // optional int32 winner_camp = 5;
  if (has_winner_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winner_camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_turn_end_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_turn_end_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 turn_index = 3;
    if (has_turn_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turn_index());
    }

    // optional .SProtoSpace.opt_seqs seqs = 4;
    if (has_seqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seqs());
    }

    // optional int32 winner_camp = 5;
    if (has_winner_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_turn_end_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_turn_end_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_turn_end_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_turn_end_ntf::MergeFrom(const battle_turn_end_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_turn_index()) {
      set_turn_index(from.turn_index());
    }
    if (from.has_seqs()) {
      mutable_seqs()->::SProtoSpace::opt_seqs::MergeFrom(from.seqs());
    }
    if (from.has_winner_camp()) {
      set_winner_camp(from.winner_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_turn_end_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_turn_end_ntf::CopyFrom(const battle_turn_end_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_turn_end_ntf::IsInitialized() const {

  return true;
}

void battle_turn_end_ntf::Swap(battle_turn_end_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(turn_index_, other->turn_index_);
    std::swap(seqs_, other->seqs_);
    std::swap(winner_camp_, other->winner_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_turn_end_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_turn_end_ntf_descriptor_;
  metadata.reflection = battle_turn_end_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_round_begin_ntf::kProtoidFieldNumber;
const int battle_round_begin_ntf::kBattleUuidFieldNumber;
const int battle_round_begin_ntf::kRoundIndexFieldNumber;
const int battle_round_begin_ntf::kSeqsFieldNumber;
#endif  // !_MSC_VER

battle_round_begin_ntf::battle_round_begin_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_round_begin_ntf::InitAsDefaultInstance() {
  seqs_ = const_cast< ::SProtoSpace::opt_seqs*>(&::SProtoSpace::opt_seqs::default_instance());
}

battle_round_begin_ntf::battle_round_begin_ntf(const battle_round_begin_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_round_begin_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5715;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  round_index_ = 0u;
  seqs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_round_begin_ntf::~battle_round_begin_ntf() {
  SharedDtor();
}

void battle_round_begin_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete seqs_;
  }
}

void battle_round_begin_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_round_begin_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_round_begin_ntf_descriptor_;
}

const battle_round_begin_ntf& battle_round_begin_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_round_begin_ntf* battle_round_begin_ntf::default_instance_ = NULL;

battle_round_begin_ntf* battle_round_begin_ntf::New() const {
  return new battle_round_begin_ntf;
}

void battle_round_begin_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5715;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    round_index_ = 0u;
    if (has_seqs()) {
      if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_round_begin_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_begin_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round_index;
        break;
      }

      // optional uint32 round_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seqs;
        break;
      }

      // optional .SProtoSpace.opt_seqs seqs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_round_begin_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_begin_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 round_index = 3;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round_index(), output);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seqs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_round_begin_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_begin_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 round_index = 3;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round_index(), target);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seqs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_round_begin_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_begin_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 round_index = 3;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round_index());
    }

    // optional .SProtoSpace.opt_seqs seqs = 4;
    if (has_seqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seqs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_round_begin_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_round_begin_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_round_begin_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_round_begin_ntf::MergeFrom(const battle_round_begin_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
    if (from.has_seqs()) {
      mutable_seqs()->::SProtoSpace::opt_seqs::MergeFrom(from.seqs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_round_begin_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_round_begin_ntf::CopyFrom(const battle_round_begin_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_round_begin_ntf::IsInitialized() const {

  return true;
}

void battle_round_begin_ntf::Swap(battle_round_begin_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(round_index_, other->round_index_);
    std::swap(seqs_, other->seqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_round_begin_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_round_begin_ntf_descriptor_;
  metadata.reflection = battle_round_begin_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_round_end_ntf::kProtoidFieldNumber;
const int battle_round_end_ntf::kBattleUuidFieldNumber;
const int battle_round_end_ntf::kRoundIndexFieldNumber;
const int battle_round_end_ntf::kSeqsFieldNumber;
const int battle_round_end_ntf::kWinnerCampFieldNumber;
#endif  // !_MSC_VER

battle_round_end_ntf::battle_round_end_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_round_end_ntf::InitAsDefaultInstance() {
  seqs_ = const_cast< ::SProtoSpace::opt_seqs*>(&::SProtoSpace::opt_seqs::default_instance());
}

battle_round_end_ntf::battle_round_end_ntf(const battle_round_end_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_round_end_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5716;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  round_index_ = 0u;
  seqs_ = NULL;
  winner_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_round_end_ntf::~battle_round_end_ntf() {
  SharedDtor();
}

void battle_round_end_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete seqs_;
  }
}

void battle_round_end_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_round_end_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_round_end_ntf_descriptor_;
}

const battle_round_end_ntf& battle_round_end_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_round_end_ntf* battle_round_end_ntf::default_instance_ = NULL;

battle_round_end_ntf* battle_round_end_ntf::New() const {
  return new battle_round_end_ntf;
}

void battle_round_end_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5716;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    round_index_ = 0u;
    if (has_seqs()) {
      if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
    }
    winner_camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_round_end_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_end_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_round_index;
        break;
      }

      // optional uint32 round_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seqs;
        break;
      }

      // optional .SProtoSpace.opt_seqs seqs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winner_camp;
        break;
      }

      // optional int32 winner_camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_)));
          set_has_winner_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_round_end_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_end_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 round_index = 3;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round_index(), output);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seqs(), output);
  }

  // optional int32 winner_camp = 5;
  if (has_winner_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winner_camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_round_end_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_end_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 round_index = 3;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round_index(), target);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seqs(), target);
  }

  // optional int32 winner_camp = 5;
  if (has_winner_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winner_camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_round_end_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_round_end_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 round_index = 3;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round_index());
    }

    // optional .SProtoSpace.opt_seqs seqs = 4;
    if (has_seqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seqs());
    }

    // optional int32 winner_camp = 5;
    if (has_winner_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_round_end_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_round_end_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_round_end_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_round_end_ntf::MergeFrom(const battle_round_end_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
    if (from.has_seqs()) {
      mutable_seqs()->::SProtoSpace::opt_seqs::MergeFrom(from.seqs());
    }
    if (from.has_winner_camp()) {
      set_winner_camp(from.winner_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_round_end_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_round_end_ntf::CopyFrom(const battle_round_end_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_round_end_ntf::IsInitialized() const {

  return true;
}

void battle_round_end_ntf::Swap(battle_round_end_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(round_index_, other->round_index_);
    std::swap(seqs_, other->seqs_);
    std::swap(winner_camp_, other->winner_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_round_end_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_round_end_ntf_descriptor_;
  metadata.reflection = battle_round_end_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_shot_begin_ntf::kProtoidFieldNumber;
const int battle_shot_begin_ntf::kBattleUuidFieldNumber;
const int battle_shot_begin_ntf::kObjIdFieldNumber;
const int battle_shot_begin_ntf::kSeqsFieldNumber;
const int battle_shot_begin_ntf::kShotIndexFieldNumber;
#endif  // !_MSC_VER

battle_shot_begin_ntf::battle_shot_begin_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_shot_begin_ntf::InitAsDefaultInstance() {
  seqs_ = const_cast< ::SProtoSpace::opt_seqs*>(&::SProtoSpace::opt_seqs::default_instance());
}

battle_shot_begin_ntf::battle_shot_begin_ntf(const battle_shot_begin_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_shot_begin_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5708;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  obj_id_ = GOOGLE_ULONGLONG(0);
  seqs_ = NULL;
  shot_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_shot_begin_ntf::~battle_shot_begin_ntf() {
  SharedDtor();
}

void battle_shot_begin_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete seqs_;
  }
}

void battle_shot_begin_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_shot_begin_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_shot_begin_ntf_descriptor_;
}

const battle_shot_begin_ntf& battle_shot_begin_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_shot_begin_ntf* battle_shot_begin_ntf::default_instance_ = NULL;

battle_shot_begin_ntf* battle_shot_begin_ntf::New() const {
  return new battle_shot_begin_ntf;
}

void battle_shot_begin_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5708;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    obj_id_ = GOOGLE_ULONGLONG(0);
    if (has_seqs()) {
      if (seqs_ != NULL) seqs_->::SProtoSpace::opt_seqs::Clear();
    }
    shot_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_shot_begin_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_begin_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obj_id;
        break;
      }

      // optional uint64 obj_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seqs;
        break;
      }

      // optional .SProtoSpace.opt_seqs seqs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_shot_index;
        break;
      }

      // optional int32 shot_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shot_index_)));
          set_has_shot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_shot_begin_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_begin_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint64 obj_id = 3;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->obj_id(), output);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seqs(), output);
  }

  // optional int32 shot_index = 5;
  if (has_shot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->shot_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_shot_begin_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_begin_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint64 obj_id = 3;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->obj_id(), target);
  }

  // optional .SProtoSpace.opt_seqs seqs = 4;
  if (has_seqs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seqs(), target);
  }

  // optional int32 shot_index = 5;
  if (has_shot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->shot_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_shot_begin_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_begin_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint64 obj_id = 3;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_id());
    }

    // optional .SProtoSpace.opt_seqs seqs = 4;
    if (has_seqs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seqs());
    }

    // optional int32 shot_index = 5;
    if (has_shot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shot_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_shot_begin_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_shot_begin_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_shot_begin_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_shot_begin_ntf::MergeFrom(const battle_shot_begin_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_seqs()) {
      mutable_seqs()->::SProtoSpace::opt_seqs::MergeFrom(from.seqs());
    }
    if (from.has_shot_index()) {
      set_shot_index(from.shot_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_shot_begin_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_shot_begin_ntf::CopyFrom(const battle_shot_begin_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_shot_begin_ntf::IsInitialized() const {

  return true;
}

void battle_shot_begin_ntf::Swap(battle_shot_begin_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(obj_id_, other->obj_id_);
    std::swap(seqs_, other->seqs_);
    std::swap(shot_index_, other->shot_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_shot_begin_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_shot_begin_ntf_descriptor_;
  metadata.reflection = battle_shot_begin_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_shot_end_ntf::kProtoidFieldNumber;
const int battle_shot_end_ntf::kBattleUuidFieldNumber;
const int battle_shot_end_ntf::kShotIndexFieldNumber;
const int battle_shot_end_ntf::kSeqsFieldNumber;
const int battle_shot_end_ntf::kSpInfoFieldNumber;
const int battle_shot_end_ntf::kWinnerCampFieldNumber;
#endif  // !_MSC_VER

battle_shot_end_ntf::battle_shot_end_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_shot_end_ntf::InitAsDefaultInstance() {
  sp_info_ = const_cast< ::SProtoSpace::seq_sp*>(&::SProtoSpace::seq_sp::default_instance());
}

battle_shot_end_ntf::battle_shot_end_ntf(const battle_shot_end_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_shot_end_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5709;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  shot_index_ = 0;
  sp_info_ = NULL;
  winner_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_shot_end_ntf::~battle_shot_end_ntf() {
  SharedDtor();
}

void battle_shot_end_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete sp_info_;
  }
}

void battle_shot_end_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_shot_end_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_shot_end_ntf_descriptor_;
}

const battle_shot_end_ntf& battle_shot_end_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_shot_end_ntf* battle_shot_end_ntf::default_instance_ = NULL;

battle_shot_end_ntf* battle_shot_end_ntf::New() const {
  return new battle_shot_end_ntf;
}

void battle_shot_end_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5709;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    shot_index_ = 0;
    if (has_sp_info()) {
      if (sp_info_ != NULL) sp_info_->::SProtoSpace::seq_sp::Clear();
    }
    winner_camp_ = 0;
  }
  seqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_shot_end_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_end_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shot_index;
        break;
      }

      // optional int32 shot_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shot_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shot_index_)));
          set_has_shot_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_seqs;
        break;
      }

      // repeated .SProtoSpace.opt_seqs seqs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seqs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_seqs;
        if (input->ExpectTag(50)) goto parse_sp_info;
        break;
      }

      // optional .SProtoSpace.seq_sp sp_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sp_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_winner_camp;
        break;
      }

      // optional int32 winner_camp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_)));
          set_has_winner_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_shot_end_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_end_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional int32 shot_index = 3;
  if (has_shot_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shot_index(), output);
  }

  // repeated .SProtoSpace.opt_seqs seqs = 5;
  for (int i = 0; i < this->seqs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->seqs(i), output);
  }

  // optional .SProtoSpace.seq_sp sp_info = 6;
  if (has_sp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sp_info(), output);
  }

  // optional int32 winner_camp = 7;
  if (has_winner_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->winner_camp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_shot_end_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_end_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional int32 shot_index = 3;
  if (has_shot_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shot_index(), target);
  }

  // repeated .SProtoSpace.opt_seqs seqs = 5;
  for (int i = 0; i < this->seqs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->seqs(i), target);
  }

  // optional .SProtoSpace.seq_sp sp_info = 6;
  if (has_sp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sp_info(), target);
  }

  // optional int32 winner_camp = 7;
  if (has_winner_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->winner_camp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_shot_end_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_end_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional int32 shot_index = 3;
    if (has_shot_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shot_index());
    }

    // optional .SProtoSpace.seq_sp sp_info = 6;
    if (has_sp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sp_info());
    }

    // optional int32 winner_camp = 7;
    if (has_winner_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp());
    }

  }
  // repeated .SProtoSpace.opt_seqs seqs = 5;
  total_size += 1 * this->seqs_size();
  for (int i = 0; i < this->seqs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seqs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_shot_end_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_shot_end_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_shot_end_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_shot_end_ntf::MergeFrom(const battle_shot_end_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  seqs_.MergeFrom(from.seqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_shot_index()) {
      set_shot_index(from.shot_index());
    }
    if (from.has_sp_info()) {
      mutable_sp_info()->::SProtoSpace::seq_sp::MergeFrom(from.sp_info());
    }
    if (from.has_winner_camp()) {
      set_winner_camp(from.winner_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_shot_end_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_shot_end_ntf::CopyFrom(const battle_shot_end_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_shot_end_ntf::IsInitialized() const {

  return true;
}

void battle_shot_end_ntf::Swap(battle_shot_end_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(shot_index_, other->shot_index_);
    seqs_.Swap(&other->seqs_);
    std::swap(sp_info_, other->sp_info_);
    std::swap(winner_camp_, other->winner_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_shot_end_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_shot_end_ntf_descriptor_;
  metadata.reflection = battle_shot_end_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_info_ntf::kProtoidFieldNumber;
const int battle_info_ntf::kBattleUuidFieldNumber;
const int battle_info_ntf::kDataFieldNumber;
#endif  // !_MSC_VER

battle_info_ntf::battle_info_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_info_ntf::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::client_battle_data*>(&::SProtoSpace::client_battle_data::default_instance());
}

battle_info_ntf::battle_info_ntf(const battle_info_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_info_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5710;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_info_ntf::~battle_info_ntf() {
  SharedDtor();
}

void battle_info_ntf::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void battle_info_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_info_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_info_ntf_descriptor_;
}

const battle_info_ntf& battle_info_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_info_ntf* battle_info_ntf::default_instance_ = NULL;

battle_info_ntf* battle_info_ntf::New() const {
  return new battle_info_ntf;
}

void battle_info_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5710;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::client_battle_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_info_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_info_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.client_battle_data data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_info_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_info_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional .SProtoSpace.client_battle_data data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_info_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_info_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional .SProtoSpace.client_battle_data data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_info_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_info_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional .SProtoSpace.client_battle_data data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_info_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_info_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_info_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_info_ntf::MergeFrom(const battle_info_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::client_battle_data::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_info_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_info_ntf::CopyFrom(const battle_info_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_info_ntf::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void battle_info_ntf::Swap(battle_info_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_info_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_info_ntf_descriptor_;
  metadata.reflection = battle_info_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_begin_ntf::kProtoidFieldNumber;
const int battle_begin_ntf::kBattleUuidFieldNumber;
const int battle_begin_ntf::kBattleTypeFieldNumber;
#endif  // !_MSC_VER

battle_begin_ntf::battle_begin_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_begin_ntf::InitAsDefaultInstance() {
}

battle_begin_ntf::battle_begin_ntf(const battle_begin_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_begin_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5711;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_begin_ntf::~battle_begin_ntf() {
  SharedDtor();
}

void battle_begin_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_begin_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_begin_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_begin_ntf_descriptor_;
}

const battle_begin_ntf& battle_begin_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_begin_ntf* battle_begin_ntf::default_instance_ = NULL;

battle_begin_ntf* battle_begin_ntf::New() const {
  return new battle_begin_ntf;
}

void battle_begin_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5711;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_begin_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional uint32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_begin_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_begin_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_begin_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_begin_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_begin_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_begin_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_begin_ntf::MergeFrom(const battle_begin_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_begin_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_begin_ntf::CopyFrom(const battle_begin_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_begin_ntf::IsInitialized() const {

  return true;
}

void battle_begin_ntf::Swap(battle_begin_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_begin_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_begin_ntf_descriptor_;
  metadata.reflection = battle_begin_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_end_ntf::kProtoidFieldNumber;
const int battle_end_ntf::kBattleUuidFieldNumber;
const int battle_end_ntf::kBattleTypeFieldNumber;
const int battle_end_ntf::kWinnerCampFieldNumber;
const int battle_end_ntf::kDataFieldNumber;
const int battle_end_ntf::kTurnIndexFieldNumber;
const int battle_end_ntf::kRoundIndexFieldNumber;
#endif  // !_MSC_VER

battle_end_ntf::battle_end_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_end_ntf::InitAsDefaultInstance() {
}

battle_end_ntf::battle_end_ntf(const battle_end_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_end_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5712;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  battle_type_ = 0u;
  winner_camp_ = 0;
  turn_index_ = 0;
  round_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_end_ntf::~battle_end_ntf() {
  SharedDtor();
}

void battle_end_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_end_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_end_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_end_ntf_descriptor_;
}

const battle_end_ntf& battle_end_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_end_ntf* battle_end_ntf::default_instance_ = NULL;

battle_end_ntf* battle_end_ntf::New() const {
  return new battle_end_ntf;
}

void battle_end_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5712;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    battle_type_ = 0u;
    winner_camp_ = 0;
    turn_index_ = 0;
    round_index_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_end_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_type;
        break;
      }

      // optional uint32 battle_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_type_)));
          set_has_battle_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winner_camp;
        break;
      }

      // optional int32 winner_camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winner_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winner_camp_)));
          set_has_winner_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .SProtoSpace.round_data data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectTag(48)) goto parse_turn_index;
        break;
      }

      // optional int32 turn_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turn_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_index_)));
          set_has_turn_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_round_index;
        break;
      }

      // optional int32 round_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_round_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_index_)));
          set_has_round_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_end_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint32 battle_type = 3;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_type(), output);
  }

  // optional int32 winner_camp = 4;
  if (has_winner_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->winner_camp(), output);
  }

  // repeated .SProtoSpace.round_data data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  // optional int32 turn_index = 6;
  if (has_turn_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->turn_index(), output);
  }

  // optional int32 round_index = 7;
  if (has_round_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->round_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_end_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint32 battle_type = 3;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_type(), target);
  }

  // optional int32 winner_camp = 4;
  if (has_winner_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->winner_camp(), target);
  }

  // repeated .SProtoSpace.round_data data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  // optional int32 turn_index = 6;
  if (has_turn_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->turn_index(), target);
  }

  // optional int32 round_index = 7;
  if (has_round_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->round_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_end_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint32 battle_type = 3;
    if (has_battle_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_type());
    }

    // optional int32 winner_camp = 4;
    if (has_winner_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winner_camp());
    }

    // optional int32 turn_index = 6;
    if (has_turn_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn_index());
    }

    // optional int32 round_index = 7;
    if (has_round_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_index());
    }

  }
  // repeated .SProtoSpace.round_data data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_end_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_end_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_end_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_end_ntf::MergeFrom(const battle_end_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
    if (from.has_winner_camp()) {
      set_winner_camp(from.winner_camp());
    }
    if (from.has_turn_index()) {
      set_turn_index(from.turn_index());
    }
    if (from.has_round_index()) {
      set_round_index(from.round_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_end_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_end_ntf::CopyFrom(const battle_end_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_end_ntf::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void battle_end_ntf::Swap(battle_end_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(battle_type_, other->battle_type_);
    std::swap(winner_camp_, other->winner_camp_);
    data_.Swap(&other->data_);
    std::swap(turn_index_, other->turn_index_);
    std::swap(round_index_, other->round_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_end_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_end_ntf_descriptor_;
  metadata.reflection = battle_end_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_extra_operator_req::kProtoidFieldNumber;
const int battle_extra_operator_req::kBattleUuidFieldNumber;
const int battle_extra_operator_req::kObjUuidFieldNumber;
const int battle_extra_operator_req::kSkillIdFieldNumber;
#endif  // !_MSC_VER

battle_extra_operator_req::battle_extra_operator_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_extra_operator_req::InitAsDefaultInstance() {
}

battle_extra_operator_req::battle_extra_operator_req(const battle_extra_operator_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_extra_operator_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5719;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  obj_uuid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_extra_operator_req::~battle_extra_operator_req() {
  SharedDtor();
}

void battle_extra_operator_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_extra_operator_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_extra_operator_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_extra_operator_req_descriptor_;
}

const battle_extra_operator_req& battle_extra_operator_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_extra_operator_req* battle_extra_operator_req::default_instance_ = NULL;

battle_extra_operator_req* battle_extra_operator_req::New() const {
  return new battle_extra_operator_req;
}

void battle_extra_operator_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5719;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    obj_uuid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_extra_operator_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obj_uuid;
        break;
      }

      // optional uint64 obj_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_uuid_)));
          set_has_obj_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_extra_operator_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint64 obj_uuid = 3;
  if (has_obj_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->obj_uuid(), output);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_extra_operator_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint64 obj_uuid = 3;
  if (has_obj_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->obj_uuid(), target);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_extra_operator_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint64 obj_uuid = 3;
    if (has_obj_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_uuid());
    }

    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_extra_operator_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_extra_operator_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_extra_operator_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_extra_operator_req::MergeFrom(const battle_extra_operator_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_obj_uuid()) {
      set_obj_uuid(from.obj_uuid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_extra_operator_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_extra_operator_req::CopyFrom(const battle_extra_operator_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_extra_operator_req::IsInitialized() const {

  return true;
}

void battle_extra_operator_req::Swap(battle_extra_operator_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(obj_uuid_, other->obj_uuid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_extra_operator_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_extra_operator_req_descriptor_;
  metadata.reflection = battle_extra_operator_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_extra_operator_ack::kProtoidFieldNumber;
const int battle_extra_operator_ack::kRetFieldNumber;
const int battle_extra_operator_ack::kBattleUuidFieldNumber;
const int battle_extra_operator_ack::kObjUuidFieldNumber;
const int battle_extra_operator_ack::kSkillIdFieldNumber;
#endif  // !_MSC_VER

battle_extra_operator_ack::battle_extra_operator_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_extra_operator_ack::InitAsDefaultInstance() {
}

battle_extra_operator_ack::battle_extra_operator_ack(const battle_extra_operator_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_extra_operator_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5720;
  ret_ = 0;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  obj_uuid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_extra_operator_ack::~battle_extra_operator_ack() {
  SharedDtor();
}

void battle_extra_operator_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_extra_operator_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_extra_operator_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_extra_operator_ack_descriptor_;
}

const battle_extra_operator_ack& battle_extra_operator_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_extra_operator_ack* battle_extra_operator_ack::default_instance_ = NULL;

battle_extra_operator_ack* battle_extra_operator_ack::New() const {
  return new battle_extra_operator_ack;
}

void battle_extra_operator_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5720;
    ret_ = 0;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    obj_uuid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_extra_operator_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_obj_uuid;
        break;
      }

      // optional uint64 obj_uuid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_uuid_)));
          set_has_obj_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_extra_operator_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 battle_uuid = 3;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->battle_uuid(), output);
  }

  // optional uint64 obj_uuid = 4;
  if (has_obj_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->obj_uuid(), output);
  }

  // optional int32 skill_id = 5;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_extra_operator_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 battle_uuid = 3;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->battle_uuid(), target);
  }

  // optional uint64 obj_uuid = 4;
  if (has_obj_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->obj_uuid(), target);
  }

  // optional int32 skill_id = 5;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_extra_operator_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 battle_uuid = 3;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint64 obj_uuid = 4;
    if (has_obj_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_uuid());
    }

    // optional int32 skill_id = 5;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_extra_operator_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_extra_operator_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_extra_operator_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_extra_operator_ack::MergeFrom(const battle_extra_operator_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_obj_uuid()) {
      set_obj_uuid(from.obj_uuid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_extra_operator_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_extra_operator_ack::CopyFrom(const battle_extra_operator_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_extra_operator_ack::IsInitialized() const {

  return true;
}

void battle_extra_operator_ack::Swap(battle_extra_operator_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(obj_uuid_, other->obj_uuid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_extra_operator_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_extra_operator_ack_descriptor_;
  metadata.reflection = battle_extra_operator_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_extra_operator_ntf::kProtoidFieldNumber;
const int battle_extra_operator_ntf::kBattleUuidFieldNumber;
const int battle_extra_operator_ntf::kObjUuidFieldNumber;
const int battle_extra_operator_ntf::kSkillIdFieldNumber;
#endif  // !_MSC_VER

battle_extra_operator_ntf::battle_extra_operator_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_extra_operator_ntf::InitAsDefaultInstance() {
}

battle_extra_operator_ntf::battle_extra_operator_ntf(const battle_extra_operator_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_extra_operator_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5721;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  obj_uuid_ = GOOGLE_ULONGLONG(0);
  skill_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_extra_operator_ntf::~battle_extra_operator_ntf() {
  SharedDtor();
}

void battle_extra_operator_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_extra_operator_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_extra_operator_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_extra_operator_ntf_descriptor_;
}

const battle_extra_operator_ntf& battle_extra_operator_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_extra_operator_ntf* battle_extra_operator_ntf::default_instance_ = NULL;

battle_extra_operator_ntf* battle_extra_operator_ntf::New() const {
  return new battle_extra_operator_ntf;
}

void battle_extra_operator_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5721;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
    obj_uuid_ = GOOGLE_ULONGLONG(0);
    skill_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_extra_operator_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_obj_uuid;
        break;
      }

      // optional uint64 obj_uuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &obj_uuid_)));
          set_has_obj_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skill_id;
        break;
      }

      // optional int32 skill_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_extra_operator_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  // optional uint64 obj_uuid = 3;
  if (has_obj_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->obj_uuid(), output);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_extra_operator_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  // optional uint64 obj_uuid = 3;
  if (has_obj_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->obj_uuid(), target);
  }

  // optional int32 skill_id = 4;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_extra_operator_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_extra_operator_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

    // optional uint64 obj_uuid = 3;
    if (has_obj_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->obj_uuid());
    }

    // optional int32 skill_id = 4;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_extra_operator_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_extra_operator_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_extra_operator_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_extra_operator_ntf::MergeFrom(const battle_extra_operator_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
    if (from.has_obj_uuid()) {
      set_obj_uuid(from.obj_uuid());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_extra_operator_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_extra_operator_ntf::CopyFrom(const battle_extra_operator_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_extra_operator_ntf::IsInitialized() const {

  return true;
}

void battle_extra_operator_ntf::Swap(battle_extra_operator_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(obj_uuid_, other->obj_uuid_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_extra_operator_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_extra_operator_ntf_descriptor_;
  metadata.reflection = battle_extra_operator_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_shot_ready_ntf::kProtoidFieldNumber;
const int battle_shot_ready_ntf::kBattleUuidFieldNumber;
#endif  // !_MSC_VER

battle_shot_ready_ntf::battle_shot_ready_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_shot_ready_ntf::InitAsDefaultInstance() {
}

battle_shot_ready_ntf::battle_shot_ready_ntf(const battle_shot_ready_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_shot_ready_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5722;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_shot_ready_ntf::~battle_shot_ready_ntf() {
  SharedDtor();
}

void battle_shot_ready_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_shot_ready_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_shot_ready_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_shot_ready_ntf_descriptor_;
}

const battle_shot_ready_ntf& battle_shot_ready_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_shot_ready_ntf* battle_shot_ready_ntf::default_instance_ = NULL;

battle_shot_ready_ntf* battle_shot_ready_ntf::New() const {
  return new battle_shot_ready_ntf;
}

void battle_shot_ready_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5722;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_shot_ready_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_ready_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_shot_ready_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_ready_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_shot_ready_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_ready_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_shot_ready_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_shot_ready_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_shot_ready_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_shot_ready_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_shot_ready_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_shot_ready_ntf::MergeFrom(const battle_shot_ready_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_shot_ready_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_shot_ready_ntf::CopyFrom(const battle_shot_ready_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_shot_ready_ntf::IsInitialized() const {

  return true;
}

void battle_shot_ready_ntf::Swap(battle_shot_ready_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_shot_ready_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_shot_ready_ntf_descriptor_;
  metadata.reflection = battle_shot_ready_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_jump_over_ntf::kProtoidFieldNumber;
const int battle_jump_over_ntf::kBattleUuidFieldNumber;
#endif  // !_MSC_VER

battle_jump_over_ntf::battle_jump_over_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_jump_over_ntf::InitAsDefaultInstance() {
}

battle_jump_over_ntf::battle_jump_over_ntf(const battle_jump_over_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_jump_over_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5723;
  battle_uuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_jump_over_ntf::~battle_jump_over_ntf() {
  SharedDtor();
}

void battle_jump_over_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_jump_over_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_jump_over_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_jump_over_ntf_descriptor_;
}

const battle_jump_over_ntf& battle_jump_over_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_jump_over_ntf* battle_jump_over_ntf::default_instance_ = NULL;

battle_jump_over_ntf* battle_jump_over_ntf::New() const {
  return new battle_jump_over_ntf;
}

void battle_jump_over_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5723;
    battle_uuid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_jump_over_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_jump_over_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_uuid;
        break;
      }

      // optional uint64 battle_uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_uuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battle_uuid_)));
          set_has_battle_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_jump_over_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_jump_over_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battle_uuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_jump_over_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_jump_over_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 battle_uuid = 2;
  if (has_battle_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battle_uuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_jump_over_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_jump_over_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 battle_uuid = 2;
    if (has_battle_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battle_uuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_jump_over_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_jump_over_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_jump_over_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_jump_over_ntf::MergeFrom(const battle_jump_over_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_battle_uuid()) {
      set_battle_uuid(from.battle_uuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_jump_over_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_jump_over_ntf::CopyFrom(const battle_jump_over_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_jump_over_ntf::IsInitialized() const {

  return true;
}

void battle_jump_over_ntf::Swap(battle_jump_over_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(battle_uuid_, other->battle_uuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_jump_over_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_jump_over_ntf_descriptor_;
  metadata.reflection = battle_jump_over_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_begin_req::kProtoidFieldNumber;
const int battle_begin_req::kTypeFieldNumber;
const int battle_begin_req::kBattleIdFieldNumber;
const int battle_begin_req::kModuleIdFieldNumber;
const int battle_begin_req::kRoleIdFieldNumber;
const int battle_begin_req::kFormationTypeFieldNumber;
#endif  // !_MSC_VER

battle_begin_req::battle_begin_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_begin_req::InitAsDefaultInstance() {
}

battle_begin_req::battle_begin_req(const battle_begin_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_begin_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5750;
  type_ = 0;
  battle_id_ = 0;
  module_id_ = 0;
  role_id_ = GOOGLE_ULONGLONG(0);
  formation_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_begin_req::~battle_begin_req() {
  SharedDtor();
}

void battle_begin_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_begin_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_begin_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_begin_req_descriptor_;
}

const battle_begin_req& battle_begin_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_begin_req* battle_begin_req::default_instance_ = NULL;

battle_begin_req* battle_begin_req::New() const {
  return new battle_begin_req;
}

void battle_begin_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5750;
    type_ = 0;
    battle_id_ = 0;
    module_id_ = 0;
    role_id_ = GOOGLE_ULONGLONG(0);
    formation_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_begin_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_id;
        break;
      }

      // optional int32 battle_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_module_id;
        break;
      }

      // optional int32 module_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_formation_type;
        break;
      }

      // optional .SProtoSpace.EHeroFormationType formation_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroFormationType_IsValid(value)) {
            set_formation_type(static_cast< ::SProtoSpace::EHeroFormationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_begin_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 battle_id = 3;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_id(), output);
  }

  // optional int32 module_id = 4;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->module_id(), output);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->role_id(), output);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 6;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->formation_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_begin_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 battle_id = 3;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_id(), target);
  }

  // optional int32 module_id = 4;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->module_id(), target);
  }

  // optional uint64 role_id = 5;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->role_id(), target);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 6;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->formation_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_begin_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 battle_id = 3;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }

    // optional int32 module_id = 4;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // optional uint64 role_id = 5;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.EHeroFormationType formation_type = 6;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_begin_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_begin_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_begin_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_begin_req::MergeFrom(const battle_begin_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_begin_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_begin_req::CopyFrom(const battle_begin_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_begin_req::IsInitialized() const {

  return true;
}

void battle_begin_req::Swap(battle_begin_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(type_, other->type_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(module_id_, other->module_id_);
    std::swap(role_id_, other->role_id_);
    std::swap(formation_type_, other->formation_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_begin_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_begin_req_descriptor_;
  metadata.reflection = battle_begin_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_begin_ack::kProtoidFieldNumber;
const int battle_begin_ack::kRetFieldNumber;
const int battle_begin_ack::kTypeFieldNumber;
const int battle_begin_ack::kBattleIdFieldNumber;
const int battle_begin_ack::kModuleIdFieldNumber;
const int battle_begin_ack::kSeedFieldNumber;
const int battle_begin_ack::kRoleIdFieldNumber;
const int battle_begin_ack::kFormationTypeFieldNumber;
const int battle_begin_ack::kRoleInfoFieldNumber;
#endif  // !_MSC_VER

battle_begin_ack::battle_begin_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_begin_ack::InitAsDefaultInstance() {
  role_info_ = const_cast< ::SProtoSpace::battle_role_info*>(&::SProtoSpace::battle_role_info::default_instance());
}

battle_begin_ack::battle_begin_ack(const battle_begin_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_begin_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5751;
  ret_ = 0;
  type_ = 0;
  battle_id_ = 0;
  module_id_ = 0;
  seed_ = 0u;
  role_id_ = GOOGLE_ULONGLONG(0);
  formation_type_ = 1;
  role_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_begin_ack::~battle_begin_ack() {
  SharedDtor();
}

void battle_begin_ack::SharedDtor() {
  if (this != default_instance_) {
    delete role_info_;
  }
}

void battle_begin_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_begin_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_begin_ack_descriptor_;
}

const battle_begin_ack& battle_begin_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_begin_ack* battle_begin_ack::default_instance_ = NULL;

battle_begin_ack* battle_begin_ack::New() const {
  return new battle_begin_ack;
}

void battle_begin_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5751;
    ret_ = 0;
    type_ = 0;
    battle_id_ = 0;
    module_id_ = 0;
    seed_ = 0u;
    role_id_ = GOOGLE_ULONGLONG(0);
    formation_type_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_role_info()) {
      if (role_info_ != NULL) role_info_->::SProtoSpace::battle_role_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_begin_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_id;
        break;
      }

      // optional int32 battle_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_module_id;
        break;
      }

      // optional int32 module_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seed;
        break;
      }

      // optional uint32 seed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
          set_has_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_formation_type;
        break;
      }

      // optional .SProtoSpace.EHeroFormationType formation_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroFormationType_IsValid(value)) {
            set_formation_type(static_cast< ::SProtoSpace::EHeroFormationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_info;
        break;
      }

      // optional .SProtoSpace.battle_role_info role_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_begin_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 battle_id = 4;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle_id(), output);
  }

  // optional int32 module_id = 5;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->module_id(), output);
  }

  // optional uint32 seed = 6;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seed(), output);
  }

  // optional uint64 role_id = 7;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->role_id(), output);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 8;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->formation_type(), output);
  }

  // optional .SProtoSpace.battle_role_info role_info = 9;
  if (has_role_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_begin_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 battle_id = 4;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battle_id(), target);
  }

  // optional int32 module_id = 5;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->module_id(), target);
  }

  // optional uint32 seed = 6;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seed(), target);
  }

  // optional uint64 role_id = 7;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->role_id(), target);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 8;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->formation_type(), target);
  }

  // optional .SProtoSpace.battle_role_info role_info = 9;
  if (has_role_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_begin_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_begin_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 battle_id = 4;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }

    // optional int32 module_id = 5;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // optional uint32 seed = 6;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seed());
    }

    // optional uint64 role_id = 7;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional .SProtoSpace.EHeroFormationType formation_type = 8;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SProtoSpace.battle_role_info role_info = 9;
    if (has_role_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_begin_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_begin_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_begin_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_begin_ack::MergeFrom(const battle_begin_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_info()) {
      mutable_role_info()->::SProtoSpace::battle_role_info::MergeFrom(from.role_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_begin_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_begin_ack::CopyFrom(const battle_begin_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_begin_ack::IsInitialized() const {

  if (has_role_info()) {
    if (!this->role_info().IsInitialized()) return false;
  }
  return true;
}

void battle_begin_ack::Swap(battle_begin_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(module_id_, other->module_id_);
    std::swap(seed_, other->seed_);
    std::swap(role_id_, other->role_id_);
    std::swap(formation_type_, other->formation_type_);
    std::swap(role_info_, other->role_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_begin_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_begin_ack_descriptor_;
  metadata.reflection = battle_begin_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_end_req::kProtoidFieldNumber;
const int battle_end_req::kEndDataFieldNumber;
#endif  // !_MSC_VER

battle_end_req::battle_end_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_end_req::InitAsDefaultInstance() {
  end_data_ = const_cast< ::SProtoSpace::battle_end_data*>(&::SProtoSpace::battle_end_data::default_instance());
}

battle_end_req::battle_end_req(const battle_end_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_end_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5752;
  end_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_end_req::~battle_end_req() {
  SharedDtor();
}

void battle_end_req::SharedDtor() {
  if (this != default_instance_) {
    delete end_data_;
  }
}

void battle_end_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_end_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_end_req_descriptor_;
}

const battle_end_req& battle_end_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_end_req* battle_end_req::default_instance_ = NULL;

battle_end_req* battle_end_req::New() const {
  return new battle_end_req;
}

void battle_end_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5752;
    if (has_end_data()) {
      if (end_data_ != NULL) end_data_->::SProtoSpace::battle_end_data::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_end_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_end_data;
        break;
      }

      // optional .SProtoSpace.battle_end_data end_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_end_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.battle_end_data end_data = 2;
  if (has_end_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_end_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.battle_end_data end_data = 2;
  if (has_end_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_end_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.battle_end_data end_data = 2;
    if (has_end_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_end_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_end_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_end_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_end_req::MergeFrom(const battle_end_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_end_data()) {
      mutable_end_data()->::SProtoSpace::battle_end_data::MergeFrom(from.end_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_end_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_end_req::CopyFrom(const battle_end_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_end_req::IsInitialized() const {

  if (has_end_data()) {
    if (!this->end_data().IsInitialized()) return false;
  }
  return true;
}

void battle_end_req::Swap(battle_end_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(end_data_, other->end_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_end_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_end_req_descriptor_;
  metadata.reflection = battle_end_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_end_ack::kProtoidFieldNumber;
const int battle_end_ack::kRetFieldNumber;
const int battle_end_ack::kTypeFieldNumber;
const int battle_end_ack::kBattleIdFieldNumber;
const int battle_end_ack::kIsWinFieldNumber;
const int battle_end_ack::kIsCheatFieldNumber;
const int battle_end_ack::kModuleIdFieldNumber;
const int battle_end_ack::kFormationTypeFieldNumber;
const int battle_end_ack::kRewardFieldNumber;
const int battle_end_ack::kStarsFieldNumber;
#endif  // !_MSC_VER

battle_end_ack::battle_end_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_end_ack::InitAsDefaultInstance() {
  reward_ = const_cast< ::SProtoSpace::battle_reward*>(&::SProtoSpace::battle_reward::default_instance());
}

battle_end_ack::battle_end_ack(const battle_end_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_end_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5753;
  ret_ = 0;
  type_ = 0;
  battle_id_ = 0;
  is_win_ = false;
  is_cheat_ = false;
  module_id_ = 0;
  formation_type_ = 1;
  reward_ = NULL;
  stars_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_end_ack::~battle_end_ack() {
  SharedDtor();
}

void battle_end_ack::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void battle_end_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_end_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_end_ack_descriptor_;
}

const battle_end_ack& battle_end_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_end_ack* battle_end_ack::default_instance_ = NULL;

battle_end_ack* battle_end_ack::New() const {
  return new battle_end_ack;
}

void battle_end_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5753;
    ret_ = 0;
    type_ = 0;
    battle_id_ = 0;
    is_win_ = false;
    is_cheat_ = false;
    module_id_ = 0;
    formation_type_ = 1;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_reward()) {
      if (reward_ != NULL) reward_->::SProtoSpace::battle_reward::Clear();
    }
    stars_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_end_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_id;
        break;
      }

      // optional int32 battle_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_id_)));
          set_has_battle_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_win;
        break;
      }

      // optional bool is_win = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
          set_has_is_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_cheat;
        break;
      }

      // optional bool is_cheat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_cheat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cheat_)));
          set_has_is_cheat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_module_id;
        break;
      }

      // optional int32 module_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &module_id_)));
          set_has_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_formation_type;
        break;
      }

      // optional .SProtoSpace.EHeroFormationType formation_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroFormationType_IsValid(value)) {
            set_formation_type(static_cast< ::SProtoSpace::EHeroFormationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_reward;
        break;
      }

      // optional .SProtoSpace.battle_reward reward = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stars;
        break;
      }

      // optional int32 stars = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stars_)));
          set_has_stars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_end_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 battle_id = 4;
  if (has_battle_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle_id(), output);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_win(), output);
  }

  // optional bool is_cheat = 6;
  if (has_is_cheat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_cheat(), output);
  }

  // optional int32 module_id = 7;
  if (has_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->module_id(), output);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 8;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->formation_type(), output);
  }

  // optional .SProtoSpace.battle_reward reward = 9;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->reward(), output);
  }

  // optional int32 stars = 10;
  if (has_stars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_end_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 battle_id = 4;
  if (has_battle_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battle_id(), target);
  }

  // optional bool is_win = 5;
  if (has_is_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_win(), target);
  }

  // optional bool is_cheat = 6;
  if (has_is_cheat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_cheat(), target);
  }

  // optional int32 module_id = 7;
  if (has_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->module_id(), target);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 8;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->formation_type(), target);
  }

  // optional .SProtoSpace.battle_reward reward = 9;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->reward(), target);
  }

  // optional int32 stars = 10;
  if (has_stars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_end_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_end_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 battle_id = 4;
    if (has_battle_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_id());
    }

    // optional bool is_win = 5;
    if (has_is_win()) {
      total_size += 1 + 1;
    }

    // optional bool is_cheat = 6;
    if (has_is_cheat()) {
      total_size += 1 + 1;
    }

    // optional int32 module_id = 7;
    if (has_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->module_id());
    }

    // optional .SProtoSpace.EHeroFormationType formation_type = 8;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .SProtoSpace.battle_reward reward = 9;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional int32 stars = 10;
    if (has_stars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_end_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_end_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_end_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_end_ack::MergeFrom(const battle_end_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_battle_id()) {
      set_battle_id(from.battle_id());
    }
    if (from.has_is_win()) {
      set_is_win(from.is_win());
    }
    if (from.has_is_cheat()) {
      set_is_cheat(from.is_cheat());
    }
    if (from.has_module_id()) {
      set_module_id(from.module_id());
    }
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward()) {
      mutable_reward()->::SProtoSpace::battle_reward::MergeFrom(from.reward());
    }
    if (from.has_stars()) {
      set_stars(from.stars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_end_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_end_ack::CopyFrom(const battle_end_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_end_ack::IsInitialized() const {

  return true;
}

void battle_end_ack::Swap(battle_end_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(battle_id_, other->battle_id_);
    std::swap(is_win_, other->is_win_);
    std::swap(is_cheat_, other->is_cheat_);
    std::swap(module_id_, other->module_id_);
    std::swap(formation_type_, other->formation_type_);
    std::swap(reward_, other->reward_);
    std::swap(stars_, other->stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_end_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_end_ack_descriptor_;
  metadata.reflection = battle_end_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_replay_req::kProtoidFieldNumber;
const int battle_replay_req::kReplayIdFieldNumber;
#endif  // !_MSC_VER

battle_replay_req::battle_replay_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_replay_req::InitAsDefaultInstance() {
}

battle_replay_req::battle_replay_req(const battle_replay_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_replay_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5756;
  replay_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_replay_req::~battle_replay_req() {
  SharedDtor();
}

void battle_replay_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void battle_replay_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_replay_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_replay_req_descriptor_;
}

const battle_replay_req& battle_replay_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_replay_req* battle_replay_req::default_instance_ = NULL;

battle_replay_req* battle_replay_req::New() const {
  return new battle_replay_req;
}

void battle_replay_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5756;
    replay_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_replay_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_replay_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 replay_id = 2;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->replay_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_replay_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 replay_id = 2;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->replay_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_replay_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 replay_id = 2;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_replay_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_replay_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_replay_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_replay_req::MergeFrom(const battle_replay_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_replay_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_replay_req::CopyFrom(const battle_replay_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_replay_req::IsInitialized() const {

  return true;
}

void battle_replay_req::Swap(battle_replay_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_replay_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_replay_req_descriptor_;
  metadata.reflection = battle_replay_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int battle_replay_ack::kProtoidFieldNumber;
const int battle_replay_ack::kRetFieldNumber;
const int battle_replay_ack::kReplayIdFieldNumber;
const int battle_replay_ack::kDataFieldNumber;
#endif  // !_MSC_VER

battle_replay_ack::battle_replay_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void battle_replay_ack::InitAsDefaultInstance() {
  data_ = const_cast< ::SProtoSpace::battle_replay_info*>(&::SProtoSpace::battle_replay_info::default_instance());
}

battle_replay_ack::battle_replay_ack(const battle_replay_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void battle_replay_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5757;
  ret_ = 0;
  replay_id_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

battle_replay_ack::~battle_replay_ack() {
  SharedDtor();
}

void battle_replay_ack::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void battle_replay_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* battle_replay_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return battle_replay_ack_descriptor_;
}

const battle_replay_ack& battle_replay_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

battle_replay_ack* battle_replay_ack::default_instance_ = NULL;

battle_replay_ack* battle_replay_ack::New() const {
  return new battle_replay_ack;
}

void battle_replay_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5757;
    ret_ = 0;
    replay_id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::SProtoSpace::battle_replay_info::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool battle_replay_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replay_id;
        break;
      }

      // optional uint64 replay_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &replay_id_)));
          set_has_replay_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .SProtoSpace.battle_replay_info data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void battle_replay_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->replay_id(), output);
  }

  // optional .SProtoSpace.battle_replay_info data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* battle_replay_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int32 ret = 2 [default = 0];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional uint64 replay_id = 3;
  if (has_replay_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->replay_id(), target);
  }

  // optional .SProtoSpace.battle_replay_info data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int battle_replay_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = battle_replay_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int32 ret = 2 [default = 0];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 replay_id = 3;
    if (has_replay_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->replay_id());
    }

    // optional .SProtoSpace.battle_replay_info data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void battle_replay_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const battle_replay_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const battle_replay_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void battle_replay_ack::MergeFrom(const battle_replay_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_replay_id()) {
      set_replay_id(from.replay_id());
    }
    if (from.has_data()) {
      mutable_data()->::SProtoSpace::battle_replay_info::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void battle_replay_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void battle_replay_ack::CopyFrom(const battle_replay_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool battle_replay_ack::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void battle_replay_ack::Swap(battle_replay_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(ret_, other->ret_);
    std::swap(replay_id_, other->replay_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata battle_replay_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = battle_replay_ack_descriptor_;
  metadata.reflection = battle_replay_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_office_battle_req::kProtoidFieldNumber;
const int test_office_battle_req::kIndexFieldNumber;
#endif  // !_MSC_VER

test_office_battle_req::test_office_battle_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_office_battle_req::InitAsDefaultInstance() {
}

test_office_battle_req::test_office_battle_req(const test_office_battle_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_office_battle_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5754;
  index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_office_battle_req::~test_office_battle_req() {
  SharedDtor();
}

void test_office_battle_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void test_office_battle_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_office_battle_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_office_battle_req_descriptor_;
}

const test_office_battle_req& test_office_battle_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

test_office_battle_req* test_office_battle_req::default_instance_ = NULL;

test_office_battle_req* test_office_battle_req::New() const {
  return new test_office_battle_req;
}

void test_office_battle_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5754;
    index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_office_battle_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_office_battle_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_office_battle_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_office_battle_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_office_battle_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_office_battle_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_office_battle_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_office_battle_req::MergeFrom(const test_office_battle_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_office_battle_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_office_battle_req::CopyFrom(const test_office_battle_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_office_battle_req::IsInitialized() const {

  return true;
}

void test_office_battle_req::Swap(test_office_battle_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_office_battle_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_office_battle_req_descriptor_;
  metadata.reflection = test_office_battle_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int test_office_battle_ack::kProtoidFieldNumber;
const int test_office_battle_ack::kIndexFieldNumber;
#endif  // !_MSC_VER

test_office_battle_ack::test_office_battle_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void test_office_battle_ack::InitAsDefaultInstance() {
}

test_office_battle_ack::test_office_battle_ack(const test_office_battle_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void test_office_battle_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5755;
  index_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

test_office_battle_ack::~test_office_battle_ack() {
  SharedDtor();
}

void test_office_battle_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void test_office_battle_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* test_office_battle_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return test_office_battle_ack_descriptor_;
}

const test_office_battle_ack& test_office_battle_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

test_office_battle_ack* test_office_battle_ack::default_instance_ = NULL;

test_office_battle_ack* test_office_battle_ack::New() const {
  return new test_office_battle_ack;
}

void test_office_battle_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5755;
    index_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool test_office_battle_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void test_office_battle_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* test_office_battle_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int test_office_battle_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = test_office_battle_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void test_office_battle_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const test_office_battle_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const test_office_battle_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void test_office_battle_ack::MergeFrom(const test_office_battle_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void test_office_battle_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void test_office_battle_ack::CopyFrom(const test_office_battle_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool test_office_battle_ack::IsInitialized() const {

  return true;
}

void test_office_battle_ack::Swap(test_office_battle_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata test_office_battle_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = test_office_battle_ack_descriptor_;
  metadata.reflection = test_office_battle_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int hero_formation::kFormationTypeFieldNumber;
const int hero_formation::kHeroIdsFieldNumber;
const int hero_formation::kRolePositionFieldNumber;
#endif  // !_MSC_VER

hero_formation::hero_formation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hero_formation::InitAsDefaultInstance() {
}

hero_formation::hero_formation(const hero_formation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hero_formation::SharedCtor() {
  _cached_size_ = 0;
  formation_type_ = 1;
  role_position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hero_formation::~hero_formation() {
  SharedDtor();
}

void hero_formation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void hero_formation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hero_formation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hero_formation_descriptor_;
}

const hero_formation& hero_formation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

hero_formation* hero_formation::default_instance_ = NULL;

hero_formation* hero_formation::New() const {
  return new hero_formation;
}

void hero_formation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    formation_type_ = 1;
    role_position_ = 0;
  }
  hero_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hero_formation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.EHeroFormationType formation_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroFormationType_IsValid(value)) {
            set_formation_type(static_cast< ::SProtoSpace::EHeroFormationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_ids;
        break;
      }

      // repeated uint64 hero_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_hero_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_hero_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_ids;
        if (input->ExpectTag(24)) goto parse_role_position;
        break;
      }

      // optional int32 role_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_position_)));
          set_has_role_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hero_formation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.EHeroFormationType formation_type = 1;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->formation_type(), output);
  }

  // repeated uint64 hero_ids = 2;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->hero_ids(i), output);
  }

  // optional int32 role_position = 3;
  if (has_role_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hero_formation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.EHeroFormationType formation_type = 1;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->formation_type(), target);
  }

  // repeated uint64 hero_ids = 2;
  for (int i = 0; i < this->hero_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->hero_ids(i), target);
  }

  // optional int32 role_position = 3;
  if (has_role_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hero_formation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.EHeroFormationType formation_type = 1;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

    // optional int32 role_position = 3;
    if (has_role_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_position());
    }

  }
  // repeated uint64 hero_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hero_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->hero_ids(i));
    }
    total_size += 1 * this->hero_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hero_formation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hero_formation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hero_formation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hero_formation::MergeFrom(const hero_formation& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_ids_.MergeFrom(from.hero_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
    if (from.has_role_position()) {
      set_role_position(from.role_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hero_formation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hero_formation::CopyFrom(const hero_formation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hero_formation::IsInitialized() const {

  return true;
}

void hero_formation::Swap(hero_formation* other) {
  if (other != this) {
    std::swap(formation_type_, other->formation_type_);
    hero_ids_.Swap(&other->hero_ids_);
    std::swap(role_position_, other->role_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hero_formation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hero_formation_descriptor_;
  metadata.reflection = hero_formation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_formation_get_ntf::kProtoidFieldNumber;
const int role_battle_formation_get_ntf::kFormationsFieldNumber;
#endif  // !_MSC_VER

role_battle_formation_get_ntf::role_battle_formation_get_ntf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_formation_get_ntf::InitAsDefaultInstance() {
}

role_battle_formation_get_ntf::role_battle_formation_get_ntf(const role_battle_formation_get_ntf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_formation_get_ntf::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_formation_get_ntf::~role_battle_formation_get_ntf() {
  SharedDtor();
}

void role_battle_formation_get_ntf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_battle_formation_get_ntf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_formation_get_ntf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_formation_get_ntf_descriptor_;
}

const role_battle_formation_get_ntf& role_battle_formation_get_ntf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_formation_get_ntf* role_battle_formation_get_ntf::default_instance_ = NULL;

role_battle_formation_get_ntf* role_battle_formation_get_ntf::New() const {
  return new role_battle_formation_get_ntf;
}

void role_battle_formation_get_ntf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6200;
  }
  formations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_formation_get_ntf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_get_ntf_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formations;
        break;
      }

      // repeated .SProtoSpace.hero_formation formations = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_formation_get_ntf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_get_ntf_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // repeated .SProtoSpace.hero_formation formations = 2;
  for (int i = 0; i < this->formations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_formation_get_ntf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_get_ntf_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // repeated .SProtoSpace.hero_formation formations = 2;
  for (int i = 0; i < this->formations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_formation_get_ntf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_get_ntf_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

  }
  // repeated .SProtoSpace.hero_formation formations = 2;
  total_size += 1 * this->formations_size();
  for (int i = 0; i < this->formations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_formation_get_ntf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_formation_get_ntf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_formation_get_ntf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_formation_get_ntf::MergeFrom(const role_battle_formation_get_ntf& from) {
  GOOGLE_CHECK_NE(&from, this);
  formations_.MergeFrom(from.formations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_formation_get_ntf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_formation_get_ntf::CopyFrom(const role_battle_formation_get_ntf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_formation_get_ntf::IsInitialized() const {

  return true;
}

void role_battle_formation_get_ntf::Swap(role_battle_formation_get_ntf* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    formations_.Swap(&other->formations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_formation_get_ntf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_formation_get_ntf_descriptor_;
  metadata.reflection = role_battle_formation_get_ntf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_formation_save_req::kProtoidFieldNumber;
const int role_battle_formation_save_req::kFormationFieldNumber;
const int role_battle_formation_save_req::kFormationsFieldNumber;
#endif  // !_MSC_VER

role_battle_formation_save_req::role_battle_formation_save_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_formation_save_req::InitAsDefaultInstance() {
  formation_ = const_cast< ::SProtoSpace::hero_formation*>(&::SProtoSpace::hero_formation::default_instance());
}

role_battle_formation_save_req::role_battle_formation_save_req(const role_battle_formation_save_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_formation_save_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6202;
  formation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_formation_save_req::~role_battle_formation_save_req() {
  SharedDtor();
}

void role_battle_formation_save_req::SharedDtor() {
  if (this != default_instance_) {
    delete formation_;
  }
}

void role_battle_formation_save_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_formation_save_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_formation_save_req_descriptor_;
}

const role_battle_formation_save_req& role_battle_formation_save_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_formation_save_req* role_battle_formation_save_req::default_instance_ = NULL;

role_battle_formation_save_req* role_battle_formation_save_req::New() const {
  return new role_battle_formation_save_req;
}

void role_battle_formation_save_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6202;
    if (has_formation()) {
      if (formation_ != NULL) formation_->::SProtoSpace::hero_formation::Clear();
    }
  }
  formations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_formation_save_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_formation;
        break;
      }

      // optional .SProtoSpace.hero_formation formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_formation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_formations;
        break;
      }

      // repeated .SProtoSpace.hero_formation formations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_formations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_formation_save_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.hero_formation formation = 2;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->formation(), output);
  }

  // repeated .SProtoSpace.hero_formation formations = 3;
  for (int i = 0; i < this->formations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->formations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_formation_save_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.hero_formation formation = 2;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formation(), target);
  }

  // repeated .SProtoSpace.hero_formation formations = 3;
  for (int i = 0; i < this->formations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->formations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_formation_save_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.hero_formation formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }

  }
  // repeated .SProtoSpace.hero_formation formations = 3;
  total_size += 1 * this->formations_size();
  for (int i = 0; i < this->formations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_formation_save_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_formation_save_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_formation_save_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_formation_save_req::MergeFrom(const role_battle_formation_save_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  formations_.MergeFrom(from.formations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_formation()) {
      mutable_formation()->::SProtoSpace::hero_formation::MergeFrom(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_formation_save_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_formation_save_req::CopyFrom(const role_battle_formation_save_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_formation_save_req::IsInitialized() const {

  return true;
}

void role_battle_formation_save_req::Swap(role_battle_formation_save_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(formation_, other->formation_);
    formations_.Swap(&other->formations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_formation_save_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_formation_save_req_descriptor_;
  metadata.reflection = role_battle_formation_save_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_formation_save_ack::kProtoidFieldNumber;
const int role_battle_formation_save_ack::kRecCodeFieldNumber;
const int role_battle_formation_save_ack::kFormationFightPowerBuffAddFieldNumber;
const int role_battle_formation_save_ack::kFormationFightPowerBuffNoFieldNumber;
const int role_battle_formation_save_ack::kRetFieldNumber;
#endif  // !_MSC_VER

role_battle_formation_save_ack::role_battle_formation_save_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_formation_save_ack::InitAsDefaultInstance() {
}

role_battle_formation_save_ack::role_battle_formation_save_ack(const role_battle_formation_save_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_formation_save_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 6203;
  rec_code_ = 0u;
  formation_fight_power_buff_add_ = GOOGLE_LONGLONG(0);
  formation_fight_power_buff_no_ = GOOGLE_LONGLONG(0);
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_formation_save_ack::~role_battle_formation_save_ack() {
  SharedDtor();
}

void role_battle_formation_save_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_battle_formation_save_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_formation_save_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_formation_save_ack_descriptor_;
}

const role_battle_formation_save_ack& role_battle_formation_save_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_formation_save_ack* role_battle_formation_save_ack::default_instance_ = NULL;

role_battle_formation_save_ack* role_battle_formation_save_ack::New() const {
  return new role_battle_formation_save_ack;
}

void role_battle_formation_save_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 6203;
    rec_code_ = 0u;
    formation_fight_power_buff_add_ = GOOGLE_LONGLONG(0);
    formation_fight_power_buff_no_ = GOOGLE_LONGLONG(0);
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_formation_save_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rec_code;
        break;
      }

      // optional uint32 rec_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formation_fight_power_buff_add;
        break;
      }

      // optional int64 formation_fight_power_buff_add = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_fight_power_buff_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &formation_fight_power_buff_add_)));
          set_has_formation_fight_power_buff_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_formation_fight_power_buff_no;
        break;
      }

      // optional int64 formation_fight_power_buff_no = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_fight_power_buff_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &formation_fight_power_buff_no_)));
          set_has_formation_fight_power_buff_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional .SProtoSpace.MsgErrorType ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::MsgErrorType_IsValid(value)) {
            set_ret(static_cast< ::SProtoSpace::MsgErrorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_formation_save_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint32 rec_code = 2;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rec_code(), output);
  }

  // optional int64 formation_fight_power_buff_add = 3;
  if (has_formation_fight_power_buff_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->formation_fight_power_buff_add(), output);
  }

  // optional int64 formation_fight_power_buff_no = 4;
  if (has_formation_fight_power_buff_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->formation_fight_power_buff_no(), output);
  }

  // optional .SProtoSpace.MsgErrorType ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_formation_save_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint32 rec_code = 2;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rec_code(), target);
  }

  // optional int64 formation_fight_power_buff_add = 3;
  if (has_formation_fight_power_buff_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->formation_fight_power_buff_add(), target);
  }

  // optional int64 formation_fight_power_buff_no = 4;
  if (has_formation_fight_power_buff_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->formation_fight_power_buff_no(), target);
  }

  // optional .SProtoSpace.MsgErrorType ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_formation_save_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_save_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint32 rec_code = 2;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rec_code());
    }

    // optional int64 formation_fight_power_buff_add = 3;
    if (has_formation_fight_power_buff_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->formation_fight_power_buff_add());
    }

    // optional int64 formation_fight_power_buff_no = 4;
    if (has_formation_fight_power_buff_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->formation_fight_power_buff_no());
    }

    // optional .SProtoSpace.MsgErrorType ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_formation_save_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_formation_save_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_formation_save_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_formation_save_ack::MergeFrom(const role_battle_formation_save_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
    if (from.has_formation_fight_power_buff_add()) {
      set_formation_fight_power_buff_add(from.formation_fight_power_buff_add());
    }
    if (from.has_formation_fight_power_buff_no()) {
      set_formation_fight_power_buff_no(from.formation_fight_power_buff_no());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_formation_save_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_formation_save_ack::CopyFrom(const role_battle_formation_save_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_formation_save_ack::IsInitialized() const {

  return true;
}

void role_battle_formation_save_ack::Swap(role_battle_formation_save_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(formation_fight_power_buff_add_, other->formation_fight_power_buff_add_);
    std::swap(formation_fight_power_buff_no_, other->formation_fight_power_buff_no_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_formation_save_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_formation_save_ack_descriptor_;
  metadata.reflection = role_battle_formation_save_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_formation_fight_power_req::kProtoidFieldNumber;
const int role_battle_formation_fight_power_req::kFormationTypeFieldNumber;
#endif  // !_MSC_VER

role_battle_formation_fight_power_req::role_battle_formation_fight_power_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_formation_fight_power_req::InitAsDefaultInstance() {
}

role_battle_formation_fight_power_req::role_battle_formation_fight_power_req(const role_battle_formation_fight_power_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_formation_fight_power_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5427;
  formation_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_formation_fight_power_req::~role_battle_formation_fight_power_req() {
  SharedDtor();
}

void role_battle_formation_fight_power_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_battle_formation_fight_power_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_formation_fight_power_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_formation_fight_power_req_descriptor_;
}

const role_battle_formation_fight_power_req& role_battle_formation_fight_power_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_formation_fight_power_req* role_battle_formation_fight_power_req::default_instance_ = NULL;

role_battle_formation_fight_power_req* role_battle_formation_fight_power_req::New() const {
  return new role_battle_formation_fight_power_req;
}

void role_battle_formation_fight_power_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5427;
    formation_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_formation_fight_power_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_formation_type;
        break;
      }

      // optional .SProtoSpace.EHeroFormationType formation_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::EHeroFormationType_IsValid(value)) {
            set_formation_type(static_cast< ::SProtoSpace::EHeroFormationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_formation_fight_power_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 2;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->formation_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_formation_fight_power_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional .SProtoSpace.EHeroFormationType formation_type = 2;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->formation_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_formation_fight_power_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional .SProtoSpace.EHeroFormationType formation_type = 2;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_formation_fight_power_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_formation_fight_power_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_formation_fight_power_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_formation_fight_power_req::MergeFrom(const role_battle_formation_fight_power_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_formation_fight_power_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_formation_fight_power_req::CopyFrom(const role_battle_formation_fight_power_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_formation_fight_power_req::IsInitialized() const {

  return true;
}

void role_battle_formation_fight_power_req::Swap(role_battle_formation_fight_power_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(formation_type_, other->formation_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_formation_fight_power_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_formation_fight_power_req_descriptor_;
  metadata.reflection = role_battle_formation_fight_power_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_formation_fight_power_ack::kProtoidFieldNumber;
const int role_battle_formation_fight_power_ack::kFormationFightPowerBuffAddFieldNumber;
const int role_battle_formation_fight_power_ack::kFormationFightPowerBuffNoFieldNumber;
const int role_battle_formation_fight_power_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

role_battle_formation_fight_power_ack::role_battle_formation_fight_power_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_formation_fight_power_ack::InitAsDefaultInstance() {
}

role_battle_formation_fight_power_ack::role_battle_formation_fight_power_ack(const role_battle_formation_fight_power_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_formation_fight_power_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5428;
  formation_fight_power_buff_add_ = GOOGLE_LONGLONG(0);
  formation_fight_power_buff_no_ = GOOGLE_LONGLONG(0);
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_formation_fight_power_ack::~role_battle_formation_fight_power_ack() {
  SharedDtor();
}

void role_battle_formation_fight_power_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_battle_formation_fight_power_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_formation_fight_power_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_formation_fight_power_ack_descriptor_;
}

const role_battle_formation_fight_power_ack& role_battle_formation_fight_power_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_formation_fight_power_ack* role_battle_formation_fight_power_ack::default_instance_ = NULL;

role_battle_formation_fight_power_ack* role_battle_formation_fight_power_ack::New() const {
  return new role_battle_formation_fight_power_ack;
}

void role_battle_formation_fight_power_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5428;
    formation_fight_power_buff_add_ = GOOGLE_LONGLONG(0);
    formation_fight_power_buff_no_ = GOOGLE_LONGLONG(0);
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_formation_fight_power_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_formation_fight_power_buff_add;
        break;
      }

      // optional int64 formation_fight_power_buff_add = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_fight_power_buff_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &formation_fight_power_buff_add_)));
          set_has_formation_fight_power_buff_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formation_fight_power_buff_no;
        break;
      }

      // optional int64 formation_fight_power_buff_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation_fight_power_buff_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &formation_fight_power_buff_no_)));
          set_has_formation_fight_power_buff_no();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rec_code;
        break;
      }

      // optional sint32 rec_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_formation_fight_power_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int64 formation_fight_power_buff_add = 2;
  if (has_formation_fight_power_buff_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->formation_fight_power_buff_add(), output);
  }

  // optional int64 formation_fight_power_buff_no = 3;
  if (has_formation_fight_power_buff_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->formation_fight_power_buff_no(), output);
  }

  // optional sint32 rec_code = 4;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_formation_fight_power_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int64 formation_fight_power_buff_add = 2;
  if (has_formation_fight_power_buff_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->formation_fight_power_buff_add(), target);
  }

  // optional int64 formation_fight_power_buff_no = 3;
  if (has_formation_fight_power_buff_no()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->formation_fight_power_buff_no(), target);
  }

  // optional sint32 rec_code = 4;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_formation_fight_power_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_formation_fight_power_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int64 formation_fight_power_buff_add = 2;
    if (has_formation_fight_power_buff_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->formation_fight_power_buff_add());
    }

    // optional int64 formation_fight_power_buff_no = 3;
    if (has_formation_fight_power_buff_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->formation_fight_power_buff_no());
    }

    // optional sint32 rec_code = 4;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_formation_fight_power_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_formation_fight_power_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_formation_fight_power_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_formation_fight_power_ack::MergeFrom(const role_battle_formation_fight_power_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_formation_fight_power_buff_add()) {
      set_formation_fight_power_buff_add(from.formation_fight_power_buff_add());
    }
    if (from.has_formation_fight_power_buff_no()) {
      set_formation_fight_power_buff_no(from.formation_fight_power_buff_no());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_formation_fight_power_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_formation_fight_power_ack::CopyFrom(const role_battle_formation_fight_power_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_formation_fight_power_ack::IsInitialized() const {

  return true;
}

void role_battle_formation_fight_power_ack::Swap(role_battle_formation_fight_power_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(formation_fight_power_buff_add_, other->formation_fight_power_buff_add_);
    std::swap(formation_fight_power_buff_no_, other->formation_fight_power_buff_no_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_formation_fight_power_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_formation_fight_power_ack_descriptor_;
  metadata.reflection = role_battle_formation_fight_power_ack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_hero_fight_power_req::kProtoidFieldNumber;
const int role_battle_hero_fight_power_req::kHeroIdFieldNumber;
#endif  // !_MSC_VER

role_battle_hero_fight_power_req::role_battle_hero_fight_power_req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_hero_fight_power_req::InitAsDefaultInstance() {
}

role_battle_hero_fight_power_req::role_battle_hero_fight_power_req(const role_battle_hero_fight_power_req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_hero_fight_power_req::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5429;
  hero_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_hero_fight_power_req::~role_battle_hero_fight_power_req() {
  SharedDtor();
}

void role_battle_hero_fight_power_req::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_battle_hero_fight_power_req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_hero_fight_power_req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_hero_fight_power_req_descriptor_;
}

const role_battle_hero_fight_power_req& role_battle_hero_fight_power_req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_hero_fight_power_req* role_battle_hero_fight_power_req::default_instance_ = NULL;

role_battle_hero_fight_power_req* role_battle_hero_fight_power_req::New() const {
  return new role_battle_hero_fight_power_req;
}

void role_battle_hero_fight_power_req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5429;
    hero_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_hero_fight_power_req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_req_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_id;
        break;
      }

      // optional uint64 hero_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_hero_fight_power_req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_req_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hero_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_hero_fight_power_req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_req_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional uint64 hero_id = 2;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hero_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_hero_fight_power_req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_req_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional uint64 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hero_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_hero_fight_power_req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_hero_fight_power_req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_hero_fight_power_req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_hero_fight_power_req::MergeFrom(const role_battle_hero_fight_power_req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_hero_fight_power_req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_hero_fight_power_req::CopyFrom(const role_battle_hero_fight_power_req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_hero_fight_power_req::IsInitialized() const {

  return true;
}

void role_battle_hero_fight_power_req::Swap(role_battle_hero_fight_power_req* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_id_, other->hero_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_hero_fight_power_req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_hero_fight_power_req_descriptor_;
  metadata.reflection = role_battle_hero_fight_power_req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_battle_hero_fight_power_ack::kProtoidFieldNumber;
const int role_battle_hero_fight_power_ack::kHeroFightPowerFieldNumber;
const int role_battle_hero_fight_power_ack::kRecCodeFieldNumber;
#endif  // !_MSC_VER

role_battle_hero_fight_power_ack::role_battle_hero_fight_power_ack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_battle_hero_fight_power_ack::InitAsDefaultInstance() {
}

role_battle_hero_fight_power_ack::role_battle_hero_fight_power_ack(const role_battle_hero_fight_power_ack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_battle_hero_fight_power_ack::SharedCtor() {
  _cached_size_ = 0;
  protoid_ = 5430;
  hero_fight_power_ = GOOGLE_LONGLONG(0);
  rec_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_battle_hero_fight_power_ack::~role_battle_hero_fight_power_ack() {
  SharedDtor();
}

void role_battle_hero_fight_power_ack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_battle_hero_fight_power_ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_battle_hero_fight_power_ack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_battle_hero_fight_power_ack_descriptor_;
}

const role_battle_hero_fight_power_ack& role_battle_hero_fight_power_ack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cs_5fbattle_2eproto();
  return *default_instance_;
}

role_battle_hero_fight_power_ack* role_battle_hero_fight_power_ack::default_instance_ = NULL;

role_battle_hero_fight_power_ack* role_battle_hero_fight_power_ack::New() const {
  return new role_battle_hero_fight_power_ack;
}

void role_battle_hero_fight_power_ack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protoid_ = 5430;
    hero_fight_power_ = GOOGLE_LONGLONG(0);
    rec_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_battle_hero_fight_power_ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_ack_id];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SProtoSpace::ECSProtoID_IsValid(value)) {
            set_protoid(static_cast< ::SProtoSpace::ECSProtoID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hero_fight_power;
        break;
      }

      // optional int64 hero_fight_power = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_fight_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hero_fight_power_)));
          set_has_hero_fight_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rec_code;
        break;
      }

      // optional sint32 rec_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rec_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rec_code_)));
          set_has_rec_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_battle_hero_fight_power_ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_ack_id];
  if (has_protoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protoid(), output);
  }

  // optional int64 hero_fight_power = 2;
  if (has_hero_fight_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->hero_fight_power(), output);
  }

  // optional sint32 rec_code = 3;
  if (has_rec_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->rec_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_battle_hero_fight_power_ack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_ack_id];
  if (has_protoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->protoid(), target);
  }

  // optional int64 hero_fight_power = 2;
  if (has_hero_fight_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->hero_fight_power(), target);
  }

  // optional sint32 rec_code = 3;
  if (has_rec_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->rec_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_battle_hero_fight_power_ack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_battle_hero_fight_power_ack_id];
    if (has_protoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protoid());
    }

    // optional int64 hero_fight_power = 2;
    if (has_hero_fight_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hero_fight_power());
    }

    // optional sint32 rec_code = 3;
    if (has_rec_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rec_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_battle_hero_fight_power_ack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_battle_hero_fight_power_ack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_battle_hero_fight_power_ack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_battle_hero_fight_power_ack::MergeFrom(const role_battle_hero_fight_power_ack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protoid()) {
      set_protoid(from.protoid());
    }
    if (from.has_hero_fight_power()) {
      set_hero_fight_power(from.hero_fight_power());
    }
    if (from.has_rec_code()) {
      set_rec_code(from.rec_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_battle_hero_fight_power_ack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_battle_hero_fight_power_ack::CopyFrom(const role_battle_hero_fight_power_ack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_battle_hero_fight_power_ack::IsInitialized() const {

  return true;
}

void role_battle_hero_fight_power_ack::Swap(role_battle_hero_fight_power_ack* other) {
  if (other != this) {
    std::swap(protoid_, other->protoid_);
    std::swap(hero_fight_power_, other->hero_fight_power_);
    std::swap(rec_code_, other->rec_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_battle_hero_fight_power_ack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_battle_hero_fight_power_ack_descriptor_;
  metadata.reflection = role_battle_hero_fight_power_ack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

// @@protoc_insertion_point(global_scope)
