// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs_role.proto

#ifndef PROTOBUF_cs_5frole_2eproto__INCLUDED
#define PROTOBUF_cs_5frole_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "cm_roletype.pb.h"
#include "cm_battletype.pb.h"
#include "cm_activitytype.pb.h"
#include "cm_socialtype.pb.h"
#include "cs_protoid.pb.h"
#include "cs_errorcode.pb.h"
// @@protoc_insertion_point(includes)

namespace SProtoSpace {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cs_5frole_2eproto();
void protobuf_AssignDesc_cs_5frole_2eproto();
void protobuf_ShutdownFile_cs_5frole_2eproto();

class account_check_in_req;
class account_check_in_ack;
class sys_packet_seq_id_ntf;
class sys_packet_seq_id_req;
class sys_packet_seq_id_ack;
class uplink_packet_seq_error_ntf;
class client_secret_key_req;
class client_secret_key_ack;
class client_secret_start_req;
class client_secret_start_ack;
class account_role_data_ack;
class create_role_of_game;
class create_role_of_game_ack;
class switch_scene_req;
class enter_game_req;
class enter_game_ack;
class system_unlock_req;
class system_unlock_ack;
class system_unlock_ntf;
class role_info_ntf;
class item_info;
class update_role_info_ntf;
class role_common_base_ntf;
class soul_update_ntf;
class soul_raise_req;
class soul_raise_ack;
class soul_bind_req;
class soul_bind_ack;
class soul_unbind_req;
class soul_unbind_ack;
class soul_lock_req;
class soul_lock_ack;
class soul_unlock_req;
class soul_unlock_ack;
class soul_sell_req;
class soul_sell_ack;
class item_packet_req;
class item_packet_ack;
class item_use_req;
class item_use_ack;
class item_sold_req;
class item_sold_ack;
class bag_expand_req;
class bag_expand_ack;
class bag_capacity_not_enough_ntf;
class hero_list_data_ntf;
class add_hero_ntf;
class remove_hero_ntf;
class hero_info_change_ntf;
class hero_upgrade_req;
class hero_upgrade_ack;
class hero_upstar_req;
class hero_upstar_ack;
class hero_awaken_req;
class hero_awaken_ack;
class hero_lock_req;
class hero_lock_ack;
class hero_compose_req;
class hero_compose_ack;
class hero_skin_active_req;
class hero_skin_active_ack;
class hero_change_name_req;
class hero_change_name_ack;
class hero_level_up_req;
class hero_level_up_ack;
class hero_quality_up_req;
class hero_quality_up_ack;
class item_combine_req;
class item_combine_ack;
class hero_star_up_req;
class hero_star_up_ack;
class hero_skill_up_req;
class hero_skill_up_ack;
class hero_equip_req;
class hero_equip_ack;
class hero_unequip_req;
class hero_unequip_ack;
class hero_equip_level_up_req;
class hero_equip_level_up_ack;
class hero_equip_onekey_level_up_req;
class hero_equip_onekey_level_up_ack;
class hero_equip_level_info;
class hero_equip_all_level_up_req;
class hero_equip_all_level_up_ack;
class hero_equip_onekey_req;
class hero_equip_onekey_ack;
class hero_unequip_onekey_req;
class hero_unequip_onekey_ack;
class gm_operation_req;
class gm_operation_ack;
class leave_game_req;
class kick_game_ntf;
class beat_heart_ntf;
class sync_time_ntf;
class client_heart_beat_req;
class client_heart_beat_ack;
class role_player_info_ntf;
class role_player_info_update_ntf;
class role_fight_score_ntf;
class role_player_change_req;
class role_player_change_ack;
class role_player_active_skin_req;
class role_player_active_skin_ack;
class role_player_buy_skin_req;
class role_player_buy_skin_ack;
class role_player_wear_skin_req;
class role_player_wear_skin_ack;
class role_player_skillup_ntf;
class role_buy_req;
class role_buy_ack;
class role_show_base_info_req;
class role_show_base_info_ack;
class role_show_get_like_req;
class role_show_get_like_ack;
class role_show_player_base_req;
class role_show_player_base_ack;
class role_show_like_req;
class role_show_like_ack;
class role_show_change_name_req;
class role_show_change_name_ack;
class role_show_change_position_req;
class role_show_change_position_ack;
class role_show_change_signature_req;
class role_show_change_signature_ack;
class role_show_change_age_req;
class role_show_change_age_ack;
class role_show_change_starsign_req;
class role_show_change_starsign_ack;
class role_show_change_birthday_req;
class role_show_change_birthday_ack;
class role_show_change_labels_req;
class role_show_change_labels_ack;
class role_show_get_emotion_req;
class role_show_get_emotion_ack;
class role_show_write_emotion_req;
class role_show_write_emotion_ack;
class role_show_like_emotion_req;
class role_show_like_emotion_ack;
class role_show_comment_emotion_req;
class role_show_comment_emotion_ack;
class role_show_remove_emotion_req;
class role_show_remove_emotion_ack;
class role_show_remove_comment_req;
class role_show_remove_comment_ack;
class role_show_set_hero_info;
class role_show_set_hero_req;
class role_show_set_hero_ack;
class role_show_set_border_req;
class role_show_set_border_ack;
class role_show_comment_req;
class role_show_comment_ack;
class role_show_delete_comment_req;
class role_show_delete_comment_ack;
class role_show_get_comment_req;
class role_show_get_comment_ack;
class discover_info_ntf;
class discover_show_boss_ntf;
class enter_discover_req;
class enter_discover_ack;
class exit_discover_req;
class exit_discover_ack;
class discovery_mopping_req;
class discovery_mopping_ack_rewards;
class discovery_mopping_ack_moppping;
class discovery_mopping_ack;
class discovery_buy_times_req;
class discovery_buy_times_ack;
class discovery_get_section_star_req;
class discovery_get_section_star_ack_rewards;
class discovery_get_section_star_ack;
class royal_base_info_ntf;
class royal_all_info_req;
class royal_all_info_ack;
class royal_refresh_req;
class royal_refresh_ack;
class royal_visit_req;
class royal_visit_ack;
class royal_reward_ntf;
class all_royals_ntf;
class royal_pro_update_ntf;
class royal_task_reward_draw_ntf;
class game_update_royal_task_ntf;
class game_royal_intimacy_reward_req;
class game_royal_intimacy_reward_ack;
class game_royal_draw_reward_req;
class game_royal_draw_reward_ack;
class game_royal_all_data_req;
class game_royal_all_data_ack;
class game_royal_refresh_data_req;
class game_royal_refresh_data_ack;
class game_royal_qingan_req;
class game_royal_qingan_ack;
class game_royal_unlock_req;
class game_royal_unlock_ack;
class game_branch_task_fin_req;
class game_branch_task_fin_ack;
class game_royal_chat_req;
class game_royal_chat_ack;
class game_royal_get_gifts_req;
class game_royal_get_gifts_ack;
class game_royal_give_gift_req;
class game_royal_give_gift_ack;
class game_royal_enter_scene_req;
class game_royal_enter_scene_ack;
class game_royal_event_fin_req;
class game_royal_event_fin_ack;
class get_offical_data_req;
class get_offical_data_ack;
class offical_data_ntf;
class update_chest_ntf;
class get_role_chest_req;
class get_role_chest_ack;
class create_team_req;
class create_team_ack;
class enter_team_req;
class enter_team_ack;
class exit_team_req;
class exit_team_ack;
class update_team_ntf;
class ready_team_req;
class ready_team_ack;
class update_team_req;
class update_team_ack;
class get_teams_req;
class get_teams_ack;
class invite_roles_enter_team_req;
class invite_roles_enter_team_ack;
class invite_enter_team_ntf;
class get_offical_rank_req;
class get_offical_rank_ack;
class get_offical_rank_info_req;
class get_offical_rank_info_ack;
class get_offical_formation_req;
class get_offical_formation_ack;
class challenge_offical_rank_req;
class challenge_offical_rank_ack;
class offical_apply_battle_result_req;
class offical_apply_battle_result_ack;
class role_plot_upload_req;
class role_plot_upload_ack;
class role_plot_get_req;
class role_plot_get_ack;
class plot_end_req;
class plot_end_ack;
class plot_chapter_end_req;
class plot_chapter_end_ack;
class plot_choose_branch_req;
class plot_choose_branch_ack;
class plot_trigger_action_req;
class plot_trigger_action_ack;
class all_event_info;
class client_event_msg_info;
class event_msg_get_all_req;
class event_msg_get_all_ack;
class event_msg_read_req;
class event_msg_read_ack;
class event_msg_del_req;
class event_msg_del_ack;
class event_msg_nty;
class event_msg_get_by_id_req;
class event_msg_get_by_id_ack;
class get_rank_data_req;
class get_rank_data_ack;
class role_uint_achievement;
class role_achievements_ntf_type_list;
class role_achievements_ntf;
class role_achievement_get_rewards_req;
class role_achievement_get_rewards_ack;
class role_achievement_point_rewards_req;
class role_achievement_point_rewards_ack;
class flower_bag_nty;
class flower_bag_all_req;
class flower_bag_all_ack;
class flower_bag_all_nty;
class flower_send_req;
class flower_send_ack;
class flower_receive_nty;
class role_draw_card_info;
class role_draw_card_reward_item;
class role_draw_card_rewards;
class role_draw_card_info_req;
class role_draw_card_info_ack;
class role_draw_card_req;
class role_draw_card_ack;
class role_draw_card_ssr_req;
class role_draw_card_ssr_ack_one;
class role_draw_card_ssr_ack;
class role_talent_activate_req;
class role_talent_activate_ack;
class all_role_talents_activate_req;
class all_role_talents_activate_ack;
class switch_role_skill_req;
class switch_role_skill_ack;
class talisman_use_req;
class talisman_use_ack;
class talisman_un_use_req;
class talisman_un_use_ack;
class talisman_lv_up_req;
class talisman_lv_up_ack;
class talisman_break_req;
class talisman_break_ack;
class talisman_change_ntf;
class red_pt_req;
class red_pt_ack;
class red_pt_ntf;
class get_wearing_fashions_req;
class get_wearing_fashions_ack;
class get_all_fashions_req;
class get_all_fashions_ack;
class wear_fashions_req;
class wear_fashions_ack;
class get_other_role_fashion_cs_req;
class get_other_role_fashion_cs_ack;
class verify_config_version_req;
class verify_config_version_ack;
class debug_hero_attr_ntf;
class waiting_in_line_ntf;
class finish_in_line_ntf;
class exit_waiting_in_line_req;
class exit_waiting_in_line_ack;
class user_event_track_ntf;
class role_guide_info;
class role_guide_ntf;
class role_guide_req;
class role_guide_ack;
class onekey_skip_guide_req;
class onekey_skip_guide_ack;
class plot_little_game_set_req;
class plot_little_game_set_ack;
class plot_little_game_get_req;
class plot_little_game_get_ack;
class pet_get_req;
class pet_get_ack;
class pet_change_name_req;
class pet_change_name_ack;
class pet_do_action_req;
class pet_do_action_ack;
class pet_send_out_req;
class pet_send_out_ack;
class pet_get_out_award_req;
class pet_get_out_award_ack;
class pet_feed_food_req;
class pet_feed_food_ack;
class pet_set_show_pet_req;
class pet_set_show_pet_ack;
class pet_out_back_req;
class pet_out_back_ack;

enum eAchievementState {
  ACHIEVEMENT_NONE = 0,
  ACHIEVEMENT_LOCKED = 1,
  ACHIEVEMENT_IN_PROGRESS = 2,
  ACHIEVEMENT_COULD_GET_AWARD = 3,
  ACHIEVEMENT_ALREADY_GET_AWARD = 4,
  ACHIEVEMENT_UNAVAILABLE = 5
};
bool eAchievementState_IsValid(int value);
const eAchievementState eAchievementState_MIN = ACHIEVEMENT_NONE;
const eAchievementState eAchievementState_MAX = ACHIEVEMENT_UNAVAILABLE;
const int eAchievementState_ARRAYSIZE = eAchievementState_MAX + 1;

const ::google::protobuf::EnumDescriptor* eAchievementState_descriptor();
inline const ::std::string& eAchievementState_Name(eAchievementState value) {
  return ::google::protobuf::internal::NameOfEnum(
    eAchievementState_descriptor(), value);
}
inline bool eAchievementState_Parse(
    const ::std::string& name, eAchievementState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eAchievementState>(
    eAchievementState_descriptor(), name, value);
}
enum eDrawCardCoinType {
  DRAW_CARD_FREE = 0,
  DRAW_CARD_COIN_1 = 1,
  DRAW_CARD_COIN_2 = 2
};
bool eDrawCardCoinType_IsValid(int value);
const eDrawCardCoinType eDrawCardCoinType_MIN = DRAW_CARD_FREE;
const eDrawCardCoinType eDrawCardCoinType_MAX = DRAW_CARD_COIN_2;
const int eDrawCardCoinType_ARRAYSIZE = eDrawCardCoinType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eDrawCardCoinType_descriptor();
inline const ::std::string& eDrawCardCoinType_Name(eDrawCardCoinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eDrawCardCoinType_descriptor(), value);
}
inline bool eDrawCardCoinType_Parse(
    const ::std::string& name, eDrawCardCoinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eDrawCardCoinType>(
    eDrawCardCoinType_descriptor(), name, value);
}
enum EUserEventTrackType {
  NOTHING = 0,
  TEST = 1
};
bool EUserEventTrackType_IsValid(int value);
const EUserEventTrackType EUserEventTrackType_MIN = NOTHING;
const EUserEventTrackType EUserEventTrackType_MAX = TEST;
const int EUserEventTrackType_ARRAYSIZE = EUserEventTrackType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserEventTrackType_descriptor();
inline const ::std::string& EUserEventTrackType_Name(EUserEventTrackType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserEventTrackType_descriptor(), value);
}
inline bool EUserEventTrackType_Parse(
    const ::std::string& name, EUserEventTrackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserEventTrackType>(
    EUserEventTrackType_descriptor(), name, value);
}
enum EGUIDE_OPENCONDI_TYPE {
  EGUIDE_OPENCONDI_TP_FIN_GUIDE = 1,
  EGUIDE_OPENCONDI_TP_FIN_TASK = 2,
  EGUIDE_OPENCONDI_TP_UNLOCK_MODULE = 3,
  EGUIDE_OPENCONDI_TP_FIN_PLOT = 4,
  EGUIDE_OPENCONDI_TP_RECV_TASK = 5,
  EGUIDE_OPENCONDI_TP_ITEM_NUM = 6,
  EGUIDE_OPENCONDI_TP_HERO_LEVEL = 7
};
bool EGUIDE_OPENCONDI_TYPE_IsValid(int value);
const EGUIDE_OPENCONDI_TYPE EGUIDE_OPENCONDI_TYPE_MIN = EGUIDE_OPENCONDI_TP_FIN_GUIDE;
const EGUIDE_OPENCONDI_TYPE EGUIDE_OPENCONDI_TYPE_MAX = EGUIDE_OPENCONDI_TP_HERO_LEVEL;
const int EGUIDE_OPENCONDI_TYPE_ARRAYSIZE = EGUIDE_OPENCONDI_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGUIDE_OPENCONDI_TYPE_descriptor();
inline const ::std::string& EGUIDE_OPENCONDI_TYPE_Name(EGUIDE_OPENCONDI_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGUIDE_OPENCONDI_TYPE_descriptor(), value);
}
inline bool EGUIDE_OPENCONDI_TYPE_Parse(
    const ::std::string& name, EGUIDE_OPENCONDI_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGUIDE_OPENCONDI_TYPE>(
    EGUIDE_OPENCONDI_TYPE_descriptor(), name, value);
}
// ===================================================================

class account_check_in_req : public ::google::protobuf::Message {
 public:
  account_check_in_req();
  virtual ~account_check_in_req();

  account_check_in_req(const account_check_in_req& from);

  inline account_check_in_req& operator=(const account_check_in_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_check_in_req& default_instance();

  void Swap(account_check_in_req* other);

  // implements Message ----------------------------------------------

  account_check_in_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account_check_in_req& from);
  void MergeFrom(const account_check_in_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // optional uint32 tempid = 4;
  inline bool has_tempid() const;
  inline void clear_tempid();
  static const int kTempidFieldNumber = 4;
  inline ::google::protobuf::uint32 tempid() const;
  inline void set_tempid(::google::protobuf::uint32 value);

  // optional uint32 areaid = 5;
  inline bool has_areaid() const;
  inline void clear_areaid();
  static const int kAreaidFieldNumber = 5;
  inline ::google::protobuf::uint32 areaid() const;
  inline void set_areaid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.account_check_in_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_tempid();
  inline void clear_has_tempid();
  inline void set_has_areaid();
  inline void clear_has_areaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int protoid_;
  ::google::protobuf::uint32 tempid_;
  ::std::string* token_;
  ::google::protobuf::uint32 areaid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static account_check_in_req* default_instance_;
};
// -------------------------------------------------------------------

class account_check_in_ack : public ::google::protobuf::Message {
 public:
  account_check_in_ack();
  virtual ~account_check_in_ack();

  account_check_in_ack(const account_check_in_ack& from);

  inline account_check_in_ack& operator=(const account_check_in_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_check_in_ack& default_instance();

  void Swap(account_check_in_ack* other);

  // implements Message ----------------------------------------------

  account_check_in_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account_check_in_ack& from);
  void MergeFrom(const account_check_in_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.account_check_in_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static account_check_in_ack* default_instance_;
};
// -------------------------------------------------------------------

class sys_packet_seq_id_ntf : public ::google::protobuf::Message {
 public:
  sys_packet_seq_id_ntf();
  virtual ~sys_packet_seq_id_ntf();

  sys_packet_seq_id_ntf(const sys_packet_seq_id_ntf& from);

  inline sys_packet_seq_id_ntf& operator=(const sys_packet_seq_id_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sys_packet_seq_id_ntf& default_instance();

  void Swap(sys_packet_seq_id_ntf* other);

  // implements Message ----------------------------------------------

  sys_packet_seq_id_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sys_packet_seq_id_ntf& from);
  void MergeFrom(const sys_packet_seq_id_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.sys_packet_seq_id_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static sys_packet_seq_id_ntf* default_instance_;
};
// -------------------------------------------------------------------

class sys_packet_seq_id_req : public ::google::protobuf::Message {
 public:
  sys_packet_seq_id_req();
  virtual ~sys_packet_seq_id_req();

  sys_packet_seq_id_req(const sys_packet_seq_id_req& from);

  inline sys_packet_seq_id_req& operator=(const sys_packet_seq_id_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sys_packet_seq_id_req& default_instance();

  void Swap(sys_packet_seq_id_req* other);

  // implements Message ----------------------------------------------

  sys_packet_seq_id_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sys_packet_seq_id_req& from);
  void MergeFrom(const sys_packet_seq_id_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 downlink_seq_id = 2;
  inline bool has_downlink_seq_id() const;
  inline void clear_downlink_seq_id();
  static const int kDownlinkSeqIdFieldNumber = 2;
  inline ::google::protobuf::uint32 downlink_seq_id() const;
  inline void set_downlink_seq_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.sys_packet_seq_id_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_downlink_seq_id();
  inline void clear_has_downlink_seq_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 downlink_seq_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static sys_packet_seq_id_req* default_instance_;
};
// -------------------------------------------------------------------

class sys_packet_seq_id_ack : public ::google::protobuf::Message {
 public:
  sys_packet_seq_id_ack();
  virtual ~sys_packet_seq_id_ack();

  sys_packet_seq_id_ack(const sys_packet_seq_id_ack& from);

  inline sys_packet_seq_id_ack& operator=(const sys_packet_seq_id_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sys_packet_seq_id_ack& default_instance();

  void Swap(sys_packet_seq_id_ack* other);

  // implements Message ----------------------------------------------

  sys_packet_seq_id_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sys_packet_seq_id_ack& from);
  void MergeFrom(const sys_packet_seq_id_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 uplink_seq_id = 2;
  inline bool has_uplink_seq_id() const;
  inline void clear_uplink_seq_id();
  static const int kUplinkSeqIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uplink_seq_id() const;
  inline void set_uplink_seq_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.sys_packet_seq_id_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_uplink_seq_id();
  inline void clear_has_uplink_seq_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 uplink_seq_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static sys_packet_seq_id_ack* default_instance_;
};
// -------------------------------------------------------------------

class uplink_packet_seq_error_ntf : public ::google::protobuf::Message {
 public:
  uplink_packet_seq_error_ntf();
  virtual ~uplink_packet_seq_error_ntf();

  uplink_packet_seq_error_ntf(const uplink_packet_seq_error_ntf& from);

  inline uplink_packet_seq_error_ntf& operator=(const uplink_packet_seq_error_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const uplink_packet_seq_error_ntf& default_instance();

  void Swap(uplink_packet_seq_error_ntf* other);

  // implements Message ----------------------------------------------

  uplink_packet_seq_error_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uplink_packet_seq_error_ntf& from);
  void MergeFrom(const uplink_packet_seq_error_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_error_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 uplink_seq_id = 2;
  inline bool has_uplink_seq_id() const;
  inline void clear_uplink_seq_id();
  static const int kUplinkSeqIdFieldNumber = 2;
  inline ::google::protobuf::uint32 uplink_seq_id() const;
  inline void set_uplink_seq_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.uplink_packet_seq_error_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_uplink_seq_id();
  inline void clear_has_uplink_seq_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 uplink_seq_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static uplink_packet_seq_error_ntf* default_instance_;
};
// -------------------------------------------------------------------

class client_secret_key_req : public ::google::protobuf::Message {
 public:
  client_secret_key_req();
  virtual ~client_secret_key_req();

  client_secret_key_req(const client_secret_key_req& from);

  inline client_secret_key_req& operator=(const client_secret_key_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_secret_key_req& default_instance();

  void Swap(client_secret_key_req* other);

  // implements Message ----------------------------------------------

  client_secret_key_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_secret_key_req& from);
  void MergeFrom(const client_secret_key_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string public_key = 2;
  inline bool has_public_key() const;
  inline void clear_public_key();
  static const int kPublicKeyFieldNumber = 2;
  inline const ::std::string& public_key() const;
  inline void set_public_key(const ::std::string& value);
  inline void set_public_key(const char* value);
  inline void set_public_key(const char* value, size_t size);
  inline ::std::string* mutable_public_key();
  inline ::std::string* release_public_key();
  inline void set_allocated_public_key(::std::string* public_key);

  // optional string seed = 3;
  inline bool has_seed() const;
  inline void clear_seed();
  static const int kSeedFieldNumber = 3;
  inline const ::std::string& seed() const;
  inline void set_seed(const ::std::string& value);
  inline void set_seed(const char* value);
  inline void set_seed(const char* value, size_t size);
  inline ::std::string* mutable_seed();
  inline ::std::string* release_seed();
  inline void set_allocated_seed(::std::string* seed);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_secret_key_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_public_key();
  inline void clear_has_public_key();
  inline void set_has_seed();
  inline void clear_has_seed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* public_key_;
  ::std::string* seed_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_secret_key_req* default_instance_;
};
// -------------------------------------------------------------------

class client_secret_key_ack : public ::google::protobuf::Message {
 public:
  client_secret_key_ack();
  virtual ~client_secret_key_ack();

  client_secret_key_ack(const client_secret_key_ack& from);

  inline client_secret_key_ack& operator=(const client_secret_key_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_secret_key_ack& default_instance();

  void Swap(client_secret_key_ack* other);

  // implements Message ----------------------------------------------

  client_secret_key_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_secret_key_ack& from);
  void MergeFrom(const client_secret_key_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string secret_key = 2;
  inline bool has_secret_key() const;
  inline void clear_secret_key();
  static const int kSecretKeyFieldNumber = 2;
  inline const ::std::string& secret_key() const;
  inline void set_secret_key(const ::std::string& value);
  inline void set_secret_key(const char* value);
  inline void set_secret_key(const char* value, size_t size);
  inline ::std::string* mutable_secret_key();
  inline ::std::string* release_secret_key();
  inline void set_allocated_secret_key(::std::string* secret_key);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_secret_key_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_secret_key();
  inline void clear_has_secret_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* secret_key_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_secret_key_ack* default_instance_;
};
// -------------------------------------------------------------------

class client_secret_start_req : public ::google::protobuf::Message {
 public:
  client_secret_start_req();
  virtual ~client_secret_start_req();

  client_secret_start_req(const client_secret_start_req& from);

  inline client_secret_start_req& operator=(const client_secret_start_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_secret_start_req& default_instance();

  void Swap(client_secret_start_req* other);

  // implements Message ----------------------------------------------

  client_secret_start_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_secret_start_req& from);
  void MergeFrom(const client_secret_start_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_secret_start_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_secret_start_req* default_instance_;
};
// -------------------------------------------------------------------

class client_secret_start_ack : public ::google::protobuf::Message {
 public:
  client_secret_start_ack();
  virtual ~client_secret_start_ack();

  client_secret_start_ack(const client_secret_start_ack& from);

  inline client_secret_start_ack& operator=(const client_secret_start_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_secret_start_ack& default_instance();

  void Swap(client_secret_start_ack* other);

  // implements Message ----------------------------------------------

  client_secret_start_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_secret_start_ack& from);
  void MergeFrom(const client_secret_start_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_secret_start_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_secret_start_ack* default_instance_;
};
// -------------------------------------------------------------------

class account_role_data_ack : public ::google::protobuf::Message {
 public:
  account_role_data_ack();
  virtual ~account_role_data_ack();

  account_role_data_ack(const account_role_data_ack& from);

  inline account_role_data_ack& operator=(const account_role_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const account_role_data_ack& default_instance();

  void Swap(account_role_data_ack* other);

  // implements Message ----------------------------------------------

  account_role_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const account_role_data_ack& from);
  void MergeFrom(const account_role_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_role_data_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .SProtoSpace.account_role_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::account_role_data& data() const;
  inline ::SProtoSpace::account_role_data* mutable_data();
  inline ::SProtoSpace::account_role_data* release_data();
  inline void set_allocated_data(::SProtoSpace::account_role_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.account_role_data_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::SProtoSpace::account_role_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static account_role_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class create_role_of_game : public ::google::protobuf::Message {
 public:
  create_role_of_game();
  virtual ~create_role_of_game();

  create_role_of_game(const create_role_of_game& from);

  inline create_role_of_game& operator=(const create_role_of_game& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_role_of_game& default_instance();

  void Swap(create_role_of_game* other);

  // implements Message ----------------------------------------------

  create_role_of_game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_role_of_game& from);
  void MergeFrom(const create_role_of_game& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional string rolename = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional int32 rolesex = 4;
  inline bool has_rolesex() const;
  inline void clear_rolesex();
  static const int kRolesexFieldNumber = 4;
  inline ::google::protobuf::int32 rolesex() const;
  inline void set_rolesex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.create_role_of_game)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_rolesex();
  inline void clear_has_rolesex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  int protoid_;
  ::google::protobuf::int32 rolesex_;
  ::std::string* rolename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static create_role_of_game* default_instance_;
};
// -------------------------------------------------------------------

class create_role_of_game_ack : public ::google::protobuf::Message {
 public:
  create_role_of_game_ack();
  virtual ~create_role_of_game_ack();

  create_role_of_game_ack(const create_role_of_game_ack& from);

  inline create_role_of_game_ack& operator=(const create_role_of_game_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_role_of_game_ack& default_instance();

  void Swap(create_role_of_game_ack* other);

  // implements Message ----------------------------------------------

  create_role_of_game_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_role_of_game_ack& from);
  void MergeFrom(const create_role_of_game_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 create_ret = 2;
  inline bool has_create_ret() const;
  inline void clear_create_ret();
  static const int kCreateRetFieldNumber = 2;
  inline ::google::protobuf::int32 create_ret() const;
  inline void set_create_ret(::google::protobuf::int32 value);

  // optional string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional .SProtoSpace.account_role_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::account_role_data& data() const;
  inline ::SProtoSpace::account_role_data* mutable_data();
  inline ::SProtoSpace::account_role_data* release_data();
  inline void set_allocated_data(::SProtoSpace::account_role_data* data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.create_role_of_game_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_create_ret();
  inline void clear_has_create_ret();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 create_ret_;
  ::std::string* account_;
  ::SProtoSpace::account_role_data* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static create_role_of_game_ack* default_instance_;
};
// -------------------------------------------------------------------

class switch_scene_req : public ::google::protobuf::Message {
 public:
  switch_scene_req();
  virtual ~switch_scene_req();

  switch_scene_req(const switch_scene_req& from);

  inline switch_scene_req& operator=(const switch_scene_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const switch_scene_req& default_instance();

  void Swap(switch_scene_req* other);

  // implements Message ----------------------------------------------

  switch_scene_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const switch_scene_req& from);
  void MergeFrom(const switch_scene_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_scene_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 scene_type = 3;
  inline bool has_scene_type() const;
  inline void clear_scene_type();
  static const int kSceneTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 scene_type() const;
  inline void set_scene_type(::google::protobuf::uint32 value);

  // optional uint64 game_id = 4;
  inline bool has_game_id() const;
  inline void clear_game_id();
  static const int kGameIdFieldNumber = 4;
  inline ::google::protobuf::uint64 game_id() const;
  inline void set_game_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.switch_scene_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_scene_type();
  inline void clear_has_scene_type();
  inline void set_has_game_id();
  inline void clear_has_game_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint64 game_id_;
  ::google::protobuf::uint32 scene_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static switch_scene_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_game_req : public ::google::protobuf::Message {
 public:
  enter_game_req();
  virtual ~enter_game_req();

  enter_game_req(const enter_game_req& from);

  inline enter_game_req& operator=(const enter_game_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_game_req& default_instance();

  void Swap(enter_game_req* other);

  // implements Message ----------------------------------------------

  enter_game_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_game_req& from);
  void MergeFrom(const enter_game_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::uint64 roleid() const;
  inline void set_roleid(::google::protobuf::uint64 value);

  // optional uint32 reason = 3;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 3;
  inline ::google::protobuf::uint32 reason() const;
  inline void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_game_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 roleid_;
  int protoid_;
  ::google::protobuf::uint32 reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static enter_game_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_game_ack : public ::google::protobuf::Message {
 public:
  enter_game_ack();
  virtual ~enter_game_ack();

  enter_game_ack(const enter_game_ack& from);

  inline enter_game_ack& operator=(const enter_game_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_game_ack& default_instance();

  void Swap(enter_game_ack* other);

  // implements Message ----------------------------------------------

  enter_game_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_game_ack& from);
  void MergeFrom(const enter_game_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_game_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static enter_game_ack* default_instance_;
};
// -------------------------------------------------------------------

class system_unlock_req : public ::google::protobuf::Message {
 public:
  system_unlock_req();
  virtual ~system_unlock_req();

  system_unlock_req(const system_unlock_req& from);

  inline system_unlock_req& operator=(const system_unlock_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_unlock_req& default_instance();

  void Swap(system_unlock_req* other);

  // implements Message ----------------------------------------------

  system_unlock_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const system_unlock_req& from);
  void MergeFrom(const system_unlock_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.system_unlock_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static system_unlock_req* default_instance_;
};
// -------------------------------------------------------------------

class system_unlock_ack : public ::google::protobuf::Message {
 public:
  system_unlock_ack();
  virtual ~system_unlock_ack();

  system_unlock_ack(const system_unlock_ack& from);

  inline system_unlock_ack& operator=(const system_unlock_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_unlock_ack& default_instance();

  void Swap(system_unlock_ack* other);

  // implements Message ----------------------------------------------

  system_unlock_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const system_unlock_ack& from);
  void MergeFrom(const system_unlock_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 lock_module_ids = 2;
  inline int lock_module_ids_size() const;
  inline void clear_lock_module_ids();
  static const int kLockModuleIdsFieldNumber = 2;
  inline ::google::protobuf::int32 lock_module_ids(int index) const;
  inline void set_lock_module_ids(int index, ::google::protobuf::int32 value);
  inline void add_lock_module_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lock_module_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lock_module_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.system_unlock_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lock_module_ids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static system_unlock_ack* default_instance_;
};
// -------------------------------------------------------------------

class system_unlock_ntf : public ::google::protobuf::Message {
 public:
  system_unlock_ntf();
  virtual ~system_unlock_ntf();

  system_unlock_ntf(const system_unlock_ntf& from);

  inline system_unlock_ntf& operator=(const system_unlock_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_unlock_ntf& default_instance();

  void Swap(system_unlock_ntf* other);

  // implements Message ----------------------------------------------

  system_unlock_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const system_unlock_ntf& from);
  void MergeFrom(const system_unlock_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 unlock_module_ids = 2;
  inline int unlock_module_ids_size() const;
  inline void clear_unlock_module_ids();
  static const int kUnlockModuleIdsFieldNumber = 2;
  inline ::google::protobuf::int32 unlock_module_ids(int index) const;
  inline void set_unlock_module_ids(int index, ::google::protobuf::int32 value);
  inline void add_unlock_module_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      unlock_module_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_unlock_module_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.system_unlock_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > unlock_module_ids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static system_unlock_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_info_ntf : public ::google::protobuf::Message {
 public:
  role_info_ntf();
  virtual ~role_info_ntf();

  role_info_ntf(const role_info_ntf& from);

  inline role_info_ntf& operator=(const role_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_info_ntf& default_instance();

  void Swap(role_info_ntf* other);

  // implements Message ----------------------------------------------

  role_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_info_ntf& from);
  void MergeFrom(const role_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string rolename = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // repeated .SProtoSpace.soul_info soul_s = 4;
  inline int soul_s_size() const;
  inline void clear_soul_s();
  static const int kSoulSFieldNumber = 4;
  inline const ::SProtoSpace::soul_info& soul_s(int index) const;
  inline ::SProtoSpace::soul_info* mutable_soul_s(int index);
  inline ::SProtoSpace::soul_info* add_soul_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
      soul_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
      mutable_soul_s();

  // repeated .SProtoSpace.item_info item_s = 5;
  inline int item_s_size() const;
  inline void clear_item_s();
  static const int kItemSFieldNumber = 5;
  inline const ::SProtoSpace::item_info& item_s(int index) const;
  inline ::SProtoSpace::item_info* mutable_item_s(int index);
  inline ::SProtoSpace::item_info* add_item_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
      item_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
      mutable_item_s();

  // optional int32 lv = 7;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 7;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 sex = 9;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 gold = 10;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 10;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 jade = 11;
  inline bool has_jade() const;
  inline void clear_jade();
  static const int kJadeFieldNumber = 11;
  inline ::google::protobuf::int32 jade() const;
  inline void set_jade(::google::protobuf::int32 value);

  // optional int32 power = 12;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 12;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 buy_power_times = 13;
  inline bool has_buy_power_times() const;
  inline void clear_buy_power_times();
  static const int kBuyPowerTimesFieldNumber = 13;
  inline ::google::protobuf::int32 buy_power_times() const;
  inline void set_buy_power_times(::google::protobuf::int32 value);

  // optional int32 merit = 14;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 14;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // optional int32 grade = 15;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 15;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 tender = 16;
  inline bool has_tender() const;
  inline void clear_tender();
  static const int kTenderFieldNumber = 16;
  inline ::google::protobuf::int32 tender() const;
  inline void set_tender(::google::protobuf::int32 value);

  // optional int32 treason = 17;
  inline bool has_treason() const;
  inline void clear_treason();
  static const int kTreasonFieldNumber = 17;
  inline ::google::protobuf::int32 treason() const;
  inline void set_treason(::google::protobuf::int32 value);

  // optional int32 wise = 18;
  inline bool has_wise() const;
  inline void clear_wise();
  static const int kWiseFieldNumber = 18;
  inline ::google::protobuf::int32 wise() const;
  inline void set_wise(::google::protobuf::int32 value);

  // optional int32 adorkable = 19;
  inline bool has_adorkable() const;
  inline void clear_adorkable();
  static const int kAdorkableFieldNumber = 19;
  inline ::google::protobuf::int32 adorkable() const;
  inline void set_adorkable(::google::protobuf::int32 value);

  // optional int32 good = 20;
  inline bool has_good() const;
  inline void clear_good();
  static const int kGoodFieldNumber = 20;
  inline ::google::protobuf::int32 good() const;
  inline void set_good(::google::protobuf::int32 value);

  // optional int32 scheming = 21;
  inline bool has_scheming() const;
  inline void clear_scheming();
  static const int kSchemingFieldNumber = 21;
  inline ::google::protobuf::int32 scheming() const;
  inline void set_scheming(::google::protobuf::int32 value);

  // optional uint32 bag_capacity = 22;
  inline bool has_bag_capacity() const;
  inline void clear_bag_capacity();
  static const int kBagCapacityFieldNumber = 22;
  inline ::google::protobuf::uint32 bag_capacity() const;
  inline void set_bag_capacity(::google::protobuf::uint32 value);

  // optional int32 task_activity = 23;
  inline bool has_task_activity() const;
  inline void clear_task_activity();
  static const int kTaskActivityFieldNumber = 23;
  inline ::google::protobuf::int32 task_activity() const;
  inline void set_task_activity(::google::protobuf::int32 value);

  // optional bool offical_salary = 24;
  inline bool has_offical_salary() const;
  inline void clear_offical_salary();
  static const int kOfficalSalaryFieldNumber = 24;
  inline bool offical_salary() const;
  inline void set_offical_salary(bool value);

  // optional uint32 first_offical_award = 25;
  inline bool has_first_offical_award() const;
  inline void clear_first_offical_award();
  static const int kFirstOfficalAwardFieldNumber = 25;
  inline ::google::protobuf::uint32 first_offical_award() const;
  inline void set_first_offical_award(::google::protobuf::uint32 value);

  // optional int32 skill_point = 26;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 26;
  inline ::google::protobuf::int32 skill_point() const;
  inline void set_skill_point(::google::protobuf::int32 value);

  // optional uint32 wine = 27;
  inline bool has_wine() const;
  inline void clear_wine();
  static const int kWineFieldNumber = 27;
  inline ::google::protobuf::uint32 wine() const;
  inline void set_wine(::google::protobuf::uint32 value);

  // optional uint32 wine_cup = 28;
  inline bool has_wine_cup() const;
  inline void clear_wine_cup();
  static const int kWineCupFieldNumber = 28;
  inline ::google::protobuf::uint32 wine_cup() const;
  inline void set_wine_cup(::google::protobuf::uint32 value);

  // optional int32 daily_fortune = 29;
  inline bool has_daily_fortune() const;
  inline void clear_daily_fortune();
  static const int kDailyFortuneFieldNumber = 29;
  inline ::google::protobuf::int32 daily_fortune() const;
  inline void set_daily_fortune(::google::protobuf::int32 value);

  // optional int32 adv_energy = 30;
  inline bool has_adv_energy() const;
  inline void clear_adv_energy();
  static const int kAdvEnergyFieldNumber = 30;
  inline ::google::protobuf::int32 adv_energy() const;
  inline void set_adv_energy(::google::protobuf::int32 value);

  // optional int32 adv_times = 31;
  inline bool has_adv_times() const;
  inline void clear_adv_times();
  static const int kAdvTimesFieldNumber = 31;
  inline ::google::protobuf::int32 adv_times() const;
  inline void set_adv_times(::google::protobuf::int32 value);

  // optional int32 talent_point = 32;
  inline bool has_talent_point() const;
  inline void clear_talent_point();
  static const int kTalentPointFieldNumber = 32;
  inline ::google::protobuf::int32 talent_point() const;
  inline void set_talent_point(::google::protobuf::int32 value);

  // optional int32 change_name_time = 33;
  inline bool has_change_name_time() const;
  inline void clear_change_name_time();
  static const int kChangeNameTimeFieldNumber = 33;
  inline ::google::protobuf::int32 change_name_time() const;
  inline void set_change_name_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_jade();
  inline void clear_has_jade();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_buy_power_times();
  inline void clear_has_buy_power_times();
  inline void set_has_merit();
  inline void clear_has_merit();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_tender();
  inline void clear_has_tender();
  inline void set_has_treason();
  inline void clear_has_treason();
  inline void set_has_wise();
  inline void clear_has_wise();
  inline void set_has_adorkable();
  inline void clear_has_adorkable();
  inline void set_has_good();
  inline void clear_has_good();
  inline void set_has_scheming();
  inline void clear_has_scheming();
  inline void set_has_bag_capacity();
  inline void clear_has_bag_capacity();
  inline void set_has_task_activity();
  inline void clear_has_task_activity();
  inline void set_has_offical_salary();
  inline void clear_has_offical_salary();
  inline void set_has_first_offical_award();
  inline void clear_has_first_offical_award();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_wine();
  inline void clear_has_wine();
  inline void set_has_wine_cup();
  inline void clear_has_wine_cup();
  inline void set_has_daily_fortune();
  inline void clear_has_daily_fortune();
  inline void set_has_adv_energy();
  inline void clear_has_adv_energy();
  inline void set_has_adv_times();
  inline void clear_has_adv_times();
  inline void set_has_talent_point();
  inline void clear_has_talent_point();
  inline void set_has_change_name_time();
  inline void clear_has_change_name_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* rolename_;
  int protoid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info > soul_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info > item_s_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 jade_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 buy_power_times_;
  ::google::protobuf::int32 merit_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 tender_;
  ::google::protobuf::int32 treason_;
  ::google::protobuf::int32 wise_;
  ::google::protobuf::int32 adorkable_;
  ::google::protobuf::int32 good_;
  ::google::protobuf::int32 scheming_;
  ::google::protobuf::uint32 bag_capacity_;
  ::google::protobuf::int32 task_activity_;
  bool offical_salary_;
  ::google::protobuf::uint32 first_offical_award_;
  ::google::protobuf::int32 skill_point_;
  ::google::protobuf::uint32 wine_;
  ::google::protobuf::uint32 wine_cup_;
  ::google::protobuf::int32 daily_fortune_;
  ::google::protobuf::int32 adv_energy_;
  ::google::protobuf::int32 adv_times_;
  ::google::protobuf::int32 talent_point_;
  ::google::protobuf::int32 change_name_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class item_info : public ::google::protobuf::Message {
 public:
  item_info();
  virtual ~item_info();

  item_info(const item_info& from);

  inline item_info& operator=(const item_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_info& default_instance();

  void Swap(item_info* other);

  // implements Message ----------------------------------------------

  item_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_info& from);
  void MergeFrom(const item_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_info)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_info* default_instance_;
};
// -------------------------------------------------------------------

class update_role_info_ntf : public ::google::protobuf::Message {
 public:
  update_role_info_ntf();
  virtual ~update_role_info_ntf();

  update_role_info_ntf(const update_role_info_ntf& from);

  inline update_role_info_ntf& operator=(const update_role_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_role_info_ntf& default_instance();

  void Swap(update_role_info_ntf* other);

  // implements Message ----------------------------------------------

  update_role_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_role_info_ntf& from);
  void MergeFrom(const update_role_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_role_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string rolename = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // repeated .SProtoSpace.item_info item_s = 3;
  inline int item_s_size() const;
  inline void clear_item_s();
  static const int kItemSFieldNumber = 3;
  inline const ::SProtoSpace::item_info& item_s(int index) const;
  inline ::SProtoSpace::item_info* mutable_item_s(int index);
  inline ::SProtoSpace::item_info* add_item_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
      item_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
      mutable_item_s();

  // optional int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 gold = 6;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 6;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 jade = 7;
  inline bool has_jade() const;
  inline void clear_jade();
  static const int kJadeFieldNumber = 7;
  inline ::google::protobuf::int32 jade() const;
  inline void set_jade(::google::protobuf::int32 value);

  // optional int32 power = 8;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 8;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // repeated int32 plot_ids = 9;
  inline int plot_ids_size() const;
  inline void clear_plot_ids();
  static const int kPlotIdsFieldNumber = 9;
  inline ::google::protobuf::int32 plot_ids(int index) const;
  inline void set_plot_ids(int index, ::google::protobuf::int32 value);
  inline void add_plot_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      plot_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_plot_ids();

  // optional int32 buy_power_times = 10;
  inline bool has_buy_power_times() const;
  inline void clear_buy_power_times();
  static const int kBuyPowerTimesFieldNumber = 10;
  inline ::google::protobuf::int32 buy_power_times() const;
  inline void set_buy_power_times(::google::protobuf::int32 value);

  // optional int32 merit = 11;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 11;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // optional int32 grade = 12;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 12;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 tender = 13;
  inline bool has_tender() const;
  inline void clear_tender();
  static const int kTenderFieldNumber = 13;
  inline ::google::protobuf::int32 tender() const;
  inline void set_tender(::google::protobuf::int32 value);

  // optional int32 treason = 14;
  inline bool has_treason() const;
  inline void clear_treason();
  static const int kTreasonFieldNumber = 14;
  inline ::google::protobuf::int32 treason() const;
  inline void set_treason(::google::protobuf::int32 value);

  // optional int32 wise = 15;
  inline bool has_wise() const;
  inline void clear_wise();
  static const int kWiseFieldNumber = 15;
  inline ::google::protobuf::int32 wise() const;
  inline void set_wise(::google::protobuf::int32 value);

  // optional int32 adorkable = 16;
  inline bool has_adorkable() const;
  inline void clear_adorkable();
  static const int kAdorkableFieldNumber = 16;
  inline ::google::protobuf::int32 adorkable() const;
  inline void set_adorkable(::google::protobuf::int32 value);

  // optional int32 good = 17;
  inline bool has_good() const;
  inline void clear_good();
  static const int kGoodFieldNumber = 17;
  inline ::google::protobuf::int32 good() const;
  inline void set_good(::google::protobuf::int32 value);

  // optional int32 scheming = 18;
  inline bool has_scheming() const;
  inline void clear_scheming();
  static const int kSchemingFieldNumber = 18;
  inline ::google::protobuf::int32 scheming() const;
  inline void set_scheming(::google::protobuf::int32 value);

  // optional uint32 bag_capacity = 19;
  inline bool has_bag_capacity() const;
  inline void clear_bag_capacity();
  static const int kBagCapacityFieldNumber = 19;
  inline ::google::protobuf::uint32 bag_capacity() const;
  inline void set_bag_capacity(::google::protobuf::uint32 value);

  // optional int32 task_activity = 20;
  inline bool has_task_activity() const;
  inline void clear_task_activity();
  static const int kTaskActivityFieldNumber = 20;
  inline ::google::protobuf::int32 task_activity() const;
  inline void set_task_activity(::google::protobuf::int32 value);

  // optional bool offical_salary = 21;
  inline bool has_offical_salary() const;
  inline void clear_offical_salary();
  static const int kOfficalSalaryFieldNumber = 21;
  inline bool offical_salary() const;
  inline void set_offical_salary(bool value);

  // optional int32 skill_point = 22;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 22;
  inline ::google::protobuf::int32 skill_point() const;
  inline void set_skill_point(::google::protobuf::int32 value);

  // optional int32 talent_point = 23;
  inline bool has_talent_point() const;
  inline void clear_talent_point();
  static const int kTalentPointFieldNumber = 23;
  inline ::google::protobuf::int32 talent_point() const;
  inline void set_talent_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_role_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_jade();
  inline void clear_has_jade();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_buy_power_times();
  inline void clear_has_buy_power_times();
  inline void set_has_merit();
  inline void clear_has_merit();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_tender();
  inline void clear_has_tender();
  inline void set_has_treason();
  inline void clear_has_treason();
  inline void set_has_wise();
  inline void clear_has_wise();
  inline void set_has_adorkable();
  inline void clear_has_adorkable();
  inline void set_has_good();
  inline void clear_has_good();
  inline void set_has_scheming();
  inline void clear_has_scheming();
  inline void set_has_bag_capacity();
  inline void clear_has_bag_capacity();
  inline void set_has_task_activity();
  inline void clear_has_task_activity();
  inline void set_has_offical_salary();
  inline void clear_has_offical_salary();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_talent_point();
  inline void clear_has_talent_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  int protoid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info > item_s_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 jade_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > plot_ids_;
  ::google::protobuf::int32 buy_power_times_;
  ::google::protobuf::int32 merit_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 tender_;
  ::google::protobuf::int32 treason_;
  ::google::protobuf::int32 wise_;
  ::google::protobuf::int32 adorkable_;
  ::google::protobuf::int32 good_;
  ::google::protobuf::int32 scheming_;
  ::google::protobuf::uint32 bag_capacity_;
  ::google::protobuf::int32 task_activity_;
  bool offical_salary_;
  ::google::protobuf::int32 skill_point_;
  ::google::protobuf::int32 talent_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static update_role_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_common_base_ntf : public ::google::protobuf::Message {
 public:
  role_common_base_ntf();
  virtual ~role_common_base_ntf();

  role_common_base_ntf(const role_common_base_ntf& from);

  inline role_common_base_ntf& operator=(const role_common_base_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_common_base_ntf& default_instance();

  void Swap(role_common_base_ntf* other);

  // implements Message ----------------------------------------------

  role_common_base_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_common_base_ntf& from);
  void MergeFrom(const role_common_base_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_common_base_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 gold = 4;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 4;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 jade = 5;
  inline bool has_jade() const;
  inline void clear_jade();
  static const int kJadeFieldNumber = 5;
  inline ::google::protobuf::int32 jade() const;
  inline void set_jade(::google::protobuf::int32 value);

  // optional int32 power = 6;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 6;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 merit = 7;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 7;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // optional int32 task_activity = 8;
  inline bool has_task_activity() const;
  inline void clear_task_activity();
  static const int kTaskActivityFieldNumber = 8;
  inline ::google::protobuf::int32 task_activity() const;
  inline void set_task_activity(::google::protobuf::int32 value);

  // optional int32 skill_point = 9;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 9;
  inline ::google::protobuf::int32 skill_point() const;
  inline void set_skill_point(::google::protobuf::int32 value);

  // optional uint32 wine = 10;
  inline bool has_wine() const;
  inline void clear_wine();
  static const int kWineFieldNumber = 10;
  inline ::google::protobuf::uint32 wine() const;
  inline void set_wine(::google::protobuf::uint32 value);

  // optional uint32 wine_cup = 11;
  inline bool has_wine_cup() const;
  inline void clear_wine_cup();
  static const int kWineCupFieldNumber = 11;
  inline ::google::protobuf::uint32 wine_cup() const;
  inline void set_wine_cup(::google::protobuf::uint32 value);

  // optional int32 adv_energy = 12;
  inline bool has_adv_energy() const;
  inline void clear_adv_energy();
  static const int kAdvEnergyFieldNumber = 12;
  inline ::google::protobuf::int32 adv_energy() const;
  inline void set_adv_energy(::google::protobuf::int32 value);

  // optional int32 adv_times = 13;
  inline bool has_adv_times() const;
  inline void clear_adv_times();
  static const int kAdvTimesFieldNumber = 13;
  inline ::google::protobuf::int32 adv_times() const;
  inline void set_adv_times(::google::protobuf::int32 value);

  // optional int32 talent_point = 14;
  inline bool has_talent_point() const;
  inline void clear_talent_point();
  static const int kTalentPointFieldNumber = 14;
  inline ::google::protobuf::int32 talent_point() const;
  inline void set_talent_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_common_base_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_jade();
  inline void clear_has_jade();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_merit();
  inline void clear_has_merit();
  inline void set_has_task_activity();
  inline void clear_has_task_activity();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();
  inline void set_has_wine();
  inline void clear_has_wine();
  inline void set_has_wine_cup();
  inline void clear_has_wine_cup();
  inline void set_has_adv_energy();
  inline void clear_has_adv_energy();
  inline void set_has_adv_times();
  inline void clear_has_adv_times();
  inline void set_has_talent_point();
  inline void clear_has_talent_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 jade_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 merit_;
  ::google::protobuf::int32 task_activity_;
  ::google::protobuf::int32 skill_point_;
  ::google::protobuf::uint32 wine_;
  ::google::protobuf::uint32 wine_cup_;
  ::google::protobuf::int32 adv_energy_;
  ::google::protobuf::int32 adv_times_;
  ::google::protobuf::int32 talent_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_common_base_ntf* default_instance_;
};
// -------------------------------------------------------------------

class soul_update_ntf : public ::google::protobuf::Message {
 public:
  soul_update_ntf();
  virtual ~soul_update_ntf();

  soul_update_ntf(const soul_update_ntf& from);

  inline soul_update_ntf& operator=(const soul_update_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_update_ntf& default_instance();

  void Swap(soul_update_ntf* other);

  // implements Message ----------------------------------------------

  soul_update_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_update_ntf& from);
  void MergeFrom(const soul_update_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_update_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.soul_info add_soul_s = 2;
  inline int add_soul_s_size() const;
  inline void clear_add_soul_s();
  static const int kAddSoulSFieldNumber = 2;
  inline const ::SProtoSpace::soul_info& add_soul_s(int index) const;
  inline ::SProtoSpace::soul_info* mutable_add_soul_s(int index);
  inline ::SProtoSpace::soul_info* add_add_soul_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
      add_soul_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
      mutable_add_soul_s();

  // repeated .SProtoSpace.soul_info del_soul_s = 3;
  inline int del_soul_s_size() const;
  inline void clear_del_soul_s();
  static const int kDelSoulSFieldNumber = 3;
  inline const ::SProtoSpace::soul_info& del_soul_s(int index) const;
  inline ::SProtoSpace::soul_info* mutable_del_soul_s(int index);
  inline ::SProtoSpace::soul_info* add_del_soul_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
      del_soul_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
      mutable_del_soul_s();

  // repeated .SProtoSpace.soul_info fix_soul_s = 4;
  inline int fix_soul_s_size() const;
  inline void clear_fix_soul_s();
  static const int kFixSoulSFieldNumber = 4;
  inline const ::SProtoSpace::soul_info& fix_soul_s(int index) const;
  inline ::SProtoSpace::soul_info* mutable_fix_soul_s(int index);
  inline ::SProtoSpace::soul_info* add_fix_soul_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
      fix_soul_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
      mutable_fix_soul_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_update_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info > add_soul_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info > del_soul_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info > fix_soul_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_update_ntf* default_instance_;
};
// -------------------------------------------------------------------

class soul_raise_req : public ::google::protobuf::Message {
 public:
  soul_raise_req();
  virtual ~soul_raise_req();

  soul_raise_req(const soul_raise_req& from);

  inline soul_raise_req& operator=(const soul_raise_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_raise_req& default_instance();

  void Swap(soul_raise_req* other);

  // implements Message ----------------------------------------------

  soul_raise_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_raise_req& from);
  void MergeFrom(const soul_raise_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated uint64 consume_id = 3;
  inline int consume_id_size() const;
  inline void clear_consume_id();
  static const int kConsumeIdFieldNumber = 3;
  inline ::google::protobuf::uint64 consume_id(int index) const;
  inline void set_consume_id(int index, ::google::protobuf::uint64 value);
  inline void add_consume_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      consume_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_consume_id();

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_raise_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > consume_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_raise_req* default_instance_;
};
// -------------------------------------------------------------------

class soul_raise_ack : public ::google::protobuf::Message {
 public:
  soul_raise_ack();
  virtual ~soul_raise_ack();

  soul_raise_ack(const soul_raise_ack& from);

  inline soul_raise_ack& operator=(const soul_raise_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_raise_ack& default_instance();

  void Swap(soul_raise_ack* other);

  // implements Message ----------------------------------------------

  soul_raise_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_raise_ack& from);
  void MergeFrom(const soul_raise_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_raise_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_raise_ack* default_instance_;
};
// -------------------------------------------------------------------

class soul_bind_req : public ::google::protobuf::Message {
 public:
  soul_bind_req();
  virtual ~soul_bind_req();

  soul_bind_req(const soul_bind_req& from);

  inline soul_bind_req& operator=(const soul_bind_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_bind_req& default_instance();

  void Swap(soul_bind_req* other);

  // implements Message ----------------------------------------------

  soul_bind_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_bind_req& from);
  void MergeFrom(const soul_bind_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 hero_uid = 3;
  inline bool has_hero_uid() const;
  inline void clear_hero_uid();
  static const int kHeroUidFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_uid() const;
  inline void set_hero_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_bind_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_uid();
  inline void clear_has_hero_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 hero_uid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_bind_req* default_instance_;
};
// -------------------------------------------------------------------

class soul_bind_ack : public ::google::protobuf::Message {
 public:
  soul_bind_ack();
  virtual ~soul_bind_ack();

  soul_bind_ack(const soul_bind_ack& from);

  inline soul_bind_ack& operator=(const soul_bind_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_bind_ack& default_instance();

  void Swap(soul_bind_ack* other);

  // implements Message ----------------------------------------------

  soul_bind_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_bind_ack& from);
  void MergeFrom(const soul_bind_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 hero_uid = 3;
  inline bool has_hero_uid() const;
  inline void clear_hero_uid();
  static const int kHeroUidFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_uid() const;
  inline void set_hero_uid(::google::protobuf::uint64 value);

  // optional int32 ret = 4 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_bind_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_uid();
  inline void clear_has_hero_uid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_uid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_bind_ack* default_instance_;
};
// -------------------------------------------------------------------

class soul_unbind_req : public ::google::protobuf::Message {
 public:
  soul_unbind_req();
  virtual ~soul_unbind_req();

  soul_unbind_req(const soul_unbind_req& from);

  inline soul_unbind_req& operator=(const soul_unbind_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_unbind_req& default_instance();

  void Swap(soul_unbind_req* other);

  // implements Message ----------------------------------------------

  soul_unbind_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_unbind_req& from);
  void MergeFrom(const soul_unbind_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 hero_uid = 3;
  inline bool has_hero_uid() const;
  inline void clear_hero_uid();
  static const int kHeroUidFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_uid() const;
  inline void set_hero_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_unbind_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hero_uid();
  inline void clear_has_hero_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 hero_uid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_unbind_req* default_instance_;
};
// -------------------------------------------------------------------

class soul_unbind_ack : public ::google::protobuf::Message {
 public:
  soul_unbind_ack();
  virtual ~soul_unbind_ack();

  soul_unbind_ack(const soul_unbind_ack& from);

  inline soul_unbind_ack& operator=(const soul_unbind_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_unbind_ack& default_instance();

  void Swap(soul_unbind_ack* other);

  // implements Message ----------------------------------------------

  soul_unbind_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_unbind_ack& from);
  void MergeFrom(const soul_unbind_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_unbind_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_unbind_ack* default_instance_;
};
// -------------------------------------------------------------------

class soul_lock_req : public ::google::protobuf::Message {
 public:
  soul_lock_req();
  virtual ~soul_lock_req();

  soul_lock_req(const soul_lock_req& from);

  inline soul_lock_req& operator=(const soul_lock_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_lock_req& default_instance();

  void Swap(soul_lock_req* other);

  // implements Message ----------------------------------------------

  soul_lock_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_lock_req& from);
  void MergeFrom(const soul_lock_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_lock_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_lock_req* default_instance_;
};
// -------------------------------------------------------------------

class soul_lock_ack : public ::google::protobuf::Message {
 public:
  soul_lock_ack();
  virtual ~soul_lock_ack();

  soul_lock_ack(const soul_lock_ack& from);

  inline soul_lock_ack& operator=(const soul_lock_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_lock_ack& default_instance();

  void Swap(soul_lock_ack* other);

  // implements Message ----------------------------------------------

  soul_lock_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_lock_ack& from);
  void MergeFrom(const soul_lock_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_lock_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_lock_ack* default_instance_;
};
// -------------------------------------------------------------------

class soul_unlock_req : public ::google::protobuf::Message {
 public:
  soul_unlock_req();
  virtual ~soul_unlock_req();

  soul_unlock_req(const soul_unlock_req& from);

  inline soul_unlock_req& operator=(const soul_unlock_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_unlock_req& default_instance();

  void Swap(soul_unlock_req* other);

  // implements Message ----------------------------------------------

  soul_unlock_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_unlock_req& from);
  void MergeFrom(const soul_unlock_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_unlock_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_unlock_req* default_instance_;
};
// -------------------------------------------------------------------

class soul_unlock_ack : public ::google::protobuf::Message {
 public:
  soul_unlock_ack();
  virtual ~soul_unlock_ack();

  soul_unlock_ack(const soul_unlock_ack& from);

  inline soul_unlock_ack& operator=(const soul_unlock_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_unlock_ack& default_instance();

  void Swap(soul_unlock_ack* other);

  // implements Message ----------------------------------------------

  soul_unlock_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_unlock_ack& from);
  void MergeFrom(const soul_unlock_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_unlock_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_unlock_ack* default_instance_;
};
// -------------------------------------------------------------------

class soul_sell_req : public ::google::protobuf::Message {
 public:
  soul_sell_req();
  virtual ~soul_sell_req();

  soul_sell_req(const soul_sell_req& from);

  inline soul_sell_req& operator=(const soul_sell_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_sell_req& default_instance();

  void Swap(soul_sell_req* other);

  // implements Message ----------------------------------------------

  soul_sell_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_sell_req& from);
  void MergeFrom(const soul_sell_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 soul_ids = 2;
  inline int soul_ids_size() const;
  inline void clear_soul_ids();
  static const int kSoulIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 soul_ids(int index) const;
  inline void set_soul_ids(int index, ::google::protobuf::uint64 value);
  inline void add_soul_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      soul_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_soul_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_sell_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > soul_ids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_sell_req* default_instance_;
};
// -------------------------------------------------------------------

class soul_sell_ack : public ::google::protobuf::Message {
 public:
  soul_sell_ack();
  virtual ~soul_sell_ack();

  soul_sell_ack(const soul_sell_ack& from);

  inline soul_sell_ack& operator=(const soul_sell_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const soul_sell_ack& default_instance();

  void Swap(soul_sell_ack* other);

  // implements Message ----------------------------------------------

  soul_sell_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const soul_sell_ack& from);
  void MergeFrom(const soul_sell_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.soul_sell_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static soul_sell_ack* default_instance_;
};
// -------------------------------------------------------------------

class item_packet_req : public ::google::protobuf::Message {
 public:
  item_packet_req();
  virtual ~item_packet_req();

  item_packet_req(const item_packet_req& from);

  inline item_packet_req& operator=(const item_packet_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_packet_req& default_instance();

  void Swap(item_packet_req* other);

  // implements Message ----------------------------------------------

  item_packet_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_packet_req& from);
  void MergeFrom(const item_packet_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 playerid = 2;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  inline ::google::protobuf::uint64 playerid() const;
  inline void set_playerid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_packet_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 playerid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_packet_req* default_instance_;
};
// -------------------------------------------------------------------

class item_packet_ack : public ::google::protobuf::Message {
 public:
  item_packet_ack();
  virtual ~item_packet_ack();

  item_packet_ack(const item_packet_ack& from);

  inline item_packet_ack& operator=(const item_packet_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_packet_ack& default_instance();

  void Swap(item_packet_ack* other);

  // implements Message ----------------------------------------------

  item_packet_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_packet_ack& from);
  void MergeFrom(const item_packet_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional bool all = 2;
  inline bool has_all() const;
  inline void clear_all();
  static const int kAllFieldNumber = 2;
  inline bool all() const;
  inline void set_all(bool value);

  // repeated .SProtoSpace.unit_item_data fix_items = 3;
  inline int fix_items_size() const;
  inline void clear_fix_items();
  static const int kFixItemsFieldNumber = 3;
  inline const ::SProtoSpace::unit_item_data& fix_items(int index) const;
  inline ::SProtoSpace::unit_item_data* mutable_fix_items(int index);
  inline ::SProtoSpace::unit_item_data* add_fix_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >&
      fix_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >*
      mutable_fix_items();

  // repeated uint64 del_items = 4;
  inline int del_items_size() const;
  inline void clear_del_items();
  static const int kDelItemsFieldNumber = 4;
  inline ::google::protobuf::uint64 del_items(int index) const;
  inline void set_del_items(int index, ::google::protobuf::uint64 value);
  inline void add_del_items(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      del_items() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_del_items();

  // optional .SProtoSpace.MsgErrorType error_code = 5;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 5;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_packet_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_all();
  inline void clear_has_all();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  bool all_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data > fix_items_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > del_items_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_packet_ack* default_instance_;
};
// -------------------------------------------------------------------

class item_use_req : public ::google::protobuf::Message {
 public:
  item_use_req();
  virtual ~item_use_req();

  item_use_req(const item_use_req& from);

  inline item_use_req& operator=(const item_use_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_use_req& default_instance();

  void Swap(item_use_req* other);

  // implements Message ----------------------------------------------

  item_use_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_use_req& from);
  void MergeFrom(const item_use_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_use_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  int protoid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_use_req* default_instance_;
};
// -------------------------------------------------------------------

class item_use_ack : public ::google::protobuf::Message {
 public:
  item_use_ack();
  virtual ~item_use_ack();

  item_use_ack(const item_use_ack& from);

  inline item_use_ack& operator=(const item_use_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_use_ack& default_instance();

  void Swap(item_use_ack* other);

  // implements Message ----------------------------------------------

  item_use_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_use_ack& from);
  void MergeFrom(const item_use_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.reward_item items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::SProtoSpace::reward_item& items(int index) const;
  inline ::SProtoSpace::reward_item* mutable_items(int index);
  inline ::SProtoSpace::reward_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_use_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_use_ack* default_instance_;
};
// -------------------------------------------------------------------

class item_sold_req : public ::google::protobuf::Message {
 public:
  item_sold_req();
  virtual ~item_sold_req();

  item_sold_req(const item_sold_req& from);

  inline item_sold_req& operator=(const item_sold_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_sold_req& default_instance();

  void Swap(item_sold_req* other);

  // implements Message ----------------------------------------------

  item_sold_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_sold_req& from);
  void MergeFrom(const item_sold_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional bool is_batch = 2;
  inline bool has_is_batch() const;
  inline void clear_is_batch();
  static const int kIsBatchFieldNumber = 2;
  inline bool is_batch() const;
  inline void set_is_batch(bool value);

  // repeated uint64 item_uid_list = 3;
  inline int item_uid_list_size() const;
  inline void clear_item_uid_list();
  static const int kItemUidListFieldNumber = 3;
  inline ::google::protobuf::uint64 item_uid_list(int index) const;
  inline void set_item_uid_list(int index, ::google::protobuf::uint64 value);
  inline void add_item_uid_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      item_uid_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_item_uid_list();

  // optional uint64 item_uid = 4;
  inline bool has_item_uid() const;
  inline void clear_item_uid();
  static const int kItemUidFieldNumber = 4;
  inline ::google::protobuf::uint64 item_uid() const;
  inline void set_item_uid(::google::protobuf::uint64 value);

  // optional uint32 item_count = 5;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 5;
  inline ::google::protobuf::uint32 item_count() const;
  inline void set_item_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_sold_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_is_batch();
  inline void clear_has_is_batch();
  inline void set_has_item_uid();
  inline void clear_has_item_uid();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  bool is_batch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > item_uid_list_;
  ::google::protobuf::uint64 item_uid_;
  ::google::protobuf::uint32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_sold_req* default_instance_;
};
// -------------------------------------------------------------------

class item_sold_ack : public ::google::protobuf::Message {
 public:
  item_sold_ack();
  virtual ~item_sold_ack();

  item_sold_ack(const item_sold_ack& from);

  inline item_sold_ack& operator=(const item_sold_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_sold_ack& default_instance();

  void Swap(item_sold_ack* other);

  // implements Message ----------------------------------------------

  item_sold_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_sold_ack& from);
  void MergeFrom(const item_sold_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.MsgErrorType error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_sold_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_sold_ack* default_instance_;
};
// -------------------------------------------------------------------

class bag_expand_req : public ::google::protobuf::Message {
 public:
  bag_expand_req();
  virtual ~bag_expand_req();

  bag_expand_req(const bag_expand_req& from);

  inline bag_expand_req& operator=(const bag_expand_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bag_expand_req& default_instance();

  void Swap(bag_expand_req* other);

  // implements Message ----------------------------------------------

  bag_expand_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bag_expand_req& from);
  void MergeFrom(const bag_expand_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 add_size = 2;
  inline bool has_add_size() const;
  inline void clear_add_size();
  static const int kAddSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 add_size() const;
  inline void set_add_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.bag_expand_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_add_size();
  inline void clear_has_add_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 add_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static bag_expand_req* default_instance_;
};
// -------------------------------------------------------------------

class bag_expand_ack : public ::google::protobuf::Message {
 public:
  bag_expand_ack();
  virtual ~bag_expand_ack();

  bag_expand_ack(const bag_expand_ack& from);

  inline bag_expand_ack& operator=(const bag_expand_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bag_expand_ack& default_instance();

  void Swap(bag_expand_ack* other);

  // implements Message ----------------------------------------------

  bag_expand_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bag_expand_ack& from);
  void MergeFrom(const bag_expand_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.MsgErrorType error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.bag_expand_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static bag_expand_ack* default_instance_;
};
// -------------------------------------------------------------------

class bag_capacity_not_enough_ntf : public ::google::protobuf::Message {
 public:
  bag_capacity_not_enough_ntf();
  virtual ~bag_capacity_not_enough_ntf();

  bag_capacity_not_enough_ntf(const bag_capacity_not_enough_ntf& from);

  inline bag_capacity_not_enough_ntf& operator=(const bag_capacity_not_enough_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bag_capacity_not_enough_ntf& default_instance();

  void Swap(bag_capacity_not_enough_ntf* other);

  // implements Message ----------------------------------------------

  bag_capacity_not_enough_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bag_capacity_not_enough_ntf& from);
  void MergeFrom(const bag_capacity_not_enough_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_capacity_not_enough_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.bag_capacity_not_enough_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static bag_capacity_not_enough_ntf* default_instance_;
};
// -------------------------------------------------------------------

class hero_list_data_ntf : public ::google::protobuf::Message {
 public:
  hero_list_data_ntf();
  virtual ~hero_list_data_ntf();

  hero_list_data_ntf(const hero_list_data_ntf& from);

  inline hero_list_data_ntf& operator=(const hero_list_data_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_list_data_ntf& default_instance();

  void Swap(hero_list_data_ntf* other);

  // implements Message ----------------------------------------------

  hero_list_data_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_list_data_ntf& from);
  void MergeFrom(const hero_list_data_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_list_data_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.hero_show_data heroes = 2;
  inline int heroes_size() const;
  inline void clear_heroes();
  static const int kHeroesFieldNumber = 2;
  inline const ::SProtoSpace::hero_show_data& heroes(int index) const;
  inline ::SProtoSpace::hero_show_data* mutable_heroes(int index);
  inline ::SProtoSpace::hero_show_data* add_heroes();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >&
      heroes() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >*
      mutable_heroes();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_list_data_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data > heroes_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_list_data_ntf* default_instance_;
};
// -------------------------------------------------------------------

class add_hero_ntf : public ::google::protobuf::Message {
 public:
  add_hero_ntf();
  virtual ~add_hero_ntf();

  add_hero_ntf(const add_hero_ntf& from);

  inline add_hero_ntf& operator=(const add_hero_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const add_hero_ntf& default_instance();

  void Swap(add_hero_ntf* other);

  // implements Message ----------------------------------------------

  add_hero_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const add_hero_ntf& from);
  void MergeFrom(const add_hero_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_hero_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.hero_show_data heroes = 2;
  inline int heroes_size() const;
  inline void clear_heroes();
  static const int kHeroesFieldNumber = 2;
  inline const ::SProtoSpace::hero_show_data& heroes(int index) const;
  inline ::SProtoSpace::hero_show_data* mutable_heroes(int index);
  inline ::SProtoSpace::hero_show_data* add_heroes();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >&
      heroes() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >*
      mutable_heroes();

  // @@protoc_insertion_point(class_scope:SProtoSpace.add_hero_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data > heroes_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static add_hero_ntf* default_instance_;
};
// -------------------------------------------------------------------

class remove_hero_ntf : public ::google::protobuf::Message {
 public:
  remove_hero_ntf();
  virtual ~remove_hero_ntf();

  remove_hero_ntf(const remove_hero_ntf& from);

  inline remove_hero_ntf& operator=(const remove_hero_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const remove_hero_ntf& default_instance();

  void Swap(remove_hero_ntf* other);

  // implements Message ----------------------------------------------

  remove_hero_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const remove_hero_ntf& from);
  void MergeFrom(const remove_hero_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = remove_hero_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 ids = 2;
  inline int ids_size() const;
  inline void clear_ids();
  static const int kIdsFieldNumber = 2;
  inline ::google::protobuf::uint64 ids(int index) const;
  inline void set_ids(int index, ::google::protobuf::uint64 value);
  inline void add_ids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.remove_hero_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ids_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static remove_hero_ntf* default_instance_;
};
// -------------------------------------------------------------------

class hero_info_change_ntf : public ::google::protobuf::Message {
 public:
  hero_info_change_ntf();
  virtual ~hero_info_change_ntf();

  hero_info_change_ntf(const hero_info_change_ntf& from);

  inline hero_info_change_ntf& operator=(const hero_info_change_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_info_change_ntf& default_instance();

  void Swap(hero_info_change_ntf* other);

  // implements Message ----------------------------------------------

  hero_info_change_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_info_change_ntf& from);
  void MergeFrom(const hero_info_change_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_info_change_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required .SProtoSpace.EHeroInfoChangeTag tag = 2;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 2;
  inline ::SProtoSpace::EHeroInfoChangeTag tag() const;
  inline void set_tag(::SProtoSpace::EHeroInfoChangeTag value);

  // required uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 exp = 6;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 6;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // repeated .SProtoSpace.client_skill_data skill = 7;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 7;
  inline const ::SProtoSpace::client_skill_data& skill(int index) const;
  inline ::SProtoSpace::client_skill_data* mutable_skill(int index);
  inline ::SProtoSpace::client_skill_data* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >*
      mutable_skill();

  // repeated .SProtoSpace.client_soul_data soul = 8;
  inline int soul_size() const;
  inline void clear_soul();
  static const int kSoulFieldNumber = 8;
  inline const ::SProtoSpace::client_soul_data& soul(int index) const;
  inline ::SProtoSpace::client_soul_data* mutable_soul(int index);
  inline ::SProtoSpace::client_soul_data* add_soul();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >&
      soul() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >*
      mutable_soul();

  // optional bool awaken = 9;
  inline bool has_awaken() const;
  inline void clear_awaken();
  static const int kAwakenFieldNumber = 9;
  inline bool awaken() const;
  inline void set_awaken(bool value);

  // repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
  inline int awaken_attr_size() const;
  inline void clear_awaken_attr();
  static const int kAwakenAttrFieldNumber = 10;
  inline const ::SProtoSpace::hero_attr_value& awaken_attr(int index) const;
  inline ::SProtoSpace::hero_attr_value* mutable_awaken_attr(int index);
  inline ::SProtoSpace::hero_attr_value* add_awaken_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
      awaken_attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
      mutable_awaken_attr();

  // optional .SProtoSpace.skin_data skin_info = 11;
  inline bool has_skin_info() const;
  inline void clear_skin_info();
  static const int kSkinInfoFieldNumber = 11;
  inline const ::SProtoSpace::skin_data& skin_info() const;
  inline ::SProtoSpace::skin_data* mutable_skin_info();
  inline ::SProtoSpace::skin_data* release_skin_info();
  inline void set_allocated_skin_info(::SProtoSpace::skin_data* skin_info);

  // optional int64 fight_power = 12;
  inline bool has_fight_power() const;
  inline void clear_fight_power();
  static const int kFightPowerFieldNumber = 12;
  inline ::google::protobuf::int64 fight_power() const;
  inline void set_fight_power(::google::protobuf::int64 value);

  // repeated .SProtoSpace.hero_equip_data equips = 13;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 13;
  inline const ::SProtoSpace::hero_equip_data& equips(int index) const;
  inline ::SProtoSpace::hero_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::hero_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
      mutable_equips();

  // optional int32 quality = 14;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 14;
  inline ::google::protobuf::int32 quality() const;
  inline void set_quality(::google::protobuf::int32 value);

  // repeated .SProtoSpace.talisman_data talismans = 15;
  inline int talismans_size() const;
  inline void clear_talismans();
  static const int kTalismansFieldNumber = 15;
  inline const ::SProtoSpace::talisman_data& talismans(int index) const;
  inline ::SProtoSpace::talisman_data* mutable_talismans(int index);
  inline ::SProtoSpace::talisman_data* add_talismans();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
      talismans() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
      mutable_talismans();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_info_change_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_awaken();
  inline void clear_has_awaken();
  inline void set_has_skin_info();
  inline void clear_has_skin_info();
  inline void set_has_fight_power();
  inline void clear_has_fight_power();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int tag_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data > skill_;
  ::google::protobuf::int32 exp_;
  bool awaken_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data > soul_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value > awaken_attr_;
  ::SProtoSpace::skin_data* skin_info_;
  ::google::protobuf::int64 fight_power_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data > equips_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data > talismans_;
  ::google::protobuf::int32 quality_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_info_change_ntf* default_instance_;
};
// -------------------------------------------------------------------

class hero_upgrade_req : public ::google::protobuf::Message {
 public:
  hero_upgrade_req();
  virtual ~hero_upgrade_req();

  hero_upgrade_req(const hero_upgrade_req& from);

  inline hero_upgrade_req& operator=(const hero_upgrade_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_upgrade_req& default_instance();

  void Swap(hero_upgrade_req* other);

  // implements Message ----------------------------------------------

  hero_upgrade_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_upgrade_req& from);
  void MergeFrom(const hero_upgrade_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated uint64 materials = 3;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 3;
  inline ::google::protobuf::uint64 materials(int index) const;
  inline void set_materials(int index, ::google::protobuf::uint64 value);
  inline void add_materials(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      materials() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_upgrade_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > materials_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_upgrade_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_upgrade_ack : public ::google::protobuf::Message {
 public:
  hero_upgrade_ack();
  virtual ~hero_upgrade_ack();

  hero_upgrade_ack(const hero_upgrade_ack& from);

  inline hero_upgrade_ack& operator=(const hero_upgrade_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_upgrade_ack& default_instance();

  void Swap(hero_upgrade_ack* other);

  // implements Message ----------------------------------------------

  hero_upgrade_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_upgrade_ack& from);
  void MergeFrom(const hero_upgrade_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 hero_level = 3;
  inline bool has_hero_level() const;
  inline void clear_hero_level();
  static const int kHeroLevelFieldNumber = 3;
  inline ::google::protobuf::int32 hero_level() const;
  inline void set_hero_level(::google::protobuf::int32 value);

  // required int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_upgrade_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_level();
  inline void clear_has_hero_level();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 hero_level_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_upgrade_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_upstar_req : public ::google::protobuf::Message {
 public:
  hero_upstar_req();
  virtual ~hero_upstar_req();

  hero_upstar_req(const hero_upstar_req& from);

  inline hero_upstar_req& operator=(const hero_upstar_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_upstar_req& default_instance();

  void Swap(hero_upstar_req* other);

  // implements Message ----------------------------------------------

  hero_upstar_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_upstar_req& from);
  void MergeFrom(const hero_upstar_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated uint64 materials = 3;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 3;
  inline ::google::protobuf::uint64 materials(int index) const;
  inline void set_materials(int index, ::google::protobuf::uint64 value);
  inline void add_materials(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      materials() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_upstar_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > materials_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_upstar_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_upstar_ack : public ::google::protobuf::Message {
 public:
  hero_upstar_ack();
  virtual ~hero_upstar_ack();

  hero_upstar_ack(const hero_upstar_ack& from);

  inline hero_upstar_ack& operator=(const hero_upstar_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_upstar_ack& default_instance();

  void Swap(hero_upstar_ack* other);

  // implements Message ----------------------------------------------

  hero_upstar_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_upstar_ack& from);
  void MergeFrom(const hero_upstar_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 hero_star = 3;
  inline bool has_hero_star() const;
  inline void clear_hero_star();
  static const int kHeroStarFieldNumber = 3;
  inline ::google::protobuf::int32 hero_star() const;
  inline void set_hero_star(::google::protobuf::int32 value);

  // required int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_upstar_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_star();
  inline void clear_has_hero_star();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 hero_star_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_upstar_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_awaken_req : public ::google::protobuf::Message {
 public:
  hero_awaken_req();
  virtual ~hero_awaken_req();

  hero_awaken_req(const hero_awaken_req& from);

  inline hero_awaken_req& operator=(const hero_awaken_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_awaken_req& default_instance();

  void Swap(hero_awaken_req* other);

  // implements Message ----------------------------------------------

  hero_awaken_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_awaken_req& from);
  void MergeFrom(const hero_awaken_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_awaken_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_awaken_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_awaken_ack : public ::google::protobuf::Message {
 public:
  hero_awaken_ack();
  virtual ~hero_awaken_ack();

  hero_awaken_ack(const hero_awaken_ack& from);

  inline hero_awaken_ack& operator=(const hero_awaken_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_awaken_ack& default_instance();

  void Swap(hero_awaken_ack* other);

  // implements Message ----------------------------------------------

  hero_awaken_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_awaken_ack& from);
  void MergeFrom(const hero_awaken_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // required int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_awaken_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_awaken_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_lock_req : public ::google::protobuf::Message {
 public:
  hero_lock_req();
  virtual ~hero_lock_req();

  hero_lock_req(const hero_lock_req& from);

  inline hero_lock_req& operator=(const hero_lock_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_lock_req& default_instance();

  void Swap(hero_lock_req* other);

  // implements Message ----------------------------------------------

  hero_lock_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_lock_req& from);
  void MergeFrom(const hero_lock_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // required bool lock = 3;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 3;
  inline bool lock() const;
  inline void set_lock(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_lock_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_lock();
  inline void clear_has_lock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  bool lock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_lock_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_lock_ack : public ::google::protobuf::Message {
 public:
  hero_lock_ack();
  virtual ~hero_lock_ack();

  hero_lock_ack(const hero_lock_ack& from);

  inline hero_lock_ack& operator=(const hero_lock_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_lock_ack& default_instance();

  void Swap(hero_lock_ack* other);

  // implements Message ----------------------------------------------

  hero_lock_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_lock_ack& from);
  void MergeFrom(const hero_lock_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // required bool lock = 3;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 3;
  inline bool lock() const;
  inline void set_lock(bool value);

  // required int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_lock_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_lock();
  inline void clear_has_lock();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  bool lock_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_lock_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_compose_req : public ::google::protobuf::Message {
 public:
  hero_compose_req();
  virtual ~hero_compose_req();

  hero_compose_req(const hero_compose_req& from);

  inline hero_compose_req& operator=(const hero_compose_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_compose_req& default_instance();

  void Swap(hero_compose_req* other);

  // implements Message ----------------------------------------------

  hero_compose_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_compose_req& from);
  void MergeFrom(const hero_compose_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_compose_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_compose_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_compose_ack : public ::google::protobuf::Message {
 public:
  hero_compose_ack();
  virtual ~hero_compose_ack();

  hero_compose_ack(const hero_compose_ack& from);

  inline hero_compose_ack& operator=(const hero_compose_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_compose_ack& default_instance();

  void Swap(hero_compose_ack* other);

  // implements Message ----------------------------------------------

  hero_compose_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_compose_ack& from);
  void MergeFrom(const hero_compose_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 template_id = 2;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 2;
  inline ::google::protobuf::int32 template_id() const;
  inline void set_template_id(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_compose_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 template_id_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_compose_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_skin_active_req : public ::google::protobuf::Message {
 public:
  hero_skin_active_req();
  virtual ~hero_skin_active_req();

  hero_skin_active_req(const hero_skin_active_req& from);

  inline hero_skin_active_req& operator=(const hero_skin_active_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_skin_active_req& default_instance();

  void Swap(hero_skin_active_req* other);

  // implements Message ----------------------------------------------

  hero_skin_active_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_skin_active_req& from);
  void MergeFrom(const hero_skin_active_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional uint32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_skin_active_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_template_id();
  inline void clear_has_template_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::uint32 template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_skin_active_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_skin_active_ack : public ::google::protobuf::Message {
 public:
  hero_skin_active_ack();
  virtual ~hero_skin_active_ack();

  hero_skin_active_ack(const hero_skin_active_ack& from);

  inline hero_skin_active_ack& operator=(const hero_skin_active_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_skin_active_ack& default_instance();

  void Swap(hero_skin_active_ack* other);

  // implements Message ----------------------------------------------

  hero_skin_active_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_skin_active_ack& from);
  void MergeFrom(const hero_skin_active_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional uint32 template_id = 3;
  inline bool has_template_id() const;
  inline void clear_template_id();
  static const int kTemplateIdFieldNumber = 3;
  inline ::google::protobuf::uint32 template_id() const;
  inline void set_template_id(::google::protobuf::uint32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_skin_active_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_template_id();
  inline void clear_has_template_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::uint32 template_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_skin_active_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_change_name_req : public ::google::protobuf::Message {
 public:
  hero_change_name_req();
  virtual ~hero_change_name_req();

  hero_change_name_req(const hero_change_name_req& from);

  inline hero_change_name_req& operator=(const hero_change_name_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_change_name_req& default_instance();

  void Swap(hero_change_name_req* other);

  // implements Message ----------------------------------------------

  hero_change_name_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_change_name_req& from);
  void MergeFrom(const hero_change_name_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional string change_name = 3;
  inline bool has_change_name() const;
  inline void clear_change_name();
  static const int kChangeNameFieldNumber = 3;
  inline const ::std::string& change_name() const;
  inline void set_change_name(const ::std::string& value);
  inline void set_change_name(const char* value);
  inline void set_change_name(const char* value, size_t size);
  inline ::std::string* mutable_change_name();
  inline ::std::string* release_change_name();
  inline void set_allocated_change_name(::std::string* change_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_change_name_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_change_name();
  inline void clear_has_change_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::std::string* change_name_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_change_name_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_change_name_ack : public ::google::protobuf::Message {
 public:
  hero_change_name_ack();
  virtual ~hero_change_name_ack();

  hero_change_name_ack(const hero_change_name_ack& from);

  inline hero_change_name_ack& operator=(const hero_change_name_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_change_name_ack& default_instance();

  void Swap(hero_change_name_ack* other);

  // implements Message ----------------------------------------------

  hero_change_name_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_change_name_ack& from);
  void MergeFrom(const hero_change_name_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional string change_name = 4;
  inline bool has_change_name() const;
  inline void clear_change_name();
  static const int kChangeNameFieldNumber = 4;
  inline const ::std::string& change_name() const;
  inline void set_change_name(const ::std::string& value);
  inline void set_change_name(const char* value);
  inline void set_change_name(const char* value, size_t size);
  inline ::std::string* mutable_change_name();
  inline ::std::string* release_change_name();
  inline void set_allocated_change_name(::std::string* change_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_change_name_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_change_name();
  inline void clear_has_change_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 hero_id_;
  ::std::string* change_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_change_name_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_level_up_req : public ::google::protobuf::Message {
 public:
  hero_level_up_req();
  virtual ~hero_level_up_req();

  hero_level_up_req(const hero_level_up_req& from);

  inline hero_level_up_req& operator=(const hero_level_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_level_up_req& default_instance();

  void Swap(hero_level_up_req* other);

  // implements Message ----------------------------------------------

  hero_level_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_level_up_req& from);
  void MergeFrom(const hero_level_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.reward_item materials = 3;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 3;
  inline const ::SProtoSpace::reward_item& materials(int index) const;
  inline ::SProtoSpace::reward_item* mutable_materials(int index);
  inline ::SProtoSpace::reward_item* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_level_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > materials_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_level_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_level_up_ack : public ::google::protobuf::Message {
 public:
  hero_level_up_ack();
  virtual ~hero_level_up_ack();

  hero_level_up_ack(const hero_level_up_ack& from);

  inline hero_level_up_ack& operator=(const hero_level_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_level_up_ack& default_instance();

  void Swap(hero_level_up_ack* other);

  // implements Message ----------------------------------------------

  hero_level_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_level_up_ack& from);
  void MergeFrom(const hero_level_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 hero_level = 3;
  inline bool has_hero_level() const;
  inline void clear_hero_level();
  static const int kHeroLevelFieldNumber = 3;
  inline ::google::protobuf::int32 hero_level() const;
  inline void set_hero_level(::google::protobuf::int32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_level_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_level();
  inline void clear_has_hero_level();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 hero_level_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_level_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_quality_up_req : public ::google::protobuf::Message {
 public:
  hero_quality_up_req();
  virtual ~hero_quality_up_req();

  hero_quality_up_req(const hero_quality_up_req& from);

  inline hero_quality_up_req& operator=(const hero_quality_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_quality_up_req& default_instance();

  void Swap(hero_quality_up_req* other);

  // implements Message ----------------------------------------------

  hero_quality_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_quality_up_req& from);
  void MergeFrom(const hero_quality_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_quality_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_quality_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_quality_up_ack : public ::google::protobuf::Message {
 public:
  hero_quality_up_ack();
  virtual ~hero_quality_up_ack();

  hero_quality_up_ack(const hero_quality_up_ack& from);

  inline hero_quality_up_ack& operator=(const hero_quality_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_quality_up_ack& default_instance();

  void Swap(hero_quality_up_ack* other);

  // implements Message ----------------------------------------------

  hero_quality_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_quality_up_ack& from);
  void MergeFrom(const hero_quality_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_quality_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_quality_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class item_combine_req : public ::google::protobuf::Message {
 public:
  item_combine_req();
  virtual ~item_combine_req();

  item_combine_req(const item_combine_req& from);

  inline item_combine_req& operator=(const item_combine_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_combine_req& default_instance();

  void Swap(item_combine_req* other);

  // implements Message ----------------------------------------------

  item_combine_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_combine_req& from);
  void MergeFrom(const item_combine_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 dest_equip_tid = 2;
  inline bool has_dest_equip_tid() const;
  inline void clear_dest_equip_tid();
  static const int kDestEquipTidFieldNumber = 2;
  inline ::google::protobuf::uint32 dest_equip_tid() const;
  inline void set_dest_equip_tid(::google::protobuf::uint32 value);

  // optional uint32 combine_num = 3;
  inline bool has_combine_num() const;
  inline void clear_combine_num();
  static const int kCombineNumFieldNumber = 3;
  inline ::google::protobuf::uint32 combine_num() const;
  inline void set_combine_num(::google::protobuf::uint32 value);

  // repeated uint64 cost_item_uid = 4;
  inline int cost_item_uid_size() const;
  inline void clear_cost_item_uid();
  static const int kCostItemUidFieldNumber = 4;
  inline ::google::protobuf::uint64 cost_item_uid(int index) const;
  inline void set_cost_item_uid(int index, ::google::protobuf::uint64 value);
  inline void add_cost_item_uid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cost_item_uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cost_item_uid();

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_combine_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_dest_equip_tid();
  inline void clear_has_dest_equip_tid();
  inline void set_has_combine_num();
  inline void clear_has_combine_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 dest_equip_tid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cost_item_uid_;
  ::google::protobuf::uint32 combine_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_combine_req* default_instance_;
};
// -------------------------------------------------------------------

class item_combine_ack : public ::google::protobuf::Message {
 public:
  item_combine_ack();
  virtual ~item_combine_ack();

  item_combine_ack(const item_combine_ack& from);

  inline item_combine_ack& operator=(const item_combine_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const item_combine_ack& default_instance();

  void Swap(item_combine_ack* other);

  // implements Message ----------------------------------------------

  item_combine_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const item_combine_ack& from);
  void MergeFrom(const item_combine_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint32 dest_equip_tid = 3;
  inline bool has_dest_equip_tid() const;
  inline void clear_dest_equip_tid();
  static const int kDestEquipTidFieldNumber = 3;
  inline ::google::protobuf::uint32 dest_equip_tid() const;
  inline void set_dest_equip_tid(::google::protobuf::uint32 value);

  // optional uint32 combine_num = 4;
  inline bool has_combine_num() const;
  inline void clear_combine_num();
  static const int kCombineNumFieldNumber = 4;
  inline ::google::protobuf::uint32 combine_num() const;
  inline void set_combine_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.item_combine_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_dest_equip_tid();
  inline void clear_has_dest_equip_tid();
  inline void set_has_combine_num();
  inline void clear_has_combine_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 dest_equip_tid_;
  ::google::protobuf::uint32 combine_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static item_combine_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_star_up_req : public ::google::protobuf::Message {
 public:
  hero_star_up_req();
  virtual ~hero_star_up_req();

  hero_star_up_req(const hero_star_up_req& from);

  inline hero_star_up_req& operator=(const hero_star_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_star_up_req& default_instance();

  void Swap(hero_star_up_req* other);

  // implements Message ----------------------------------------------

  hero_star_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_star_up_req& from);
  void MergeFrom(const hero_star_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.reward_item materials = 3;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 3;
  inline const ::SProtoSpace::reward_item& materials(int index) const;
  inline ::SProtoSpace::reward_item* mutable_materials(int index);
  inline ::SProtoSpace::reward_item* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_star_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > materials_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_star_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_star_up_ack : public ::google::protobuf::Message {
 public:
  hero_star_up_ack();
  virtual ~hero_star_up_ack();

  hero_star_up_ack(const hero_star_up_ack& from);

  inline hero_star_up_ack& operator=(const hero_star_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_star_up_ack& default_instance();

  void Swap(hero_star_up_ack* other);

  // implements Message ----------------------------------------------

  hero_star_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_star_up_ack& from);
  void MergeFrom(const hero_star_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 hero_star = 3;
  inline bool has_hero_star() const;
  inline void clear_hero_star();
  static const int kHeroStarFieldNumber = 3;
  inline ::google::protobuf::int32 hero_star() const;
  inline void set_hero_star(::google::protobuf::int32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_star_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_hero_star();
  inline void clear_has_hero_star();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 hero_star_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_star_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_skill_up_req : public ::google::protobuf::Message {
 public:
  hero_skill_up_req();
  virtual ~hero_skill_up_req();

  hero_skill_up_req(const hero_skill_up_req& from);

  inline hero_skill_up_req& operator=(const hero_skill_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_skill_up_req& default_instance();

  void Swap(hero_skill_up_req* other);

  // implements Message ----------------------------------------------

  hero_skill_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_skill_up_req& from);
  void MergeFrom(const hero_skill_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 skill_id = 3;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 3;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.reward_item materials = 4;
  inline int materials_size() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 4;
  inline const ::SProtoSpace::reward_item& materials(int index) const;
  inline ::SProtoSpace::reward_item* mutable_materials(int index);
  inline ::SProtoSpace::reward_item* add_materials();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      materials() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_materials();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_skill_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > materials_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_skill_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_skill_up_ack : public ::google::protobuf::Message {
 public:
  hero_skill_up_ack();
  virtual ~hero_skill_up_ack();

  hero_skill_up_ack(const hero_skill_up_ack& from);

  inline hero_skill_up_ack& operator=(const hero_skill_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_skill_up_ack& default_instance();

  void Swap(hero_skill_up_ack* other);

  // implements Message ----------------------------------------------

  hero_skill_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_skill_up_ack& from);
  void MergeFrom(const hero_skill_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 skill_id = 4;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // optional int32 skill_lv = 5;
  inline bool has_skill_lv() const;
  inline void clear_skill_lv();
  static const int kSkillLvFieldNumber = 5;
  inline ::google::protobuf::int32 skill_lv() const;
  inline void set_skill_lv(::google::protobuf::int32 value);

  // optional int32 skill_point = 6;
  inline bool has_skill_point() const;
  inline void clear_skill_point();
  static const int kSkillPointFieldNumber = 6;
  inline ::google::protobuf::int32 skill_point() const;
  inline void set_skill_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_skill_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_skill_lv();
  inline void clear_has_skill_lv();
  inline void set_has_skill_point();
  inline void clear_has_skill_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 skill_lv_;
  ::google::protobuf::int32 skill_point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_skill_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_req : public ::google::protobuf::Message {
 public:
  hero_equip_req();
  virtual ~hero_equip_req();

  hero_equip_req(const hero_equip_req& from);

  inline hero_equip_req& operator=(const hero_equip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_req& default_instance();

  void Swap(hero_equip_req* other);

  // implements Message ----------------------------------------------

  hero_equip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_req& from);
  void MergeFrom(const hero_equip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_uuid = 2;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional uint64 item_uuid = 3;
  inline bool has_item_uuid() const;
  inline void clear_item_uuid();
  static const int kItemUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 item_uuid() const;
  inline void set_item_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EHeroEquipSlot slot_id = 4;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 4;
  inline ::SProtoSpace::EHeroEquipSlot slot_id() const;
  inline void set_slot_id(::SProtoSpace::EHeroEquipSlot value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_item_uuid();
  inline void clear_has_item_uuid();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_uuid_;
  int protoid_;
  int slot_id_;
  ::google::protobuf::uint64 item_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_ack : public ::google::protobuf::Message {
 public:
  hero_equip_ack();
  virtual ~hero_equip_ack();

  hero_equip_ack(const hero_equip_ack& from);

  inline hero_equip_ack& operator=(const hero_equip_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_ack& default_instance();

  void Swap(hero_equip_ack* other);

  // implements Message ----------------------------------------------

  hero_equip_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_ack& from);
  void MergeFrom(const hero_equip_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 hero_uuid = 3;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional uint64 item_uuid = 4;
  inline bool has_item_uuid() const;
  inline void clear_item_uuid();
  static const int kItemUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 item_uuid() const;
  inline void set_item_uuid(::google::protobuf::uint64 value);

  // optional int32 item_tid = 5;
  inline bool has_item_tid() const;
  inline void clear_item_tid();
  static const int kItemTidFieldNumber = 5;
  inline ::google::protobuf::int32 item_tid() const;
  inline void set_item_tid(::google::protobuf::int32 value);

  // optional .SProtoSpace.EHeroEquipSlot slot_id = 6;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 6;
  inline ::SProtoSpace::EHeroEquipSlot slot_id() const;
  inline void set_slot_id(::SProtoSpace::EHeroEquipSlot value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_item_uuid();
  inline void clear_has_item_uuid();
  inline void set_has_item_tid();
  inline void clear_has_item_tid();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_uuid_;
  ::google::protobuf::uint64 item_uuid_;
  ::google::protobuf::int32 item_tid_;
  int slot_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_unequip_req : public ::google::protobuf::Message {
 public:
  hero_unequip_req();
  virtual ~hero_unequip_req();

  hero_unequip_req(const hero_unequip_req& from);

  inline hero_unequip_req& operator=(const hero_unequip_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_unequip_req& default_instance();

  void Swap(hero_unequip_req* other);

  // implements Message ----------------------------------------------

  hero_unequip_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_unequip_req& from);
  void MergeFrom(const hero_unequip_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional uint64 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 slot_id = 4;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 4;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_unequip_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint64 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_unequip_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_unequip_ack : public ::google::protobuf::Message {
 public:
  hero_unequip_ack();
  virtual ~hero_unequip_ack();

  hero_unequip_ack(const hero_unequip_ack& from);

  inline hero_unequip_ack& operator=(const hero_unequip_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_unequip_ack& default_instance();

  void Swap(hero_unequip_ack* other);

  // implements Message ----------------------------------------------

  hero_unequip_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_unequip_ack& from);
  void MergeFrom(const hero_unequip_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional uint64 item_id = 4;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional uint32 slot_id = 5;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 5;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_unequip_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::uint32 slot_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_unequip_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_level_up_req : public ::google::protobuf::Message {
 public:
  hero_equip_level_up_req();
  virtual ~hero_equip_level_up_req();

  hero_equip_level_up_req(const hero_equip_level_up_req& from);

  inline hero_equip_level_up_req& operator=(const hero_equip_level_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_level_up_req& default_instance();

  void Swap(hero_equip_level_up_req* other);

  // implements Message ----------------------------------------------

  hero_equip_level_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_level_up_req& from);
  void MergeFrom(const hero_equip_level_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_level_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 item_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_level_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_level_up_ack : public ::google::protobuf::Message {
 public:
  hero_equip_level_up_ack();
  virtual ~hero_equip_level_up_ack();

  hero_equip_level_up_ack(const hero_equip_level_up_ack& from);

  inline hero_equip_level_up_ack& operator=(const hero_equip_level_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_level_up_ack& default_instance();

  void Swap(hero_equip_level_up_ack* other);

  // implements Message ----------------------------------------------

  hero_equip_level_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_level_up_ack& from);
  void MergeFrom(const hero_equip_level_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_level_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_level_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_onekey_level_up_req : public ::google::protobuf::Message {
 public:
  hero_equip_onekey_level_up_req();
  virtual ~hero_equip_onekey_level_up_req();

  hero_equip_onekey_level_up_req(const hero_equip_onekey_level_up_req& from);

  inline hero_equip_onekey_level_up_req& operator=(const hero_equip_onekey_level_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_onekey_level_up_req& default_instance();

  void Swap(hero_equip_onekey_level_up_req* other);

  // implements Message ----------------------------------------------

  hero_equip_onekey_level_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_onekey_level_up_req& from);
  void MergeFrom(const hero_equip_onekey_level_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_onekey_level_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 item_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_onekey_level_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_onekey_level_up_ack : public ::google::protobuf::Message {
 public:
  hero_equip_onekey_level_up_ack();
  virtual ~hero_equip_onekey_level_up_ack();

  hero_equip_onekey_level_up_ack(const hero_equip_onekey_level_up_ack& from);

  inline hero_equip_onekey_level_up_ack& operator=(const hero_equip_onekey_level_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_onekey_level_up_ack& default_instance();

  void Swap(hero_equip_onekey_level_up_ack* other);

  // implements Message ----------------------------------------------

  hero_equip_onekey_level_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_onekey_level_up_ack& from);
  void MergeFrom(const hero_equip_onekey_level_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 crit = 5;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 5;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);

  // optional int32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_onekey_level_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_onekey_level_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_level_info : public ::google::protobuf::Message {
 public:
  hero_equip_level_info();
  virtual ~hero_equip_level_info();

  hero_equip_level_info(const hero_equip_level_info& from);

  inline hero_equip_level_info& operator=(const hero_equip_level_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_level_info& default_instance();

  void Swap(hero_equip_level_info* other);

  // implements Message ----------------------------------------------

  hero_equip_level_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_level_info& from);
  void MergeFrom(const hero_equip_level_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint64 item_id() const;
  inline void set_item_id(::google::protobuf::uint64 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_level_info)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_level_info* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_all_level_up_req : public ::google::protobuf::Message {
 public:
  hero_equip_all_level_up_req();
  virtual ~hero_equip_all_level_up_req();

  hero_equip_all_level_up_req(const hero_equip_all_level_up_req& from);

  inline hero_equip_all_level_up_req& operator=(const hero_equip_all_level_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_all_level_up_req& default_instance();

  void Swap(hero_equip_all_level_up_req* other);

  // implements Message ----------------------------------------------

  hero_equip_all_level_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_all_level_up_req& from);
  void MergeFrom(const hero_equip_all_level_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_all_level_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_all_level_up_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_all_level_up_ack : public ::google::protobuf::Message {
 public:
  hero_equip_all_level_up_ack();
  virtual ~hero_equip_all_level_up_ack();

  hero_equip_all_level_up_ack(const hero_equip_all_level_up_ack& from);

  inline hero_equip_all_level_up_ack& operator=(const hero_equip_all_level_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_all_level_up_ack& default_instance();

  void Swap(hero_equip_all_level_up_ack* other);

  // implements Message ----------------------------------------------

  hero_equip_all_level_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_all_level_up_ack& from);
  void MergeFrom(const hero_equip_all_level_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.hero_equip_level_info items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::SProtoSpace::hero_equip_level_info& items(int index) const;
  inline ::SProtoSpace::hero_equip_level_info* mutable_items(int index);
  inline ::SProtoSpace::hero_equip_level_info* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_level_info >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_level_info >*
      mutable_items();

  // optional int32 crit = 5;
  inline bool has_crit() const;
  inline void clear_crit();
  static const int kCritFieldNumber = 5;
  inline ::google::protobuf::int32 crit() const;
  inline void set_crit(::google::protobuf::int32 value);

  // optional int32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_all_level_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_crit();
  inline void clear_has_crit();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_level_info > items_;
  ::google::protobuf::int32 crit_;
  ::google::protobuf::int32 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_all_level_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_onekey_req : public ::google::protobuf::Message {
 public:
  hero_equip_onekey_req();
  virtual ~hero_equip_onekey_req();

  hero_equip_onekey_req(const hero_equip_onekey_req& from);

  inline hero_equip_onekey_req& operator=(const hero_equip_onekey_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_onekey_req& default_instance();

  void Swap(hero_equip_onekey_req* other);

  // implements Message ----------------------------------------------

  hero_equip_onekey_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_onekey_req& from);
  void MergeFrom(const hero_equip_onekey_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.hero_equip_data equips = 3;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 3;
  inline const ::SProtoSpace::hero_equip_data& equips(int index) const;
  inline ::SProtoSpace::hero_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::hero_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
      mutable_equips();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_onekey_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data > equips_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_onekey_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_equip_onekey_ack : public ::google::protobuf::Message {
 public:
  hero_equip_onekey_ack();
  virtual ~hero_equip_onekey_ack();

  hero_equip_onekey_ack(const hero_equip_onekey_ack& from);

  inline hero_equip_onekey_ack& operator=(const hero_equip_onekey_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_equip_onekey_ack& default_instance();

  void Swap(hero_equip_onekey_ack* other);

  // implements Message ----------------------------------------------

  hero_equip_onekey_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_equip_onekey_ack& from);
  void MergeFrom(const hero_equip_onekey_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.hero_equip_data equips = 4;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 4;
  inline const ::SProtoSpace::hero_equip_data& equips(int index) const;
  inline ::SProtoSpace::hero_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::hero_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
      mutable_equips();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_equip_onekey_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data > equips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_equip_onekey_ack* default_instance_;
};
// -------------------------------------------------------------------

class hero_unequip_onekey_req : public ::google::protobuf::Message {
 public:
  hero_unequip_onekey_req();
  virtual ~hero_unequip_onekey_req();

  hero_unequip_onekey_req(const hero_unequip_onekey_req& from);

  inline hero_unequip_onekey_req& operator=(const hero_unequip_onekey_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_unequip_onekey_req& default_instance();

  void Swap(hero_unequip_onekey_req* other);

  // implements Message ----------------------------------------------

  hero_unequip_onekey_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_unequip_onekey_req& from);
  void MergeFrom(const hero_unequip_onekey_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_unequip_onekey_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 hero_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_unequip_onekey_req* default_instance_;
};
// -------------------------------------------------------------------

class hero_unequip_onekey_ack : public ::google::protobuf::Message {
 public:
  hero_unequip_onekey_ack();
  virtual ~hero_unequip_onekey_ack();

  hero_unequip_onekey_ack(const hero_unequip_onekey_ack& from);

  inline hero_unequip_onekey_ack& operator=(const hero_unequip_onekey_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const hero_unequip_onekey_ack& default_instance();

  void Swap(hero_unequip_onekey_ack* other);

  // implements Message ----------------------------------------------

  hero_unequip_onekey_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hero_unequip_onekey_ack& from);
  void MergeFrom(const hero_unequip_onekey_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 hero_id = 3;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // repeated .SProtoSpace.hero_equip_data equips = 4;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 4;
  inline const ::SProtoSpace::hero_equip_data& equips(int index) const;
  inline ::SProtoSpace::hero_equip_data* mutable_equips(int index);
  inline ::SProtoSpace::hero_equip_data* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
      mutable_equips();

  // @@protoc_insertion_point(class_scope:SProtoSpace.hero_unequip_onekey_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data > equips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static hero_unequip_onekey_ack* default_instance_;
};
// -------------------------------------------------------------------

class gm_operation_req : public ::google::protobuf::Message {
 public:
  gm_operation_req();
  virtual ~gm_operation_req();

  gm_operation_req(const gm_operation_req& from);

  inline gm_operation_req& operator=(const gm_operation_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_operation_req& default_instance();

  void Swap(gm_operation_req* other);

  // implements Message ----------------------------------------------

  gm_operation_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_operation_req& from);
  void MergeFrom(const gm_operation_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string cmd = 2;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 2;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gm_operation_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cmd_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static gm_operation_req* default_instance_;
};
// -------------------------------------------------------------------

class gm_operation_ack : public ::google::protobuf::Message {
 public:
  gm_operation_ack();
  virtual ~gm_operation_ack();

  gm_operation_ack(const gm_operation_ack& from);

  inline gm_operation_ack& operator=(const gm_operation_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const gm_operation_ack& default_instance();

  void Swap(gm_operation_ack* other);

  // implements Message ----------------------------------------------

  gm_operation_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const gm_operation_ack& from);
  void MergeFrom(const gm_operation_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 3 [default = 0];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string info = 4 [default = "Failed"];
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.gm_operation_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::std::string* info_;
  static ::std::string* _default_info_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static gm_operation_ack* default_instance_;
};
// -------------------------------------------------------------------

class leave_game_req : public ::google::protobuf::Message {
 public:
  leave_game_req();
  virtual ~leave_game_req();

  leave_game_req(const leave_game_req& from);

  inline leave_game_req& operator=(const leave_game_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const leave_game_req& default_instance();

  void Swap(leave_game_req* other);

  // implements Message ----------------------------------------------

  leave_game_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const leave_game_req& from);
  void MergeFrom(const leave_game_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = leave_game_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.leave_game_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static leave_game_req* default_instance_;
};
// -------------------------------------------------------------------

class kick_game_ntf : public ::google::protobuf::Message {
 public:
  kick_game_ntf();
  virtual ~kick_game_ntf();

  kick_game_ntf(const kick_game_ntf& from);

  inline kick_game_ntf& operator=(const kick_game_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const kick_game_ntf& default_instance();

  void Swap(kick_game_ntf* other);

  // implements Message ----------------------------------------------

  kick_game_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const kick_game_ntf& from);
  void MergeFrom(const kick_game_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = kick_game_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required .SProtoSpace.eKickoutReason reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline ::SProtoSpace::eKickoutReason reason() const;
  inline void set_reason(::SProtoSpace::eKickoutReason value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.kick_game_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static kick_game_ntf* default_instance_;
};
// -------------------------------------------------------------------

class beat_heart_ntf : public ::google::protobuf::Message {
 public:
  beat_heart_ntf();
  virtual ~beat_heart_ntf();

  beat_heart_ntf(const beat_heart_ntf& from);

  inline beat_heart_ntf& operator=(const beat_heart_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const beat_heart_ntf& default_instance();

  void Swap(beat_heart_ntf* other);

  // implements Message ----------------------------------------------

  beat_heart_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const beat_heart_ntf& from);
  void MergeFrom(const beat_heart_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = beat_heart_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.beat_heart_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static beat_heart_ntf* default_instance_;
};
// -------------------------------------------------------------------

class sync_time_ntf : public ::google::protobuf::Message {
 public:
  sync_time_ntf();
  virtual ~sync_time_ntf();

  sync_time_ntf(const sync_time_ntf& from);

  inline sync_time_ntf& operator=(const sync_time_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const sync_time_ntf& default_instance();

  void Swap(sync_time_ntf* other);

  // implements Message ----------------------------------------------

  sync_time_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const sync_time_ntf& from);
  void MergeFrom(const sync_time_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_time_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.sync_time_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static sync_time_ntf* default_instance_;
};
// -------------------------------------------------------------------

class client_heart_beat_req : public ::google::protobuf::Message {
 public:
  client_heart_beat_req();
  virtual ~client_heart_beat_req();

  client_heart_beat_req(const client_heart_beat_req& from);

  inline client_heart_beat_req& operator=(const client_heart_beat_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_heart_beat_req& default_instance();

  void Swap(client_heart_beat_req* other);

  // implements Message ----------------------------------------------

  client_heart_beat_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_heart_beat_req& from);
  void MergeFrom(const client_heart_beat_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 check_sum = 2;
  inline bool has_check_sum() const;
  inline void clear_check_sum();
  static const int kCheckSumFieldNumber = 2;
  inline ::google::protobuf::uint32 check_sum() const;
  inline void set_check_sum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_heart_beat_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_check_sum();
  inline void clear_has_check_sum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 check_sum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_heart_beat_req* default_instance_;
};
// -------------------------------------------------------------------

class client_heart_beat_ack : public ::google::protobuf::Message {
 public:
  client_heart_beat_ack();
  virtual ~client_heart_beat_ack();

  client_heart_beat_ack(const client_heart_beat_ack& from);

  inline client_heart_beat_ack& operator=(const client_heart_beat_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_heart_beat_ack& default_instance();

  void Swap(client_heart_beat_ack* other);

  // implements Message ----------------------------------------------

  client_heart_beat_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_heart_beat_ack& from);
  void MergeFrom(const client_heart_beat_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 check_sum = 2;
  inline bool has_check_sum() const;
  inline void clear_check_sum();
  static const int kCheckSumFieldNumber = 2;
  inline ::google::protobuf::uint32 check_sum() const;
  inline void set_check_sum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_heart_beat_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_check_sum();
  inline void clear_has_check_sum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 check_sum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_heart_beat_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_player_info_ntf : public ::google::protobuf::Message {
 public:
  role_player_info_ntf();
  virtual ~role_player_info_ntf();

  role_player_info_ntf(const role_player_info_ntf& from);

  inline role_player_info_ntf& operator=(const role_player_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_info_ntf& default_instance();

  void Swap(role_player_info_ntf* other);

  // implements Message ----------------------------------------------

  role_player_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_info_ntf& from);
  void MergeFrom(const role_player_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.player_property pro = 2;
  inline bool has_pro() const;
  inline void clear_pro();
  static const int kProFieldNumber = 2;
  inline const ::SProtoSpace::player_property& pro() const;
  inline ::SProtoSpace::player_property* mutable_pro();
  inline ::SProtoSpace::player_property* release_pro();
  inline void set_allocated_pro(::SProtoSpace::player_property* pro);

  // optional .SProtoSpace.player_data data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::SProtoSpace::player_data& data() const;
  inline ::SProtoSpace::player_data* mutable_data();
  inline ::SProtoSpace::player_data* release_data();
  inline void set_allocated_data(::SProtoSpace::player_data* data);

  // repeated uint64 liked_list = 4;
  inline int liked_list_size() const;
  inline void clear_liked_list();
  static const int kLikedListFieldNumber = 4;
  inline ::google::protobuf::uint64 liked_list(int index) const;
  inline void set_liked_list(int index, ::google::protobuf::uint64 value);
  inline void add_liked_list(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      liked_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_liked_list();

  // optional int32 border = 5;
  inline bool has_border() const;
  inline void clear_border();
  static const int kBorderFieldNumber = 5;
  inline ::google::protobuf::int32 border() const;
  inline void set_border(::google::protobuf::int32 value);

  // optional int32 talent_grade = 6;
  inline bool has_talent_grade() const;
  inline void clear_talent_grade();
  static const int kTalentGradeFieldNumber = 6;
  inline ::google::protobuf::int32 talent_grade() const;
  inline void set_talent_grade(::google::protobuf::int32 value);

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 7;
  inline bool has_fashions_p_wearing() const;
  inline void clear_fashions_p_wearing();
  static const int kFashionsPWearingFieldNumber = 7;
  inline const ::SProtoSpace::fashions_pack& fashions_p_wearing() const;
  inline ::SProtoSpace::fashions_pack* mutable_fashions_p_wearing();
  inline ::SProtoSpace::fashions_pack* release_fashions_p_wearing();
  inline void set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pro();
  inline void clear_has_pro();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_border();
  inline void clear_has_border();
  inline void set_has_talent_grade();
  inline void clear_has_talent_grade();
  inline void set_has_fashions_p_wearing();
  inline void clear_has_fashions_p_wearing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::player_property* pro_;
  ::SProtoSpace::player_data* data_;
  int protoid_;
  ::google::protobuf::int32 border_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > liked_list_;
  ::SProtoSpace::fashions_pack* fashions_p_wearing_;
  ::google::protobuf::int32 talent_grade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_player_info_update_ntf : public ::google::protobuf::Message {
 public:
  role_player_info_update_ntf();
  virtual ~role_player_info_update_ntf();

  role_player_info_update_ntf(const role_player_info_update_ntf& from);

  inline role_player_info_update_ntf& operator=(const role_player_info_update_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_info_update_ntf& default_instance();

  void Swap(role_player_info_update_ntf* other);

  // implements Message ----------------------------------------------

  role_player_info_update_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_info_update_ntf& from);
  void MergeFrom(const role_player_info_update_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_update_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.player_data data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::player_data& data() const;
  inline ::SProtoSpace::player_data* mutable_data();
  inline ::SProtoSpace::player_data* release_data();
  inline void set_allocated_data(::SProtoSpace::player_data* data);

  // optional .SProtoSpace.player_property pro = 3;
  inline bool has_pro() const;
  inline void clear_pro();
  static const int kProFieldNumber = 3;
  inline const ::SProtoSpace::player_property& pro() const;
  inline ::SProtoSpace::player_property* mutable_pro();
  inline ::SProtoSpace::player_property* release_pro();
  inline void set_allocated_pro(::SProtoSpace::player_property* pro);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_info_update_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_pro();
  inline void clear_has_pro();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::player_data* data_;
  ::SProtoSpace::player_property* pro_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_info_update_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_fight_score_ntf : public ::google::protobuf::Message {
 public:
  role_fight_score_ntf();
  virtual ~role_fight_score_ntf();

  role_fight_score_ntf(const role_fight_score_ntf& from);

  inline role_fight_score_ntf& operator=(const role_fight_score_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_fight_score_ntf& default_instance();

  void Swap(role_fight_score_ntf* other);

  // implements Message ----------------------------------------------

  role_fight_score_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_fight_score_ntf& from);
  void MergeFrom(const role_fight_score_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_fight_score_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_fight_score_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_fight_score_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_player_change_req : public ::google::protobuf::Message {
 public:
  role_player_change_req();
  virtual ~role_player_change_req();

  role_player_change_req(const role_player_change_req& from);

  inline role_player_change_req& operator=(const role_player_change_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_change_req& default_instance();

  void Swap(role_player_change_req* other);

  // implements Message ----------------------------------------------

  role_player_change_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_change_req& from);
  void MergeFrom(const role_player_change_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 to_player_id = 2;
  inline bool has_to_player_id() const;
  inline void clear_to_player_id();
  static const int kToPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 to_player_id() const;
  inline void set_to_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_change_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_to_player_id();
  inline void clear_has_to_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 to_player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_change_req* default_instance_;
};
// -------------------------------------------------------------------

class role_player_change_ack : public ::google::protobuf::Message {
 public:
  role_player_change_ack();
  virtual ~role_player_change_ack();

  role_player_change_ack(const role_player_change_ack& from);

  inline role_player_change_ack& operator=(const role_player_change_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_change_ack& default_instance();

  void Swap(role_player_change_ack* other);

  // implements Message ----------------------------------------------

  role_player_change_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_change_ack& from);
  void MergeFrom(const role_player_change_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 from_player_id = 3;
  inline bool has_from_player_id() const;
  inline void clear_from_player_id();
  static const int kFromPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 from_player_id() const;
  inline void set_from_player_id(::google::protobuf::int32 value);

  // required int32 to_player_id = 4;
  inline bool has_to_player_id() const;
  inline void clear_to_player_id();
  static const int kToPlayerIdFieldNumber = 4;
  inline ::google::protobuf::int32 to_player_id() const;
  inline void set_to_player_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_change_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_from_player_id();
  inline void clear_has_from_player_id();
  inline void set_has_to_player_id();
  inline void clear_has_to_player_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 from_player_id_;
  ::google::protobuf::int32 to_player_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_change_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_player_active_skin_req : public ::google::protobuf::Message {
 public:
  role_player_active_skin_req();
  virtual ~role_player_active_skin_req();

  role_player_active_skin_req(const role_player_active_skin_req& from);

  inline role_player_active_skin_req& operator=(const role_player_active_skin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_active_skin_req& default_instance();

  void Swap(role_player_active_skin_req* other);

  // implements Message ----------------------------------------------

  role_player_active_skin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_active_skin_req& from);
  void MergeFrom(const role_player_active_skin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 active_skin_id = 3;
  inline bool has_active_skin_id() const;
  inline void clear_active_skin_id();
  static const int kActiveSkinIdFieldNumber = 3;
  inline ::google::protobuf::int32 active_skin_id() const;
  inline void set_active_skin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_active_skin_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_active_skin_id();
  inline void clear_has_active_skin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 active_skin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_active_skin_req* default_instance_;
};
// -------------------------------------------------------------------

class role_player_active_skin_ack : public ::google::protobuf::Message {
 public:
  role_player_active_skin_ack();
  virtual ~role_player_active_skin_ack();

  role_player_active_skin_ack(const role_player_active_skin_ack& from);

  inline role_player_active_skin_ack& operator=(const role_player_active_skin_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_active_skin_ack& default_instance();

  void Swap(role_player_active_skin_ack* other);

  // implements Message ----------------------------------------------

  role_player_active_skin_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_active_skin_ack& from);
  void MergeFrom(const role_player_active_skin_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 active_skin_id = 4;
  inline bool has_active_skin_id() const;
  inline void clear_active_skin_id();
  static const int kActiveSkinIdFieldNumber = 4;
  inline ::google::protobuf::int32 active_skin_id() const;
  inline void set_active_skin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_active_skin_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_active_skin_id();
  inline void clear_has_active_skin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 active_skin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_active_skin_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_player_buy_skin_req : public ::google::protobuf::Message {
 public:
  role_player_buy_skin_req();
  virtual ~role_player_buy_skin_req();

  role_player_buy_skin_req(const role_player_buy_skin_req& from);

  inline role_player_buy_skin_req& operator=(const role_player_buy_skin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_buy_skin_req& default_instance();

  void Swap(role_player_buy_skin_req* other);

  // implements Message ----------------------------------------------

  role_player_buy_skin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_buy_skin_req& from);
  void MergeFrom(const role_player_buy_skin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 skin_id = 3;
  inline bool has_skin_id() const;
  inline void clear_skin_id();
  static const int kSkinIdFieldNumber = 3;
  inline ::google::protobuf::int32 skin_id() const;
  inline void set_skin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_buy_skin_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_skin_id();
  inline void clear_has_skin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 skin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_buy_skin_req* default_instance_;
};
// -------------------------------------------------------------------

class role_player_buy_skin_ack : public ::google::protobuf::Message {
 public:
  role_player_buy_skin_ack();
  virtual ~role_player_buy_skin_ack();

  role_player_buy_skin_ack(const role_player_buy_skin_ack& from);

  inline role_player_buy_skin_ack& operator=(const role_player_buy_skin_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_buy_skin_ack& default_instance();

  void Swap(role_player_buy_skin_ack* other);

  // implements Message ----------------------------------------------

  role_player_buy_skin_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_buy_skin_ack& from);
  void MergeFrom(const role_player_buy_skin_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 skin_id = 4;
  inline bool has_skin_id() const;
  inline void clear_skin_id();
  static const int kSkinIdFieldNumber = 4;
  inline ::google::protobuf::int32 skin_id() const;
  inline void set_skin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_buy_skin_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_skin_id();
  inline void clear_has_skin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 skin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_buy_skin_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_player_wear_skin_req : public ::google::protobuf::Message {
 public:
  role_player_wear_skin_req();
  virtual ~role_player_wear_skin_req();

  role_player_wear_skin_req(const role_player_wear_skin_req& from);

  inline role_player_wear_skin_req& operator=(const role_player_wear_skin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_wear_skin_req& default_instance();

  void Swap(role_player_wear_skin_req* other);

  // implements Message ----------------------------------------------

  role_player_wear_skin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_wear_skin_req& from);
  void MergeFrom(const role_player_wear_skin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 skin_id = 3;
  inline bool has_skin_id() const;
  inline void clear_skin_id();
  static const int kSkinIdFieldNumber = 3;
  inline ::google::protobuf::int32 skin_id() const;
  inline void set_skin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_wear_skin_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_skin_id();
  inline void clear_has_skin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 skin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_wear_skin_req* default_instance_;
};
// -------------------------------------------------------------------

class role_player_wear_skin_ack : public ::google::protobuf::Message {
 public:
  role_player_wear_skin_ack();
  virtual ~role_player_wear_skin_ack();

  role_player_wear_skin_ack(const role_player_wear_skin_ack& from);

  inline role_player_wear_skin_ack& operator=(const role_player_wear_skin_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_wear_skin_ack& default_instance();

  void Swap(role_player_wear_skin_ack* other);

  // implements Message ----------------------------------------------

  role_player_wear_skin_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_wear_skin_ack& from);
  void MergeFrom(const role_player_wear_skin_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 player_id = 3;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 3;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required int32 skin_id = 4;
  inline bool has_skin_id() const;
  inline void clear_skin_id();
  static const int kSkinIdFieldNumber = 4;
  inline ::google::protobuf::int32 skin_id() const;
  inline void set_skin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_wear_skin_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_skin_id();
  inline void clear_has_skin_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 skin_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_wear_skin_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_player_skillup_ntf : public ::google::protobuf::Message {
 public:
  role_player_skillup_ntf();
  virtual ~role_player_skillup_ntf();

  role_player_skillup_ntf(const role_player_skillup_ntf& from);

  inline role_player_skillup_ntf& operator=(const role_player_skillup_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_player_skillup_ntf& default_instance();

  void Swap(role_player_skillup_ntf* other);

  // implements Message ----------------------------------------------

  role_player_skillup_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_player_skillup_ntf& from);
  void MergeFrom(const role_player_skillup_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_skillup_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 player_id = 2;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);

  // required .SProtoSpace.player_skill_info skill_info = 3;
  inline bool has_skill_info() const;
  inline void clear_skill_info();
  static const int kSkillInfoFieldNumber = 3;
  inline const ::SProtoSpace::player_skill_info& skill_info() const;
  inline ::SProtoSpace::player_skill_info* mutable_skill_info();
  inline ::SProtoSpace::player_skill_info* release_skill_info();
  inline void set_allocated_skill_info(::SProtoSpace::player_skill_info* skill_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_player_skillup_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_skill_info();
  inline void clear_has_skill_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 player_id_;
  ::SProtoSpace::player_skill_info* skill_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_player_skillup_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_buy_req : public ::google::protobuf::Message {
 public:
  role_buy_req();
  virtual ~role_buy_req();

  role_buy_req(const role_buy_req& from);

  inline role_buy_req& operator=(const role_buy_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_buy_req& default_instance();

  void Swap(role_buy_req* other);

  // implements Message ----------------------------------------------

  role_buy_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_buy_req& from);
  void MergeFrom(const role_buy_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required .SProtoSpace.EItemType buy_type = 2;
  inline bool has_buy_type() const;
  inline void clear_buy_type();
  static const int kBuyTypeFieldNumber = 2;
  inline ::SProtoSpace::EItemType buy_type() const;
  inline void set_buy_type(::SProtoSpace::EItemType value);

  // required int32 buy_count = 3;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 3;
  inline ::google::protobuf::int32 buy_count() const;
  inline void set_buy_count(::google::protobuf::int32 value);

  // required int32 buy_id = 4;
  inline bool has_buy_id() const;
  inline void clear_buy_id();
  static const int kBuyIdFieldNumber = 4;
  inline ::google::protobuf::int32 buy_id() const;
  inline void set_buy_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_buy_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_buy_type();
  inline void clear_has_buy_type();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();
  inline void set_has_buy_id();
  inline void clear_has_buy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int buy_type_;
  ::google::protobuf::int32 buy_count_;
  ::google::protobuf::int32 buy_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_buy_req* default_instance_;
};
// -------------------------------------------------------------------

class role_buy_ack : public ::google::protobuf::Message {
 public:
  role_buy_ack();
  virtual ~role_buy_ack();

  role_buy_ack(const role_buy_ack& from);

  inline role_buy_ack& operator=(const role_buy_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_buy_ack& default_instance();

  void Swap(role_buy_ack* other);

  // implements Message ----------------------------------------------

  role_buy_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_buy_ack& from);
  void MergeFrom(const role_buy_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // required int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required .SProtoSpace.EItemType buy_type = 3;
  inline bool has_buy_type() const;
  inline void clear_buy_type();
  static const int kBuyTypeFieldNumber = 3;
  inline ::SProtoSpace::EItemType buy_type() const;
  inline void set_buy_type(::SProtoSpace::EItemType value);

  // required int32 buy_count = 4;
  inline bool has_buy_count() const;
  inline void clear_buy_count();
  static const int kBuyCountFieldNumber = 4;
  inline ::google::protobuf::int32 buy_count() const;
  inline void set_buy_count(::google::protobuf::int32 value);

  // required int32 buy_id = 5;
  inline bool has_buy_id() const;
  inline void clear_buy_id();
  static const int kBuyIdFieldNumber = 5;
  inline ::google::protobuf::int32 buy_id() const;
  inline void set_buy_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_buy_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_buy_type();
  inline void clear_has_buy_type();
  inline void set_has_buy_count();
  inline void clear_has_buy_count();
  inline void set_has_buy_id();
  inline void clear_has_buy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  int buy_type_;
  ::google::protobuf::int32 buy_count_;
  ::google::protobuf::int32 buy_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_buy_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_base_info_req : public ::google::protobuf::Message {
 public:
  role_show_base_info_req();
  virtual ~role_show_base_info_req();

  role_show_base_info_req(const role_show_base_info_req& from);

  inline role_show_base_info_req& operator=(const role_show_base_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_base_info_req& default_instance();

  void Swap(role_show_base_info_req* other);

  // implements Message ----------------------------------------------

  role_show_base_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_base_info_req& from);
  void MergeFrom(const role_show_base_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_base_info_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_base_info_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_base_info_ack : public ::google::protobuf::Message {
 public:
  role_show_base_info_ack();
  virtual ~role_show_base_info_ack();

  role_show_base_info_ack(const role_show_base_info_ack& from);

  inline role_show_base_info_ack& operator=(const role_show_base_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_base_info_ack& default_instance();

  void Swap(role_show_base_info_ack* other);

  // implements Message ----------------------------------------------

  role_show_base_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_base_info_ack& from);
  void MergeFrom(const role_show_base_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.show_player_base show_data = 4;
  inline bool has_show_data() const;
  inline void clear_show_data();
  static const int kShowDataFieldNumber = 4;
  inline const ::SProtoSpace::show_player_base& show_data() const;
  inline ::SProtoSpace::show_player_base* mutable_show_data();
  inline ::SProtoSpace::show_player_base* release_show_data();
  inline void set_allocated_show_data(::SProtoSpace::show_player_base* show_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_base_info_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_show_data();
  inline void clear_has_show_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::show_player_base* show_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_base_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_get_like_req : public ::google::protobuf::Message {
 public:
  role_show_get_like_req();
  virtual ~role_show_get_like_req();

  role_show_get_like_req(const role_show_get_like_req& from);

  inline role_show_get_like_req& operator=(const role_show_get_like_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_get_like_req& default_instance();

  void Swap(role_show_get_like_req* other);

  // implements Message ----------------------------------------------

  role_show_get_like_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_get_like_req& from);
  void MergeFrom(const role_show_get_like_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_get_like_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_get_like_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_get_like_ack : public ::google::protobuf::Message {
 public:
  role_show_get_like_ack();
  virtual ~role_show_get_like_ack();

  role_show_get_like_ack(const role_show_get_like_ack& from);

  inline role_show_get_like_ack& operator=(const role_show_get_like_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_get_like_ack& default_instance();

  void Swap(role_show_get_like_ack* other);

  // implements Message ----------------------------------------------

  role_show_get_like_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_get_like_ack& from);
  void MergeFrom(const role_show_get_like_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional int32 likes = 4;
  inline bool has_likes() const;
  inline void clear_likes();
  static const int kLikesFieldNumber = 4;
  inline ::google::protobuf::int32 likes() const;
  inline void set_likes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_get_like_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_likes();
  inline void clear_has_likes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::int32 likes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_get_like_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_player_base_req : public ::google::protobuf::Message {
 public:
  role_show_player_base_req();
  virtual ~role_show_player_base_req();

  role_show_player_base_req(const role_show_player_base_req& from);

  inline role_show_player_base_req& operator=(const role_show_player_base_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_player_base_req& default_instance();

  void Swap(role_show_player_base_req* other);

  // implements Message ----------------------------------------------

  role_show_player_base_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_player_base_req& from);
  void MergeFrom(const role_show_player_base_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_player_base_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_player_base_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_player_base_ack : public ::google::protobuf::Message {
 public:
  role_show_player_base_ack();
  virtual ~role_show_player_base_ack();

  role_show_player_base_ack(const role_show_player_base_ack& from);

  inline role_show_player_base_ack& operator=(const role_show_player_base_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_player_base_ack& default_instance();

  void Swap(role_show_player_base_ack* other);

  // implements Message ----------------------------------------------

  role_show_player_base_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_player_base_ack& from);
  void MergeFrom(const role_show_player_base_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.show_player_base show_data = 4;
  inline bool has_show_data() const;
  inline void clear_show_data();
  static const int kShowDataFieldNumber = 4;
  inline const ::SProtoSpace::show_player_base& show_data() const;
  inline ::SProtoSpace::show_player_base* mutable_show_data();
  inline ::SProtoSpace::show_player_base* release_show_data();
  inline void set_allocated_show_data(::SProtoSpace::show_player_base* show_data);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_player_base_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_show_data();
  inline void clear_has_show_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::show_player_base* show_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_player_base_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_like_req : public ::google::protobuf::Message {
 public:
  role_show_like_req();
  virtual ~role_show_like_req();

  role_show_like_req(const role_show_like_req& from);

  inline role_show_like_req& operator=(const role_show_like_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_like_req& default_instance();

  void Swap(role_show_like_req* other);

  // implements Message ----------------------------------------------

  role_show_like_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_like_req& from);
  void MergeFrom(const role_show_like_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_like_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_like_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_like_ack : public ::google::protobuf::Message {
 public:
  role_show_like_ack();
  virtual ~role_show_like_ack();

  role_show_like_ack(const role_show_like_ack& from);

  inline role_show_like_ack& operator=(const role_show_like_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_like_ack& default_instance();

  void Swap(role_show_like_ack* other);

  // implements Message ----------------------------------------------

  role_show_like_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_like_ack& from);
  void MergeFrom(const role_show_like_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_like_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 show_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_like_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_name_req : public ::google::protobuf::Message {
 public:
  role_show_change_name_req();
  virtual ~role_show_change_name_req();

  role_show_change_name_req(const role_show_change_name_req& from);

  inline role_show_change_name_req& operator=(const role_show_change_name_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_name_req& default_instance();

  void Swap(role_show_change_name_req* other);

  // implements Message ----------------------------------------------

  role_show_change_name_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_name_req& from);
  void MergeFrom(const role_show_change_name_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string new_name = 2;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 2;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_name_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_new_name();
  inline void clear_has_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* new_name_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_name_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_name_ack : public ::google::protobuf::Message {
 public:
  role_show_change_name_ack();
  virtual ~role_show_change_name_ack();

  role_show_change_name_ack(const role_show_change_name_ack& from);

  inline role_show_change_name_ack& operator=(const role_show_change_name_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_name_ack& default_instance();

  void Swap(role_show_change_name_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_name_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_name_ack& from);
  void MergeFrom(const role_show_change_name_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string new_name = 3;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 3;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // optional int32 change_name_time = 4;
  inline bool has_change_name_time() const;
  inline void clear_change_name_time();
  static const int kChangeNameTimeFieldNumber = 4;
  inline ::google::protobuf::int32 change_name_time() const;
  inline void set_change_name_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_name_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_new_name();
  inline void clear_has_new_name();
  inline void set_has_change_name_time();
  inline void clear_has_change_name_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::std::string* new_name_;
  ::google::protobuf::int32 change_name_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_name_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_position_req : public ::google::protobuf::Message {
 public:
  role_show_change_position_req();
  virtual ~role_show_change_position_req();

  role_show_change_position_req(const role_show_change_position_req& from);

  inline role_show_change_position_req& operator=(const role_show_change_position_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_position_req& default_instance();

  void Swap(role_show_change_position_req* other);

  // implements Message ----------------------------------------------

  role_show_change_position_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_position_req& from);
  void MergeFrom(const role_show_change_position_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.lsg_position_info position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::SProtoSpace::lsg_position_info& position() const;
  inline ::SProtoSpace::lsg_position_info* mutable_position();
  inline ::SProtoSpace::lsg_position_info* release_position();
  inline void set_allocated_position(::SProtoSpace::lsg_position_info* position);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_position_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::lsg_position_info* position_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_position_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_position_ack : public ::google::protobuf::Message {
 public:
  role_show_change_position_ack();
  virtual ~role_show_change_position_ack();

  role_show_change_position_ack(const role_show_change_position_ack& from);

  inline role_show_change_position_ack& operator=(const role_show_change_position_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_position_ack& default_instance();

  void Swap(role_show_change_position_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_position_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_position_ack& from);
  void MergeFrom(const role_show_change_position_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .SProtoSpace.lsg_position_info position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::SProtoSpace::lsg_position_info& position() const;
  inline ::SProtoSpace::lsg_position_info* mutable_position();
  inline ::SProtoSpace::lsg_position_info* release_position();
  inline void set_allocated_position(::SProtoSpace::lsg_position_info* position);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_position_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::SProtoSpace::lsg_position_info* position_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_position_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_signature_req : public ::google::protobuf::Message {
 public:
  role_show_change_signature_req();
  virtual ~role_show_change_signature_req();

  role_show_change_signature_req(const role_show_change_signature_req& from);

  inline role_show_change_signature_req& operator=(const role_show_change_signature_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_signature_req& default_instance();

  void Swap(role_show_change_signature_req* other);

  // implements Message ----------------------------------------------

  role_show_change_signature_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_signature_req& from);
  void MergeFrom(const role_show_change_signature_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_signature_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* signature_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_signature_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_signature_ack : public ::google::protobuf::Message {
 public:
  role_show_change_signature_ack();
  virtual ~role_show_change_signature_ack();

  role_show_change_signature_ack(const role_show_change_signature_ack& from);

  inline role_show_change_signature_ack& operator=(const role_show_change_signature_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_signature_ack& default_instance();

  void Swap(role_show_change_signature_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_signature_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_signature_ack& from);
  void MergeFrom(const role_show_change_signature_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_signature_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_signature_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_age_req : public ::google::protobuf::Message {
 public:
  role_show_change_age_req();
  virtual ~role_show_change_age_req();

  role_show_change_age_req(const role_show_change_age_req& from);

  inline role_show_change_age_req& operator=(const role_show_change_age_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_age_req& default_instance();

  void Swap(role_show_change_age_req* other);

  // implements Message ----------------------------------------------

  role_show_change_age_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_age_req& from);
  void MergeFrom(const role_show_change_age_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_age_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_age_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_age_ack : public ::google::protobuf::Message {
 public:
  role_show_change_age_ack();
  virtual ~role_show_change_age_ack();

  role_show_change_age_ack(const role_show_change_age_ack& from);

  inline role_show_change_age_ack& operator=(const role_show_change_age_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_age_ack& default_instance();

  void Swap(role_show_change_age_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_age_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_age_ack& from);
  void MergeFrom(const role_show_change_age_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_age_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_age();
  inline void clear_has_age();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 age_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_age_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_starsign_req : public ::google::protobuf::Message {
 public:
  role_show_change_starsign_req();
  virtual ~role_show_change_starsign_req();

  role_show_change_starsign_req(const role_show_change_starsign_req& from);

  inline role_show_change_starsign_req& operator=(const role_show_change_starsign_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_starsign_req& default_instance();

  void Swap(role_show_change_starsign_req* other);

  // implements Message ----------------------------------------------

  role_show_change_starsign_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_starsign_req& from);
  void MergeFrom(const role_show_change_starsign_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 star_sign = 2;
  inline bool has_star_sign() const;
  inline void clear_star_sign();
  static const int kStarSignFieldNumber = 2;
  inline ::google::protobuf::uint32 star_sign() const;
  inline void set_star_sign(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_starsign_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_star_sign();
  inline void clear_has_star_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 star_sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_starsign_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_starsign_ack : public ::google::protobuf::Message {
 public:
  role_show_change_starsign_ack();
  virtual ~role_show_change_starsign_ack();

  role_show_change_starsign_ack(const role_show_change_starsign_ack& from);

  inline role_show_change_starsign_ack& operator=(const role_show_change_starsign_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_starsign_ack& default_instance();

  void Swap(role_show_change_starsign_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_starsign_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_starsign_ack& from);
  void MergeFrom(const role_show_change_starsign_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 star_sign = 3;
  inline bool has_star_sign() const;
  inline void clear_star_sign();
  static const int kStarSignFieldNumber = 3;
  inline ::google::protobuf::uint32 star_sign() const;
  inline void set_star_sign(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_starsign_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_star_sign();
  inline void clear_has_star_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 star_sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_starsign_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_birthday_req : public ::google::protobuf::Message {
 public:
  role_show_change_birthday_req();
  virtual ~role_show_change_birthday_req();

  role_show_change_birthday_req(const role_show_change_birthday_req& from);

  inline role_show_change_birthday_req& operator=(const role_show_change_birthday_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_birthday_req& default_instance();

  void Swap(role_show_change_birthday_req* other);

  // implements Message ----------------------------------------------

  role_show_change_birthday_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_birthday_req& from);
  void MergeFrom(const role_show_change_birthday_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint32 day = 3;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 3;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_birthday_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_birthday_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_birthday_ack : public ::google::protobuf::Message {
 public:
  role_show_change_birthday_ack();
  virtual ~role_show_change_birthday_ack();

  role_show_change_birthday_ack(const role_show_change_birthday_ack& from);

  inline role_show_change_birthday_ack& operator=(const role_show_change_birthday_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_birthday_ack& default_instance();

  void Swap(role_show_change_birthday_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_birthday_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_birthday_ack& from);
  void MergeFrom(const role_show_change_birthday_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 month = 3;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 3;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint32 day = 4;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 4;
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // optional uint32 star_sign = 5;
  inline bool has_star_sign() const;
  inline void clear_star_sign();
  static const int kStarSignFieldNumber = 5;
  inline ::google::protobuf::uint32 star_sign() const;
  inline void set_star_sign(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_birthday_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_star_sign();
  inline void clear_has_star_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 month_;
  ::google::protobuf::uint32 day_;
  ::google::protobuf::uint32 star_sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_birthday_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_labels_req : public ::google::protobuf::Message {
 public:
  role_show_change_labels_req();
  virtual ~role_show_change_labels_req();

  role_show_change_labels_req(const role_show_change_labels_req& from);

  inline role_show_change_labels_req& operator=(const role_show_change_labels_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_labels_req& default_instance();

  void Swap(role_show_change_labels_req* other);

  // implements Message ----------------------------------------------

  role_show_change_labels_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_labels_req& from);
  void MergeFrom(const role_show_change_labels_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint32 labels = 2;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 2;
  inline ::google::protobuf::uint32 labels(int index) const;
  inline void set_labels(int index, ::google::protobuf::uint32 value);
  inline void add_labels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      labels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_labels();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_labels_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > labels_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_labels_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_change_labels_ack : public ::google::protobuf::Message {
 public:
  role_show_change_labels_ack();
  virtual ~role_show_change_labels_ack();

  role_show_change_labels_ack(const role_show_change_labels_ack& from);

  inline role_show_change_labels_ack& operator=(const role_show_change_labels_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_change_labels_ack& default_instance();

  void Swap(role_show_change_labels_ack* other);

  // implements Message ----------------------------------------------

  role_show_change_labels_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_change_labels_ack& from);
  void MergeFrom(const role_show_change_labels_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated uint32 labels = 3;
  inline int labels_size() const;
  inline void clear_labels();
  static const int kLabelsFieldNumber = 3;
  inline ::google::protobuf::uint32 labels(int index) const;
  inline void set_labels(int index, ::google::protobuf::uint32 value);
  inline void add_labels(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      labels() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_labels();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_change_labels_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > labels_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_change_labels_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_get_emotion_req : public ::google::protobuf::Message {
 public:
  role_show_get_emotion_req();
  virtual ~role_show_get_emotion_req();

  role_show_get_emotion_req(const role_show_get_emotion_req& from);

  inline role_show_get_emotion_req& operator=(const role_show_get_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_get_emotion_req& default_instance();

  void Swap(role_show_get_emotion_req* other);

  // implements Message ----------------------------------------------

  role_show_get_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_get_emotion_req& from);
  void MergeFrom(const role_show_get_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 start_index() const;
  inline void set_start_index(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_get_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  int protoid_;
  ::google::protobuf::uint32 start_index_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_get_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_get_emotion_ack : public ::google::protobuf::Message {
 public:
  role_show_get_emotion_ack();
  virtual ~role_show_get_emotion_ack();

  role_show_get_emotion_ack(const role_show_get_emotion_ack& from);

  inline role_show_get_emotion_ack& operator=(const role_show_get_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_get_emotion_ack& default_instance();

  void Swap(role_show_get_emotion_ack* other);

  // implements Message ----------------------------------------------

  role_show_get_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_get_emotion_ack& from);
  void MergeFrom(const role_show_get_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
  inline bool has_emotion_all() const;
  inline void clear_emotion_all();
  static const int kEmotionAllFieldNumber = 4;
  inline const ::SProtoSpace::show_emotion_all_info& emotion_all() const;
  inline ::SProtoSpace::show_emotion_all_info* mutable_emotion_all();
  inline ::SProtoSpace::show_emotion_all_info* release_emotion_all();
  inline void set_allocated_emotion_all(::SProtoSpace::show_emotion_all_info* emotion_all);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_get_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_all();
  inline void clear_has_emotion_all();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::show_emotion_all_info* emotion_all_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_get_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_write_emotion_req : public ::google::protobuf::Message {
 public:
  role_show_write_emotion_req();
  virtual ~role_show_write_emotion_req();

  role_show_write_emotion_req(const role_show_write_emotion_req& from);

  inline role_show_write_emotion_req& operator=(const role_show_write_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_write_emotion_req& default_instance();

  void Swap(role_show_write_emotion_req* other);

  // implements Message ----------------------------------------------

  role_show_write_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_write_emotion_req& from);
  void MergeFrom(const role_show_write_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional string msg_content = 2;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 2;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // repeated string img_urls = 3;
  inline int img_urls_size() const;
  inline void clear_img_urls();
  static const int kImgUrlsFieldNumber = 3;
  inline const ::std::string& img_urls(int index) const;
  inline ::std::string* mutable_img_urls(int index);
  inline void set_img_urls(int index, const ::std::string& value);
  inline void set_img_urls(int index, const char* value);
  inline void set_img_urls(int index, const char* value, size_t size);
  inline ::std::string* add_img_urls();
  inline void add_img_urls(const ::std::string& value);
  inline void add_img_urls(const char* value);
  inline void add_img_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& img_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_img_urls();

  // optional .SProtoSpace.EmotionType msg_type = 4;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 4;
  inline ::SProtoSpace::EmotionType msg_type() const;
  inline void set_msg_type(::SProtoSpace::EmotionType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_write_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msg_content_;
  int protoid_;
  int msg_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> img_urls_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_write_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_write_emotion_ack : public ::google::protobuf::Message {
 public:
  role_show_write_emotion_ack();
  virtual ~role_show_write_emotion_ack();

  role_show_write_emotion_ack(const role_show_write_emotion_ack& from);

  inline role_show_write_emotion_ack& operator=(const role_show_write_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_write_emotion_ack& default_instance();

  void Swap(role_show_write_emotion_ack* other);

  // implements Message ----------------------------------------------

  role_show_write_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_write_emotion_ack& from);
  void MergeFrom(const role_show_write_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 emotion_id = 3;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 3;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional string msg_content = 4;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 4;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // repeated string img_urls = 5;
  inline int img_urls_size() const;
  inline void clear_img_urls();
  static const int kImgUrlsFieldNumber = 5;
  inline const ::std::string& img_urls(int index) const;
  inline ::std::string* mutable_img_urls(int index);
  inline void set_img_urls(int index, const ::std::string& value);
  inline void set_img_urls(int index, const char* value);
  inline void set_img_urls(int index, const char* value, size_t size);
  inline ::std::string* add_img_urls();
  inline void add_img_urls(const ::std::string& value);
  inline void add_img_urls(const char* value);
  inline void add_img_urls(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& img_urls() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_img_urls();

  // optional .SProtoSpace.EmotionType msg_type = 6;
  inline bool has_msg_type() const;
  inline void clear_msg_type();
  static const int kMsgTypeFieldNumber = 6;
  inline ::SProtoSpace::EmotionType msg_type() const;
  inline void set_msg_type(::SProtoSpace::EmotionType value);

  // optional uint64 create_time = 7;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 create_time() const;
  inline void set_create_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_write_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_msg_type();
  inline void clear_has_msg_type();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 emotion_id_;
  ::std::string* msg_content_;
  ::google::protobuf::RepeatedPtrField< ::std::string> img_urls_;
  ::google::protobuf::uint64 create_time_;
  int msg_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_write_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_like_emotion_req : public ::google::protobuf::Message {
 public:
  role_show_like_emotion_req();
  virtual ~role_show_like_emotion_req();

  role_show_like_emotion_req(const role_show_like_emotion_req& from);

  inline role_show_like_emotion_req& operator=(const role_show_like_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_like_emotion_req& default_instance();

  void Swap(role_show_like_emotion_req* other);

  // implements Message ----------------------------------------------

  role_show_like_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_like_emotion_req& from);
  void MergeFrom(const role_show_like_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint64 emotion_id = 4;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 4;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 5;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_like_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_like_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_like_emotion_ack : public ::google::protobuf::Message {
 public:
  role_show_like_emotion_ack();
  virtual ~role_show_like_emotion_ack();

  role_show_like_emotion_ack(const role_show_like_emotion_ack& from);

  inline role_show_like_emotion_ack& operator=(const role_show_like_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_like_emotion_ack& default_instance();

  void Swap(role_show_like_emotion_ack* other);

  // implements Message ----------------------------------------------

  role_show_like_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_like_emotion_ack& from);
  void MergeFrom(const role_show_like_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint64 emotion_id = 4;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 4;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 5;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 5;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 6;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_like_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::std::string* role_name_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 show_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_like_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_comment_emotion_req : public ::google::protobuf::Message {
 public:
  role_show_comment_emotion_req();
  virtual ~role_show_comment_emotion_req();

  role_show_comment_emotion_req(const role_show_comment_emotion_req& from);

  inline role_show_comment_emotion_req& operator=(const role_show_comment_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_comment_emotion_req& default_instance();

  void Swap(role_show_comment_emotion_req* other);

  // implements Message ----------------------------------------------

  role_show_comment_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_comment_emotion_req& from);
  void MergeFrom(const role_show_comment_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 3;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 3;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint64 to_id = 4;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 4;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional string to_name = 5;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 5;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional string msg_content = 6;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 6;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // optional uint64 show_role_id = 7;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 8;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 8;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_comment_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::std::string* from_name_;
  ::google::protobuf::uint64 to_id_;
  ::std::string* to_name_;
  ::std::string* msg_content_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 emotion_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_comment_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_comment_emotion_ack : public ::google::protobuf::Message {
 public:
  role_show_comment_emotion_ack();
  virtual ~role_show_comment_emotion_ack();

  role_show_comment_emotion_ack(const role_show_comment_emotion_ack& from);

  inline role_show_comment_emotion_ack& operator=(const role_show_comment_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_comment_emotion_ack& default_instance();

  void Swap(role_show_comment_emotion_ack* other);

  // implements Message ----------------------------------------------

  role_show_comment_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_comment_emotion_ack& from);
  void MergeFrom(const role_show_comment_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 3;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 3;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint64 to_id = 4;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 4;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional string to_name = 5;
  inline bool has_to_name() const;
  inline void clear_to_name();
  static const int kToNameFieldNumber = 5;
  inline const ::std::string& to_name() const;
  inline void set_to_name(const ::std::string& value);
  inline void set_to_name(const char* value);
  inline void set_to_name(const char* value, size_t size);
  inline ::std::string* mutable_to_name();
  inline ::std::string* release_to_name();
  inline void set_allocated_to_name(::std::string* to_name);

  // optional string msg_content = 6;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 6;
  inline const ::std::string& msg_content() const;
  inline void set_msg_content(const ::std::string& value);
  inline void set_msg_content(const char* value);
  inline void set_msg_content(const char* value, size_t size);
  inline ::std::string* mutable_msg_content();
  inline ::std::string* release_msg_content();
  inline void set_allocated_msg_content(::std::string* msg_content);

  // optional uint64 show_role_id = 7;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 8;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 8;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 9;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 9;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 comment_id = 10;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 10;
  inline ::google::protobuf::uint64 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_comment_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_to_name();
  inline void clear_has_to_name();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::std::string* from_name_;
  ::google::protobuf::uint64 to_id_;
  ::std::string* to_name_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::std::string* msg_content_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 comment_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_comment_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_remove_emotion_req : public ::google::protobuf::Message {
 public:
  role_show_remove_emotion_req();
  virtual ~role_show_remove_emotion_req();

  role_show_remove_emotion_req(const role_show_remove_emotion_req& from);

  inline role_show_remove_emotion_req& operator=(const role_show_remove_emotion_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_remove_emotion_req& default_instance();

  void Swap(role_show_remove_emotion_req* other);

  // implements Message ----------------------------------------------

  role_show_remove_emotion_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_remove_emotion_req& from);
  void MergeFrom(const role_show_remove_emotion_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 emotion_id = 2;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_remove_emotion_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 emotion_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_remove_emotion_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_remove_emotion_ack : public ::google::protobuf::Message {
 public:
  role_show_remove_emotion_ack();
  virtual ~role_show_remove_emotion_ack();

  role_show_remove_emotion_ack(const role_show_remove_emotion_ack& from);

  inline role_show_remove_emotion_ack& operator=(const role_show_remove_emotion_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_remove_emotion_ack& default_instance();

  void Swap(role_show_remove_emotion_ack* other);

  // implements Message ----------------------------------------------

  role_show_remove_emotion_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_remove_emotion_ack& from);
  void MergeFrom(const role_show_remove_emotion_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 emotion_id = 2;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 2;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_remove_emotion_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 emotion_id_;
  int protoid_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_remove_emotion_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_remove_comment_req : public ::google::protobuf::Message {
 public:
  role_show_remove_comment_req();
  virtual ~role_show_remove_comment_req();

  role_show_remove_comment_req(const role_show_remove_comment_req& from);

  inline role_show_remove_comment_req& operator=(const role_show_remove_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_remove_comment_req& default_instance();

  void Swap(role_show_remove_comment_req* other);

  // implements Message ----------------------------------------------

  role_show_remove_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_remove_comment_req& from);
  void MergeFrom(const role_show_remove_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional uint64 to_id = 3;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 5;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 comment_id = 6;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 6;
  inline ::google::protobuf::uint64 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_remove_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::google::protobuf::uint64 to_id_;
  ::google::protobuf::uint64 show_role_id_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 comment_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_remove_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_remove_comment_ack : public ::google::protobuf::Message {
 public:
  role_show_remove_comment_ack();
  virtual ~role_show_remove_comment_ack();

  role_show_remove_comment_ack(const role_show_remove_comment_ack& from);

  inline role_show_remove_comment_ack& operator=(const role_show_remove_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_remove_comment_ack& default_instance();

  void Swap(role_show_remove_comment_ack* other);

  // implements Message ----------------------------------------------

  role_show_remove_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_remove_comment_ack& from);
  void MergeFrom(const role_show_remove_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 from_id = 2;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional uint64 to_id = 3;
  inline bool has_to_id() const;
  inline void clear_to_id();
  static const int kToIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_id() const;
  inline void set_to_id(::google::protobuf::uint64 value);

  // optional uint64 show_role_id = 4;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional uint64 emotion_id = 5;
  inline bool has_emotion_id() const;
  inline void clear_emotion_id();
  static const int kEmotionIdFieldNumber = 5;
  inline ::google::protobuf::uint64 emotion_id() const;
  inline void set_emotion_id(::google::protobuf::uint64 value);

  // optional uint64 comment_id = 6;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 6;
  inline ::google::protobuf::uint64 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_remove_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_to_id();
  inline void clear_has_to_id();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_emotion_id();
  inline void clear_has_emotion_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::google::protobuf::uint64 to_id_;
  ::google::protobuf::uint64 show_role_id_;
  int protoid_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 emotion_id_;
  ::google::protobuf::uint64 comment_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_remove_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_set_hero_info : public ::google::protobuf::Message {
 public:
  role_show_set_hero_info();
  virtual ~role_show_set_hero_info();

  role_show_set_hero_info(const role_show_set_hero_info& from);

  inline role_show_set_hero_info& operator=(const role_show_set_hero_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_set_hero_info& default_instance();

  void Swap(role_show_set_hero_info* other);

  // implements Message ----------------------------------------------

  role_show_set_hero_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_set_hero_info& from);
  void MergeFrom(const role_show_set_hero_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int64 hero_id = 2;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  inline ::google::protobuf::int64 hero_id() const;
  inline void set_hero_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_set_hero_info)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 hero_id_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_set_hero_info* default_instance_;
};
// -------------------------------------------------------------------

class role_show_set_hero_req : public ::google::protobuf::Message {
 public:
  role_show_set_hero_req();
  virtual ~role_show_set_hero_req();

  role_show_set_hero_req(const role_show_set_hero_req& from);

  inline role_show_set_hero_req& operator=(const role_show_set_hero_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_set_hero_req& default_instance();

  void Swap(role_show_set_hero_req* other);

  // implements Message ----------------------------------------------

  role_show_set_hero_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_set_hero_req& from);
  void MergeFrom(const role_show_set_hero_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.role_show_set_hero_info data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::SProtoSpace::role_show_set_hero_info& data(int index) const;
  inline ::SProtoSpace::role_show_set_hero_info* mutable_data(int index);
  inline ::SProtoSpace::role_show_set_hero_info* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_set_hero_info >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_set_hero_info >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_set_hero_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_set_hero_info > data_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_set_hero_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_set_hero_ack : public ::google::protobuf::Message {
 public:
  role_show_set_hero_ack();
  virtual ~role_show_set_hero_ack();

  role_show_set_hero_ack(const role_show_set_hero_ack& from);

  inline role_show_set_hero_ack& operator=(const role_show_set_hero_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_set_hero_ack& default_instance();

  void Swap(role_show_set_hero_ack* other);

  // implements Message ----------------------------------------------

  role_show_set_hero_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_set_hero_ack& from);
  void MergeFrom(const role_show_set_hero_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_set_hero_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_set_hero_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_set_border_req : public ::google::protobuf::Message {
 public:
  role_show_set_border_req();
  virtual ~role_show_set_border_req();

  role_show_set_border_req(const role_show_set_border_req& from);

  inline role_show_set_border_req& operator=(const role_show_set_border_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_set_border_req& default_instance();

  void Swap(role_show_set_border_req* other);

  // implements Message ----------------------------------------------

  role_show_set_border_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_set_border_req& from);
  void MergeFrom(const role_show_set_border_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 border_id = 2;
  inline bool has_border_id() const;
  inline void clear_border_id();
  static const int kBorderIdFieldNumber = 2;
  inline ::google::protobuf::int32 border_id() const;
  inline void set_border_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_set_border_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_border_id();
  inline void clear_has_border_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 border_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_set_border_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_set_border_ack : public ::google::protobuf::Message {
 public:
  role_show_set_border_ack();
  virtual ~role_show_set_border_ack();

  role_show_set_border_ack(const role_show_set_border_ack& from);

  inline role_show_set_border_ack& operator=(const role_show_set_border_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_set_border_ack& default_instance();

  void Swap(role_show_set_border_ack* other);

  // implements Message ----------------------------------------------

  role_show_set_border_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_set_border_ack& from);
  void MergeFrom(const role_show_set_border_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_set_border_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_set_border_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_comment_req : public ::google::protobuf::Message {
 public:
  role_show_comment_req();
  virtual ~role_show_comment_req();

  role_show_comment_req(const role_show_comment_req& from);

  inline role_show_comment_req& operator=(const role_show_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_comment_req& default_instance();

  void Swap(role_show_comment_req* other);

  // implements Message ----------------------------------------------

  role_show_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_comment_req& from);
  void MergeFrom(const role_show_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.comment_info comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::SProtoSpace::comment_info& comment() const;
  inline ::SProtoSpace::comment_info* mutable_comment();
  inline ::SProtoSpace::comment_info* release_comment();
  inline void set_allocated_comment(::SProtoSpace::comment_info* comment);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::comment_info* comment_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_comment_ack : public ::google::protobuf::Message {
 public:
  role_show_comment_ack();
  virtual ~role_show_comment_ack();

  role_show_comment_ack(const role_show_comment_ack& from);

  inline role_show_comment_ack& operator=(const role_show_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_comment_ack& default_instance();

  void Swap(role_show_comment_ack* other);

  // implements Message ----------------------------------------------

  role_show_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_comment_ack& from);
  void MergeFrom(const role_show_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .SProtoSpace.comment_info comment = 3;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 3;
  inline const ::SProtoSpace::comment_info& comment() const;
  inline ::SProtoSpace::comment_info* mutable_comment();
  inline ::SProtoSpace::comment_info* release_comment();
  inline void set_allocated_comment(::SProtoSpace::comment_info* comment);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_comment();
  inline void clear_has_comment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::SProtoSpace::comment_info* comment_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_delete_comment_req : public ::google::protobuf::Message {
 public:
  role_show_delete_comment_req();
  virtual ~role_show_delete_comment_req();

  role_show_delete_comment_req(const role_show_delete_comment_req& from);

  inline role_show_delete_comment_req& operator=(const role_show_delete_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_delete_comment_req& default_instance();

  void Swap(role_show_delete_comment_req* other);

  // implements Message ----------------------------------------------

  role_show_delete_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_delete_comment_req& from);
  void MergeFrom(const role_show_delete_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional uint64 to_role_id = 3;
  inline bool has_to_role_id() const;
  inline void clear_to_role_id();
  static const int kToRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 to_role_id() const;
  inline void set_to_role_id(::google::protobuf::uint64 value);

  // optional uint64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_delete_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_to_role_id();
  inline void clear_has_to_role_id();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::uint64 to_role_id_;
  ::google::protobuf::uint64 time_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_delete_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_delete_comment_ack : public ::google::protobuf::Message {
 public:
  role_show_delete_comment_ack();
  virtual ~role_show_delete_comment_ack();

  role_show_delete_comment_ack(const role_show_delete_comment_ack& from);

  inline role_show_delete_comment_ack& operator=(const role_show_delete_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_delete_comment_ack& default_instance();

  void Swap(role_show_delete_comment_ack* other);

  // implements Message ----------------------------------------------

  role_show_delete_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_delete_comment_ack& from);
  void MergeFrom(const role_show_delete_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_delete_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_delete_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_show_get_comment_req : public ::google::protobuf::Message {
 public:
  role_show_get_comment_req();
  virtual ~role_show_get_comment_req();

  role_show_get_comment_req(const role_show_get_comment_req& from);

  inline role_show_get_comment_req& operator=(const role_show_get_comment_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_get_comment_req& default_instance();

  void Swap(role_show_get_comment_req* other);

  // implements Message ----------------------------------------------

  role_show_get_comment_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_get_comment_req& from);
  void MergeFrom(const role_show_get_comment_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 show_role_id = 2;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_get_comment_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 show_role_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_get_comment_req* default_instance_;
};
// -------------------------------------------------------------------

class role_show_get_comment_ack : public ::google::protobuf::Message {
 public:
  role_show_get_comment_ack();
  virtual ~role_show_get_comment_ack();

  role_show_get_comment_ack(const role_show_get_comment_ack& from);

  inline role_show_get_comment_ack& operator=(const role_show_get_comment_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_show_get_comment_ack& default_instance();

  void Swap(role_show_get_comment_ack* other);

  // implements Message ----------------------------------------------

  role_show_get_comment_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_show_get_comment_ack& from);
  void MergeFrom(const role_show_get_comment_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint64 show_role_id = 3;
  inline bool has_show_role_id() const;
  inline void clear_show_role_id();
  static const int kShowRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 show_role_id() const;
  inline void set_show_role_id(::google::protobuf::uint64 value);

  // optional .SProtoSpace.comment_all comment_all = 4;
  inline bool has_comment_all() const;
  inline void clear_comment_all();
  static const int kCommentAllFieldNumber = 4;
  inline const ::SProtoSpace::comment_all& comment_all() const;
  inline ::SProtoSpace::comment_all* mutable_comment_all();
  inline ::SProtoSpace::comment_all* release_comment_all();
  inline void set_allocated_comment_all(::SProtoSpace::comment_all* comment_all);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_show_get_comment_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_show_role_id();
  inline void clear_has_show_role_id();
  inline void set_has_comment_all();
  inline void clear_has_comment_all();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint64 show_role_id_;
  ::SProtoSpace::comment_all* comment_all_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_show_get_comment_ack* default_instance_;
};
// -------------------------------------------------------------------

class discover_info_ntf : public ::google::protobuf::Message {
 public:
  discover_info_ntf();
  virtual ~discover_info_ntf();

  discover_info_ntf(const discover_info_ntf& from);

  inline discover_info_ntf& operator=(const discover_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discover_info_ntf& default_instance();

  void Swap(discover_info_ntf* other);

  // implements Message ----------------------------------------------

  discover_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discover_info_ntf& from);
  void MergeFrom(const discover_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_info_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional bool update = 3;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 3;
  inline bool update() const;
  inline void set_update(bool value);

  // repeated .SProtoSpace.dischapter_data chapter_s = 4;
  inline int chapter_s_size() const;
  inline void clear_chapter_s();
  static const int kChapterSFieldNumber = 4;
  inline const ::SProtoSpace::dischapter_data& chapter_s(int index) const;
  inline ::SProtoSpace::dischapter_data* mutable_chapter_s(int index);
  inline ::SProtoSpace::dischapter_data* add_chapter_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::dischapter_data >&
      chapter_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::dischapter_data >*
      mutable_chapter_s();

  // repeated .SProtoSpace.discover_data discover_s = 5;
  inline int discover_s_size() const;
  inline void clear_discover_s();
  static const int kDiscoverSFieldNumber = 5;
  inline const ::SProtoSpace::discover_data& discover_s(int index) const;
  inline ::SProtoSpace::discover_data* mutable_discover_s(int index);
  inline ::SProtoSpace::discover_data* add_discover_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >&
      discover_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >*
      mutable_discover_s();

  // repeated int32 star_box_ids = 6;
  inline int star_box_ids_size() const;
  inline void clear_star_box_ids();
  static const int kStarBoxIdsFieldNumber = 6;
  inline ::google::protobuf::int32 star_box_ids(int index) const;
  inline void set_star_box_ids(int index, ::google::protobuf::int32 value);
  inline void add_star_box_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      star_box_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_star_box_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.discover_info_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_update();
  inline void clear_has_update();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::dischapter_data > chapter_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data > discover_s_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > star_box_ids_;
  bool update_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discover_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class discover_show_boss_ntf : public ::google::protobuf::Message {
 public:
  discover_show_boss_ntf();
  virtual ~discover_show_boss_ntf();

  discover_show_boss_ntf(const discover_show_boss_ntf& from);

  inline discover_show_boss_ntf& operator=(const discover_show_boss_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discover_show_boss_ntf& default_instance();

  void Swap(discover_show_boss_ntf* other);

  // implements Message ----------------------------------------------

  discover_show_boss_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discover_show_boss_ntf& from);
  void MergeFrom(const discover_show_boss_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_show_boss_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 boss_id = 3;
  inline bool has_boss_id() const;
  inline void clear_boss_id();
  static const int kBossIdFieldNumber = 3;
  inline ::google::protobuf::int32 boss_id() const;
  inline void set_boss_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discover_show_boss_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_boss_id();
  inline void clear_has_boss_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 boss_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discover_show_boss_ntf* default_instance_;
};
// -------------------------------------------------------------------

class enter_discover_req : public ::google::protobuf::Message {
 public:
  enter_discover_req();
  virtual ~enter_discover_req();

  enter_discover_req(const enter_discover_req& from);

  inline enter_discover_req& operator=(const enter_discover_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_discover_req& default_instance();

  void Swap(enter_discover_req* other);

  // implements Message ----------------------------------------------

  enter_discover_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_discover_req& from);
  void MergeFrom(const enter_discover_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_discover_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static enter_discover_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_discover_ack : public ::google::protobuf::Message {
 public:
  enter_discover_ack();
  virtual ~enter_discover_ack();

  enter_discover_ack(const enter_discover_ack& from);

  inline enter_discover_ack& operator=(const enter_discover_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_discover_ack& default_instance();

  void Swap(enter_discover_ack* other);

  // implements Message ----------------------------------------------

  enter_discover_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_discover_ack& from);
  void MergeFrom(const enter_discover_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_discover_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static enter_discover_ack* default_instance_;
};
// -------------------------------------------------------------------

class exit_discover_req : public ::google::protobuf::Message {
 public:
  exit_discover_req();
  virtual ~exit_discover_req();

  exit_discover_req(const exit_discover_req& from);

  inline exit_discover_req& operator=(const exit_discover_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_discover_req& default_instance();

  void Swap(exit_discover_req* other);

  // implements Message ----------------------------------------------

  exit_discover_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_discover_req& from);
  void MergeFrom(const exit_discover_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_discover_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static exit_discover_req* default_instance_;
};
// -------------------------------------------------------------------

class exit_discover_ack : public ::google::protobuf::Message {
 public:
  exit_discover_ack();
  virtual ~exit_discover_ack();

  exit_discover_ack(const exit_discover_ack& from);

  inline exit_discover_ack& operator=(const exit_discover_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_discover_ack& default_instance();

  void Swap(exit_discover_ack* other);

  // implements Message ----------------------------------------------

  exit_discover_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_discover_ack& from);
  void MergeFrom(const exit_discover_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 boxnum = 4;
  inline bool has_boxnum() const;
  inline void clear_boxnum();
  static const int kBoxnumFieldNumber = 4;
  inline ::google::protobuf::int32 boxnum() const;
  inline void set_boxnum(::google::protobuf::int32 value);

  // repeated .SProtoSpace.drop_data items = 5;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 5;
  inline const ::SProtoSpace::drop_data& items(int index) const;
  inline ::SProtoSpace::drop_data* mutable_items(int index);
  inline ::SProtoSpace::drop_data* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::drop_data >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::drop_data >*
      mutable_items();

  // repeated int32 monster = 6;
  inline int monster_size() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 6;
  inline ::google::protobuf::int32 monster(int index) const;
  inline void set_monster(int index, ::google::protobuf::int32 value);
  inline void add_monster(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      monster() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_monster();

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_discover_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_boxnum();
  inline void clear_has_boxnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 boxnum_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::drop_data > items_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > monster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static exit_discover_ack* default_instance_;
};
// -------------------------------------------------------------------

class discovery_mopping_req : public ::google::protobuf::Message {
 public:
  discovery_mopping_req();
  virtual ~discovery_mopping_req();

  discovery_mopping_req(const discovery_mopping_req& from);

  inline discovery_mopping_req& operator=(const discovery_mopping_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_mopping_req& default_instance();

  void Swap(discovery_mopping_req* other);

  // implements Message ----------------------------------------------

  discovery_mopping_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_mopping_req& from);
  void MergeFrom(const discovery_mopping_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
  inline bool has_mopping_type() const;
  inline void clear_mopping_type();
  static const int kMoppingTypeFieldNumber = 2;
  inline ::SProtoSpace::eDiscoveryMoppingType mopping_type() const;
  inline void set_mopping_type(::SProtoSpace::eDiscoveryMoppingType value);

  // optional int32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional int32 discovery_id = 4;
  inline bool has_discovery_id() const;
  inline void clear_discovery_id();
  static const int kDiscoveryIdFieldNumber = 4;
  inline ::google::protobuf::int32 discovery_id() const;
  inline void set_discovery_id(::google::protobuf::int32 value);

  // optional int32 item_id = 5;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 5;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_add_num = 6;
  inline bool has_item_add_num() const;
  inline void clear_item_add_num();
  static const int kItemAddNumFieldNumber = 6;
  inline ::google::protobuf::int32 item_add_num() const;
  inline void set_item_add_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_mopping_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_mopping_type();
  inline void clear_has_mopping_type();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_discovery_id();
  inline void clear_has_discovery_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_add_num();
  inline void clear_has_item_add_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int mopping_type_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int32 discovery_id_;
  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_add_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_mopping_req* default_instance_;
};
// -------------------------------------------------------------------

class discovery_mopping_ack_rewards : public ::google::protobuf::Message {
 public:
  discovery_mopping_ack_rewards();
  virtual ~discovery_mopping_ack_rewards();

  discovery_mopping_ack_rewards(const discovery_mopping_ack_rewards& from);

  inline discovery_mopping_ack_rewards& operator=(const discovery_mopping_ack_rewards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_mopping_ack_rewards& default_instance();

  void Swap(discovery_mopping_ack_rewards* other);

  // implements Message ----------------------------------------------

  discovery_mopping_ack_rewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_mopping_ack_rewards& from);
  void MergeFrom(const discovery_mopping_ack_rewards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_mopping_ack_rewards)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_mopping_ack_rewards* default_instance_;
};
// -------------------------------------------------------------------

class discovery_mopping_ack_moppping : public ::google::protobuf::Message {
 public:
  discovery_mopping_ack_moppping();
  virtual ~discovery_mopping_ack_moppping();

  discovery_mopping_ack_moppping(const discovery_mopping_ack_moppping& from);

  inline discovery_mopping_ack_moppping& operator=(const discovery_mopping_ack_moppping& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_mopping_ack_moppping& default_instance();

  void Swap(discovery_mopping_ack_moppping* other);

  // implements Message ----------------------------------------------

  discovery_mopping_ack_moppping* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_mopping_ack_moppping& from);
  void MergeFrom(const discovery_mopping_ack_moppping& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 mopping_time = 1;
  inline bool has_mopping_time() const;
  inline void clear_mopping_time();
  static const int kMoppingTimeFieldNumber = 1;
  inline ::google::protobuf::int32 mopping_time() const;
  inline void set_mopping_time(::google::protobuf::int32 value);

  // repeated .SProtoSpace.discovery_mopping_ack_rewards reward_items = 2;
  inline int reward_items_size() const;
  inline void clear_reward_items();
  static const int kRewardItemsFieldNumber = 2;
  inline const ::SProtoSpace::discovery_mopping_ack_rewards& reward_items(int index) const;
  inline ::SProtoSpace::discovery_mopping_ack_rewards* mutable_reward_items(int index);
  inline ::SProtoSpace::discovery_mopping_ack_rewards* add_reward_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_rewards >&
      reward_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_rewards >*
      mutable_reward_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_mopping_ack_moppping)
 private:
  inline void set_has_mopping_time();
  inline void clear_has_mopping_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_rewards > reward_items_;
  ::google::protobuf::int32 mopping_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_mopping_ack_moppping* default_instance_;
};
// -------------------------------------------------------------------

class discovery_mopping_ack : public ::google::protobuf::Message {
 public:
  discovery_mopping_ack();
  virtual ~discovery_mopping_ack();

  discovery_mopping_ack(const discovery_mopping_ack& from);

  inline discovery_mopping_ack& operator=(const discovery_mopping_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_mopping_ack& default_instance();

  void Swap(discovery_mopping_ack* other);

  // implements Message ----------------------------------------------

  discovery_mopping_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_mopping_ack& from);
  void MergeFrom(const discovery_mopping_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
  inline bool has_mopping_type() const;
  inline void clear_mopping_type();
  static const int kMoppingTypeFieldNumber = 2;
  inline ::SProtoSpace::eDiscoveryMoppingType mopping_type() const;
  inline void set_mopping_type(::SProtoSpace::eDiscoveryMoppingType value);

  // optional int32 times = 3;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 3;
  inline ::google::protobuf::int32 times() const;
  inline void set_times(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType ret() const;
  inline void set_ret(::SProtoSpace::MsgErrorType value);

  // repeated .SProtoSpace.discovery_mopping_ack_moppping moppings = 5;
  inline int moppings_size() const;
  inline void clear_moppings();
  static const int kMoppingsFieldNumber = 5;
  inline const ::SProtoSpace::discovery_mopping_ack_moppping& moppings(int index) const;
  inline ::SProtoSpace::discovery_mopping_ack_moppping* mutable_moppings(int index);
  inline ::SProtoSpace::discovery_mopping_ack_moppping* add_moppings();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_moppping >&
      moppings() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_moppping >*
      mutable_moppings();

  // optional int32 mopping_times_remain = 6;
  inline bool has_mopping_times_remain() const;
  inline void clear_mopping_times_remain();
  static const int kMoppingTimesRemainFieldNumber = 6;
  inline ::google::protobuf::int32 mopping_times_remain() const;
  inline void set_mopping_times_remain(::google::protobuf::int32 value);

  // optional int32 discovery_id = 7;
  inline bool has_discovery_id() const;
  inline void clear_discovery_id();
  static const int kDiscoveryIdFieldNumber = 7;
  inline ::google::protobuf::int32 discovery_id() const;
  inline void set_discovery_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_mopping_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_mopping_type();
  inline void clear_has_mopping_type();
  inline void set_has_times();
  inline void clear_has_times();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mopping_times_remain();
  inline void clear_has_mopping_times_remain();
  inline void set_has_discovery_id();
  inline void clear_has_discovery_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int mopping_type_;
  ::google::protobuf::int32 times_;
  int ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_moppping > moppings_;
  ::google::protobuf::int32 mopping_times_remain_;
  ::google::protobuf::int32 discovery_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_mopping_ack* default_instance_;
};
// -------------------------------------------------------------------

class discovery_buy_times_req : public ::google::protobuf::Message {
 public:
  discovery_buy_times_req();
  virtual ~discovery_buy_times_req();

  discovery_buy_times_req(const discovery_buy_times_req& from);

  inline discovery_buy_times_req& operator=(const discovery_buy_times_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_buy_times_req& default_instance();

  void Swap(discovery_buy_times_req* other);

  // implements Message ----------------------------------------------

  discovery_buy_times_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_buy_times_req& from);
  void MergeFrom(const discovery_buy_times_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 discovery_id = 2;
  inline bool has_discovery_id() const;
  inline void clear_discovery_id();
  static const int kDiscoveryIdFieldNumber = 2;
  inline ::google::protobuf::int32 discovery_id() const;
  inline void set_discovery_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_buy_times_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_discovery_id();
  inline void clear_has_discovery_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 discovery_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_buy_times_req* default_instance_;
};
// -------------------------------------------------------------------

class discovery_buy_times_ack : public ::google::protobuf::Message {
 public:
  discovery_buy_times_ack();
  virtual ~discovery_buy_times_ack();

  discovery_buy_times_ack(const discovery_buy_times_ack& from);

  inline discovery_buy_times_ack& operator=(const discovery_buy_times_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_buy_times_ack& default_instance();

  void Swap(discovery_buy_times_ack* other);

  // implements Message ----------------------------------------------

  discovery_buy_times_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_buy_times_ack& from);
  void MergeFrom(const discovery_buy_times_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 discovery_id = 2;
  inline bool has_discovery_id() const;
  inline void clear_discovery_id();
  static const int kDiscoveryIdFieldNumber = 2;
  inline ::google::protobuf::int32 discovery_id() const;
  inline void set_discovery_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType ret() const;
  inline void set_ret(::SProtoSpace::MsgErrorType value);

  // optional int32 mopping_times_remain = 5;
  inline bool has_mopping_times_remain() const;
  inline void clear_mopping_times_remain();
  static const int kMoppingTimesRemainFieldNumber = 5;
  inline ::google::protobuf::int32 mopping_times_remain() const;
  inline void set_mopping_times_remain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_buy_times_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_discovery_id();
  inline void clear_has_discovery_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mopping_times_remain();
  inline void clear_has_mopping_times_remain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 discovery_id_;
  int ret_;
  ::google::protobuf::int32 mopping_times_remain_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_buy_times_ack* default_instance_;
};
// -------------------------------------------------------------------

class discovery_get_section_star_req : public ::google::protobuf::Message {
 public:
  discovery_get_section_star_req();
  virtual ~discovery_get_section_star_req();

  discovery_get_section_star_req(const discovery_get_section_star_req& from);

  inline discovery_get_section_star_req& operator=(const discovery_get_section_star_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_get_section_star_req& default_instance();

  void Swap(discovery_get_section_star_req* other);

  // implements Message ----------------------------------------------

  discovery_get_section_star_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_get_section_star_req& from);
  void MergeFrom(const discovery_get_section_star_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 reward_id = 2;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_get_section_star_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 reward_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_get_section_star_req* default_instance_;
};
// -------------------------------------------------------------------

class discovery_get_section_star_ack_rewards : public ::google::protobuf::Message {
 public:
  discovery_get_section_star_ack_rewards();
  virtual ~discovery_get_section_star_ack_rewards();

  discovery_get_section_star_ack_rewards(const discovery_get_section_star_ack_rewards& from);

  inline discovery_get_section_star_ack_rewards& operator=(const discovery_get_section_star_ack_rewards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_get_section_star_ack_rewards& default_instance();

  void Swap(discovery_get_section_star_ack_rewards* other);

  // implements Message ----------------------------------------------

  discovery_get_section_star_ack_rewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_get_section_star_ack_rewards& from);
  void MergeFrom(const discovery_get_section_star_ack_rewards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional int32 item_count = 2;
  inline bool has_item_count() const;
  inline void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  inline ::google::protobuf::int32 item_count() const;
  inline void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_get_section_star_ack_rewards)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 item_id_;
  ::google::protobuf::int32 item_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_get_section_star_ack_rewards* default_instance_;
};
// -------------------------------------------------------------------

class discovery_get_section_star_ack : public ::google::protobuf::Message {
 public:
  discovery_get_section_star_ack();
  virtual ~discovery_get_section_star_ack();

  discovery_get_section_star_ack(const discovery_get_section_star_ack& from);

  inline discovery_get_section_star_ack& operator=(const discovery_get_section_star_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const discovery_get_section_star_ack& default_instance();

  void Swap(discovery_get_section_star_ack* other);

  // implements Message ----------------------------------------------

  discovery_get_section_star_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const discovery_get_section_star_ack& from);
  void MergeFrom(const discovery_get_section_star_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 reward_id = 2;
  inline bool has_reward_id() const;
  inline void clear_reward_id();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::int32 reward_id() const;
  inline void set_reward_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.discovery_get_section_star_ack_rewards items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::SProtoSpace::discovery_get_section_star_ack_rewards& items(int index) const;
  inline ::SProtoSpace::discovery_get_section_star_ack_rewards* mutable_items(int index);
  inline ::SProtoSpace::discovery_get_section_star_ack_rewards* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_get_section_star_ack_rewards >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_get_section_star_ack_rewards >*
      mutable_items();

  // optional .SProtoSpace.MsgErrorType ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType ret() const;
  inline void set_ret(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.discovery_get_section_star_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_reward_id();
  inline void clear_has_reward_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 reward_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_get_section_star_ack_rewards > items_;
  int ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static discovery_get_section_star_ack* default_instance_;
};
// -------------------------------------------------------------------

class royal_base_info_ntf : public ::google::protobuf::Message {
 public:
  royal_base_info_ntf();
  virtual ~royal_base_info_ntf();

  royal_base_info_ntf(const royal_base_info_ntf& from);

  inline royal_base_info_ntf& operator=(const royal_base_info_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_base_info_ntf& default_instance();

  void Swap(royal_base_info_ntf* other);

  // implements Message ----------------------------------------------

  royal_base_info_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_base_info_ntf& from);
  void MergeFrom(const royal_base_info_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_base_info_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.royal_base_info info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::SProtoSpace::royal_base_info& info() const;
  inline ::SProtoSpace::royal_base_info* mutable_info();
  inline ::SProtoSpace::royal_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::royal_base_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_base_info_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::royal_base_info* info_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_base_info_ntf* default_instance_;
};
// -------------------------------------------------------------------

class royal_all_info_req : public ::google::protobuf::Message {
 public:
  royal_all_info_req();
  virtual ~royal_all_info_req();

  royal_all_info_req(const royal_all_info_req& from);

  inline royal_all_info_req& operator=(const royal_all_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_all_info_req& default_instance();

  void Swap(royal_all_info_req* other);

  // implements Message ----------------------------------------------

  royal_all_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_all_info_req& from);
  void MergeFrom(const royal_all_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_all_info_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_all_info_req* default_instance_;
};
// -------------------------------------------------------------------

class royal_all_info_ack : public ::google::protobuf::Message {
 public:
  royal_all_info_ack();
  virtual ~royal_all_info_ack();

  royal_all_info_ack(const royal_all_info_ack& from);

  inline royal_all_info_ack& operator=(const royal_all_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_all_info_ack& default_instance();

  void Swap(royal_all_info_ack* other);

  // implements Message ----------------------------------------------

  royal_all_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_all_info_ack& from);
  void MergeFrom(const royal_all_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.royal_info royals = 2;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 2;
  inline const ::SProtoSpace::royal_info& royals(int index) const;
  inline ::SProtoSpace::royal_info* mutable_royals(int index);
  inline ::SProtoSpace::royal_info* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
      mutable_royals();

  // optional .SProtoSpace.royal_base_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::royal_base_info& info() const;
  inline ::SProtoSpace::royal_base_info* mutable_info();
  inline ::SProtoSpace::royal_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::royal_base_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_all_info_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info > royals_;
  ::SProtoSpace::royal_base_info* info_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_all_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class royal_refresh_req : public ::google::protobuf::Message {
 public:
  royal_refresh_req();
  virtual ~royal_refresh_req();

  royal_refresh_req(const royal_refresh_req& from);

  inline royal_refresh_req& operator=(const royal_refresh_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_refresh_req& default_instance();

  void Swap(royal_refresh_req* other);

  // implements Message ----------------------------------------------

  royal_refresh_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_refresh_req& from);
  void MergeFrom(const royal_refresh_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_refresh_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_refresh_req* default_instance_;
};
// -------------------------------------------------------------------

class royal_refresh_ack : public ::google::protobuf::Message {
 public:
  royal_refresh_ack();
  virtual ~royal_refresh_ack();

  royal_refresh_ack(const royal_refresh_ack& from);

  inline royal_refresh_ack& operator=(const royal_refresh_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_refresh_ack& default_instance();

  void Swap(royal_refresh_ack* other);

  // implements Message ----------------------------------------------

  royal_refresh_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_refresh_ack& from);
  void MergeFrom(const royal_refresh_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int32 royal_ids = 3;
  inline int royal_ids_size() const;
  inline void clear_royal_ids();
  static const int kRoyalIdsFieldNumber = 3;
  inline ::google::protobuf::int32 royal_ids(int index) const;
  inline void set_royal_ids(int index, ::google::protobuf::int32 value);
  inline void add_royal_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      royal_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_royal_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_refresh_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > royal_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_refresh_ack* default_instance_;
};
// -------------------------------------------------------------------

class royal_visit_req : public ::google::protobuf::Message {
 public:
  royal_visit_req();
  virtual ~royal_visit_req();

  royal_visit_req(const royal_visit_req& from);

  inline royal_visit_req& operator=(const royal_visit_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_visit_req& default_instance();

  void Swap(royal_visit_req* other);

  // implements Message ----------------------------------------------

  royal_visit_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_visit_req& from);
  void MergeFrom(const royal_visit_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 royal_id = 2;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 2;
  inline ::google::protobuf::int32 royal_id() const;
  inline void set_royal_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_visit_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 royal_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_visit_req* default_instance_;
};
// -------------------------------------------------------------------

class royal_visit_ack : public ::google::protobuf::Message {
 public:
  royal_visit_ack();
  virtual ~royal_visit_ack();

  royal_visit_ack(const royal_visit_ack& from);

  inline royal_visit_ack& operator=(const royal_visit_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_visit_ack& default_instance();

  void Swap(royal_visit_ack* other);

  // implements Message ----------------------------------------------

  royal_visit_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_visit_ack& from);
  void MergeFrom(const royal_visit_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 royal_id = 2;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 2;
  inline ::google::protobuf::int32 royal_id() const;
  inline void set_royal_id(::google::protobuf::int32 value);

  // optional int32 event_id = 3;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 3;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.question_data data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::question_data& data() const;
  inline ::SProtoSpace::question_data* mutable_data();
  inline ::SProtoSpace::question_data* release_data();
  inline void set_allocated_data(::SProtoSpace::question_data* data);

  // optional int32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_visit_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 royal_id_;
  ::SProtoSpace::question_data* data_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_visit_ack* default_instance_;
};
// -------------------------------------------------------------------

class royal_reward_ntf : public ::google::protobuf::Message {
 public:
  royal_reward_ntf();
  virtual ~royal_reward_ntf();

  royal_reward_ntf(const royal_reward_ntf& from);

  inline royal_reward_ntf& operator=(const royal_reward_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_reward_ntf& default_instance();

  void Swap(royal_reward_ntf* other);

  // implements Message ----------------------------------------------

  royal_reward_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_reward_ntf& from);
  void MergeFrom(const royal_reward_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = royal_reward_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 event_id = 2;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 2;
  inline ::google::protobuf::int32 event_id() const;
  inline void set_event_id(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool is_win = 4;
  inline bool has_is_win() const;
  inline void clear_is_win();
  static const int kIsWinFieldNumber = 4;
  inline bool is_win() const;
  inline void set_is_win(bool value);

  // repeated .SProtoSpace.item_info reward = 5;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::SProtoSpace::item_info& reward(int index) const;
  inline ::SProtoSpace::item_info* mutable_reward(int index);
  inline ::SProtoSpace::item_info* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
      mutable_reward();

  // optional int32 ret = 6;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 6;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_reward_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_win();
  inline void clear_has_is_win();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 event_id_;
  ::google::protobuf::int32 type_;
  bool is_win_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info > reward_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_reward_ntf* default_instance_;
};
// -------------------------------------------------------------------

class all_royals_ntf : public ::google::protobuf::Message {
 public:
  all_royals_ntf();
  virtual ~all_royals_ntf();

  all_royals_ntf(const all_royals_ntf& from);

  inline all_royals_ntf& operator=(const all_royals_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_royals_ntf& default_instance();

  void Swap(all_royals_ntf* other);

  // implements Message ----------------------------------------------

  all_royals_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_royals_ntf& from);
  void MergeFrom(const all_royals_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = all_royals_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.royal_info royals = 2;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 2;
  inline const ::SProtoSpace::royal_info& royals(int index) const;
  inline ::SProtoSpace::royal_info* mutable_royals(int index);
  inline ::SProtoSpace::royal_info* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
      mutable_royals();

  // optional .SProtoSpace.royal_base_info info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::SProtoSpace::royal_base_info& info() const;
  inline ::SProtoSpace::royal_base_info* mutable_info();
  inline ::SProtoSpace::royal_base_info* release_info();
  inline void set_allocated_info(::SProtoSpace::royal_base_info* info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_royals_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info > royals_;
  ::SProtoSpace::royal_base_info* info_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static all_royals_ntf* default_instance_;
};
// -------------------------------------------------------------------

class royal_pro_update_ntf : public ::google::protobuf::Message {
 public:
  royal_pro_update_ntf();
  virtual ~royal_pro_update_ntf();

  royal_pro_update_ntf(const royal_pro_update_ntf& from);

  inline royal_pro_update_ntf& operator=(const royal_pro_update_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_pro_update_ntf& default_instance();

  void Swap(royal_pro_update_ntf* other);

  // implements Message ----------------------------------------------

  royal_pro_update_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_pro_update_ntf& from);
  void MergeFrom(const royal_pro_update_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_pro_update_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.royal_info royal = 2;
  inline bool has_royal() const;
  inline void clear_royal();
  static const int kRoyalFieldNumber = 2;
  inline const ::SProtoSpace::royal_info& royal() const;
  inline ::SProtoSpace::royal_info* mutable_royal();
  inline ::SProtoSpace::royal_info* release_royal();
  inline void set_allocated_royal(::SProtoSpace::royal_info* royal);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_pro_update_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal();
  inline void clear_has_royal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::royal_info* royal_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_pro_update_ntf* default_instance_;
};
// -------------------------------------------------------------------

class royal_task_reward_draw_ntf : public ::google::protobuf::Message {
 public:
  royal_task_reward_draw_ntf();
  virtual ~royal_task_reward_draw_ntf();

  royal_task_reward_draw_ntf(const royal_task_reward_draw_ntf& from);

  inline royal_task_reward_draw_ntf& operator=(const royal_task_reward_draw_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const royal_task_reward_draw_ntf& default_instance();

  void Swap(royal_task_reward_draw_ntf* other);

  // implements Message ----------------------------------------------

  royal_task_reward_draw_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const royal_task_reward_draw_ntf& from);
  void MergeFrom(const royal_task_reward_draw_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_task_reward_draw_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.royal_task_reward_draw_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static royal_task_reward_draw_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_update_royal_task_ntf : public ::google::protobuf::Message {
 public:
  game_update_royal_task_ntf();
  virtual ~game_update_royal_task_ntf();

  game_update_royal_task_ntf(const game_update_royal_task_ntf& from);

  inline game_update_royal_task_ntf& operator=(const game_update_royal_task_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_update_royal_task_ntf& default_instance();

  void Swap(game_update_royal_task_ntf* other);

  // implements Message ----------------------------------------------

  game_update_royal_task_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_update_royal_task_ntf& from);
  void MergeFrom(const game_update_royal_task_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_update_royal_task_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.royal_info royals = 2;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 2;
  inline const ::SProtoSpace::royal_info& royals(int index) const;
  inline ::SProtoSpace::royal_info* mutable_royals(int index);
  inline ::SProtoSpace::royal_info* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
      mutable_royals();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_update_royal_task_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info > royals_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_update_royal_task_ntf* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_intimacy_reward_req : public ::google::protobuf::Message {
 public:
  game_royal_intimacy_reward_req();
  virtual ~game_royal_intimacy_reward_req();

  game_royal_intimacy_reward_req(const game_royal_intimacy_reward_req& from);

  inline game_royal_intimacy_reward_req& operator=(const game_royal_intimacy_reward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_intimacy_reward_req& default_instance();

  void Swap(game_royal_intimacy_reward_req* other);

  // implements Message ----------------------------------------------

  game_royal_intimacy_reward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_intimacy_reward_req& from);
  void MergeFrom(const game_royal_intimacy_reward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 royal_id = 2;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 2;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_intimacy_reward_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 royal_id_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_intimacy_reward_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_intimacy_reward_ack : public ::google::protobuf::Message {
 public:
  game_royal_intimacy_reward_ack();
  virtual ~game_royal_intimacy_reward_ack();

  game_royal_intimacy_reward_ack(const game_royal_intimacy_reward_ack& from);

  inline game_royal_intimacy_reward_ack& operator=(const game_royal_intimacy_reward_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_intimacy_reward_ack& default_instance();

  void Swap(game_royal_intimacy_reward_ack* other);

  // implements Message ----------------------------------------------

  game_royal_intimacy_reward_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_intimacy_reward_ack& from);
  void MergeFrom(const game_royal_intimacy_reward_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 royal_id = 3;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 3;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional uint32 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_intimacy_reward_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 royal_id_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_intimacy_reward_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_draw_reward_req : public ::google::protobuf::Message {
 public:
  game_royal_draw_reward_req();
  virtual ~game_royal_draw_reward_req();

  game_royal_draw_reward_req(const game_royal_draw_reward_req& from);

  inline game_royal_draw_reward_req& operator=(const game_royal_draw_reward_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_draw_reward_req& default_instance();

  void Swap(game_royal_draw_reward_req* other);

  // implements Message ----------------------------------------------

  game_royal_draw_reward_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_draw_reward_req& from);
  void MergeFrom(const game_royal_draw_reward_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 royal_task_config_id = 2;
  inline bool has_royal_task_config_id() const;
  inline void clear_royal_task_config_id();
  static const int kRoyalTaskConfigIdFieldNumber = 2;
  inline ::google::protobuf::uint32 royal_task_config_id() const;
  inline void set_royal_task_config_id(::google::protobuf::uint32 value);

  // optional uint32 royal_config_id = 3;
  inline bool has_royal_config_id() const;
  inline void clear_royal_config_id();
  static const int kRoyalConfigIdFieldNumber = 3;
  inline ::google::protobuf::uint32 royal_config_id() const;
  inline void set_royal_config_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_draw_reward_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_task_config_id();
  inline void clear_has_royal_task_config_id();
  inline void set_has_royal_config_id();
  inline void clear_has_royal_config_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 royal_task_config_id_;
  ::google::protobuf::uint32 royal_config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_draw_reward_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_draw_reward_ack : public ::google::protobuf::Message {
 public:
  game_royal_draw_reward_ack();
  virtual ~game_royal_draw_reward_ack();

  game_royal_draw_reward_ack(const game_royal_draw_reward_ack& from);

  inline game_royal_draw_reward_ack& operator=(const game_royal_draw_reward_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_draw_reward_ack& default_instance();

  void Swap(game_royal_draw_reward_ack* other);

  // implements Message ----------------------------------------------

  game_royal_draw_reward_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_draw_reward_ack& from);
  void MergeFrom(const game_royal_draw_reward_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2 [default = 0];
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_draw_reward_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_draw_reward_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_all_data_req : public ::google::protobuf::Message {
 public:
  game_royal_all_data_req();
  virtual ~game_royal_all_data_req();

  game_royal_all_data_req(const game_royal_all_data_req& from);

  inline game_royal_all_data_req& operator=(const game_royal_all_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_all_data_req& default_instance();

  void Swap(game_royal_all_data_req* other);

  // implements Message ----------------------------------------------

  game_royal_all_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_all_data_req& from);
  void MergeFrom(const game_royal_all_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated uint32 config_id = 2;
  inline int config_id_size() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::uint32 config_id(int index) const;
  inline void set_config_id(int index, ::google::protobuf::uint32 value);
  inline void add_config_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      config_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_config_id();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_all_data_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > config_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_all_data_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_all_data_ack : public ::google::protobuf::Message {
 public:
  game_royal_all_data_ack();
  virtual ~game_royal_all_data_ack();

  game_royal_all_data_ack(const game_royal_all_data_ack& from);

  inline game_royal_all_data_ack& operator=(const game_royal_all_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_all_data_ack& default_instance();

  void Swap(game_royal_all_data_ack* other);

  // implements Message ----------------------------------------------

  game_royal_all_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_all_data_ack& from);
  void MergeFrom(const game_royal_all_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.royal_info royals = 2;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 2;
  inline const ::SProtoSpace::royal_info& royals(int index) const;
  inline ::SProtoSpace::royal_info* mutable_royals(int index);
  inline ::SProtoSpace::royal_info* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
      mutable_royals();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_all_data_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info > royals_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_all_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_refresh_data_req : public ::google::protobuf::Message {
 public:
  game_royal_refresh_data_req();
  virtual ~game_royal_refresh_data_req();

  game_royal_refresh_data_req(const game_royal_refresh_data_req& from);

  inline game_royal_refresh_data_req& operator=(const game_royal_refresh_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_refresh_data_req& default_instance();

  void Swap(game_royal_refresh_data_req* other);

  // implements Message ----------------------------------------------

  game_royal_refresh_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_refresh_data_req& from);
  void MergeFrom(const game_royal_refresh_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated uint32 config_id = 2;
  inline int config_id_size() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::uint32 config_id(int index) const;
  inline void set_config_id(int index, ::google::protobuf::uint32 value);
  inline void add_config_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      config_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_config_id();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_refresh_data_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > config_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_refresh_data_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_refresh_data_ack : public ::google::protobuf::Message {
 public:
  game_royal_refresh_data_ack();
  virtual ~game_royal_refresh_data_ack();

  game_royal_refresh_data_ack(const game_royal_refresh_data_ack& from);

  inline game_royal_refresh_data_ack& operator=(const game_royal_refresh_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_refresh_data_ack& default_instance();

  void Swap(game_royal_refresh_data_ack* other);

  // implements Message ----------------------------------------------

  game_royal_refresh_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_refresh_data_ack& from);
  void MergeFrom(const game_royal_refresh_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.royal_info royals = 3;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 3;
  inline const ::SProtoSpace::royal_info& royals(int index) const;
  inline ::SProtoSpace::royal_info* mutable_royals(int index);
  inline ::SProtoSpace::royal_info* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
      mutable_royals();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_refresh_data_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info > royals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_refresh_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_qingan_req : public ::google::protobuf::Message {
 public:
  game_royal_qingan_req();
  virtual ~game_royal_qingan_req();

  game_royal_qingan_req(const game_royal_qingan_req& from);

  inline game_royal_qingan_req& operator=(const game_royal_qingan_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_qingan_req& default_instance();

  void Swap(game_royal_qingan_req* other);

  // implements Message ----------------------------------------------

  game_royal_qingan_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_qingan_req& from);
  void MergeFrom(const game_royal_qingan_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // optional uint32 royal_id = 3;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 3;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_qingan_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  int proto_id_;
  ::google::protobuf::uint32 royal_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_qingan_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_qingan_ack : public ::google::protobuf::Message {
 public:
  game_royal_qingan_ack();
  virtual ~game_royal_qingan_ack();

  game_royal_qingan_ack(const game_royal_qingan_ack& from);

  inline game_royal_qingan_ack& operator=(const game_royal_qingan_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_qingan_ack& default_instance();

  void Swap(game_royal_qingan_ack* other);

  // implements Message ----------------------------------------------

  game_royal_qingan_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_qingan_ack& from);
  void MergeFrom(const game_royal_qingan_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.royal_info royals = 3;
  inline int royals_size() const;
  inline void clear_royals();
  static const int kRoyalsFieldNumber = 3;
  inline const ::SProtoSpace::royal_info& royals(int index) const;
  inline ::SProtoSpace::royal_info* mutable_royals(int index);
  inline ::SProtoSpace::royal_info* add_royals();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
      royals() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
      mutable_royals();

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_qingan_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info > royals_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_qingan_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_unlock_req : public ::google::protobuf::Message {
 public:
  game_royal_unlock_req();
  virtual ~game_royal_unlock_req();

  game_royal_unlock_req(const game_royal_unlock_req& from);

  inline game_royal_unlock_req& operator=(const game_royal_unlock_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_unlock_req& default_instance();

  void Swap(game_royal_unlock_req* other);

  // implements Message ----------------------------------------------

  game_royal_unlock_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_unlock_req& from);
  void MergeFrom(const game_royal_unlock_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 config_id = 2;
  inline bool has_config_id() const;
  inline void clear_config_id();
  static const int kConfigIdFieldNumber = 2;
  inline ::google::protobuf::uint32 config_id() const;
  inline void set_config_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_unlock_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_config_id();
  inline void clear_has_config_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 config_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_unlock_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_unlock_ack : public ::google::protobuf::Message {
 public:
  game_royal_unlock_ack();
  virtual ~game_royal_unlock_ack();

  game_royal_unlock_ack(const game_royal_unlock_ack& from);

  inline game_royal_unlock_ack& operator=(const game_royal_unlock_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_unlock_ack& default_instance();

  void Swap(game_royal_unlock_ack* other);

  // implements Message ----------------------------------------------

  game_royal_unlock_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_unlock_ack& from);
  void MergeFrom(const game_royal_unlock_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_unlock_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_unlock_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_branch_task_fin_req : public ::google::protobuf::Message {
 public:
  game_branch_task_fin_req();
  virtual ~game_branch_task_fin_req();

  game_branch_task_fin_req(const game_branch_task_fin_req& from);

  inline game_branch_task_fin_req& operator=(const game_branch_task_fin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_branch_task_fin_req& default_instance();

  void Swap(game_branch_task_fin_req* other);

  // implements Message ----------------------------------------------

  game_branch_task_fin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_branch_task_fin_req& from);
  void MergeFrom(const game_branch_task_fin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 royal_id = 2;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 2;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional uint32 task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_branch_task_fin_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 royal_id_;
  ::google::protobuf::uint32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_branch_task_fin_req* default_instance_;
};
// -------------------------------------------------------------------

class game_branch_task_fin_ack : public ::google::protobuf::Message {
 public:
  game_branch_task_fin_ack();
  virtual ~game_branch_task_fin_ack();

  game_branch_task_fin_ack(const game_branch_task_fin_ack& from);

  inline game_branch_task_fin_ack& operator=(const game_branch_task_fin_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_branch_task_fin_ack& default_instance();

  void Swap(game_branch_task_fin_ack* other);

  // implements Message ----------------------------------------------

  game_branch_task_fin_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_branch_task_fin_ack& from);
  void MergeFrom(const game_branch_task_fin_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_branch_task_fin_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_branch_task_fin_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_chat_req : public ::google::protobuf::Message {
 public:
  game_royal_chat_req();
  virtual ~game_royal_chat_req();

  game_royal_chat_req(const game_royal_chat_req& from);

  inline game_royal_chat_req& operator=(const game_royal_chat_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_chat_req& default_instance();

  void Swap(game_royal_chat_req* other);

  // implements Message ----------------------------------------------

  game_royal_chat_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_chat_req& from);
  void MergeFrom(const game_royal_chat_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 royal_id = 2;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 2;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_chat_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 royal_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_chat_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_chat_ack : public ::google::protobuf::Message {
 public:
  game_royal_chat_ack();
  virtual ~game_royal_chat_ack();

  game_royal_chat_ack(const game_royal_chat_ack& from);

  inline game_royal_chat_ack& operator=(const game_royal_chat_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_chat_ack& default_instance();

  void Swap(game_royal_chat_ack* other);

  // implements Message ----------------------------------------------

  game_royal_chat_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_chat_ack& from);
  void MergeFrom(const game_royal_chat_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_chat_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 task_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_chat_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_get_gifts_req : public ::google::protobuf::Message {
 public:
  game_royal_get_gifts_req();
  virtual ~game_royal_get_gifts_req();

  game_royal_get_gifts_req(const game_royal_get_gifts_req& from);

  inline game_royal_get_gifts_req& operator=(const game_royal_get_gifts_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_get_gifts_req& default_instance();

  void Swap(game_royal_get_gifts_req* other);

  // implements Message ----------------------------------------------

  game_royal_get_gifts_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_get_gifts_req& from);
  void MergeFrom(const game_royal_get_gifts_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_get_gifts_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_get_gifts_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_get_gifts_ack : public ::google::protobuf::Message {
 public:
  game_royal_get_gifts_ack();
  virtual ~game_royal_get_gifts_ack();

  game_royal_get_gifts_ack(const game_royal_get_gifts_ack& from);

  inline game_royal_get_gifts_ack& operator=(const game_royal_get_gifts_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_get_gifts_ack& default_instance();

  void Swap(game_royal_get_gifts_ack* other);

  // implements Message ----------------------------------------------

  game_royal_get_gifts_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_get_gifts_ack& from);
  void MergeFrom(const game_royal_get_gifts_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.royal_gift_info gift_infos = 2;
  inline int gift_infos_size() const;
  inline void clear_gift_infos();
  static const int kGiftInfosFieldNumber = 2;
  inline const ::SProtoSpace::royal_gift_info& gift_infos(int index) const;
  inline ::SProtoSpace::royal_gift_info* mutable_gift_infos(int index);
  inline ::SProtoSpace::royal_gift_info* add_gift_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_gift_info >&
      gift_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_gift_info >*
      mutable_gift_infos();

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_get_gifts_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_gift_info > gift_infos_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_get_gifts_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_give_gift_req : public ::google::protobuf::Message {
 public:
  game_royal_give_gift_req();
  virtual ~game_royal_give_gift_req();

  game_royal_give_gift_req(const game_royal_give_gift_req& from);

  inline game_royal_give_gift_req& operator=(const game_royal_give_gift_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_give_gift_req& default_instance();

  void Swap(game_royal_give_gift_req* other);

  // implements Message ----------------------------------------------

  game_royal_give_gift_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_give_gift_req& from);
  void MergeFrom(const game_royal_give_gift_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 royal_id = 2;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 2;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional uint32 gift_id = 3;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gift_id() const;
  inline void set_gift_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_give_gift_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 royal_id_;
  ::google::protobuf::uint32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_give_gift_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_give_gift_ack : public ::google::protobuf::Message {
 public:
  game_royal_give_gift_ack();
  virtual ~game_royal_give_gift_ack();

  game_royal_give_gift_ack(const game_royal_give_gift_ack& from);

  inline game_royal_give_gift_ack& operator=(const game_royal_give_gift_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_give_gift_ack& default_instance();

  void Swap(game_royal_give_gift_ack* other);

  // implements Message ----------------------------------------------

  game_royal_give_gift_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_give_gift_ack& from);
  void MergeFrom(const game_royal_give_gift_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 gift_id = 3;
  inline bool has_gift_id() const;
  inline void clear_gift_id();
  static const int kGiftIdFieldNumber = 3;
  inline ::google::protobuf::uint32 gift_id() const;
  inline void set_gift_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_give_gift_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_gift_id();
  inline void clear_has_gift_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 gift_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_give_gift_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_enter_scene_req : public ::google::protobuf::Message {
 public:
  game_royal_enter_scene_req();
  virtual ~game_royal_enter_scene_req();

  game_royal_enter_scene_req(const game_royal_enter_scene_req& from);

  inline game_royal_enter_scene_req& operator=(const game_royal_enter_scene_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_enter_scene_req& default_instance();

  void Swap(game_royal_enter_scene_req* other);

  // implements Message ----------------------------------------------

  game_royal_enter_scene_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_enter_scene_req& from);
  void MergeFrom(const game_royal_enter_scene_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 scene_id = 2;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_enter_scene_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_enter_scene_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_enter_scene_ack : public ::google::protobuf::Message {
 public:
  game_royal_enter_scene_ack();
  virtual ~game_royal_enter_scene_ack();

  game_royal_enter_scene_ack(const game_royal_enter_scene_ack& from);

  inline game_royal_enter_scene_ack& operator=(const game_royal_enter_scene_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_enter_scene_ack& default_instance();

  void Swap(game_royal_enter_scene_ack* other);

  // implements Message ----------------------------------------------

  game_royal_enter_scene_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_enter_scene_ack& from);
  void MergeFrom(const game_royal_enter_scene_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 task_id = 3;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 3;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::uint32 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint32 value);

  // optional uint32 royal_id = 5;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 5;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional bool can_find = 6 [default = false];
  inline bool has_can_find() const;
  inline void clear_can_find();
  static const int kCanFindFieldNumber = 6;
  inline bool can_find() const;
  inline void set_can_find(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_enter_scene_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_can_find();
  inline void clear_has_can_find();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 scene_id_;
  ::google::protobuf::uint32 royal_id_;
  bool can_find_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_enter_scene_ack* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_event_fin_req : public ::google::protobuf::Message {
 public:
  game_royal_event_fin_req();
  virtual ~game_royal_event_fin_req();

  game_royal_event_fin_req(const game_royal_event_fin_req& from);

  inline game_royal_event_fin_req& operator=(const game_royal_event_fin_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_event_fin_req& default_instance();

  void Swap(game_royal_event_fin_req* other);

  // implements Message ----------------------------------------------

  game_royal_event_fin_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_event_fin_req& from);
  void MergeFrom(const game_royal_event_fin_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 royal_id = 3;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 3;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_event_fin_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 royal_id_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_event_fin_req* default_instance_;
};
// -------------------------------------------------------------------

class game_royal_event_fin_ack : public ::google::protobuf::Message {
 public:
  game_royal_event_fin_ack();
  virtual ~game_royal_event_fin_ack();

  game_royal_event_fin_ack(const game_royal_event_fin_ack& from);

  inline game_royal_event_fin_ack& operator=(const game_royal_event_fin_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const game_royal_event_fin_ack& default_instance();

  void Swap(game_royal_event_fin_ack* other);

  // implements Message ----------------------------------------------

  game_royal_event_fin_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const game_royal_event_fin_ack& from);
  void MergeFrom(const game_royal_event_fin_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 task_id = 2;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 2;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 royal_id = 3;
  inline bool has_royal_id() const;
  inline void clear_royal_id();
  static const int kRoyalIdFieldNumber = 3;
  inline ::google::protobuf::uint32 royal_id() const;
  inline void set_royal_id(::google::protobuf::uint32 value);

  // optional uint32 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.game_royal_event_fin_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_royal_id();
  inline void clear_has_royal_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 royal_id_;
  ::google::protobuf::uint32 result_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static game_royal_event_fin_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_data_req : public ::google::protobuf::Message {
 public:
  get_offical_data_req();
  virtual ~get_offical_data_req();

  get_offical_data_req(const get_offical_data_req& from);

  inline get_offical_data_req& operator=(const get_offical_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_data_req& default_instance();

  void Swap(get_offical_data_req* other);

  // implements Message ----------------------------------------------

  get_offical_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_data_req& from);
  void MergeFrom(const get_offical_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_data_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_data_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_data_ack : public ::google::protobuf::Message {
 public:
  get_offical_data_ack();
  virtual ~get_offical_data_ack();

  get_offical_data_ack(const get_offical_data_ack& from);

  inline get_offical_data_ack& operator=(const get_offical_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_data_ack& default_instance();

  void Swap(get_offical_data_ack* other);

  // implements Message ----------------------------------------------

  get_offical_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_data_ack& from);
  void MergeFrom(const get_offical_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint32 cur_grade = 3;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::uint32 value);

  // optional uint32 max_grade = 4;
  inline bool has_max_grade() const;
  inline void clear_max_grade();
  static const int kMaxGradeFieldNumber = 4;
  inline ::google::protobuf::uint32 max_grade() const;
  inline void set_max_grade(::google::protobuf::uint32 value);

  // optional uint32 apply_grade = 5;
  inline bool has_apply_grade() const;
  inline void clear_apply_grade();
  static const int kApplyGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 apply_grade() const;
  inline void set_apply_grade(::google::protobuf::uint32 value);

  // optional uint64 apply_time = 6;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint64 value);

  // optional bool is_draw = 7;
  inline bool has_is_draw() const;
  inline void clear_is_draw();
  static const int kIsDrawFieldNumber = 7;
  inline bool is_draw() const;
  inline void set_is_draw(bool value);

  // optional uint64 last_draw_time = 8;
  inline bool has_last_draw_time() const;
  inline void clear_last_draw_time();
  static const int kLastDrawTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 last_draw_time() const;
  inline void set_last_draw_time(::google::protobuf::uint64 value);

  // optional int32 daily_offical_chal_num = 9;
  inline bool has_daily_offical_chal_num() const;
  inline void clear_daily_offical_chal_num();
  static const int kDailyOfficalChalNumFieldNumber = 9;
  inline ::google::protobuf::int32 daily_offical_chal_num() const;
  inline void set_daily_offical_chal_num(::google::protobuf::int32 value);

  // optional uint32 last_grade = 10;
  inline bool has_last_grade() const;
  inline void clear_last_grade();
  static const int kLastGradeFieldNumber = 10;
  inline ::google::protobuf::uint32 last_grade() const;
  inline void set_last_grade(::google::protobuf::uint32 value);

  // optional bool exist = 11;
  inline bool has_exist() const;
  inline void clear_exist();
  static const int kExistFieldNumber = 11;
  inline bool exist() const;
  inline void set_exist(bool value);

  // optional int32 ranking_id = 12;
  inline bool has_ranking_id() const;
  inline void clear_ranking_id();
  static const int kRankingIdFieldNumber = 12;
  inline ::google::protobuf::int32 ranking_id() const;
  inline void set_ranking_id(::google::protobuf::int32 value);

  // repeated .SProtoSpace.grade_match_conf time_data = 13;
  inline int time_data_size() const;
  inline void clear_time_data();
  static const int kTimeDataFieldNumber = 13;
  inline const ::SProtoSpace::grade_match_conf& time_data(int index) const;
  inline ::SProtoSpace::grade_match_conf* mutable_time_data(int index);
  inline ::SProtoSpace::grade_match_conf* add_time_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::grade_match_conf >&
      time_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::grade_match_conf >*
      mutable_time_data();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_data_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_max_grade();
  inline void clear_has_max_grade();
  inline void set_has_apply_grade();
  inline void clear_has_apply_grade();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_is_draw();
  inline void clear_has_is_draw();
  inline void set_has_last_draw_time();
  inline void clear_has_last_draw_time();
  inline void set_has_daily_offical_chal_num();
  inline void clear_has_daily_offical_chal_num();
  inline void set_has_last_grade();
  inline void clear_has_last_grade();
  inline void set_has_exist();
  inline void clear_has_exist();
  inline void set_has_ranking_id();
  inline void clear_has_ranking_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint32 cur_grade_;
  ::google::protobuf::uint32 max_grade_;
  ::google::protobuf::uint64 apply_time_;
  ::google::protobuf::uint32 apply_grade_;
  ::google::protobuf::int32 daily_offical_chal_num_;
  ::google::protobuf::uint64 last_draw_time_;
  bool is_draw_;
  bool exist_;
  ::google::protobuf::uint32 last_grade_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::grade_match_conf > time_data_;
  ::google::protobuf::int32 ranking_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class offical_data_ntf : public ::google::protobuf::Message {
 public:
  offical_data_ntf();
  virtual ~offical_data_ntf();

  offical_data_ntf(const offical_data_ntf& from);

  inline offical_data_ntf& operator=(const offical_data_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_data_ntf& default_instance();

  void Swap(offical_data_ntf* other);

  // implements Message ----------------------------------------------

  offical_data_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_data_ntf& from);
  void MergeFrom(const offical_data_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_data_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 cur_grade = 2;
  inline bool has_cur_grade() const;
  inline void clear_cur_grade();
  static const int kCurGradeFieldNumber = 2;
  inline ::google::protobuf::int32 cur_grade() const;
  inline void set_cur_grade(::google::protobuf::int32 value);

  // optional int32 max_grade = 3;
  inline bool has_max_grade() const;
  inline void clear_max_grade();
  static const int kMaxGradeFieldNumber = 3;
  inline ::google::protobuf::int32 max_grade() const;
  inline void set_max_grade(::google::protobuf::int32 value);

  // optional int32 apply_grade = 4;
  inline bool has_apply_grade() const;
  inline void clear_apply_grade();
  static const int kApplyGradeFieldNumber = 4;
  inline ::google::protobuf::int32 apply_grade() const;
  inline void set_apply_grade(::google::protobuf::int32 value);

  // optional bool lock = 5;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 5;
  inline bool lock() const;
  inline void set_lock(bool value);

  // optional uint64 apply_time = 6;
  inline bool has_apply_time() const;
  inline void clear_apply_time();
  static const int kApplyTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 apply_time() const;
  inline void set_apply_time(::google::protobuf::uint64 value);

  // optional bool is_draw = 7;
  inline bool has_is_draw() const;
  inline void clear_is_draw();
  static const int kIsDrawFieldNumber = 7;
  inline bool is_draw() const;
  inline void set_is_draw(bool value);

  // optional uint64 last_draw_time = 8;
  inline bool has_last_draw_time() const;
  inline void clear_last_draw_time();
  static const int kLastDrawTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 last_draw_time() const;
  inline void set_last_draw_time(::google::protobuf::uint64 value);

  // optional int32 daily_offical_chal_num = 9;
  inline bool has_daily_offical_chal_num() const;
  inline void clear_daily_offical_chal_num();
  static const int kDailyOfficalChalNumFieldNumber = 9;
  inline ::google::protobuf::int32 daily_offical_chal_num() const;
  inline void set_daily_offical_chal_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_data_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_cur_grade();
  inline void clear_has_cur_grade();
  inline void set_has_max_grade();
  inline void clear_has_max_grade();
  inline void set_has_apply_grade();
  inline void clear_has_apply_grade();
  inline void set_has_lock();
  inline void clear_has_lock();
  inline void set_has_apply_time();
  inline void clear_has_apply_time();
  inline void set_has_is_draw();
  inline void clear_has_is_draw();
  inline void set_has_last_draw_time();
  inline void clear_has_last_draw_time();
  inline void set_has_daily_offical_chal_num();
  inline void clear_has_daily_offical_chal_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 cur_grade_;
  ::google::protobuf::int32 max_grade_;
  ::google::protobuf::int32 apply_grade_;
  ::google::protobuf::uint64 apply_time_;
  bool lock_;
  bool is_draw_;
  ::google::protobuf::int32 daily_offical_chal_num_;
  ::google::protobuf::uint64 last_draw_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static offical_data_ntf* default_instance_;
};
// -------------------------------------------------------------------

class update_chest_ntf : public ::google::protobuf::Message {
 public:
  update_chest_ntf();
  virtual ~update_chest_ntf();

  update_chest_ntf(const update_chest_ntf& from);

  inline update_chest_ntf& operator=(const update_chest_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_chest_ntf& default_instance();

  void Swap(update_chest_ntf* other);

  // implements Message ----------------------------------------------

  update_chest_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_chest_ntf& from);
  void MergeFrom(const update_chest_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_chest_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.role_chest chests = 2;
  inline int chests_size() const;
  inline void clear_chests();
  static const int kChestsFieldNumber = 2;
  inline const ::SProtoSpace::role_chest& chests(int index) const;
  inline ::SProtoSpace::role_chest* mutable_chests(int index);
  inline ::SProtoSpace::role_chest* add_chests();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_chest >&
      chests() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_chest >*
      mutable_chests();

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_chest_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_chest > chests_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static update_chest_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_role_chest_req : public ::google::protobuf::Message {
 public:
  get_role_chest_req();
  virtual ~get_role_chest_req();

  get_role_chest_req(const get_role_chest_req& from);

  inline get_role_chest_req& operator=(const get_role_chest_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_role_chest_req& default_instance();

  void Swap(get_role_chest_req* other);

  // implements Message ----------------------------------------------

  get_role_chest_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_role_chest_req& from);
  void MergeFrom(const get_role_chest_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 chest_id = 2;
  inline bool has_chest_id() const;
  inline void clear_chest_id();
  static const int kChestIdFieldNumber = 2;
  inline ::google::protobuf::uint64 chest_id() const;
  inline void set_chest_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_role_chest_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_chest_id();
  inline void clear_has_chest_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 chest_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_role_chest_req* default_instance_;
};
// -------------------------------------------------------------------

class get_role_chest_ack : public ::google::protobuf::Message {
 public:
  get_role_chest_ack();
  virtual ~get_role_chest_ack();

  get_role_chest_ack(const get_role_chest_ack& from);

  inline get_role_chest_ack& operator=(const get_role_chest_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_role_chest_ack& default_instance();

  void Swap(get_role_chest_ack* other);

  // implements Message ----------------------------------------------

  get_role_chest_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_role_chest_ack& from);
  void MergeFrom(const get_role_chest_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 chest_id = 2;
  inline bool has_chest_id() const;
  inline void clear_chest_id();
  static const int kChestIdFieldNumber = 2;
  inline ::google::protobuf::uint64 chest_id() const;
  inline void set_chest_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_role_chest_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_chest_id();
  inline void clear_has_chest_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 chest_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_role_chest_ack* default_instance_;
};
// -------------------------------------------------------------------

class create_team_req : public ::google::protobuf::Message {
 public:
  create_team_req();
  virtual ~create_team_req();

  create_team_req(const create_team_req& from);

  inline create_team_req& operator=(const create_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_team_req& default_instance();

  void Swap(create_team_req* other);

  // implements Message ----------------------------------------------

  create_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_team_req& from);
  void MergeFrom(const create_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.eTeamType team_type = 2;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 2;
  inline ::SProtoSpace::eTeamType team_type() const;
  inline void set_team_type(::SProtoSpace::eTeamType value);

  // optional .SProtoSpace.eTeamSize team_size = 3;
  inline bool has_team_size() const;
  inline void clear_team_size();
  static const int kTeamSizeFieldNumber = 3;
  inline ::SProtoSpace::eTeamSize team_size() const;
  inline void set_team_size(::SProtoSpace::eTeamSize value);

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  inline bool has_team_perm() const;
  inline void clear_team_perm();
  static const int kTeamPermFieldNumber = 4;
  inline ::SProtoSpace::eTeamPermission team_perm() const;
  inline void set_team_perm(::SProtoSpace::eTeamPermission value);

  // optional string team_name = 5;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 5;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // repeated uint64 heros = 6;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 6;
  inline ::google::protobuf::uint64 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint64 value);
  inline void add_heros(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.create_team_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_team_size();
  inline void clear_has_team_size();
  inline void set_has_team_perm();
  inline void clear_has_team_perm();
  inline void set_has_team_name();
  inline void clear_has_team_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int team_type_;
  int team_size_;
  int team_perm_;
  ::std::string* team_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static create_team_req* default_instance_;
};
// -------------------------------------------------------------------

class create_team_ack : public ::google::protobuf::Message {
 public:
  create_team_ack();
  virtual ~create_team_ack();

  create_team_ack(const create_team_ack& from);

  inline create_team_ack& operator=(const create_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const create_team_ack& default_instance();

  void Swap(create_team_ack* other);

  // implements Message ----------------------------------------------

  create_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const create_team_ack& from);
  void MergeFrom(const create_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.eTeamType team_type = 2;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 2;
  inline ::SProtoSpace::eTeamType team_type() const;
  inline void set_team_type(::SProtoSpace::eTeamType value);

  // optional .SProtoSpace.eTeamSize team_size = 3;
  inline bool has_team_size() const;
  inline void clear_team_size();
  static const int kTeamSizeFieldNumber = 3;
  inline ::SProtoSpace::eTeamSize team_size() const;
  inline void set_team_size(::SProtoSpace::eTeamSize value);

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  inline bool has_team_perm() const;
  inline void clear_team_perm();
  static const int kTeamPermFieldNumber = 4;
  inline ::SProtoSpace::eTeamPermission team_perm() const;
  inline void set_team_perm(::SProtoSpace::eTeamPermission value);

  // optional string team_name = 5;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 5;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // repeated uint64 heros = 6;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 6;
  inline ::google::protobuf::uint64 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint64 value);
  inline void add_heros(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heros();

  // optional uint32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.create_team_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_team_size();
  inline void clear_has_team_size();
  inline void set_has_team_perm();
  inline void clear_has_team_perm();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int team_type_;
  int team_size_;
  int team_perm_;
  ::std::string* team_name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heros_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static create_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class enter_team_req : public ::google::protobuf::Message {
 public:
  enter_team_req();
  virtual ~enter_team_req();

  enter_team_req(const enter_team_req& from);

  inline enter_team_req& operator=(const enter_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_team_req& default_instance();

  void Swap(enter_team_req* other);

  // implements Message ----------------------------------------------

  enter_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_team_req& from);
  void MergeFrom(const enter_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // repeated uint64 heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  inline ::google::protobuf::uint64 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint64 value);
  inline void add_heros(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_team_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > heros_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static enter_team_req* default_instance_;
};
// -------------------------------------------------------------------

class enter_team_ack : public ::google::protobuf::Message {
 public:
  enter_team_ack();
  virtual ~enter_team_ack();

  enter_team_ack(const enter_team_ack& from);

  inline enter_team_ack& operator=(const enter_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const enter_team_ack& default_instance();

  void Swap(enter_team_ack* other);

  // implements Message ----------------------------------------------

  enter_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const enter_team_ack& from);
  void MergeFrom(const enter_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.enter_team_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static enter_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class exit_team_req : public ::google::protobuf::Message {
 public:
  exit_team_req();
  virtual ~exit_team_req();

  exit_team_req(const exit_team_req& from);

  inline exit_team_req& operator=(const exit_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_team_req& default_instance();

  void Swap(exit_team_req* other);

  // implements Message ----------------------------------------------

  exit_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_team_req& from);
  void MergeFrom(const exit_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_team_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static exit_team_req* default_instance_;
};
// -------------------------------------------------------------------

class exit_team_ack : public ::google::protobuf::Message {
 public:
  exit_team_ack();
  virtual ~exit_team_ack();

  exit_team_ack(const exit_team_ack& from);

  inline exit_team_ack& operator=(const exit_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_team_ack& default_instance();

  void Swap(exit_team_ack* other);

  // implements Message ----------------------------------------------

  exit_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_team_ack& from);
  void MergeFrom(const exit_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_team_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static exit_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_team_ntf : public ::google::protobuf::Message {
 public:
  update_team_ntf();
  virtual ~update_team_ntf();

  update_team_ntf(const update_team_ntf& from);

  inline update_team_ntf& operator=(const update_team_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_team_ntf& default_instance();

  void Swap(update_team_ntf* other);

  // implements Message ----------------------------------------------

  update_team_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_team_ntf& from);
  void MergeFrom(const update_team_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.team_data team = 2;
  inline bool has_team() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 2;
  inline const ::SProtoSpace::team_data& team() const;
  inline ::SProtoSpace::team_data* mutable_team();
  inline ::SProtoSpace::team_data* release_team();
  inline void set_allocated_team(::SProtoSpace::team_data* team);

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_team_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team();
  inline void clear_has_team();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::team_data* team_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static update_team_ntf* default_instance_;
};
// -------------------------------------------------------------------

class ready_team_req : public ::google::protobuf::Message {
 public:
  ready_team_req();
  virtual ~ready_team_req();

  ready_team_req(const ready_team_req& from);

  inline ready_team_req& operator=(const ready_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ready_team_req& default_instance();

  void Swap(ready_team_req* other);

  // implements Message ----------------------------------------------

  ready_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ready_team_req& from);
  void MergeFrom(const ready_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ready_team_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static ready_team_req* default_instance_;
};
// -------------------------------------------------------------------

class ready_team_ack : public ::google::protobuf::Message {
 public:
  ready_team_ack();
  virtual ~ready_team_ack();

  ready_team_ack(const ready_team_ack& from);

  inline ready_team_ack& operator=(const ready_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ready_team_ack& default_instance();

  void Swap(ready_team_ack* other);

  // implements Message ----------------------------------------------

  ready_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ready_team_ack& from);
  void MergeFrom(const ready_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.ready_team_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static ready_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class update_team_req : public ::google::protobuf::Message {
 public:
  update_team_req();
  virtual ~update_team_req();

  update_team_req(const update_team_req& from);

  inline update_team_req& operator=(const update_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_team_req& default_instance();

  void Swap(update_team_req* other);

  // implements Message ----------------------------------------------

  update_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_team_req& from);
  void MergeFrom(const update_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint32 slot_id = 3;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint64 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_team_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint64 hero_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static update_team_req* default_instance_;
};
// -------------------------------------------------------------------

class update_team_ack : public ::google::protobuf::Message {
 public:
  update_team_ack();
  virtual ~update_team_ack();

  update_team_ack(const update_team_ack& from);

  inline update_team_ack& operator=(const update_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const update_team_ack& default_instance();

  void Swap(update_team_ack* other);

  // implements Message ----------------------------------------------

  update_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const update_team_ack& from);
  void MergeFrom(const update_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint32 slot_id = 3;
  inline bool has_slot_id() const;
  inline void clear_slot_id();
  static const int kSlotIdFieldNumber = 3;
  inline ::google::protobuf::uint32 slot_id() const;
  inline void set_slot_id(::google::protobuf::uint32 value);

  // optional uint64 hero_id = 4;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.update_team_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_slot_id();
  inline void clear_has_slot_id();
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 slot_id_;
  ::google::protobuf::uint64 hero_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static update_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_teams_req : public ::google::protobuf::Message {
 public:
  get_teams_req();
  virtual ~get_teams_req();

  get_teams_req(const get_teams_req& from);

  inline get_teams_req& operator=(const get_teams_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_teams_req& default_instance();

  void Swap(get_teams_req* other);

  // implements Message ----------------------------------------------

  get_teams_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_teams_req& from);
  void MergeFrom(const get_teams_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.eTeamType team_type = 2;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 2;
  inline ::SProtoSpace::eTeamType team_type() const;
  inline void set_team_type(::SProtoSpace::eTeamType value);

  // optional .SProtoSpace.eTeamSize team_size = 3;
  inline bool has_team_size() const;
  inline void clear_team_size();
  static const int kTeamSizeFieldNumber = 3;
  inline ::SProtoSpace::eTeamSize team_size() const;
  inline void set_team_size(::SProtoSpace::eTeamSize value);

  // optional .SProtoSpace.eTeamPermission team_perm = 4;
  inline bool has_team_perm() const;
  inline void clear_team_perm();
  static const int kTeamPermFieldNumber = 4;
  inline ::SProtoSpace::eTeamPermission team_perm() const;
  inline void set_team_perm(::SProtoSpace::eTeamPermission value);

  // repeated int32 parms = 5;
  inline int parms_size() const;
  inline void clear_parms();
  static const int kParmsFieldNumber = 5;
  inline ::google::protobuf::int32 parms(int index) const;
  inline void set_parms(int index, ::google::protobuf::int32 value);
  inline void add_parms(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      parms() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_parms();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_teams_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_team_size();
  inline void clear_has_team_size();
  inline void set_has_team_perm();
  inline void clear_has_team_perm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  int team_type_;
  int team_size_;
  int team_perm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > parms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_teams_req* default_instance_;
};
// -------------------------------------------------------------------

class get_teams_ack : public ::google::protobuf::Message {
 public:
  get_teams_ack();
  virtual ~get_teams_ack();

  get_teams_ack(const get_teams_ack& from);

  inline get_teams_ack& operator=(const get_teams_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_teams_ack& default_instance();

  void Swap(get_teams_ack* other);

  // implements Message ----------------------------------------------

  get_teams_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_teams_ack& from);
  void MergeFrom(const get_teams_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.team_brief teams = 3;
  inline int teams_size() const;
  inline void clear_teams();
  static const int kTeamsFieldNumber = 3;
  inline const ::SProtoSpace::team_brief& teams(int index) const;
  inline ::SProtoSpace::team_brief* mutable_teams(int index);
  inline ::SProtoSpace::team_brief* add_teams();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >&
      teams() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >*
      mutable_teams();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_teams_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief > teams_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_teams_ack* default_instance_;
};
// -------------------------------------------------------------------

class invite_roles_enter_team_req : public ::google::protobuf::Message {
 public:
  invite_roles_enter_team_req();
  virtual ~invite_roles_enter_team_req();

  invite_roles_enter_team_req(const invite_roles_enter_team_req& from);

  inline invite_roles_enter_team_req& operator=(const invite_roles_enter_team_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_roles_enter_team_req& default_instance();

  void Swap(invite_roles_enter_team_req* other);

  // implements Message ----------------------------------------------

  invite_roles_enter_team_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_roles_enter_team_req& from);
  void MergeFrom(const invite_roles_enter_team_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // repeated uint64 roles = 3;
  inline int roles_size() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 3;
  inline ::google::protobuf::uint64 roles(int index) const;
  inline void set_roles(int index, ::google::protobuf::uint64 value);
  inline void add_roles(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      roles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_roles();

  // @@protoc_insertion_point(class_scope:SProtoSpace.invite_roles_enter_team_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > roles_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static invite_roles_enter_team_req* default_instance_;
};
// -------------------------------------------------------------------

class invite_roles_enter_team_ack : public ::google::protobuf::Message {
 public:
  invite_roles_enter_team_ack();
  virtual ~invite_roles_enter_team_ack();

  invite_roles_enter_team_ack(const invite_roles_enter_team_ack& from);

  inline invite_roles_enter_team_ack& operator=(const invite_roles_enter_team_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_roles_enter_team_ack& default_instance();

  void Swap(invite_roles_enter_team_ack* other);

  // implements Message ----------------------------------------------

  invite_roles_enter_team_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_roles_enter_team_ack& from);
  void MergeFrom(const invite_roles_enter_team_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 team_id = 2;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 2;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional uint32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.invite_roles_enter_team_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static invite_roles_enter_team_ack* default_instance_;
};
// -------------------------------------------------------------------

class invite_enter_team_ntf : public ::google::protobuf::Message {
 public:
  invite_enter_team_ntf();
  virtual ~invite_enter_team_ntf();

  invite_enter_team_ntf(const invite_enter_team_ntf& from);

  inline invite_enter_team_ntf& operator=(const invite_enter_team_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const invite_enter_team_ntf& default_instance();

  void Swap(invite_enter_team_ntf* other);

  // implements Message ----------------------------------------------

  invite_enter_team_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const invite_enter_team_ntf& from);
  void MergeFrom(const invite_enter_team_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_enter_team_ntf_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 dest_role_id = 2;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional uint64 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::uint64 team_id() const;
  inline void set_team_id(::google::protobuf::uint64 value);

  // optional string team_name = 4;
  inline bool has_team_name() const;
  inline void clear_team_name();
  static const int kTeamNameFieldNumber = 4;
  inline const ::std::string& team_name() const;
  inline void set_team_name(const ::std::string& value);
  inline void set_team_name(const char* value);
  inline void set_team_name(const char* value, size_t size);
  inline ::std::string* mutable_team_name();
  inline ::std::string* release_team_name();
  inline void set_allocated_team_name(::std::string* team_name);

  // optional uint32 team_type = 5;
  inline bool has_team_type() const;
  inline void clear_team_type();
  static const int kTeamTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 team_type() const;
  inline void set_team_type(::google::protobuf::uint32 value);

  // optional uint64 sour_role_id = 6;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 6;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional string sour_role_name = 7;
  inline bool has_sour_role_name() const;
  inline void clear_sour_role_name();
  static const int kSourRoleNameFieldNumber = 7;
  inline const ::std::string& sour_role_name() const;
  inline void set_sour_role_name(const ::std::string& value);
  inline void set_sour_role_name(const char* value);
  inline void set_sour_role_name(const char* value, size_t size);
  inline ::std::string* mutable_sour_role_name();
  inline ::std::string* release_sour_role_name();
  inline void set_allocated_sour_role_name(::std::string* sour_role_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.invite_enter_team_ntf)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_team_type();
  inline void clear_has_team_type();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_sour_role_name();
  inline void clear_has_sour_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dest_role_id_;
  ::google::protobuf::uint64 team_id_;
  int proto_id_;
  ::google::protobuf::uint32 team_type_;
  ::std::string* team_name_;
  ::google::protobuf::uint64 sour_role_id_;
  ::std::string* sour_role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static invite_enter_team_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_rank_req : public ::google::protobuf::Message {
 public:
  get_offical_rank_req();
  virtual ~get_offical_rank_req();

  get_offical_rank_req(const get_offical_rank_req& from);

  inline get_offical_rank_req& operator=(const get_offical_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_rank_req& default_instance();

  void Swap(get_offical_rank_req* other);

  // implements Message ----------------------------------------------

  get_offical_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_rank_req& from);
  void MergeFrom(const get_offical_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::google::protobuf::int32 office_lv() const;
  inline void set_office_lv(::google::protobuf::int32 value);

  // optional uint32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 start_index() const;
  inline void set_start_index(::google::protobuf::uint32 value);

  // optional uint32 end_index = 4;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 end_index() const;
  inline void set_end_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_rank_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 office_lv_;
  ::google::protobuf::uint32 start_index_;
  ::google::protobuf::uint32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_rank_ack : public ::google::protobuf::Message {
 public:
  get_offical_rank_ack();
  virtual ~get_offical_rank_ack();

  get_offical_rank_ack(const get_offical_rank_ack& from);

  inline get_offical_rank_ack& operator=(const get_offical_rank_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_rank_ack& default_instance();

  void Swap(get_offical_rank_ack* other);

  // implements Message ----------------------------------------------

  get_offical_rank_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_rank_ack& from);
  void MergeFrom(const get_offical_rank_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // repeated .SProtoSpace.offical_item_data rank_items = 3;
  inline int rank_items_size() const;
  inline void clear_rank_items();
  static const int kRankItemsFieldNumber = 3;
  inline const ::SProtoSpace::offical_item_data& rank_items(int index) const;
  inline ::SProtoSpace::offical_item_data* mutable_rank_items(int index);
  inline ::SProtoSpace::offical_item_data* add_rank_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
      rank_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
      mutable_rank_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_rank_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data > rank_items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_rank_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_rank_info_req : public ::google::protobuf::Message {
 public:
  get_offical_rank_info_req();
  virtual ~get_offical_rank_info_req();

  get_offical_rank_info_req(const get_offical_rank_info_req& from);

  inline get_offical_rank_info_req& operator=(const get_offical_rank_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_rank_info_req& default_instance();

  void Swap(get_offical_rank_info_req* other);

  // implements Message ----------------------------------------------

  get_offical_rank_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_rank_info_req& from);
  void MergeFrom(const get_offical_rank_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::google::protobuf::int32 office_lv() const;
  inline void set_office_lv(::google::protobuf::int32 value);

  // optional int32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::int32 len() const;
  inline void set_len(::google::protobuf::int32 value);

  // optional bool show = 5;
  inline bool has_show() const;
  inline void clear_show();
  static const int kShowFieldNumber = 5;
  inline bool show() const;
  inline void set_show(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_rank_info_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_len();
  inline void clear_has_len();
  inline void set_has_show();
  inline void clear_has_show();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 office_lv_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 len_;
  bool show_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_rank_info_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_rank_info_ack : public ::google::protobuf::Message {
 public:
  get_offical_rank_info_ack();
  virtual ~get_offical_rank_info_ack();

  get_offical_rank_info_ack(const get_offical_rank_info_ack& from);

  inline get_offical_rank_info_ack& operator=(const get_offical_rank_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_rank_info_ack& default_instance();

  void Swap(get_offical_rank_info_ack* other);

  // implements Message ----------------------------------------------

  get_offical_rank_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_rank_info_ack& from);
  void MergeFrom(const get_offical_rank_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 offical_challenge_num = 3;
  inline bool has_offical_challenge_num() const;
  inline void clear_offical_challenge_num();
  static const int kOfficalChallengeNumFieldNumber = 3;
  inline ::google::protobuf::int32 offical_challenge_num() const;
  inline void set_offical_challenge_num(::google::protobuf::int32 value);

  // optional int32 offical_challenge_buy = 4;
  inline bool has_offical_challenge_buy() const;
  inline void clear_offical_challenge_buy();
  static const int kOfficalChallengeBuyFieldNumber = 4;
  inline ::google::protobuf::int32 offical_challenge_buy() const;
  inline void set_offical_challenge_buy(::google::protobuf::int32 value);

  // optional .SProtoSpace.offical_item_data my_item = 5;
  inline bool has_my_item() const;
  inline void clear_my_item();
  static const int kMyItemFieldNumber = 5;
  inline const ::SProtoSpace::offical_item_data& my_item() const;
  inline ::SProtoSpace::offical_item_data* mutable_my_item();
  inline ::SProtoSpace::offical_item_data* release_my_item();
  inline void set_allocated_my_item(::SProtoSpace::offical_item_data* my_item);

  // optional int32 current_size = 6;
  inline bool has_current_size() const;
  inline void clear_current_size();
  static const int kCurrentSizeFieldNumber = 6;
  inline ::google::protobuf::int32 current_size() const;
  inline void set_current_size(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_item_data rank_items = 7;
  inline int rank_items_size() const;
  inline void clear_rank_items();
  static const int kRankItemsFieldNumber = 7;
  inline const ::SProtoSpace::offical_item_data& rank_items(int index) const;
  inline ::SProtoSpace::offical_item_data* mutable_rank_items(int index);
  inline ::SProtoSpace::offical_item_data* add_rank_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
      rank_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
      mutable_rank_items();

  // repeated .SProtoSpace.role_show_role_equipped equip_items = 8;
  inline int equip_items_size() const;
  inline void clear_equip_items();
  static const int kEquipItemsFieldNumber = 8;
  inline const ::SProtoSpace::role_show_role_equipped& equip_items(int index) const;
  inline ::SProtoSpace::role_show_role_equipped* mutable_equip_items(int index);
  inline ::SProtoSpace::role_show_role_equipped* add_equip_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >&
      equip_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >*
      mutable_equip_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_rank_info_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_offical_challenge_num();
  inline void clear_has_offical_challenge_num();
  inline void set_has_offical_challenge_buy();
  inline void clear_has_offical_challenge_buy();
  inline void set_has_my_item();
  inline void clear_has_my_item();
  inline void set_has_current_size();
  inline void clear_has_current_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::int32 offical_challenge_num_;
  ::google::protobuf::int32 offical_challenge_buy_;
  ::SProtoSpace::offical_item_data* my_item_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data > rank_items_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped > equip_items_;
  ::google::protobuf::int32 current_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_rank_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_formation_req : public ::google::protobuf::Message {
 public:
  get_offical_formation_req();
  virtual ~get_offical_formation_req();

  get_offical_formation_req(const get_offical_formation_req& from);

  inline get_offical_formation_req& operator=(const get_offical_formation_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_formation_req& default_instance();

  void Swap(get_offical_formation_req* other);

  // implements Message ----------------------------------------------

  get_offical_formation_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_formation_req& from);
  void MergeFrom(const get_offical_formation_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint64 role_id = 2;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_formation_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  int proto_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_formation_req* default_instance_;
};
// -------------------------------------------------------------------

class get_offical_formation_ack : public ::google::protobuf::Message {
 public:
  get_offical_formation_ack();
  virtual ~get_offical_formation_ack();

  get_offical_formation_ack(const get_offical_formation_ack& from);

  inline get_offical_formation_ack& operator=(const get_offical_formation_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_offical_formation_ack& default_instance();

  void Swap(get_offical_formation_ack* other);

  // implements Message ----------------------------------------------

  get_offical_formation_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_offical_formation_ack& from);
  void MergeFrom(const get_offical_formation_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional uint64 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional string head = 6;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional int32 bord = 7;
  inline bool has_bord() const;
  inline void clear_bord();
  static const int kBordFieldNumber = 7;
  inline ::google::protobuf::int32 bord() const;
  inline void set_bord(::google::protobuf::int32 value);

  // optional int32 grade = 8;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 8;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional int32 lv = 9;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 9;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // repeated .SProtoSpace.hero_base_info heros = 10;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 10;
  inline const ::SProtoSpace::hero_base_info& heros(int index) const;
  inline ::SProtoSpace::hero_base_info* mutable_heros(int index);
  inline ::SProtoSpace::hero_base_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_offical_formation_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_bord();
  inline void clear_has_bord();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 role_id_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 bord_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info > heros_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_offical_formation_ack* default_instance_;
};
// -------------------------------------------------------------------

class challenge_offical_rank_req : public ::google::protobuf::Message {
 public:
  challenge_offical_rank_req();
  virtual ~challenge_offical_rank_req();

  challenge_offical_rank_req(const challenge_offical_rank_req& from);

  inline challenge_offical_rank_req& operator=(const challenge_offical_rank_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const challenge_offical_rank_req& default_instance();

  void Swap(challenge_offical_rank_req* other);

  // implements Message ----------------------------------------------

  challenge_offical_rank_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const challenge_offical_rank_req& from);
  void MergeFrom(const challenge_offical_rank_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::google::protobuf::int32 office_lv() const;
  inline void set_office_lv(::google::protobuf::int32 value);

  // optional uint64 dest_role_id = 3;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.challenge_offical_rank_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 office_lv_;
  ::google::protobuf::uint64 dest_role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static challenge_offical_rank_req* default_instance_;
};
// -------------------------------------------------------------------

class challenge_offical_rank_ack : public ::google::protobuf::Message {
 public:
  challenge_offical_rank_ack();
  virtual ~challenge_offical_rank_ack();

  challenge_offical_rank_ack(const challenge_offical_rank_ack& from);

  inline challenge_offical_rank_ack& operator=(const challenge_offical_rank_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const challenge_offical_rank_ack& default_instance();

  void Swap(challenge_offical_rank_ack* other);

  // implements Message ----------------------------------------------

  challenge_offical_rank_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const challenge_offical_rank_ack& from);
  void MergeFrom(const challenge_offical_rank_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional uint32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // optional int32 office_lv = 3;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 3;
  inline ::google::protobuf::int32 office_lv() const;
  inline void set_office_lv(::google::protobuf::int32 value);

  // optional uint64 dest_role_id = 4;
  inline bool has_dest_role_id() const;
  inline void clear_dest_role_id();
  static const int kDestRoleIdFieldNumber = 4;
  inline ::google::protobuf::uint64 dest_role_id() const;
  inline void set_dest_role_id(::google::protobuf::uint64 value);

  // optional int32 dest_older_rankingid = 5;
  inline bool has_dest_older_rankingid() const;
  inline void clear_dest_older_rankingid();
  static const int kDestOlderRankingidFieldNumber = 5;
  inline ::google::protobuf::int32 dest_older_rankingid() const;
  inline void set_dest_older_rankingid(::google::protobuf::int32 value);

  // optional int32 dest_new_rankingid = 6;
  inline bool has_dest_new_rankingid() const;
  inline void clear_dest_new_rankingid();
  static const int kDestNewRankingidFieldNumber = 6;
  inline ::google::protobuf::int32 dest_new_rankingid() const;
  inline void set_dest_new_rankingid(::google::protobuf::int32 value);

  // optional uint64 sour_role_id = 7;
  inline bool has_sour_role_id() const;
  inline void clear_sour_role_id();
  static const int kSourRoleIdFieldNumber = 7;
  inline ::google::protobuf::uint64 sour_role_id() const;
  inline void set_sour_role_id(::google::protobuf::uint64 value);

  // optional int32 sour_older_rankingid = 8;
  inline bool has_sour_older_rankingid() const;
  inline void clear_sour_older_rankingid();
  static const int kSourOlderRankingidFieldNumber = 8;
  inline ::google::protobuf::int32 sour_older_rankingid() const;
  inline void set_sour_older_rankingid(::google::protobuf::int32 value);

  // optional int32 sour_new_rankingid = 9;
  inline bool has_sour_new_rankingid() const;
  inline void clear_sour_new_rankingid();
  static const int kSourNewRankingidFieldNumber = 9;
  inline ::google::protobuf::int32 sour_new_rankingid() const;
  inline void set_sour_new_rankingid(::google::protobuf::int32 value);

  // optional uint64 battle_id = 10;
  inline bool has_battle_id() const;
  inline void clear_battle_id();
  static const int kBattleIdFieldNumber = 10;
  inline ::google::protobuf::uint64 battle_id() const;
  inline void set_battle_id(::google::protobuf::uint64 value);

  // optional bool win = 11;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 11;
  inline bool win() const;
  inline void set_win(bool value);

  // repeated .SProtoSpace.reward_item items = 12;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 12;
  inline const ::SProtoSpace::reward_item& items(int index) const;
  inline ::SProtoSpace::reward_item* mutable_items(int index);
  inline ::SProtoSpace::reward_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
      mutable_items();

  // optional int32 merit = 13;
  inline bool has_merit() const;
  inline void clear_merit();
  static const int kMeritFieldNumber = 13;
  inline ::google::protobuf::int32 merit() const;
  inline void set_merit(::google::protobuf::int32 value);

  // repeated .SProtoSpace.hero_base_info heros = 14;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 14;
  inline const ::SProtoSpace::hero_base_info& heros(int index) const;
  inline ::SProtoSpace::hero_base_info* mutable_heros(int index);
  inline ::SProtoSpace::hero_base_info* add_heros();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
      heros() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:SProtoSpace.challenge_offical_rank_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_dest_role_id();
  inline void clear_has_dest_role_id();
  inline void set_has_dest_older_rankingid();
  inline void clear_has_dest_older_rankingid();
  inline void set_has_dest_new_rankingid();
  inline void clear_has_dest_new_rankingid();
  inline void set_has_sour_role_id();
  inline void clear_has_sour_role_id();
  inline void set_has_sour_older_rankingid();
  inline void clear_has_sour_older_rankingid();
  inline void set_has_sour_new_rankingid();
  inline void clear_has_sour_new_rankingid();
  inline void set_has_battle_id();
  inline void clear_has_battle_id();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_merit();
  inline void clear_has_merit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::uint32 ret_;
  ::google::protobuf::uint64 dest_role_id_;
  ::google::protobuf::int32 office_lv_;
  ::google::protobuf::int32 dest_older_rankingid_;
  ::google::protobuf::uint64 sour_role_id_;
  ::google::protobuf::int32 dest_new_rankingid_;
  ::google::protobuf::int32 sour_older_rankingid_;
  ::google::protobuf::uint64 battle_id_;
  ::google::protobuf::int32 sour_new_rankingid_;
  bool win_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item > items_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info > heros_;
  ::google::protobuf::int32 merit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static challenge_offical_rank_ack* default_instance_;
};
// -------------------------------------------------------------------

class offical_apply_battle_result_req : public ::google::protobuf::Message {
 public:
  offical_apply_battle_result_req();
  virtual ~offical_apply_battle_result_req();

  offical_apply_battle_result_req(const offical_apply_battle_result_req& from);

  inline offical_apply_battle_result_req& operator=(const offical_apply_battle_result_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_apply_battle_result_req& default_instance();

  void Swap(offical_apply_battle_result_req* other);

  // implements Message ----------------------------------------------

  offical_apply_battle_result_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_apply_battle_result_req& from);
  void MergeFrom(const offical_apply_battle_result_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_req_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::google::protobuf::int32 office_lv() const;
  inline void set_office_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_apply_battle_result_req)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 office_lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static offical_apply_battle_result_req* default_instance_;
};
// -------------------------------------------------------------------

class offical_apply_battle_result_ack : public ::google::protobuf::Message {
 public:
  offical_apply_battle_result_ack();
  virtual ~offical_apply_battle_result_ack();

  offical_apply_battle_result_ack(const offical_apply_battle_result_ack& from);

  inline offical_apply_battle_result_ack& operator=(const offical_apply_battle_result_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const offical_apply_battle_result_ack& default_instance();

  void Swap(offical_apply_battle_result_ack* other);

  // implements Message ----------------------------------------------

  offical_apply_battle_result_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const offical_apply_battle_result_ack& from);
  void MergeFrom(const offical_apply_battle_result_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_ack_id];
  inline bool has_proto_id() const;
  inline void clear_proto_id();
  static const int kProtoIdFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID proto_id() const;
  inline void set_proto_id(::SProtoSpace::ECSProtoID value);

  // optional int32 office_lv = 2;
  inline bool has_office_lv() const;
  inline void clear_office_lv();
  static const int kOfficeLvFieldNumber = 2;
  inline ::google::protobuf::int32 office_lv() const;
  inline void set_office_lv(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // repeated .SProtoSpace.offical_member_data data = 4;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::SProtoSpace::offical_member_data& data(int index) const;
  inline ::SProtoSpace::offical_member_data* mutable_data(int index);
  inline ::SProtoSpace::offical_member_data* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
      mutable_data();

  // repeated .SProtoSpace.offical_apply_my_battle_data mydata = 5;
  inline int mydata_size() const;
  inline void clear_mydata();
  static const int kMydataFieldNumber = 5;
  inline const ::SProtoSpace::offical_apply_my_battle_data& mydata(int index) const;
  inline ::SProtoSpace::offical_apply_my_battle_data* mutable_mydata(int index);
  inline ::SProtoSpace::offical_apply_my_battle_data* add_mydata();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
      mydata() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
      mutable_mydata();

  // optional int32 my_place_id = 6;
  inline bool has_my_place_id() const;
  inline void clear_my_place_id();
  static const int kMyPlaceIdFieldNumber = 6;
  inline ::google::protobuf::int32 my_place_id() const;
  inline void set_my_place_id(::google::protobuf::int32 value);

  // optional uint32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::uint32 ret() const;
  inline void set_ret(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.offical_apply_battle_result_ack)
 private:
  inline void set_has_proto_id();
  inline void clear_has_proto_id();
  inline void set_has_office_lv();
  inline void clear_has_office_lv();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_my_place_id();
  inline void clear_has_my_place_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int proto_id_;
  ::google::protobuf::int32 office_lv_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data > data_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 my_place_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data > mydata_;
  ::google::protobuf::uint32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static offical_apply_battle_result_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_plot_upload_req : public ::google::protobuf::Message {
 public:
  role_plot_upload_req();
  virtual ~role_plot_upload_req();

  role_plot_upload_req(const role_plot_upload_req& from);

  inline role_plot_upload_req& operator=(const role_plot_upload_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_plot_upload_req& default_instance();

  void Swap(role_plot_upload_req* other);

  // implements Message ----------------------------------------------

  role_plot_upload_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_plot_upload_req& from);
  void MergeFrom(const role_plot_upload_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 chapter_id = 2;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 3;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 3;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // optional uint32 section_id = 4;
  inline bool has_section_id() const;
  inline void clear_section_id();
  static const int kSectionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 section_id() const;
  inline void set_section_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_plot_upload_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();
  inline void set_has_section_id();
  inline void clear_has_section_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;
  ::google::protobuf::uint32 section_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_plot_upload_req* default_instance_;
};
// -------------------------------------------------------------------

class role_plot_upload_ack : public ::google::protobuf::Message {
 public:
  role_plot_upload_ack();
  virtual ~role_plot_upload_ack();

  role_plot_upload_ack(const role_plot_upload_ack& from);

  inline role_plot_upload_ack& operator=(const role_plot_upload_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_plot_upload_ack& default_instance();

  void Swap(role_plot_upload_ack* other);

  // implements Message ----------------------------------------------

  role_plot_upload_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_plot_upload_ack& from);
  void MergeFrom(const role_plot_upload_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_plot_upload_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_plot_upload_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_plot_get_req : public ::google::protobuf::Message {
 public:
  role_plot_get_req();
  virtual ~role_plot_get_req();

  role_plot_get_req(const role_plot_get_req& from);

  inline role_plot_get_req& operator=(const role_plot_get_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_plot_get_req& default_instance();

  void Swap(role_plot_get_req* other);

  // implements Message ----------------------------------------------

  role_plot_get_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_plot_get_req& from);
  void MergeFrom(const role_plot_get_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.GET_PLOT_TYPE get_type = 2;
  inline bool has_get_type() const;
  inline void clear_get_type();
  static const int kGetTypeFieldNumber = 2;
  inline ::SProtoSpace::GET_PLOT_TYPE get_type() const;
  inline void set_get_type(::SProtoSpace::GET_PLOT_TYPE value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_plot_get_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_get_type();
  inline void clear_has_get_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int get_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_plot_get_req* default_instance_;
};
// -------------------------------------------------------------------

class role_plot_get_ack : public ::google::protobuf::Message {
 public:
  role_plot_get_ack();
  virtual ~role_plot_get_ack();

  role_plot_get_ack(const role_plot_get_ack& from);

  inline role_plot_get_ack& operator=(const role_plot_get_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_plot_get_ack& default_instance();

  void Swap(role_plot_get_ack* other);

  // implements Message ----------------------------------------------

  role_plot_get_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_plot_get_ack& from);
  void MergeFrom(const role_plot_get_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.plot_screen_info plot_infos = 3;
  inline int plot_infos_size() const;
  inline void clear_plot_infos();
  static const int kPlotInfosFieldNumber = 3;
  inline const ::SProtoSpace::plot_screen_info& plot_infos(int index) const;
  inline ::SProtoSpace::plot_screen_info* mutable_plot_infos(int index);
  inline ::SProtoSpace::plot_screen_info* add_plot_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::plot_screen_info >&
      plot_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::plot_screen_info >*
      mutable_plot_infos();

  // repeated uint32 branch_ids = 4;
  inline int branch_ids_size() const;
  inline void clear_branch_ids();
  static const int kBranchIdsFieldNumber = 4;
  inline ::google::protobuf::uint32 branch_ids(int index) const;
  inline void set_branch_ids(int index, ::google::protobuf::uint32 value);
  inline void add_branch_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      branch_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_branch_ids();

  // repeated uint32 end_ids = 5;
  inline int end_ids_size() const;
  inline void clear_end_ids();
  static const int kEndIdsFieldNumber = 5;
  inline ::google::protobuf::uint32 end_ids(int index) const;
  inline void set_end_ids(int index, ::google::protobuf::uint32 value);
  inline void add_end_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      end_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_end_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_plot_get_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::plot_screen_info > plot_infos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > branch_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > end_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_plot_get_ack* default_instance_;
};
// -------------------------------------------------------------------

class plot_end_req : public ::google::protobuf::Message {
 public:
  plot_end_req();
  virtual ~plot_end_req();

  plot_end_req(const plot_end_req& from);

  inline plot_end_req& operator=(const plot_end_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_end_req& default_instance();

  void Swap(plot_end_req* other);

  // implements Message ----------------------------------------------

  plot_end_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_end_req& from);
  void MergeFrom(const plot_end_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 chapter_id = 2;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 3;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 3;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_end_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_end_req* default_instance_;
};
// -------------------------------------------------------------------

class plot_end_ack : public ::google::protobuf::Message {
 public:
  plot_end_ack();
  virtual ~plot_end_ack();

  plot_end_ack(const plot_end_ack& from);

  inline plot_end_ack& operator=(const plot_end_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_end_ack& default_instance();

  void Swap(plot_end_ack* other);

  // implements Message ----------------------------------------------

  plot_end_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_end_ack& from);
  void MergeFrom(const plot_end_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated int32 get_end_id = 3;
  inline int get_end_id_size() const;
  inline void clear_get_end_id();
  static const int kGetEndIdFieldNumber = 3;
  inline ::google::protobuf::int32 get_end_id(int index) const;
  inline void set_get_end_id(int index, ::google::protobuf::int32 value);
  inline void add_get_end_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      get_end_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_get_end_id();

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_end_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > get_end_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_end_ack* default_instance_;
};
// -------------------------------------------------------------------

class plot_chapter_end_req : public ::google::protobuf::Message {
 public:
  plot_chapter_end_req();
  virtual ~plot_chapter_end_req();

  plot_chapter_end_req(const plot_chapter_end_req& from);

  inline plot_chapter_end_req& operator=(const plot_chapter_end_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_chapter_end_req& default_instance();

  void Swap(plot_chapter_end_req* other);

  // implements Message ----------------------------------------------

  plot_chapter_end_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_chapter_end_req& from);
  void MergeFrom(const plot_chapter_end_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 chapter_id = 2;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 3;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 3;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_chapter_end_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_chapter_end_req* default_instance_;
};
// -------------------------------------------------------------------

class plot_chapter_end_ack : public ::google::protobuf::Message {
 public:
  plot_chapter_end_ack();
  virtual ~plot_chapter_end_ack();

  plot_chapter_end_ack(const plot_chapter_end_ack& from);

  inline plot_chapter_end_ack& operator=(const plot_chapter_end_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_chapter_end_ack& default_instance();

  void Swap(plot_chapter_end_ack* other);

  // implements Message ----------------------------------------------

  plot_chapter_end_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_chapter_end_ack& from);
  void MergeFrom(const plot_chapter_end_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_chapter_end_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_chapter_end_ack* default_instance_;
};
// -------------------------------------------------------------------

class plot_choose_branch_req : public ::google::protobuf::Message {
 public:
  plot_choose_branch_req();
  virtual ~plot_choose_branch_req();

  plot_choose_branch_req(const plot_choose_branch_req& from);

  inline plot_choose_branch_req& operator=(const plot_choose_branch_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_choose_branch_req& default_instance();

  void Swap(plot_choose_branch_req* other);

  // implements Message ----------------------------------------------

  plot_choose_branch_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_choose_branch_req& from);
  void MergeFrom(const plot_choose_branch_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 chapter_id = 2;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 3;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 3;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // optional uint32 branch_id = 4;
  inline bool has_branch_id() const;
  inline void clear_branch_id();
  static const int kBranchIdFieldNumber = 4;
  inline ::google::protobuf::uint32 branch_id() const;
  inline void set_branch_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_choose_branch_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();
  inline void set_has_branch_id();
  inline void clear_has_branch_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;
  ::google::protobuf::uint32 branch_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_choose_branch_req* default_instance_;
};
// -------------------------------------------------------------------

class plot_choose_branch_ack : public ::google::protobuf::Message {
 public:
  plot_choose_branch_ack();
  virtual ~plot_choose_branch_ack();

  plot_choose_branch_ack(const plot_choose_branch_ack& from);

  inline plot_choose_branch_ack& operator=(const plot_choose_branch_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_choose_branch_ack& default_instance();

  void Swap(plot_choose_branch_ack* other);

  // implements Message ----------------------------------------------

  plot_choose_branch_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_choose_branch_ack& from);
  void MergeFrom(const plot_choose_branch_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.add_character_attr_info add_character_infos = 3;
  inline int add_character_infos_size() const;
  inline void clear_add_character_infos();
  static const int kAddCharacterInfosFieldNumber = 3;
  inline const ::SProtoSpace::add_character_attr_info& add_character_infos(int index) const;
  inline ::SProtoSpace::add_character_attr_info* mutable_add_character_infos(int index);
  inline ::SProtoSpace::add_character_attr_info* add_add_character_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_character_attr_info >&
      add_character_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_character_attr_info >*
      mutable_add_character_infos();

  // repeated .SProtoSpace.add_royal_value_info add_royal_infos = 4;
  inline int add_royal_infos_size() const;
  inline void clear_add_royal_infos();
  static const int kAddRoyalInfosFieldNumber = 4;
  inline const ::SProtoSpace::add_royal_value_info& add_royal_infos(int index) const;
  inline ::SProtoSpace::add_royal_value_info* mutable_add_royal_infos(int index);
  inline ::SProtoSpace::add_royal_value_info* add_add_royal_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_royal_value_info >&
      add_royal_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_royal_value_info >*
      mutable_add_royal_infos();

  // repeated .SProtoSpace.itemid_and_num reward_items = 5;
  inline int reward_items_size() const;
  inline void clear_reward_items();
  static const int kRewardItemsFieldNumber = 5;
  inline const ::SProtoSpace::itemid_and_num& reward_items(int index) const;
  inline ::SProtoSpace::itemid_and_num* mutable_reward_items(int index);
  inline ::SProtoSpace::itemid_and_num* add_reward_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >&
      reward_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >*
      mutable_reward_items();

  // optional uint32 chapter_id = 6;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 6;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 7;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 7;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // optional uint32 branch_id = 8;
  inline bool has_branch_id() const;
  inline void clear_branch_id();
  static const int kBranchIdFieldNumber = 8;
  inline ::google::protobuf::uint32 branch_id() const;
  inline void set_branch_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_choose_branch_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();
  inline void set_has_branch_id();
  inline void clear_has_branch_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_character_attr_info > add_character_infos_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_royal_value_info > add_royal_infos_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num > reward_items_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;
  ::google::protobuf::uint32 branch_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_choose_branch_ack* default_instance_;
};
// -------------------------------------------------------------------

class plot_trigger_action_req : public ::google::protobuf::Message {
 public:
  plot_trigger_action_req();
  virtual ~plot_trigger_action_req();

  plot_trigger_action_req(const plot_trigger_action_req& from);

  inline plot_trigger_action_req& operator=(const plot_trigger_action_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_trigger_action_req& default_instance();

  void Swap(plot_trigger_action_req* other);

  // implements Message ----------------------------------------------

  plot_trigger_action_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_trigger_action_req& from);
  void MergeFrom(const plot_trigger_action_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 chapter_id = 2;
  inline bool has_chapter_id() const;
  inline void clear_chapter_id();
  static const int kChapterIdFieldNumber = 2;
  inline ::google::protobuf::uint32 chapter_id() const;
  inline void set_chapter_id(::google::protobuf::uint32 value);

  // optional uint32 screen_id = 3;
  inline bool has_screen_id() const;
  inline void clear_screen_id();
  static const int kScreenIdFieldNumber = 3;
  inline ::google::protobuf::uint32 screen_id() const;
  inline void set_screen_id(::google::protobuf::uint32 value);

  // optional uint32 action_id = 4;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 4;
  inline ::google::protobuf::uint32 action_id() const;
  inline void set_action_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_trigger_action_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_chapter_id();
  inline void clear_has_chapter_id();
  inline void set_has_screen_id();
  inline void clear_has_screen_id();
  inline void set_has_action_id();
  inline void clear_has_action_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 chapter_id_;
  ::google::protobuf::uint32 screen_id_;
  ::google::protobuf::uint32 action_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_trigger_action_req* default_instance_;
};
// -------------------------------------------------------------------

class plot_trigger_action_ack : public ::google::protobuf::Message {
 public:
  plot_trigger_action_ack();
  virtual ~plot_trigger_action_ack();

  plot_trigger_action_ack(const plot_trigger_action_ack& from);

  inline plot_trigger_action_ack& operator=(const plot_trigger_action_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_trigger_action_ack& default_instance();

  void Swap(plot_trigger_action_ack* other);

  // implements Message ----------------------------------------------

  plot_trigger_action_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_trigger_action_ack& from);
  void MergeFrom(const plot_trigger_action_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.itemid_and_num reward_items = 3;
  inline int reward_items_size() const;
  inline void clear_reward_items();
  static const int kRewardItemsFieldNumber = 3;
  inline const ::SProtoSpace::itemid_and_num& reward_items(int index) const;
  inline ::SProtoSpace::itemid_and_num* mutable_reward_items(int index);
  inline ::SProtoSpace::itemid_and_num* add_reward_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >&
      reward_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >*
      mutable_reward_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_trigger_action_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num > reward_items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_trigger_action_ack* default_instance_;
};
// -------------------------------------------------------------------

class all_event_info : public ::google::protobuf::Message {
 public:
  all_event_info();
  virtual ~all_event_info();

  all_event_info(const all_event_info& from);

  inline all_event_info& operator=(const all_event_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_event_info& default_instance();

  void Swap(all_event_info* other);

  // implements Message ----------------------------------------------

  all_event_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_event_info& from);
  void MergeFrom(const all_event_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.event_offical_info event_offical = 1;
  inline bool has_event_offical() const;
  inline void clear_event_offical();
  static const int kEventOfficalFieldNumber = 1;
  inline const ::SProtoSpace::event_offical_info& event_offical() const;
  inline ::SProtoSpace::event_offical_info* mutable_event_offical();
  inline ::SProtoSpace::event_offical_info* release_event_offical();
  inline void set_allocated_event_offical(::SProtoSpace::event_offical_info* event_offical);

  // optional .SProtoSpace.event_qingan_info event_qingan = 2;
  inline bool has_event_qingan() const;
  inline void clear_event_qingan();
  static const int kEventQinganFieldNumber = 2;
  inline const ::SProtoSpace::event_qingan_info& event_qingan() const;
  inline ::SProtoSpace::event_qingan_info* mutable_event_qingan();
  inline ::SProtoSpace::event_qingan_info* release_event_qingan();
  inline void set_allocated_event_qingan(::SProtoSpace::event_qingan_info* event_qingan);

  // optional .SProtoSpace.event_slap_info event_slap = 3;
  inline bool has_event_slap() const;
  inline void clear_event_slap();
  static const int kEventSlapFieldNumber = 3;
  inline const ::SProtoSpace::event_slap_info& event_slap() const;
  inline ::SProtoSpace::event_slap_info* mutable_event_slap();
  inline ::SProtoSpace::event_slap_info* release_event_slap();
  inline void set_allocated_event_slap(::SProtoSpace::event_slap_info* event_slap);

  // optional .SProtoSpace.event_tribute_info event_tribute = 4;
  inline bool has_event_tribute() const;
  inline void clear_event_tribute();
  static const int kEventTributeFieldNumber = 4;
  inline const ::SProtoSpace::event_tribute_info& event_tribute() const;
  inline ::SProtoSpace::event_tribute_info* mutable_event_tribute();
  inline ::SProtoSpace::event_tribute_info* release_event_tribute();
  inline void set_allocated_event_tribute(::SProtoSpace::event_tribute_info* event_tribute);

  // optional .SProtoSpace.event_flower_send_info event_send_flower = 5;
  inline bool has_event_send_flower() const;
  inline void clear_event_send_flower();
  static const int kEventSendFlowerFieldNumber = 5;
  inline const ::SProtoSpace::event_flower_send_info& event_send_flower() const;
  inline ::SProtoSpace::event_flower_send_info* mutable_event_send_flower();
  inline ::SProtoSpace::event_flower_send_info* release_event_send_flower();
  inline void set_allocated_event_send_flower(::SProtoSpace::event_flower_send_info* event_send_flower);

  // optional .SProtoSpace.event_flower_info event_receive_flower = 6;
  inline bool has_event_receive_flower() const;
  inline void clear_event_receive_flower();
  static const int kEventReceiveFlowerFieldNumber = 6;
  inline const ::SProtoSpace::event_flower_info& event_receive_flower() const;
  inline ::SProtoSpace::event_flower_info* mutable_event_receive_flower();
  inline ::SProtoSpace::event_flower_info* release_event_receive_flower();
  inline void set_allocated_event_receive_flower(::SProtoSpace::event_flower_info* event_receive_flower);

  // optional .SProtoSpace.event_offical_reduce event_reduce = 7;
  inline bool has_event_reduce() const;
  inline void clear_event_reduce();
  static const int kEventReduceFieldNumber = 7;
  inline const ::SProtoSpace::event_offical_reduce& event_reduce() const;
  inline ::SProtoSpace::event_offical_reduce* mutable_event_reduce();
  inline ::SProtoSpace::event_offical_reduce* release_event_reduce();
  inline void set_allocated_event_reduce(::SProtoSpace::event_offical_reduce* event_reduce);

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_event_info)
 private:
  inline void set_has_event_offical();
  inline void clear_has_event_offical();
  inline void set_has_event_qingan();
  inline void clear_has_event_qingan();
  inline void set_has_event_slap();
  inline void clear_has_event_slap();
  inline void set_has_event_tribute();
  inline void clear_has_event_tribute();
  inline void set_has_event_send_flower();
  inline void clear_has_event_send_flower();
  inline void set_has_event_receive_flower();
  inline void clear_has_event_receive_flower();
  inline void set_has_event_reduce();
  inline void clear_has_event_reduce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::event_offical_info* event_offical_;
  ::SProtoSpace::event_qingan_info* event_qingan_;
  ::SProtoSpace::event_slap_info* event_slap_;
  ::SProtoSpace::event_tribute_info* event_tribute_;
  ::SProtoSpace::event_flower_send_info* event_send_flower_;
  ::SProtoSpace::event_flower_info* event_receive_flower_;
  ::SProtoSpace::event_offical_reduce* event_reduce_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static all_event_info* default_instance_;
};
// -------------------------------------------------------------------

class client_event_msg_info : public ::google::protobuf::Message {
 public:
  client_event_msg_info();
  virtual ~client_event_msg_info();

  client_event_msg_info(const client_event_msg_info& from);

  inline client_event_msg_info& operator=(const client_event_msg_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const client_event_msg_info& default_instance();

  void Swap(client_event_msg_info* other);

  // implements Message ----------------------------------------------

  client_event_msg_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client_event_msg_info& from);
  void MergeFrom(const client_event_msg_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 from_id = 1;
  inline bool has_from_id() const;
  inline void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  inline ::google::protobuf::uint64 from_id() const;
  inline void set_from_id(::google::protobuf::uint64 value);

  // optional string from_name = 2;
  inline bool has_from_name() const;
  inline void clear_from_name();
  static const int kFromNameFieldNumber = 2;
  inline const ::std::string& from_name() const;
  inline void set_from_name(const ::std::string& value);
  inline void set_from_name(const char* value);
  inline void set_from_name(const char* value, size_t size);
  inline ::std::string* mutable_from_name();
  inline ::std::string* release_from_name();
  inline void set_allocated_from_name(::std::string* from_name);

  // optional uint32 from_lv = 3;
  inline bool has_from_lv() const;
  inline void clear_from_lv();
  static const int kFromLvFieldNumber = 3;
  inline ::google::protobuf::uint32 from_lv() const;
  inline void set_from_lv(::google::protobuf::uint32 value);

  // optional uint32 from_sex = 4;
  inline bool has_from_sex() const;
  inline void clear_from_sex();
  static const int kFromSexFieldNumber = 4;
  inline ::google::protobuf::uint32 from_sex() const;
  inline void set_from_sex(::google::protobuf::uint32 value);

  // optional uint32 from_grade = 5;
  inline bool has_from_grade() const;
  inline void clear_from_grade();
  static const int kFromGradeFieldNumber = 5;
  inline ::google::protobuf::uint32 from_grade() const;
  inline void set_from_grade(::google::protobuf::uint32 value);

  // optional int32 from_border = 6;
  inline bool has_from_border() const;
  inline void clear_from_border();
  static const int kFromBorderFieldNumber = 6;
  inline ::google::protobuf::int32 from_border() const;
  inline void set_from_border(::google::protobuf::int32 value);

  // optional uint32 event_type = 7;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // optional uint64 add_time = 8;
  inline bool has_add_time() const;
  inline void clear_add_time();
  static const int kAddTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 add_time() const;
  inline void set_add_time(::google::protobuf::uint64 value);

  // optional bool is_read = 9;
  inline bool has_is_read() const;
  inline void clear_is_read();
  static const int kIsReadFieldNumber = 9;
  inline bool is_read() const;
  inline void set_is_read(bool value);

  // optional uint32 msg_template_id = 10;
  inline bool has_msg_template_id() const;
  inline void clear_msg_template_id();
  static const int kMsgTemplateIdFieldNumber = 10;
  inline ::google::protobuf::uint32 msg_template_id() const;
  inline void set_msg_template_id(::google::protobuf::uint32 value);

  // optional .SProtoSpace.all_event_info msg_content = 11;
  inline bool has_msg_content() const;
  inline void clear_msg_content();
  static const int kMsgContentFieldNumber = 11;
  inline const ::SProtoSpace::all_event_info& msg_content() const;
  inline ::SProtoSpace::all_event_info* mutable_msg_content();
  inline ::SProtoSpace::all_event_info* release_msg_content();
  inline void set_allocated_msg_content(::SProtoSpace::all_event_info* msg_content);

  // @@protoc_insertion_point(class_scope:SProtoSpace.client_event_msg_info)
 private:
  inline void set_has_from_id();
  inline void clear_has_from_id();
  inline void set_has_from_name();
  inline void clear_has_from_name();
  inline void set_has_from_lv();
  inline void clear_has_from_lv();
  inline void set_has_from_sex();
  inline void clear_has_from_sex();
  inline void set_has_from_grade();
  inline void clear_has_from_grade();
  inline void set_has_from_border();
  inline void clear_has_from_border();
  inline void set_has_event_type();
  inline void clear_has_event_type();
  inline void set_has_add_time();
  inline void clear_has_add_time();
  inline void set_has_is_read();
  inline void clear_has_is_read();
  inline void set_has_msg_template_id();
  inline void clear_has_msg_template_id();
  inline void set_has_msg_content();
  inline void clear_has_msg_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_id_;
  ::std::string* from_name_;
  ::google::protobuf::uint32 from_lv_;
  ::google::protobuf::uint32 from_sex_;
  ::google::protobuf::uint32 from_grade_;
  ::google::protobuf::int32 from_border_;
  ::google::protobuf::uint64 add_time_;
  ::google::protobuf::uint32 event_type_;
  bool is_read_;
  ::SProtoSpace::all_event_info* msg_content_;
  ::google::protobuf::uint32 msg_template_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static client_event_msg_info* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_get_all_req : public ::google::protobuf::Message {
 public:
  event_msg_get_all_req();
  virtual ~event_msg_get_all_req();

  event_msg_get_all_req(const event_msg_get_all_req& from);

  inline event_msg_get_all_req& operator=(const event_msg_get_all_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_get_all_req& default_instance();

  void Swap(event_msg_get_all_req* other);

  // implements Message ----------------------------------------------

  event_msg_get_all_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_get_all_req& from);
  void MergeFrom(const event_msg_get_all_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_get_all_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_get_all_req* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_get_all_ack : public ::google::protobuf::Message {
 public:
  event_msg_get_all_ack();
  virtual ~event_msg_get_all_ack();

  event_msg_get_all_ack(const event_msg_get_all_ack& from);

  inline event_msg_get_all_ack& operator=(const event_msg_get_all_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_get_all_ack& default_instance();

  void Swap(event_msg_get_all_ack* other);

  // implements Message ----------------------------------------------

  event_msg_get_all_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_get_all_ack& from);
  void MergeFrom(const event_msg_get_all_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.client_event_msg_info msgs = 3;
  inline int msgs_size() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 3;
  inline const ::SProtoSpace::client_event_msg_info& msgs(int index) const;
  inline ::SProtoSpace::client_event_msg_info* mutable_msgs(int index);
  inline ::SProtoSpace::client_event_msg_info* add_msgs();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_event_msg_info >&
      msgs() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_event_msg_info >*
      mutable_msgs();

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_get_all_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_event_msg_info > msgs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_get_all_ack* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_read_req : public ::google::protobuf::Message {
 public:
  event_msg_read_req();
  virtual ~event_msg_read_req();

  event_msg_read_req(const event_msg_read_req& from);

  inline event_msg_read_req& operator=(const event_msg_read_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_read_req& default_instance();

  void Swap(event_msg_read_req* other);

  // implements Message ----------------------------------------------

  event_msg_read_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_read_req& from);
  void MergeFrom(const event_msg_read_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 event_type = 2;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_read_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_read_req* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_read_ack : public ::google::protobuf::Message {
 public:
  event_msg_read_ack();
  virtual ~event_msg_read_ack();

  event_msg_read_ack(const event_msg_read_ack& from);

  inline event_msg_read_ack& operator=(const event_msg_read_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_read_ack& default_instance();

  void Swap(event_msg_read_ack* other);

  // implements Message ----------------------------------------------

  event_msg_read_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_read_ack& from);
  void MergeFrom(const event_msg_read_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 event_type = 3;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_read_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_read_ack* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_del_req : public ::google::protobuf::Message {
 public:
  event_msg_del_req();
  virtual ~event_msg_del_req();

  event_msg_del_req(const event_msg_del_req& from);

  inline event_msg_del_req& operator=(const event_msg_del_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_del_req& default_instance();

  void Swap(event_msg_del_req* other);

  // implements Message ----------------------------------------------

  event_msg_del_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_del_req& from);
  void MergeFrom(const event_msg_del_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint32 event_type = 2;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_del_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::uint32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_del_req* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_del_ack : public ::google::protobuf::Message {
 public:
  event_msg_del_ack();
  virtual ~event_msg_del_ack();

  event_msg_del_ack(const event_msg_del_ack& from);

  inline event_msg_del_ack& operator=(const event_msg_del_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_del_ack& default_instance();

  void Swap(event_msg_del_ack* other);

  // implements Message ----------------------------------------------

  event_msg_del_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_del_ack& from);
  void MergeFrom(const event_msg_del_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 event_type = 3;
  inline bool has_event_type() const;
  inline void clear_event_type();
  static const int kEventTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 event_type() const;
  inline void set_event_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_del_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_event_type();
  inline void clear_has_event_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 event_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_del_ack* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_nty : public ::google::protobuf::Message {
 public:
  event_msg_nty();
  virtual ~event_msg_nty();

  event_msg_nty(const event_msg_nty& from);

  inline event_msg_nty& operator=(const event_msg_nty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_nty& default_instance();

  void Swap(event_msg_nty* other);

  // implements Message ----------------------------------------------

  event_msg_nty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_nty& from);
  void MergeFrom(const event_msg_nty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_nty_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.client_event_msg_info msgs = 2;
  inline bool has_msgs() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 2;
  inline const ::SProtoSpace::client_event_msg_info& msgs() const;
  inline ::SProtoSpace::client_event_msg_info* mutable_msgs();
  inline ::SProtoSpace::client_event_msg_info* release_msgs();
  inline void set_allocated_msgs(::SProtoSpace::client_event_msg_info* msgs);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_nty)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_msgs();
  inline void clear_has_msgs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::client_event_msg_info* msgs_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_nty* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_get_by_id_req : public ::google::protobuf::Message {
 public:
  event_msg_get_by_id_req();
  virtual ~event_msg_get_by_id_req();

  event_msg_get_by_id_req(const event_msg_get_by_id_req& from);

  inline event_msg_get_by_id_req& operator=(const event_msg_get_by_id_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_get_by_id_req& default_instance();

  void Swap(event_msg_get_by_id_req* other);

  // implements Message ----------------------------------------------

  event_msg_get_by_id_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_get_by_id_req& from);
  void MergeFrom(const event_msg_get_by_id_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 event_uuid = 2;
  inline bool has_event_uuid() const;
  inline void clear_event_uuid();
  static const int kEventUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 event_uuid() const;
  inline void set_event_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_get_by_id_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_event_uuid();
  inline void clear_has_event_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 event_uuid_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_get_by_id_req* default_instance_;
};
// -------------------------------------------------------------------

class event_msg_get_by_id_ack : public ::google::protobuf::Message {
 public:
  event_msg_get_by_id_ack();
  virtual ~event_msg_get_by_id_ack();

  event_msg_get_by_id_ack(const event_msg_get_by_id_ack& from);

  inline event_msg_get_by_id_ack& operator=(const event_msg_get_by_id_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const event_msg_get_by_id_ack& default_instance();

  void Swap(event_msg_get_by_id_ack* other);

  // implements Message ----------------------------------------------

  event_msg_get_by_id_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const event_msg_get_by_id_ack& from);
  void MergeFrom(const event_msg_get_by_id_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .SProtoSpace.client_event_msg_info msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::SProtoSpace::client_event_msg_info& msg() const;
  inline ::SProtoSpace::client_event_msg_info* mutable_msg();
  inline ::SProtoSpace::client_event_msg_info* release_msg();
  inline void set_allocated_msg(::SProtoSpace::client_event_msg_info* msg);

  // @@protoc_insertion_point(class_scope:SProtoSpace.event_msg_get_by_id_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::SProtoSpace::client_event_msg_info* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static event_msg_get_by_id_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_rank_data_req : public ::google::protobuf::Message {
 public:
  get_rank_data_req();
  virtual ~get_rank_data_req();

  get_rank_data_req(const get_rank_data_req& from);

  inline get_rank_data_req& operator=(const get_rank_data_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_rank_data_req& default_instance();

  void Swap(get_rank_data_req* other);

  // implements Message ----------------------------------------------

  get_rank_data_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_rank_data_req& from);
  void MergeFrom(const get_rank_data_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.RANK_TYPE type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::RANK_TYPE type() const;
  inline void set_type(::SProtoSpace::RANK_TYPE value);

  // optional int32 start_index = 3;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 3;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 4;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 4;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_rank_data_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::int32 start_index_;
  ::google::protobuf::int32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_rank_data_req* default_instance_;
};
// -------------------------------------------------------------------

class get_rank_data_ack : public ::google::protobuf::Message {
 public:
  get_rank_data_ack();
  virtual ~get_rank_data_ack();

  get_rank_data_ack(const get_rank_data_ack& from);

  inline get_rank_data_ack& operator=(const get_rank_data_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_rank_data_ack& default_instance();

  void Swap(get_rank_data_ack* other);

  // implements Message ----------------------------------------------

  get_rank_data_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_rank_data_ack& from);
  void MergeFrom(const get_rank_data_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .SProtoSpace.RANK_TYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::SProtoSpace::RANK_TYPE type() const;
  inline void set_type(::SProtoSpace::RANK_TYPE value);

  // optional int32 start_index = 4;
  inline bool has_start_index() const;
  inline void clear_start_index();
  static const int kStartIndexFieldNumber = 4;
  inline ::google::protobuf::int32 start_index() const;
  inline void set_start_index(::google::protobuf::int32 value);

  // optional int32 end_index = 5;
  inline bool has_end_index() const;
  inline void clear_end_index();
  static const int kEndIndexFieldNumber = 5;
  inline ::google::protobuf::int32 end_index() const;
  inline void set_end_index(::google::protobuf::int32 value);

  // optional .SProtoSpace.rank_common_item my_item = 6;
  inline bool has_my_item() const;
  inline void clear_my_item();
  static const int kMyItemFieldNumber = 6;
  inline const ::SProtoSpace::rank_common_item& my_item() const;
  inline ::SProtoSpace::rank_common_item* mutable_my_item();
  inline ::SProtoSpace::rank_common_item* release_my_item();
  inline void set_allocated_my_item(::SProtoSpace::rank_common_item* my_item);

  // repeated .SProtoSpace.rank_common_item items = 7;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 7;
  inline const ::SProtoSpace::rank_common_item& items(int index) const;
  inline ::SProtoSpace::rank_common_item* mutable_items(int index);
  inline ::SProtoSpace::rank_common_item* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_rank_data_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_index();
  inline void clear_has_start_index();
  inline void set_has_end_index();
  inline void clear_has_end_index();
  inline void set_has_my_item();
  inline void clear_has_my_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  int type_;
  ::google::protobuf::int32 start_index_;
  ::SProtoSpace::rank_common_item* my_item_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item > items_;
  ::google::protobuf::int32 end_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_rank_data_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_uint_achievement : public ::google::protobuf::Message {
 public:
  role_uint_achievement();
  virtual ~role_uint_achievement();

  role_uint_achievement(const role_uint_achievement& from);

  inline role_uint_achievement& operator=(const role_uint_achievement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_uint_achievement& default_instance();

  void Swap(role_uint_achievement* other);

  // implements Message ----------------------------------------------

  role_uint_achievement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_uint_achievement& from);
  void MergeFrom(const role_uint_achievement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 task_config_id = 1;
  inline bool has_task_config_id() const;
  inline void clear_task_config_id();
  static const int kTaskConfigIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_config_id() const;
  inline void set_task_config_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.EQuestStatus state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::SProtoSpace::EQuestStatus state() const;
  inline void set_state(::SProtoSpace::EQuestStatus value);

  // optional uint32 state_utc_time = 3;
  inline bool has_state_utc_time() const;
  inline void clear_state_utc_time();
  static const int kStateUtcTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 state_utc_time() const;
  inline void set_state_utc_time(::google::protobuf::uint32 value);

  // optional uint32 current_step = 4;
  inline bool has_current_step() const;
  inline void clear_current_step();
  static const int kCurrentStepFieldNumber = 4;
  inline ::google::protobuf::uint32 current_step() const;
  inline void set_current_step(::google::protobuf::uint32 value);

  // optional uint32 max_step = 5;
  inline bool has_max_step() const;
  inline void clear_max_step();
  static const int kMaxStepFieldNumber = 5;
  inline ::google::protobuf::uint32 max_step() const;
  inline void set_max_step(::google::protobuf::uint32 value);

  // optional bool is_new = 6;
  inline bool has_is_new() const;
  inline void clear_is_new();
  static const int kIsNewFieldNumber = 6;
  inline bool is_new() const;
  inline void set_is_new(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_uint_achievement)
 private:
  inline void set_has_task_config_id();
  inline void clear_has_task_config_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_state_utc_time();
  inline void clear_has_state_utc_time();
  inline void set_has_current_step();
  inline void clear_has_current_step();
  inline void set_has_max_step();
  inline void clear_has_max_step();
  inline void set_has_is_new();
  inline void clear_has_is_new();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 task_config_id_;
  int state_;
  ::google::protobuf::uint32 state_utc_time_;
  ::google::protobuf::uint32 current_step_;
  ::google::protobuf::uint32 max_step_;
  bool is_new_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_uint_achievement* default_instance_;
};
// -------------------------------------------------------------------

class role_achievements_ntf_type_list : public ::google::protobuf::Message {
 public:
  role_achievements_ntf_type_list();
  virtual ~role_achievements_ntf_type_list();

  role_achievements_ntf_type_list(const role_achievements_ntf_type_list& from);

  inline role_achievements_ntf_type_list& operator=(const role_achievements_ntf_type_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_achievements_ntf_type_list& default_instance();

  void Swap(role_achievements_ntf_type_list* other);

  // implements Message ----------------------------------------------

  role_achievements_ntf_type_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_achievements_ntf_type_list& from);
  void MergeFrom(const role_achievements_ntf_type_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 big_types = 1;
  inline bool has_big_types() const;
  inline void clear_big_types();
  static const int kBigTypesFieldNumber = 1;
  inline ::google::protobuf::int32 big_types() const;
  inline void set_big_types(::google::protobuf::int32 value);

  // repeated int32 small_types = 2;
  inline int small_types_size() const;
  inline void clear_small_types();
  static const int kSmallTypesFieldNumber = 2;
  inline ::google::protobuf::int32 small_types(int index) const;
  inline void set_small_types(int index, ::google::protobuf::int32 value);
  inline void add_small_types(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      small_types() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_small_types();

  // optional uint32 big_type_pt = 3;
  inline bool has_big_type_pt() const;
  inline void clear_big_type_pt();
  static const int kBigTypePtFieldNumber = 3;
  inline ::google::protobuf::uint32 big_type_pt() const;
  inline void set_big_type_pt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_achievements_ntf_type_list)
 private:
  inline void set_has_big_types();
  inline void clear_has_big_types();
  inline void set_has_big_type_pt();
  inline void clear_has_big_type_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > small_types_;
  ::google::protobuf::int32 big_types_;
  ::google::protobuf::uint32 big_type_pt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_achievements_ntf_type_list* default_instance_;
};
// -------------------------------------------------------------------

class role_achievements_ntf : public ::google::protobuf::Message {
 public:
  role_achievements_ntf();
  virtual ~role_achievements_ntf();

  role_achievements_ntf(const role_achievements_ntf& from);

  inline role_achievements_ntf& operator=(const role_achievements_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_achievements_ntf& default_instance();

  void Swap(role_achievements_ntf* other);

  // implements Message ----------------------------------------------

  role_achievements_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_achievements_ntf& from);
  void MergeFrom(const role_achievements_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievements_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.role_uint_achievement achievements = 2;
  inline int achievements_size() const;
  inline void clear_achievements();
  static const int kAchievementsFieldNumber = 2;
  inline const ::SProtoSpace::role_uint_achievement& achievements(int index) const;
  inline ::SProtoSpace::role_uint_achievement* mutable_achievements(int index);
  inline ::SProtoSpace::role_uint_achievement* add_achievements();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_uint_achievement >&
      achievements() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_uint_achievement >*
      mutable_achievements();

  // repeated int32 points_reward_getted_ids = 3;
  inline int points_reward_getted_ids_size() const;
  inline void clear_points_reward_getted_ids();
  static const int kPointsRewardGettedIdsFieldNumber = 3;
  inline ::google::protobuf::int32 points_reward_getted_ids(int index) const;
  inline void set_points_reward_getted_ids(int index, ::google::protobuf::int32 value);
  inline void add_points_reward_getted_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      points_reward_getted_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_points_reward_getted_ids();

  // repeated .SProtoSpace.role_achievements_ntf_type_list list = 4;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 4;
  inline const ::SProtoSpace::role_achievements_ntf_type_list& list(int index) const;
  inline ::SProtoSpace::role_achievements_ntf_type_list* mutable_list(int index);
  inline ::SProtoSpace::role_achievements_ntf_type_list* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_achievements_ntf_type_list >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_achievements_ntf_type_list >*
      mutable_list();

  // optional uint32 current_achieve_pt = 5;
  inline bool has_current_achieve_pt() const;
  inline void clear_current_achieve_pt();
  static const int kCurrentAchievePtFieldNumber = 5;
  inline ::google::protobuf::uint32 current_achieve_pt() const;
  inline void set_current_achieve_pt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_achievements_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_current_achieve_pt();
  inline void clear_has_current_achieve_pt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_uint_achievement > achievements_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > points_reward_getted_ids_;
  int protoid_;
  ::google::protobuf::uint32 current_achieve_pt_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_achievements_ntf_type_list > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_achievements_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_achievement_get_rewards_req : public ::google::protobuf::Message {
 public:
  role_achievement_get_rewards_req();
  virtual ~role_achievement_get_rewards_req();

  role_achievement_get_rewards_req(const role_achievement_get_rewards_req& from);

  inline role_achievement_get_rewards_req& operator=(const role_achievement_get_rewards_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_achievement_get_rewards_req& default_instance();

  void Swap(role_achievement_get_rewards_req* other);

  // implements Message ----------------------------------------------

  role_achievement_get_rewards_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_achievement_get_rewards_req& from);
  void MergeFrom(const role_achievement_get_rewards_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 task_config_id = 2;
  inline int task_config_id_size() const;
  inline void clear_task_config_id();
  static const int kTaskConfigIdFieldNumber = 2;
  inline ::google::protobuf::int32 task_config_id(int index) const;
  inline void set_task_config_id(int index, ::google::protobuf::int32 value);
  inline void add_task_config_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      task_config_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_task_config_id();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_achievement_get_rewards_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > task_config_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_achievement_get_rewards_req* default_instance_;
};
// -------------------------------------------------------------------

class role_achievement_get_rewards_ack : public ::google::protobuf::Message {
 public:
  role_achievement_get_rewards_ack();
  virtual ~role_achievement_get_rewards_ack();

  role_achievement_get_rewards_ack(const role_achievement_get_rewards_ack& from);

  inline role_achievement_get_rewards_ack& operator=(const role_achievement_get_rewards_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_achievement_get_rewards_ack& default_instance();

  void Swap(role_achievement_get_rewards_ack* other);

  // implements Message ----------------------------------------------

  role_achievement_get_rewards_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_achievement_get_rewards_ack& from);
  void MergeFrom(const role_achievement_get_rewards_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 succeed_get_award_tasks = 2;
  inline int succeed_get_award_tasks_size() const;
  inline void clear_succeed_get_award_tasks();
  static const int kSucceedGetAwardTasksFieldNumber = 2;
  inline ::google::protobuf::int32 succeed_get_award_tasks(int index) const;
  inline void set_succeed_get_award_tasks(int index, ::google::protobuf::int32 value);
  inline void add_succeed_get_award_tasks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      succeed_get_award_tasks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_succeed_get_award_tasks();

  // repeated int32 failed_get_award_tasks = 3;
  inline int failed_get_award_tasks_size() const;
  inline void clear_failed_get_award_tasks();
  static const int kFailedGetAwardTasksFieldNumber = 3;
  inline ::google::protobuf::int32 failed_get_award_tasks(int index) const;
  inline void set_failed_get_award_tasks(int index, ::google::protobuf::int32 value);
  inline void add_failed_get_award_tasks(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      failed_get_award_tasks() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_failed_get_award_tasks();

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  inline int error_codes_size() const;
  inline void clear_error_codes();
  static const int kErrorCodesFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error_codes(int index) const;
  inline void set_error_codes(int index, ::SProtoSpace::MsgErrorType value);
  inline void add_error_codes(::SProtoSpace::MsgErrorType value);
  inline const ::google::protobuf::RepeatedField<int>& error_codes() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_error_codes();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_achievement_get_rewards_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > succeed_get_award_tasks_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > failed_get_award_tasks_;
  ::google::protobuf::RepeatedField<int> error_codes_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_achievement_get_rewards_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_achievement_point_rewards_req : public ::google::protobuf::Message {
 public:
  role_achievement_point_rewards_req();
  virtual ~role_achievement_point_rewards_req();

  role_achievement_point_rewards_req(const role_achievement_point_rewards_req& from);

  inline role_achievement_point_rewards_req& operator=(const role_achievement_point_rewards_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_achievement_point_rewards_req& default_instance();

  void Swap(role_achievement_point_rewards_req* other);

  // implements Message ----------------------------------------------

  role_achievement_point_rewards_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_achievement_point_rewards_req& from);
  void MergeFrom(const role_achievement_point_rewards_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 achievement_pt_reward_id = 2;
  inline int achievement_pt_reward_id_size() const;
  inline void clear_achievement_pt_reward_id();
  static const int kAchievementPtRewardIdFieldNumber = 2;
  inline ::google::protobuf::int32 achievement_pt_reward_id(int index) const;
  inline void set_achievement_pt_reward_id(int index, ::google::protobuf::int32 value);
  inline void add_achievement_pt_reward_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      achievement_pt_reward_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_achievement_pt_reward_id();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_achievement_point_rewards_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > achievement_pt_reward_id_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_achievement_point_rewards_req* default_instance_;
};
// -------------------------------------------------------------------

class role_achievement_point_rewards_ack : public ::google::protobuf::Message {
 public:
  role_achievement_point_rewards_ack();
  virtual ~role_achievement_point_rewards_ack();

  role_achievement_point_rewards_ack(const role_achievement_point_rewards_ack& from);

  inline role_achievement_point_rewards_ack& operator=(const role_achievement_point_rewards_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_achievement_point_rewards_ack& default_instance();

  void Swap(role_achievement_point_rewards_ack* other);

  // implements Message ----------------------------------------------

  role_achievement_point_rewards_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_achievement_point_rewards_ack& from);
  void MergeFrom(const role_achievement_point_rewards_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 succeed_get_award_ids = 2;
  inline int succeed_get_award_ids_size() const;
  inline void clear_succeed_get_award_ids();
  static const int kSucceedGetAwardIdsFieldNumber = 2;
  inline ::google::protobuf::int32 succeed_get_award_ids(int index) const;
  inline void set_succeed_get_award_ids(int index, ::google::protobuf::int32 value);
  inline void add_succeed_get_award_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      succeed_get_award_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_succeed_get_award_ids();

  // repeated int32 failed_get_award_ids = 3;
  inline int failed_get_award_ids_size() const;
  inline void clear_failed_get_award_ids();
  static const int kFailedGetAwardIdsFieldNumber = 3;
  inline ::google::protobuf::int32 failed_get_award_ids(int index) const;
  inline void set_failed_get_award_ids(int index, ::google::protobuf::int32 value);
  inline void add_failed_get_award_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      failed_get_award_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_failed_get_award_ids();

  // repeated .SProtoSpace.MsgErrorType error_codes = 4;
  inline int error_codes_size() const;
  inline void clear_error_codes();
  static const int kErrorCodesFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error_codes(int index) const;
  inline void set_error_codes(int index, ::SProtoSpace::MsgErrorType value);
  inline void add_error_codes(::SProtoSpace::MsgErrorType value);
  inline const ::google::protobuf::RepeatedField<int>& error_codes() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_error_codes();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_achievement_point_rewards_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > succeed_get_award_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > failed_get_award_ids_;
  ::google::protobuf::RepeatedField<int> error_codes_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_achievement_point_rewards_ack* default_instance_;
};
// -------------------------------------------------------------------

class flower_bag_nty : public ::google::protobuf::Message {
 public:
  flower_bag_nty();
  virtual ~flower_bag_nty();

  flower_bag_nty(const flower_bag_nty& from);

  inline flower_bag_nty& operator=(const flower_bag_nty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_bag_nty& default_instance();

  void Swap(flower_bag_nty* other);

  // implements Message ----------------------------------------------

  flower_bag_nty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_bag_nty& from);
  void MergeFrom(const flower_bag_nty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_nty_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.flower_info flower = 2;
  inline bool has_flower() const;
  inline void clear_flower();
  static const int kFlowerFieldNumber = 2;
  inline const ::SProtoSpace::flower_info& flower() const;
  inline ::SProtoSpace::flower_info* mutable_flower();
  inline ::SProtoSpace::flower_info* release_flower();
  inline void set_allocated_flower(::SProtoSpace::flower_info* flower);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_bag_nty)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_flower();
  inline void clear_has_flower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::flower_info* flower_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_bag_nty* default_instance_;
};
// -------------------------------------------------------------------

class flower_bag_all_req : public ::google::protobuf::Message {
 public:
  flower_bag_all_req();
  virtual ~flower_bag_all_req();

  flower_bag_all_req(const flower_bag_all_req& from);

  inline flower_bag_all_req& operator=(const flower_bag_all_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_bag_all_req& default_instance();

  void Swap(flower_bag_all_req* other);

  // implements Message ----------------------------------------------

  flower_bag_all_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_bag_all_req& from);
  void MergeFrom(const flower_bag_all_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_bag_all_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_bag_all_req* default_instance_;
};
// -------------------------------------------------------------------

class flower_bag_all_ack : public ::google::protobuf::Message {
 public:
  flower_bag_all_ack();
  virtual ~flower_bag_all_ack();

  flower_bag_all_ack(const flower_bag_all_ack& from);

  inline flower_bag_all_ack& operator=(const flower_bag_all_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_bag_all_ack& default_instance();

  void Swap(flower_bag_all_ack* other);

  // implements Message ----------------------------------------------

  flower_bag_all_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_bag_all_ack& from);
  void MergeFrom(const flower_bag_all_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // repeated .SProtoSpace.flower_info flower = 3;
  inline int flower_size() const;
  inline void clear_flower();
  static const int kFlowerFieldNumber = 3;
  inline const ::SProtoSpace::flower_info& flower(int index) const;
  inline ::SProtoSpace::flower_info* mutable_flower(int index);
  inline ::SProtoSpace::flower_info* add_flower();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >&
      flower() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >*
      mutable_flower();

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_bag_all_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info > flower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_bag_all_ack* default_instance_;
};
// -------------------------------------------------------------------

class flower_bag_all_nty : public ::google::protobuf::Message {
 public:
  flower_bag_all_nty();
  virtual ~flower_bag_all_nty();

  flower_bag_all_nty(const flower_bag_all_nty& from);

  inline flower_bag_all_nty& operator=(const flower_bag_all_nty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_bag_all_nty& default_instance();

  void Swap(flower_bag_all_nty* other);

  // implements Message ----------------------------------------------

  flower_bag_all_nty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_bag_all_nty& from);
  void MergeFrom(const flower_bag_all_nty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_nty_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.flower_info flower = 2;
  inline int flower_size() const;
  inline void clear_flower();
  static const int kFlowerFieldNumber = 2;
  inline const ::SProtoSpace::flower_info& flower(int index) const;
  inline ::SProtoSpace::flower_info* mutable_flower(int index);
  inline ::SProtoSpace::flower_info* add_flower();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >&
      flower() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >*
      mutable_flower();

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_bag_all_nty)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info > flower_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_bag_all_nty* default_instance_;
};
// -------------------------------------------------------------------

class flower_send_req : public ::google::protobuf::Message {
 public:
  flower_send_req();
  virtual ~flower_send_req();

  flower_send_req(const flower_send_req& from);

  inline flower_send_req& operator=(const flower_send_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_send_req& default_instance();

  void Swap(flower_send_req* other);

  // implements Message ----------------------------------------------

  flower_send_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_send_req& from);
  void MergeFrom(const flower_send_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.flower_send_info send_info = 2;
  inline bool has_send_info() const;
  inline void clear_send_info();
  static const int kSendInfoFieldNumber = 2;
  inline const ::SProtoSpace::flower_send_info& send_info() const;
  inline ::SProtoSpace::flower_send_info* mutable_send_info();
  inline ::SProtoSpace::flower_send_info* release_send_info();
  inline void set_allocated_send_info(::SProtoSpace::flower_send_info* send_info);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_send_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_send_info();
  inline void clear_has_send_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::flower_send_info* send_info_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_send_req* default_instance_;
};
// -------------------------------------------------------------------

class flower_send_ack : public ::google::protobuf::Message {
 public:
  flower_send_ack();
  virtual ~flower_send_ack();

  flower_send_ack(const flower_send_ack& from);

  inline flower_send_ack& operator=(const flower_send_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_send_ack& default_instance();

  void Swap(flower_send_ack* other);

  // implements Message ----------------------------------------------

  flower_send_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_send_ack& from);
  void MergeFrom(const flower_send_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 result = 2 [default = 0];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_send_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_send_ack* default_instance_;
};
// -------------------------------------------------------------------

class flower_receive_nty : public ::google::protobuf::Message {
 public:
  flower_receive_nty();
  virtual ~flower_receive_nty();

  flower_receive_nty(const flower_receive_nty& from);

  inline flower_receive_nty& operator=(const flower_receive_nty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const flower_receive_nty& default_instance();

  void Swap(flower_receive_nty* other);

  // implements Message ----------------------------------------------

  flower_receive_nty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const flower_receive_nty& from);
  void MergeFrom(const flower_receive_nty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_receive_nty_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 from_role_id = 2;
  inline bool has_from_role_id() const;
  inline void clear_from_role_id();
  static const int kFromRoleIdFieldNumber = 2;
  inline ::google::protobuf::uint64 from_role_id() const;
  inline void set_from_role_id(::google::protobuf::uint64 value);

  // optional int32 send_flower_template_id = 3;
  inline bool has_send_flower_template_id() const;
  inline void clear_send_flower_template_id();
  static const int kSendFlowerTemplateIdFieldNumber = 3;
  inline ::google::protobuf::int32 send_flower_template_id() const;
  inline void set_send_flower_template_id(::google::protobuf::int32 value);

  // optional int32 send_flower_num = 4;
  inline bool has_send_flower_num() const;
  inline void clear_send_flower_num();
  static const int kSendFlowerNumFieldNumber = 4;
  inline ::google::protobuf::int32 send_flower_num() const;
  inline void set_send_flower_num(::google::protobuf::int32 value);

  // optional string remark = 5;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 5;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // @@protoc_insertion_point(class_scope:SProtoSpace.flower_receive_nty)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_from_role_id();
  inline void clear_has_from_role_id();
  inline void set_has_send_flower_template_id();
  inline void clear_has_send_flower_template_id();
  inline void set_has_send_flower_num();
  inline void clear_has_send_flower_num();
  inline void set_has_remark();
  inline void clear_has_remark();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 from_role_id_;
  int protoid_;
  ::google::protobuf::int32 send_flower_template_id_;
  ::std::string* remark_;
  ::google::protobuf::int32 send_flower_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static flower_receive_nty* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_info : public ::google::protobuf::Message {
 public:
  role_draw_card_info();
  virtual ~role_draw_card_info();

  role_draw_card_info(const role_draw_card_info& from);

  inline role_draw_card_info& operator=(const role_draw_card_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_info& default_instance();

  void Swap(role_draw_card_info* other);

  // implements Message ----------------------------------------------

  role_draw_card_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_info& from);
  void MergeFrom(const role_draw_card_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 draw_type_id = 1;
  inline bool has_draw_type_id() const;
  inline void clear_draw_type_id();
  static const int kDrawTypeIdFieldNumber = 1;
  inline ::google::protobuf::int32 draw_type_id() const;
  inline void set_draw_type_id(::google::protobuf::int32 value);

  // optional int32 now_remain_times = 2;
  inline bool has_now_remain_times() const;
  inline void clear_now_remain_times();
  static const int kNowRemainTimesFieldNumber = 2;
  inline ::google::protobuf::int32 now_remain_times() const;
  inline void set_now_remain_times(::google::protobuf::int32 value);

  // optional int32 remain_free_times = 3;
  inline bool has_remain_free_times() const;
  inline void clear_remain_free_times();
  static const int kRemainFreeTimesFieldNumber = 3;
  inline ::google::protobuf::int32 remain_free_times() const;
  inline void set_remain_free_times(::google::protobuf::int32 value);

  // optional int32 remain_limit_times = 4;
  inline bool has_remain_limit_times() const;
  inline void clear_remain_limit_times();
  static const int kRemainLimitTimesFieldNumber = 4;
  inline ::google::protobuf::int32 remain_limit_times() const;
  inline void set_remain_limit_times(::google::protobuf::int32 value);

  // optional uint32 next_add_time = 5;
  inline bool has_next_add_time() const;
  inline void clear_next_add_time();
  static const int kNextAddTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 next_add_time() const;
  inline void set_next_add_time(::google::protobuf::uint32 value);

  // optional int32 next_sp_drop_time = 6;
  inline bool has_next_sp_drop_time() const;
  inline void clear_next_sp_drop_time();
  static const int kNextSpDropTimeFieldNumber = 6;
  inline ::google::protobuf::int32 next_sp_drop_time() const;
  inline void set_next_sp_drop_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_info)
 private:
  inline void set_has_draw_type_id();
  inline void clear_has_draw_type_id();
  inline void set_has_now_remain_times();
  inline void clear_has_now_remain_times();
  inline void set_has_remain_free_times();
  inline void clear_has_remain_free_times();
  inline void set_has_remain_limit_times();
  inline void clear_has_remain_limit_times();
  inline void set_has_next_add_time();
  inline void clear_has_next_add_time();
  inline void set_has_next_sp_drop_time();
  inline void clear_has_next_sp_drop_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 draw_type_id_;
  ::google::protobuf::int32 now_remain_times_;
  ::google::protobuf::int32 remain_free_times_;
  ::google::protobuf::int32 remain_limit_times_;
  ::google::protobuf::uint32 next_add_time_;
  ::google::protobuf::int32 next_sp_drop_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_info* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_reward_item : public ::google::protobuf::Message {
 public:
  role_draw_card_reward_item();
  virtual ~role_draw_card_reward_item();

  role_draw_card_reward_item(const role_draw_card_reward_item& from);

  inline role_draw_card_reward_item& operator=(const role_draw_card_reward_item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_reward_item& default_instance();

  void Swap(role_draw_card_reward_item* other);

  // implements Message ----------------------------------------------

  role_draw_card_reward_item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_reward_item& from);
  void MergeFrom(const role_draw_card_reward_item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_reward_item)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_reward_item* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_rewards : public ::google::protobuf::Message {
 public:
  role_draw_card_rewards();
  virtual ~role_draw_card_rewards();

  role_draw_card_rewards(const role_draw_card_rewards& from);

  inline role_draw_card_rewards& operator=(const role_draw_card_rewards& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_rewards& default_instance();

  void Swap(role_draw_card_rewards* other);

  // implements Message ----------------------------------------------

  role_draw_card_rewards* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_rewards& from);
  void MergeFrom(const role_draw_card_rewards& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // repeated .SProtoSpace.role_draw_card_reward_item random_results = 2;
  inline int random_results_size() const;
  inline void clear_random_results();
  static const int kRandomResultsFieldNumber = 2;
  inline const ::SProtoSpace::role_draw_card_reward_item& random_results(int index) const;
  inline ::SProtoSpace::role_draw_card_reward_item* mutable_random_results(int index);
  inline ::SProtoSpace::role_draw_card_reward_item* add_random_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >&
      random_results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >*
      mutable_random_results();

  // repeated .SProtoSpace.role_draw_card_reward_item real_results = 3;
  inline int real_results_size() const;
  inline void clear_real_results();
  static const int kRealResultsFieldNumber = 3;
  inline const ::SProtoSpace::role_draw_card_reward_item& real_results(int index) const;
  inline ::SProtoSpace::role_draw_card_reward_item* mutable_real_results(int index);
  inline ::SProtoSpace::role_draw_card_reward_item* add_real_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >&
      real_results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >*
      mutable_real_results();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_rewards)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item > random_results_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item > real_results_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_rewards* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_info_req : public ::google::protobuf::Message {
 public:
  role_draw_card_info_req();
  virtual ~role_draw_card_info_req();

  role_draw_card_info_req(const role_draw_card_info_req& from);

  inline role_draw_card_info_req& operator=(const role_draw_card_info_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_info_req& default_instance();

  void Swap(role_draw_card_info_req* other);

  // implements Message ----------------------------------------------

  role_draw_card_info_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_info_req& from);
  void MergeFrom(const role_draw_card_info_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_info_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_info_req* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_info_ack : public ::google::protobuf::Message {
 public:
  role_draw_card_info_ack();
  virtual ~role_draw_card_info_ack();

  role_draw_card_info_ack(const role_draw_card_info_ack& from);

  inline role_draw_card_info_ack& operator=(const role_draw_card_info_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_info_ack& default_instance();

  void Swap(role_draw_card_info_ack* other);

  // implements Message ----------------------------------------------

  role_draw_card_info_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_info_ack& from);
  void MergeFrom(const role_draw_card_info_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.role_draw_card_info lists = 2;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 2;
  inline const ::SProtoSpace::role_draw_card_info& lists(int index) const;
  inline ::SProtoSpace::role_draw_card_info* mutable_lists(int index);
  inline ::SProtoSpace::role_draw_card_info* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_info_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info > lists_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_info_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_req : public ::google::protobuf::Message {
 public:
  role_draw_card_req();
  virtual ~role_draw_card_req();

  role_draw_card_req(const role_draw_card_req& from);

  inline role_draw_card_req& operator=(const role_draw_card_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_req& default_instance();

  void Swap(role_draw_card_req* other);

  // implements Message ----------------------------------------------

  role_draw_card_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_req& from);
  void MergeFrom(const role_draw_card_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 draw_type_id = 2;
  inline bool has_draw_type_id() const;
  inline void clear_draw_type_id();
  static const int kDrawTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 draw_type_id() const;
  inline void set_draw_type_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
  inline bool has_need_coin_type() const;
  inline void clear_need_coin_type();
  static const int kNeedCoinTypeFieldNumber = 3;
  inline ::SProtoSpace::eDrawCardCoinType need_coin_type() const;
  inline void set_need_coin_type(::SProtoSpace::eDrawCardCoinType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_draw_type_id();
  inline void clear_has_draw_type_id();
  inline void set_has_need_coin_type();
  inline void clear_has_need_coin_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 draw_type_id_;
  int need_coin_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_req* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_ack : public ::google::protobuf::Message {
 public:
  role_draw_card_ack();
  virtual ~role_draw_card_ack();

  role_draw_card_ack(const role_draw_card_ack& from);

  inline role_draw_card_ack& operator=(const role_draw_card_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_ack& default_instance();

  void Swap(role_draw_card_ack* other);

  // implements Message ----------------------------------------------

  role_draw_card_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_ack& from);
  void MergeFrom(const role_draw_card_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 draw_type_id = 2;
  inline bool has_draw_type_id() const;
  inline void clear_draw_type_id();
  static const int kDrawTypeIdFieldNumber = 2;
  inline ::google::protobuf::int32 draw_type_id() const;
  inline void set_draw_type_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
  inline bool has_need_coin_type() const;
  inline void clear_need_coin_type();
  static const int kNeedCoinTypeFieldNumber = 3;
  inline ::SProtoSpace::eDrawCardCoinType need_coin_type() const;
  inline void set_need_coin_type(::SProtoSpace::eDrawCardCoinType value);

  // repeated .SProtoSpace.role_draw_card_rewards results = 4;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 4;
  inline const ::SProtoSpace::role_draw_card_rewards& results(int index) const;
  inline ::SProtoSpace::role_draw_card_rewards* mutable_results(int index);
  inline ::SProtoSpace::role_draw_card_rewards* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_rewards >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_rewards >*
      mutable_results();

  // repeated .SProtoSpace.role_draw_card_info lists = 5;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 5;
  inline const ::SProtoSpace::role_draw_card_info& lists(int index) const;
  inline ::SProtoSpace::role_draw_card_info* mutable_lists(int index);
  inline ::SProtoSpace::role_draw_card_info* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >*
      mutable_lists();

  // optional .SProtoSpace.MsgErrorType error_code = 6;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 6;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_draw_type_id();
  inline void clear_has_draw_type_id();
  inline void set_has_need_coin_type();
  inline void clear_has_need_coin_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 draw_type_id_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_rewards > results_;
  int need_coin_type_;
  int error_code_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info > lists_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_ssr_req : public ::google::protobuf::Message {
 public:
  role_draw_card_ssr_req();
  virtual ~role_draw_card_ssr_req();

  role_draw_card_ssr_req(const role_draw_card_ssr_req& from);

  inline role_draw_card_ssr_req& operator=(const role_draw_card_ssr_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_ssr_req& default_instance();

  void Swap(role_draw_card_ssr_req* other);

  // implements Message ----------------------------------------------

  role_draw_card_ssr_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_ssr_req& from);
  void MergeFrom(const role_draw_card_ssr_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_ssr_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_ssr_req* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_ssr_ack_one : public ::google::protobuf::Message {
 public:
  role_draw_card_ssr_ack_one();
  virtual ~role_draw_card_ssr_ack_one();

  role_draw_card_ssr_ack_one(const role_draw_card_ssr_ack_one& from);

  inline role_draw_card_ssr_ack_one& operator=(const role_draw_card_ssr_ack_one& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_ssr_ack_one& default_instance();

  void Swap(role_draw_card_ssr_ack_one* other);

  // implements Message ----------------------------------------------

  role_draw_card_ssr_ack_one* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_ssr_ack_one& from);
  void MergeFrom(const role_draw_card_ssr_ack_one& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint64 role_id() const;
  inline void set_role_id(::google::protobuf::uint64 value);

  // optional int32 item_id = 2;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_ssr_ack_one)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 role_id_;
  ::google::protobuf::int32 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_ssr_ack_one* default_instance_;
};
// -------------------------------------------------------------------

class role_draw_card_ssr_ack : public ::google::protobuf::Message {
 public:
  role_draw_card_ssr_ack();
  virtual ~role_draw_card_ssr_ack();

  role_draw_card_ssr_ack(const role_draw_card_ssr_ack& from);

  inline role_draw_card_ssr_ack& operator=(const role_draw_card_ssr_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_draw_card_ssr_ack& default_instance();

  void Swap(role_draw_card_ssr_ack* other);

  // implements Message ----------------------------------------------

  role_draw_card_ssr_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_draw_card_ssr_ack& from);
  void MergeFrom(const role_draw_card_ssr_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.role_draw_card_ssr_ack_one results = 2;
  inline int results_size() const;
  inline void clear_results();
  static const int kResultsFieldNumber = 2;
  inline const ::SProtoSpace::role_draw_card_ssr_ack_one& results(int index) const;
  inline ::SProtoSpace::role_draw_card_ssr_ack_one* mutable_results(int index);
  inline ::SProtoSpace::role_draw_card_ssr_ack_one* add_results();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_ssr_ack_one >&
      results() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_ssr_ack_one >*
      mutable_results();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_draw_card_ssr_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_ssr_ack_one > results_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_draw_card_ssr_ack* default_instance_;
};
// -------------------------------------------------------------------

class role_talent_activate_req : public ::google::protobuf::Message {
 public:
  role_talent_activate_req();
  virtual ~role_talent_activate_req();

  role_talent_activate_req(const role_talent_activate_req& from);

  inline role_talent_activate_req& operator=(const role_talent_activate_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_talent_activate_req& default_instance();

  void Swap(role_talent_activate_req* other);

  // implements Message ----------------------------------------------

  role_talent_activate_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_talent_activate_req& from);
  void MergeFrom(const role_talent_activate_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_talent_activate_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_talent_activate_req* default_instance_;
};
// -------------------------------------------------------------------

class role_talent_activate_ack : public ::google::protobuf::Message {
 public:
  role_talent_activate_ack();
  virtual ~role_talent_activate_ack();

  role_talent_activate_ack(const role_talent_activate_ack& from);

  inline role_talent_activate_ack& operator=(const role_talent_activate_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_talent_activate_ack& default_instance();

  void Swap(role_talent_activate_ack* other);

  // implements Message ----------------------------------------------

  role_talent_activate_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_talent_activate_ack& from);
  void MergeFrom(const role_talent_activate_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_talent_activate_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_talent_activate_ack* default_instance_;
};
// -------------------------------------------------------------------

class all_role_talents_activate_req : public ::google::protobuf::Message {
 public:
  all_role_talents_activate_req();
  virtual ~all_role_talents_activate_req();

  all_role_talents_activate_req(const all_role_talents_activate_req& from);

  inline all_role_talents_activate_req& operator=(const all_role_talents_activate_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_role_talents_activate_req& default_instance();

  void Swap(all_role_talents_activate_req* other);

  // implements Message ----------------------------------------------

  all_role_talents_activate_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_role_talents_activate_req& from);
  void MergeFrom(const all_role_talents_activate_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_role_talents_activate_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static all_role_talents_activate_req* default_instance_;
};
// -------------------------------------------------------------------

class all_role_talents_activate_ack : public ::google::protobuf::Message {
 public:
  all_role_talents_activate_ack();
  virtual ~all_role_talents_activate_ack();

  all_role_talents_activate_ack(const all_role_talents_activate_ack& from);

  inline all_role_talents_activate_ack& operator=(const all_role_talents_activate_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_role_talents_activate_ack& default_instance();

  void Swap(all_role_talents_activate_ack* other);

  // implements Message ----------------------------------------------

  all_role_talents_activate_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_role_talents_activate_ack& from);
  void MergeFrom(const all_role_talents_activate_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 id_list = 2;
  inline int id_list_size() const;
  inline void clear_id_list();
  static const int kIdListFieldNumber = 2;
  inline ::google::protobuf::int32 id_list(int index) const;
  inline void set_id_list(int index, ::google::protobuf::int32 value);
  inline void add_id_list(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_id_list();

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.all_role_talents_activate_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > id_list_;
  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static all_role_talents_activate_ack* default_instance_;
};
// -------------------------------------------------------------------

class switch_role_skill_req : public ::google::protobuf::Message {
 public:
  switch_role_skill_req();
  virtual ~switch_role_skill_req();

  switch_role_skill_req(const switch_role_skill_req& from);

  inline switch_role_skill_req& operator=(const switch_role_skill_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const switch_role_skill_req& default_instance();

  void Swap(switch_role_skill_req* other);

  // implements Message ----------------------------------------------

  switch_role_skill_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const switch_role_skill_req& from);
  void MergeFrom(const switch_role_skill_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.switch_role_skill_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 skill_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static switch_role_skill_req* default_instance_;
};
// -------------------------------------------------------------------

class switch_role_skill_ack : public ::google::protobuf::Message {
 public:
  switch_role_skill_ack();
  virtual ~switch_role_skill_ack();

  switch_role_skill_ack(const switch_role_skill_ack& from);

  inline switch_role_skill_ack& operator=(const switch_role_skill_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const switch_role_skill_ack& default_instance();

  void Swap(switch_role_skill_ack* other);

  // implements Message ----------------------------------------------

  switch_role_skill_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const switch_role_skill_ack& from);
  void MergeFrom(const switch_role_skill_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 skill_id = 2;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  inline ::google::protobuf::int32 skill_id() const;
  inline void set_skill_id(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.switch_role_skill_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 skill_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static switch_role_skill_ack* default_instance_;
};
// -------------------------------------------------------------------

class talisman_use_req : public ::google::protobuf::Message {
 public:
  talisman_use_req();
  virtual ~talisman_use_req();

  talisman_use_req(const talisman_use_req& from);

  inline talisman_use_req& operator=(const talisman_use_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_use_req& default_instance();

  void Swap(talisman_use_req* other);

  // implements Message ----------------------------------------------

  talisman_use_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_use_req& from);
  void MergeFrom(const talisman_use_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 talisman_uuid = 3;
  inline bool has_talisman_uuid() const;
  inline void clear_talisman_uuid();
  static const int kTalismanUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 talisman_uuid() const;
  inline void set_talisman_uuid(::google::protobuf::uint64 value);

  // optional uint64 hero_uuid = 4;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EHeroTalismanSlot use_slot = 5;
  inline bool has_use_slot() const;
  inline void clear_use_slot();
  static const int kUseSlotFieldNumber = 5;
  inline ::SProtoSpace::EHeroTalismanSlot use_slot() const;
  inline void set_use_slot(::SProtoSpace::EHeroTalismanSlot value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_use_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_talisman_uuid();
  inline void clear_has_talisman_uuid();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_use_slot();
  inline void clear_has_use_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int dest_;
  ::google::protobuf::uint64 talisman_uuid_;
  ::google::protobuf::uint64 hero_uuid_;
  int use_slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_use_req* default_instance_;
};
// -------------------------------------------------------------------

class talisman_use_ack : public ::google::protobuf::Message {
 public:
  talisman_use_ack();
  virtual ~talisman_use_ack();

  talisman_use_ack(const talisman_use_ack& from);

  inline talisman_use_ack& operator=(const talisman_use_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_use_ack& default_instance();

  void Swap(talisman_use_ack* other);

  // implements Message ----------------------------------------------

  talisman_use_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_use_ack& from);
  void MergeFrom(const talisman_use_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 3;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 talisman_uuid = 4;
  inline bool has_talisman_uuid() const;
  inline void clear_talisman_uuid();
  static const int kTalismanUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 talisman_uuid() const;
  inline void set_talisman_uuid(::google::protobuf::uint64 value);

  // optional uint64 hero_uuid = 5;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 5;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.EHeroTalismanSlot use_slot = 6;
  inline bool has_use_slot() const;
  inline void clear_use_slot();
  static const int kUseSlotFieldNumber = 6;
  inline ::SProtoSpace::EHeroTalismanSlot use_slot() const;
  inline void set_use_slot(::SProtoSpace::EHeroTalismanSlot value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_use_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_talisman_uuid();
  inline void clear_has_talisman_uuid();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_use_slot();
  inline void clear_has_use_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 talisman_uuid_;
  int dest_;
  int use_slot_;
  ::google::protobuf::uint64 hero_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_use_ack* default_instance_;
};
// -------------------------------------------------------------------

class talisman_un_use_req : public ::google::protobuf::Message {
 public:
  talisman_un_use_req();
  virtual ~talisman_un_use_req();

  talisman_un_use_req(const talisman_un_use_req& from);

  inline talisman_un_use_req& operator=(const talisman_un_use_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_un_use_req& default_instance();

  void Swap(talisman_un_use_req* other);

  // implements Message ----------------------------------------------

  talisman_un_use_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_un_use_req& from);
  void MergeFrom(const talisman_un_use_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 3;
  inline bool has_un_use_slot() const;
  inline void clear_un_use_slot();
  static const int kUnUseSlotFieldNumber = 3;
  inline ::SProtoSpace::EHeroTalismanSlot un_use_slot() const;
  inline void set_un_use_slot(::SProtoSpace::EHeroTalismanSlot value);

  // optional uint64 hero_uuid = 4;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_un_use_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_un_use_slot();
  inline void clear_has_un_use_slot();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int dest_;
  ::google::protobuf::uint64 hero_uuid_;
  int un_use_slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_un_use_req* default_instance_;
};
// -------------------------------------------------------------------

class talisman_un_use_ack : public ::google::protobuf::Message {
 public:
  talisman_un_use_ack();
  virtual ~talisman_un_use_ack();

  talisman_un_use_ack(const talisman_un_use_ack& from);

  inline talisman_un_use_ack& operator=(const talisman_un_use_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_un_use_ack& default_instance();

  void Swap(talisman_un_use_ack* other);

  // implements Message ----------------------------------------------

  talisman_un_use_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_un_use_ack& from);
  void MergeFrom(const talisman_un_use_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 3;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 4;
  inline bool has_un_use_slot() const;
  inline void clear_un_use_slot();
  static const int kUnUseSlotFieldNumber = 4;
  inline ::SProtoSpace::EHeroTalismanSlot un_use_slot() const;
  inline void set_un_use_slot(::SProtoSpace::EHeroTalismanSlot value);

  // optional uint64 hero_uuid = 5;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 5;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_un_use_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_un_use_slot();
  inline void clear_has_un_use_slot();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  int dest_;
  int un_use_slot_;
  ::google::protobuf::uint64 hero_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_un_use_ack* default_instance_;
};
// -------------------------------------------------------------------

class talisman_lv_up_req : public ::google::protobuf::Message {
 public:
  talisman_lv_up_req();
  virtual ~talisman_lv_up_req();

  talisman_lv_up_req(const talisman_lv_up_req& from);

  inline talisman_lv_up_req& operator=(const talisman_lv_up_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_lv_up_req& default_instance();

  void Swap(talisman_lv_up_req* other);

  // implements Message ----------------------------------------------

  talisman_lv_up_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_lv_up_req& from);
  void MergeFrom(const talisman_lv_up_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 hero_uuid = 3;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional uint64 talisman_uuid = 4;
  inline bool has_talisman_uuid() const;
  inline void clear_talisman_uuid();
  static const int kTalismanUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 talisman_uuid() const;
  inline void set_talisman_uuid(::google::protobuf::uint64 value);

  // repeated uint64 cost_uuids = 5;
  inline int cost_uuids_size() const;
  inline void clear_cost_uuids();
  static const int kCostUuidsFieldNumber = 5;
  inline ::google::protobuf::uint64 cost_uuids(int index) const;
  inline void set_cost_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_cost_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cost_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cost_uuids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_lv_up_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_talisman_uuid();
  inline void clear_has_talisman_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int dest_;
  ::google::protobuf::uint64 hero_uuid_;
  ::google::protobuf::uint64 talisman_uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cost_uuids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_lv_up_req* default_instance_;
};
// -------------------------------------------------------------------

class talisman_lv_up_ack : public ::google::protobuf::Message {
 public:
  talisman_lv_up_ack();
  virtual ~talisman_lv_up_ack();

  talisman_lv_up_ack(const talisman_lv_up_ack& from);

  inline talisman_lv_up_ack& operator=(const talisman_lv_up_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_lv_up_ack& default_instance();

  void Swap(talisman_lv_up_ack* other);

  // implements Message ----------------------------------------------

  talisman_lv_up_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_lv_up_ack& from);
  void MergeFrom(const talisman_lv_up_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 3;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 hero_uuid = 4;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional uint64 talisman_uuid = 5;
  inline bool has_talisman_uuid() const;
  inline void clear_talisman_uuid();
  static const int kTalismanUuidFieldNumber = 5;
  inline ::google::protobuf::uint64 talisman_uuid() const;
  inline void set_talisman_uuid(::google::protobuf::uint64 value);

  // repeated uint64 cost_uuids = 6;
  inline int cost_uuids_size() const;
  inline void clear_cost_uuids();
  static const int kCostUuidsFieldNumber = 6;
  inline ::google::protobuf::uint64 cost_uuids(int index) const;
  inline void set_cost_uuids(int index, ::google::protobuf::uint64 value);
  inline void add_cost_uuids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cost_uuids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cost_uuids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_lv_up_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_talisman_uuid();
  inline void clear_has_talisman_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_uuid_;
  ::google::protobuf::uint64 talisman_uuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cost_uuids_;
  int dest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_lv_up_ack* default_instance_;
};
// -------------------------------------------------------------------

class talisman_break_req : public ::google::protobuf::Message {
 public:
  talisman_break_req();
  virtual ~talisman_break_req();

  talisman_break_req(const talisman_break_req& from);

  inline talisman_break_req& operator=(const talisman_break_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_break_req& default_instance();

  void Swap(talisman_break_req* other);

  // implements Message ----------------------------------------------

  talisman_break_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_break_req& from);
  void MergeFrom(const talisman_break_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ETalismanDestType dest = 2;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 2;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 hero_uuid = 3;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 3;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional uint64 talisman_uuid = 4;
  inline bool has_talisman_uuid() const;
  inline void clear_talisman_uuid();
  static const int kTalismanUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 talisman_uuid() const;
  inline void set_talisman_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_break_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_talisman_uuid();
  inline void clear_has_talisman_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int dest_;
  ::google::protobuf::uint64 hero_uuid_;
  ::google::protobuf::uint64 talisman_uuid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_break_req* default_instance_;
};
// -------------------------------------------------------------------

class talisman_break_ack : public ::google::protobuf::Message {
 public:
  talisman_break_ack();
  virtual ~talisman_break_ack();

  talisman_break_ack(const talisman_break_ack& from);

  inline talisman_break_ack& operator=(const talisman_break_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_break_ack& default_instance();

  void Swap(talisman_break_ack* other);

  // implements Message ----------------------------------------------

  talisman_break_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_break_ack& from);
  void MergeFrom(const talisman_break_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 3;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 hero_uuid = 4;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional uint64 talisman_uuid = 5;
  inline bool has_talisman_uuid() const;
  inline void clear_talisman_uuid();
  static const int kTalismanUuidFieldNumber = 5;
  inline ::google::protobuf::uint64 talisman_uuid() const;
  inline void set_talisman_uuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_break_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_talisman_uuid();
  inline void clear_has_talisman_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint64 hero_uuid_;
  ::google::protobuf::uint64 talisman_uuid_;
  int dest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_break_ack* default_instance_;
};
// -------------------------------------------------------------------

class talisman_change_ntf : public ::google::protobuf::Message {
 public:
  talisman_change_ntf();
  virtual ~talisman_change_ntf();

  talisman_change_ntf(const talisman_change_ntf& from);

  inline talisman_change_ntf& operator=(const talisman_change_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talisman_change_ntf& default_instance();

  void Swap(talisman_change_ntf* other);

  // implements Message ----------------------------------------------

  talisman_change_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talisman_change_ntf& from);
  void MergeFrom(const talisman_change_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_change_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.ETalismanChangeType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::ETalismanChangeType type() const;
  inline void set_type(::SProtoSpace::ETalismanChangeType value);

  // optional .SProtoSpace.ETalismanDestType dest = 3;
  inline bool has_dest() const;
  inline void clear_dest();
  static const int kDestFieldNumber = 3;
  inline ::SProtoSpace::ETalismanDestType dest() const;
  inline void set_dest(::SProtoSpace::ETalismanDestType value);

  // optional uint64 hero_uuid = 4;
  inline bool has_hero_uuid() const;
  inline void clear_hero_uuid();
  static const int kHeroUuidFieldNumber = 4;
  inline ::google::protobuf::uint64 hero_uuid() const;
  inline void set_hero_uuid(::google::protobuf::uint64 value);

  // optional .SProtoSpace.talisman_data talisman = 5;
  inline bool has_talisman() const;
  inline void clear_talisman();
  static const int kTalismanFieldNumber = 5;
  inline const ::SProtoSpace::talisman_data& talisman() const;
  inline ::SProtoSpace::talisman_data* mutable_talisman();
  inline ::SProtoSpace::talisman_data* release_talisman();
  inline void set_allocated_talisman(::SProtoSpace::talisman_data* talisman);

  // @@protoc_insertion_point(class_scope:SProtoSpace.talisman_change_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_dest();
  inline void clear_has_dest();
  inline void set_has_hero_uuid();
  inline void clear_has_hero_uuid();
  inline void set_has_talisman();
  inline void clear_has_talisman();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::uint64 hero_uuid_;
  ::SProtoSpace::talisman_data* talisman_;
  int dest_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static talisman_change_ntf* default_instance_;
};
// -------------------------------------------------------------------

class red_pt_req : public ::google::protobuf::Message {
 public:
  red_pt_req();
  virtual ~red_pt_req();

  red_pt_req(const red_pt_req& from);

  inline red_pt_req& operator=(const red_pt_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const red_pt_req& default_instance();

  void Swap(red_pt_req* other);

  // implements Message ----------------------------------------------

  red_pt_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const red_pt_req& from);
  void MergeFrom(const red_pt_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated .SProtoSpace.eRedPtType sys_id_s = 2;
  inline int sys_id_s_size() const;
  inline void clear_sys_id_s();
  static const int kSysIdSFieldNumber = 2;
  inline ::SProtoSpace::eRedPtType sys_id_s(int index) const;
  inline void set_sys_id_s(int index, ::SProtoSpace::eRedPtType value);
  inline void add_sys_id_s(::SProtoSpace::eRedPtType value);
  inline const ::google::protobuf::RepeatedField<int>& sys_id_s() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_sys_id_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.red_pt_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField<int> sys_id_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static red_pt_req* default_instance_;
};
// -------------------------------------------------------------------

class red_pt_ack : public ::google::protobuf::Message {
 public:
  red_pt_ack();
  virtual ~red_pt_ack();

  red_pt_ack(const red_pt_ack& from);

  inline red_pt_ack& operator=(const red_pt_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const red_pt_ack& default_instance();

  void Swap(red_pt_ack* other);

  // implements Message ----------------------------------------------

  red_pt_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const red_pt_ack& from);
  void MergeFrom(const red_pt_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.red_pt_infos infos = 2;
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::SProtoSpace::red_pt_infos& infos() const;
  inline ::SProtoSpace::red_pt_infos* mutable_infos();
  inline ::SProtoSpace::red_pt_infos* release_infos();
  inline void set_allocated_infos(::SProtoSpace::red_pt_infos* infos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.red_pt_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_infos();
  inline void clear_has_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::red_pt_infos* infos_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static red_pt_ack* default_instance_;
};
// -------------------------------------------------------------------

class red_pt_ntf : public ::google::protobuf::Message {
 public:
  red_pt_ntf();
  virtual ~red_pt_ntf();

  red_pt_ntf(const red_pt_ntf& from);

  inline red_pt_ntf& operator=(const red_pt_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const red_pt_ntf& default_instance();

  void Swap(red_pt_ntf* other);

  // implements Message ----------------------------------------------

  red_pt_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const red_pt_ntf& from);
  void MergeFrom(const red_pt_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.red_pt_infos infos = 2;
  inline bool has_infos() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::SProtoSpace::red_pt_infos& infos() const;
  inline ::SProtoSpace::red_pt_infos* mutable_infos();
  inline ::SProtoSpace::red_pt_infos* release_infos();
  inline void set_allocated_infos(::SProtoSpace::red_pt_infos* infos);

  // @@protoc_insertion_point(class_scope:SProtoSpace.red_pt_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_infos();
  inline void clear_has_infos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::red_pt_infos* infos_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static red_pt_ntf* default_instance_;
};
// -------------------------------------------------------------------

class get_wearing_fashions_req : public ::google::protobuf::Message {
 public:
  get_wearing_fashions_req();
  virtual ~get_wearing_fashions_req();

  get_wearing_fashions_req(const get_wearing_fashions_req& from);

  inline get_wearing_fashions_req& operator=(const get_wearing_fashions_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_wearing_fashions_req& default_instance();

  void Swap(get_wearing_fashions_req* other);

  // implements Message ----------------------------------------------

  get_wearing_fashions_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_wearing_fashions_req& from);
  void MergeFrom(const get_wearing_fashions_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_wearing_fashions_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_wearing_fashions_req* default_instance_;
};
// -------------------------------------------------------------------

class get_wearing_fashions_ack : public ::google::protobuf::Message {
 public:
  get_wearing_fashions_ack();
  virtual ~get_wearing_fashions_ack();

  get_wearing_fashions_ack(const get_wearing_fashions_ack& from);

  inline get_wearing_fashions_ack& operator=(const get_wearing_fashions_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_wearing_fashions_ack& default_instance();

  void Swap(get_wearing_fashions_ack* other);

  // implements Message ----------------------------------------------

  get_wearing_fashions_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_wearing_fashions_ack& from);
  void MergeFrom(const get_wearing_fashions_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  inline bool has_fashions_p_wearing() const;
  inline void clear_fashions_p_wearing();
  static const int kFashionsPWearingFieldNumber = 2;
  inline const ::SProtoSpace::fashions_pack& fashions_p_wearing() const;
  inline ::SProtoSpace::fashions_pack* mutable_fashions_p_wearing();
  inline ::SProtoSpace::fashions_pack* release_fashions_p_wearing();
  inline void set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing);

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_wearing_fashions_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_fashions_p_wearing();
  inline void clear_has_fashions_p_wearing();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::fashions_pack* fashions_p_wearing_;
  int protoid_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_wearing_fashions_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_all_fashions_req : public ::google::protobuf::Message {
 public:
  get_all_fashions_req();
  virtual ~get_all_fashions_req();

  get_all_fashions_req(const get_all_fashions_req& from);

  inline get_all_fashions_req& operator=(const get_all_fashions_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_all_fashions_req& default_instance();

  void Swap(get_all_fashions_req* other);

  // implements Message ----------------------------------------------

  get_all_fashions_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_all_fashions_req& from);
  void MergeFrom(const get_all_fashions_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_all_fashions_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_all_fashions_req* default_instance_;
};
// -------------------------------------------------------------------

class get_all_fashions_ack : public ::google::protobuf::Message {
 public:
  get_all_fashions_ack();
  virtual ~get_all_fashions_ack();

  get_all_fashions_ack(const get_all_fashions_ack& from);

  inline get_all_fashions_ack& operator=(const get_all_fashions_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_all_fashions_ack& default_instance();

  void Swap(get_all_fashions_ack* other);

  // implements Message ----------------------------------------------

  get_all_fashions_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_all_fashions_ack& from);
  void MergeFrom(const get_all_fashions_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  inline bool has_fashions_p_wearing() const;
  inline void clear_fashions_p_wearing();
  static const int kFashionsPWearingFieldNumber = 2;
  inline const ::SProtoSpace::fashions_pack& fashions_p_wearing() const;
  inline ::SProtoSpace::fashions_pack* mutable_fashions_p_wearing();
  inline ::SProtoSpace::fashions_pack* release_fashions_p_wearing();
  inline void set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing);

  // optional .SProtoSpace.fashions_pack fashions_p_wardrobe = 3;
  inline bool has_fashions_p_wardrobe() const;
  inline void clear_fashions_p_wardrobe();
  static const int kFashionsPWardrobeFieldNumber = 3;
  inline const ::SProtoSpace::fashions_pack& fashions_p_wardrobe() const;
  inline ::SProtoSpace::fashions_pack* mutable_fashions_p_wardrobe();
  inline ::SProtoSpace::fashions_pack* release_fashions_p_wardrobe();
  inline void set_allocated_fashions_p_wardrobe(::SProtoSpace::fashions_pack* fashions_p_wardrobe);

  // optional .SProtoSpace.MsgErrorType error_code = 4;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_all_fashions_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_fashions_p_wearing();
  inline void clear_has_fashions_p_wearing();
  inline void set_has_fashions_p_wardrobe();
  inline void clear_has_fashions_p_wardrobe();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::fashions_pack* fashions_p_wearing_;
  int protoid_;
  int error_code_;
  ::SProtoSpace::fashions_pack* fashions_p_wardrobe_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_all_fashions_ack* default_instance_;
};
// -------------------------------------------------------------------

class wear_fashions_req : public ::google::protobuf::Message {
 public:
  wear_fashions_req();
  virtual ~wear_fashions_req();

  wear_fashions_req(const wear_fashions_req& from);

  inline wear_fashions_req& operator=(const wear_fashions_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wear_fashions_req& default_instance();

  void Swap(wear_fashions_req* other);

  // implements Message ----------------------------------------------

  wear_fashions_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wear_fashions_req& from);
  void MergeFrom(const wear_fashions_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 uuid_s = 2;
  inline int uuid_s_size() const;
  inline void clear_uuid_s();
  static const int kUuidSFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid_s(int index) const;
  inline void set_uuid_s(int index, ::google::protobuf::uint64 value);
  inline void add_uuid_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uuid_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uuid_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.wear_fashions_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uuid_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static wear_fashions_req* default_instance_;
};
// -------------------------------------------------------------------

class wear_fashions_ack : public ::google::protobuf::Message {
 public:
  wear_fashions_ack();
  virtual ~wear_fashions_ack();

  wear_fashions_ack(const wear_fashions_ack& from);

  inline wear_fashions_ack& operator=(const wear_fashions_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const wear_fashions_ack& default_instance();

  void Swap(wear_fashions_ack* other);

  // implements Message ----------------------------------------------

  wear_fashions_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const wear_fashions_ack& from);
  void MergeFrom(const wear_fashions_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 uuid_s = 2;
  inline int uuid_s_size() const;
  inline void clear_uuid_s();
  static const int kUuidSFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid_s(int index) const;
  inline void set_uuid_s(int index, ::google::protobuf::uint64 value);
  inline void add_uuid_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uuid_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uuid_s();

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.wear_fashions_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uuid_s_;
  int protoid_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static wear_fashions_ack* default_instance_;
};
// -------------------------------------------------------------------

class get_other_role_fashion_cs_req : public ::google::protobuf::Message {
 public:
  get_other_role_fashion_cs_req();
  virtual ~get_other_role_fashion_cs_req();

  get_other_role_fashion_cs_req(const get_other_role_fashion_cs_req& from);

  inline get_other_role_fashion_cs_req& operator=(const get_other_role_fashion_cs_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_other_role_fashion_cs_req& default_instance();

  void Swap(get_other_role_fashion_cs_req* other);

  // implements Message ----------------------------------------------

  get_other_role_fashion_cs_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_other_role_fashion_cs_req& from);
  void MergeFrom(const get_other_role_fashion_cs_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated uint64 role_id_s = 2;
  inline int role_id_s_size() const;
  inline void clear_role_id_s();
  static const int kRoleIdSFieldNumber = 2;
  inline ::google::protobuf::uint64 role_id_s(int index) const;
  inline void set_role_id_s(int index, ::google::protobuf::uint64 value);
  inline void add_role_id_s(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      role_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_role_id_s();

  // repeated string role_name_s = 3;
  inline int role_name_s_size() const;
  inline void clear_role_name_s();
  static const int kRoleNameSFieldNumber = 3;
  inline const ::std::string& role_name_s(int index) const;
  inline ::std::string* mutable_role_name_s(int index);
  inline void set_role_name_s(int index, const ::std::string& value);
  inline void set_role_name_s(int index, const char* value);
  inline void set_role_name_s(int index, const char* value, size_t size);
  inline ::std::string* add_role_name_s();
  inline void add_role_name_s(const ::std::string& value);
  inline void add_role_name_s(const char* value);
  inline void add_role_name_s(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& role_name_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_role_name_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_other_role_fashion_cs_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > role_id_s_;
  ::google::protobuf::RepeatedPtrField< ::std::string> role_name_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_other_role_fashion_cs_req* default_instance_;
};
// -------------------------------------------------------------------

class get_other_role_fashion_cs_ack : public ::google::protobuf::Message {
 public:
  get_other_role_fashion_cs_ack();
  virtual ~get_other_role_fashion_cs_ack();

  get_other_role_fashion_cs_ack(const get_other_role_fashion_cs_ack& from);

  inline get_other_role_fashion_cs_ack& operator=(const get_other_role_fashion_cs_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const get_other_role_fashion_cs_ack& default_instance();

  void Swap(get_other_role_fashion_cs_ack* other);

  // implements Message ----------------------------------------------

  get_other_role_fashion_cs_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const get_other_role_fashion_cs_ack& from);
  void MergeFrom(const get_other_role_fashion_cs_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
  inline bool has_fashions_p_wearing() const;
  inline void clear_fashions_p_wearing();
  static const int kFashionsPWearingFieldNumber = 2;
  inline const ::SProtoSpace::fashions_pack& fashions_p_wearing() const;
  inline ::SProtoSpace::fashions_pack* mutable_fashions_p_wearing();
  inline ::SProtoSpace::fashions_pack* release_fashions_p_wearing();
  inline void set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing);

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.get_other_role_fashion_cs_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_fashions_p_wearing();
  inline void clear_has_fashions_p_wearing();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::fashions_pack* fashions_p_wearing_;
  int protoid_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static get_other_role_fashion_cs_ack* default_instance_;
};
// -------------------------------------------------------------------

class verify_config_version_req : public ::google::protobuf::Message {
 public:
  verify_config_version_req();
  virtual ~verify_config_version_req();

  verify_config_version_req(const verify_config_version_req& from);

  inline verify_config_version_req& operator=(const verify_config_version_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_config_version_req& default_instance();

  void Swap(verify_config_version_req* other);

  // implements Message ----------------------------------------------

  verify_config_version_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_config_version_req& from);
  void MergeFrom(const verify_config_version_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.verify_config_version_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static verify_config_version_req* default_instance_;
};
// -------------------------------------------------------------------

class verify_config_version_ack : public ::google::protobuf::Message {
 public:
  verify_config_version_ack();
  virtual ~verify_config_version_ack();

  verify_config_version_ack(const verify_config_version_ack& from);

  inline verify_config_version_ack& operator=(const verify_config_version_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const verify_config_version_ack& default_instance();

  void Swap(verify_config_version_ack* other);

  // implements Message ----------------------------------------------

  verify_config_version_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const verify_config_version_ack& from);
  void MergeFrom(const verify_config_version_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline ::google::protobuf::int32 version() const;
  inline void set_version(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType error_code = 3;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error_code() const;
  inline void set_error_code(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.verify_config_version_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 version_;
  int error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static verify_config_version_ack* default_instance_;
};
// -------------------------------------------------------------------

class debug_hero_attr_ntf : public ::google::protobuf::Message {
 public:
  debug_hero_attr_ntf();
  virtual ~debug_hero_attr_ntf();

  debug_hero_attr_ntf(const debug_hero_attr_ntf& from);

  inline debug_hero_attr_ntf& operator=(const debug_hero_attr_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const debug_hero_attr_ntf& default_instance();

  void Swap(debug_hero_attr_ntf* other);

  // implements Message ----------------------------------------------

  debug_hero_attr_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const debug_hero_attr_ntf& from);
  void MergeFrom(const debug_hero_attr_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = debug_hero_attr_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional uint64 uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // repeated string types = 3;
  inline int types_size() const;
  inline void clear_types();
  static const int kTypesFieldNumber = 3;
  inline const ::std::string& types(int index) const;
  inline ::std::string* mutable_types(int index);
  inline void set_types(int index, const ::std::string& value);
  inline void set_types(int index, const char* value);
  inline void set_types(int index, const char* value, size_t size);
  inline ::std::string* add_types();
  inline void add_types(const ::std::string& value);
  inline void add_types(const char* value);
  inline void add_types(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& types() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_types();

  // repeated string values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:SProtoSpace.debug_hero_attr_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_uuid();
  inline void clear_has_uuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static debug_hero_attr_ntf* default_instance_;
};
// -------------------------------------------------------------------

class waiting_in_line_ntf : public ::google::protobuf::Message {
 public:
  waiting_in_line_ntf();
  virtual ~waiting_in_line_ntf();

  waiting_in_line_ntf(const waiting_in_line_ntf& from);

  inline waiting_in_line_ntf& operator=(const waiting_in_line_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const waiting_in_line_ntf& default_instance();

  void Swap(waiting_in_line_ntf* other);

  // implements Message ----------------------------------------------

  waiting_in_line_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const waiting_in_line_ntf& from);
  void MergeFrom(const waiting_in_line_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = waiting_in_line_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 wait_pos = 2;
  inline bool has_wait_pos() const;
  inline void clear_wait_pos();
  static const int kWaitPosFieldNumber = 2;
  inline ::google::protobuf::int32 wait_pos() const;
  inline void set_wait_pos(::google::protobuf::int32 value);

  // optional int32 left_mins = 3;
  inline bool has_left_mins() const;
  inline void clear_left_mins();
  static const int kLeftMinsFieldNumber = 3;
  inline ::google::protobuf::int32 left_mins() const;
  inline void set_left_mins(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.waiting_in_line_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_wait_pos();
  inline void clear_has_wait_pos();
  inline void set_has_left_mins();
  inline void clear_has_left_mins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 wait_pos_;
  ::google::protobuf::int32 left_mins_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static waiting_in_line_ntf* default_instance_;
};
// -------------------------------------------------------------------

class finish_in_line_ntf : public ::google::protobuf::Message {
 public:
  finish_in_line_ntf();
  virtual ~finish_in_line_ntf();

  finish_in_line_ntf(const finish_in_line_ntf& from);

  inline finish_in_line_ntf& operator=(const finish_in_line_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const finish_in_line_ntf& default_instance();

  void Swap(finish_in_line_ntf* other);

  // implements Message ----------------------------------------------

  finish_in_line_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const finish_in_line_ntf& from);
  void MergeFrom(const finish_in_line_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = finish_in_line_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 tm = 2;
  inline bool has_tm() const;
  inline void clear_tm();
  static const int kTmFieldNumber = 2;
  inline ::google::protobuf::int32 tm() const;
  inline void set_tm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.finish_in_line_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_tm();
  inline void clear_has_tm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 tm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static finish_in_line_ntf* default_instance_;
};
// -------------------------------------------------------------------

class exit_waiting_in_line_req : public ::google::protobuf::Message {
 public:
  exit_waiting_in_line_req();
  virtual ~exit_waiting_in_line_req();

  exit_waiting_in_line_req(const exit_waiting_in_line_req& from);

  inline exit_waiting_in_line_req& operator=(const exit_waiting_in_line_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_waiting_in_line_req& default_instance();

  void Swap(exit_waiting_in_line_req* other);

  // implements Message ----------------------------------------------

  exit_waiting_in_line_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_waiting_in_line_req& from);
  void MergeFrom(const exit_waiting_in_line_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_waiting_in_line_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static exit_waiting_in_line_req* default_instance_;
};
// -------------------------------------------------------------------

class exit_waiting_in_line_ack : public ::google::protobuf::Message {
 public:
  exit_waiting_in_line_ack();
  virtual ~exit_waiting_in_line_ack();

  exit_waiting_in_line_ack(const exit_waiting_in_line_ack& from);

  inline exit_waiting_in_line_ack& operator=(const exit_waiting_in_line_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const exit_waiting_in_line_ack& default_instance();

  void Swap(exit_waiting_in_line_ack* other);

  // implements Message ----------------------------------------------

  exit_waiting_in_line_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const exit_waiting_in_line_ack& from);
  void MergeFrom(const exit_waiting_in_line_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.exit_waiting_in_line_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static exit_waiting_in_line_ack* default_instance_;
};
// -------------------------------------------------------------------

class user_event_track_ntf : public ::google::protobuf::Message {
 public:
  user_event_track_ntf();
  virtual ~user_event_track_ntf();

  user_event_track_ntf(const user_event_track_ntf& from);

  inline user_event_track_ntf& operator=(const user_event_track_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const user_event_track_ntf& default_instance();

  void Swap(user_event_track_ntf* other);

  // implements Message ----------------------------------------------

  user_event_track_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const user_event_track_ntf& from);
  void MergeFrom(const user_event_track_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = user_event_track_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.EUserEventTrackType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::SProtoSpace::EUserEventTrackType type() const;
  inline void set_type(::SProtoSpace::EUserEventTrackType value);

  // repeated sint32 int_data_s = 3;
  inline int int_data_s_size() const;
  inline void clear_int_data_s();
  static const int kIntDataSFieldNumber = 3;
  inline ::google::protobuf::int32 int_data_s(int index) const;
  inline void set_int_data_s(int index, ::google::protobuf::int32 value);
  inline void add_int_data_s(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      int_data_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_int_data_s();

  // repeated string str_data_s = 4;
  inline int str_data_s_size() const;
  inline void clear_str_data_s();
  static const int kStrDataSFieldNumber = 4;
  inline const ::std::string& str_data_s(int index) const;
  inline ::std::string* mutable_str_data_s(int index);
  inline void set_str_data_s(int index, const ::std::string& value);
  inline void set_str_data_s(int index, const char* value);
  inline void set_str_data_s(int index, const char* value, size_t size);
  inline ::std::string* add_str_data_s();
  inline void add_str_data_s(const ::std::string& value);
  inline void add_str_data_s(const char* value);
  inline void add_str_data_s(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& str_data_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_str_data_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.user_event_track_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > int_data_s_;
  ::google::protobuf::RepeatedPtrField< ::std::string> str_data_s_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static user_event_track_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_guide_info : public ::google::protobuf::Message {
 public:
  role_guide_info();
  virtual ~role_guide_info();

  role_guide_info(const role_guide_info& from);

  inline role_guide_info& operator=(const role_guide_info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_guide_info& default_instance();

  void Swap(role_guide_info* other);

  // implements Message ----------------------------------------------

  role_guide_info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_guide_info& from);
  void MergeFrom(const role_guide_info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 guide_id = 1;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 1;
  inline ::google::protobuf::int32 guide_id() const;
  inline void set_guide_id(::google::protobuf::int32 value);

  // repeated int32 step_ids = 2;
  inline int step_ids_size() const;
  inline void clear_step_ids();
  static const int kStepIdsFieldNumber = 2;
  inline ::google::protobuf::int32 step_ids(int index) const;
  inline void set_step_ids(int index, ::google::protobuf::int32 value);
  inline void add_step_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      step_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_step_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_guide_info)
 private:
  inline void set_has_guide_id();
  inline void clear_has_guide_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > step_ids_;
  ::google::protobuf::int32 guide_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_guide_info* default_instance_;
};
// -------------------------------------------------------------------

class role_guide_ntf : public ::google::protobuf::Message {
 public:
  role_guide_ntf();
  virtual ~role_guide_ntf();

  role_guide_ntf(const role_guide_ntf& from);

  inline role_guide_ntf& operator=(const role_guide_ntf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_guide_ntf& default_instance();

  void Swap(role_guide_ntf* other);

  // implements Message ----------------------------------------------

  role_guide_ntf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_guide_ntf& from);
  void MergeFrom(const role_guide_ntf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ntf_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional bool pass_all = 2;
  inline bool has_pass_all() const;
  inline void clear_pass_all();
  static const int kPassAllFieldNumber = 2;
  inline bool pass_all() const;
  inline void set_pass_all(bool value);

  // repeated .SProtoSpace.role_guide_info guide_data = 3;
  inline int guide_data_size() const;
  inline void clear_guide_data();
  static const int kGuideDataFieldNumber = 3;
  inline const ::SProtoSpace::role_guide_info& guide_data(int index) const;
  inline ::SProtoSpace::role_guide_info* mutable_guide_data(int index);
  inline ::SProtoSpace::role_guide_info* add_guide_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_guide_info >&
      guide_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_guide_info >*
      mutable_guide_data();

  // repeated int32 guide_ids = 4;
  inline int guide_ids_size() const;
  inline void clear_guide_ids();
  static const int kGuideIdsFieldNumber = 4;
  inline ::google::protobuf::int32 guide_ids(int index) const;
  inline void set_guide_ids(int index, ::google::protobuf::int32 value);
  inline void add_guide_ids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      guide_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_guide_ids();

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_guide_ntf)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pass_all();
  inline void clear_has_pass_all();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  bool pass_all_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_guide_info > guide_data_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > guide_ids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_guide_ntf* default_instance_;
};
// -------------------------------------------------------------------

class role_guide_req : public ::google::protobuf::Message {
 public:
  role_guide_req();
  virtual ~role_guide_req();

  role_guide_req(const role_guide_req& from);

  inline role_guide_req& operator=(const role_guide_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_guide_req& default_instance();

  void Swap(role_guide_req* other);

  // implements Message ----------------------------------------------

  role_guide_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_guide_req& from);
  void MergeFrom(const role_guide_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 guide_id = 2;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 2;
  inline ::google::protobuf::int32 guide_id() const;
  inline void set_guide_id(::google::protobuf::int32 value);

  // optional int32 step_id = 3;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 3;
  inline ::google::protobuf::int32 step_id() const;
  inline void set_step_id(::google::protobuf::int32 value);

  // optional bool skip = 4;
  inline bool has_skip() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 4;
  inline bool skip() const;
  inline void set_skip(bool value);

  // optional bool cur_guide_pass = 5;
  inline bool has_cur_guide_pass() const;
  inline void clear_cur_guide_pass();
  static const int kCurGuidePassFieldNumber = 5;
  inline bool cur_guide_pass() const;
  inline void set_cur_guide_pass(bool value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_guide_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_guide_id();
  inline void clear_has_guide_id();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_skip();
  inline void clear_has_skip();
  inline void set_has_cur_guide_pass();
  inline void clear_has_cur_guide_pass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 guide_id_;
  ::google::protobuf::int32 step_id_;
  bool skip_;
  bool cur_guide_pass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_guide_req* default_instance_;
};
// -------------------------------------------------------------------

class role_guide_ack : public ::google::protobuf::Message {
 public:
  role_guide_ack();
  virtual ~role_guide_ack();

  role_guide_ack(const role_guide_ack& from);

  inline role_guide_ack& operator=(const role_guide_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_guide_ack& default_instance();

  void Swap(role_guide_ack* other);

  // implements Message ----------------------------------------------

  role_guide_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_guide_ack& from);
  void MergeFrom(const role_guide_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 guide_id = 2;
  inline bool has_guide_id() const;
  inline void clear_guide_id();
  static const int kGuideIdFieldNumber = 2;
  inline ::google::protobuf::int32 guide_id() const;
  inline void set_guide_id(::google::protobuf::int32 value);

  // optional int32 step_id = 3;
  inline bool has_step_id() const;
  inline void clear_step_id();
  static const int kStepIdFieldNumber = 3;
  inline ::google::protobuf::int32 step_id() const;
  inline void set_step_id(::google::protobuf::int32 value);

  // optional int32 ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.role_guide_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_guide_id();
  inline void clear_has_guide_id();
  inline void set_has_step_id();
  inline void clear_has_step_id();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 guide_id_;
  ::google::protobuf::int32 step_id_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static role_guide_ack* default_instance_;
};
// -------------------------------------------------------------------

class onekey_skip_guide_req : public ::google::protobuf::Message {
 public:
  onekey_skip_guide_req();
  virtual ~onekey_skip_guide_req();

  onekey_skip_guide_req(const onekey_skip_guide_req& from);

  inline onekey_skip_guide_req& operator=(const onekey_skip_guide_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const onekey_skip_guide_req& default_instance();

  void Swap(onekey_skip_guide_req* other);

  // implements Message ----------------------------------------------

  onekey_skip_guide_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const onekey_skip_guide_req& from);
  void MergeFrom(const onekey_skip_guide_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.onekey_skip_guide_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static onekey_skip_guide_req* default_instance_;
};
// -------------------------------------------------------------------

class onekey_skip_guide_ack : public ::google::protobuf::Message {
 public:
  onekey_skip_guide_ack();
  virtual ~onekey_skip_guide_ack();

  onekey_skip_guide_ack(const onekey_skip_guide_ack& from);

  inline onekey_skip_guide_ack& operator=(const onekey_skip_guide_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const onekey_skip_guide_ack& default_instance();

  void Swap(onekey_skip_guide_ack* other);

  // implements Message ----------------------------------------------

  onekey_skip_guide_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const onekey_skip_guide_ack& from);
  void MergeFrom(const onekey_skip_guide_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.onekey_skip_guide_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static onekey_skip_guide_ack* default_instance_;
};
// -------------------------------------------------------------------

class plot_little_game_set_req : public ::google::protobuf::Message {
 public:
  plot_little_game_set_req();
  virtual ~plot_little_game_set_req();

  plot_little_game_set_req(const plot_little_game_set_req& from);

  inline plot_little_game_set_req& operator=(const plot_little_game_set_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_little_game_set_req& default_instance();

  void Swap(plot_little_game_set_req* other);

  // implements Message ----------------------------------------------

  plot_little_game_set_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_little_game_set_req& from);
  void MergeFrom(const plot_little_game_set_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 cfg_id = 2;
  inline bool has_cfg_id() const;
  inline void clear_cfg_id();
  static const int kCfgIdFieldNumber = 2;
  inline ::google::protobuf::int32 cfg_id() const;
  inline void set_cfg_id(::google::protobuf::int32 value);

  // optional int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_little_game_set_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_cfg_id();
  inline void clear_has_cfg_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 cfg_id_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_little_game_set_req* default_instance_;
};
// -------------------------------------------------------------------

class plot_little_game_set_ack : public ::google::protobuf::Message {
 public:
  plot_little_game_set_ack();
  virtual ~plot_little_game_set_ack();

  plot_little_game_set_ack(const plot_little_game_set_ack& from);

  inline plot_little_game_set_ack& operator=(const plot_little_game_set_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_little_game_set_ack& default_instance();

  void Swap(plot_little_game_set_ack* other);

  // implements Message ----------------------------------------------

  plot_little_game_set_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_little_game_set_ack& from);
  void MergeFrom(const plot_little_game_set_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.MsgErrorType error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_little_game_set_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_little_game_set_ack* default_instance_;
};
// -------------------------------------------------------------------

class plot_little_game_get_req : public ::google::protobuf::Message {
 public:
  plot_little_game_get_req();
  virtual ~plot_little_game_get_req();

  plot_little_game_get_req(const plot_little_game_get_req& from);

  inline plot_little_game_get_req& operator=(const plot_little_game_get_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_little_game_get_req& default_instance();

  void Swap(plot_little_game_get_req* other);

  // implements Message ----------------------------------------------

  plot_little_game_get_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_little_game_get_req& from);
  void MergeFrom(const plot_little_game_get_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 cfg_id_s = 2;
  inline int cfg_id_s_size() const;
  inline void clear_cfg_id_s();
  static const int kCfgIdSFieldNumber = 2;
  inline ::google::protobuf::int32 cfg_id_s(int index) const;
  inline void set_cfg_id_s(int index, ::google::protobuf::int32 value);
  inline void add_cfg_id_s(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cfg_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cfg_id_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_little_game_get_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cfg_id_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_little_game_get_req* default_instance_;
};
// -------------------------------------------------------------------

class plot_little_game_get_ack : public ::google::protobuf::Message {
 public:
  plot_little_game_get_ack();
  virtual ~plot_little_game_get_ack();

  plot_little_game_get_ack(const plot_little_game_get_ack& from);

  inline plot_little_game_get_ack& operator=(const plot_little_game_get_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const plot_little_game_get_ack& default_instance();

  void Swap(plot_little_game_get_ack* other);

  // implements Message ----------------------------------------------

  plot_little_game_get_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const plot_little_game_get_ack& from);
  void MergeFrom(const plot_little_game_get_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.pack_plot_little_game pack = 2;
  inline bool has_pack() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 2;
  inline const ::SProtoSpace::pack_plot_little_game& pack() const;
  inline ::SProtoSpace::pack_plot_little_game* mutable_pack();
  inline ::SProtoSpace::pack_plot_little_game* release_pack();
  inline void set_allocated_pack(::SProtoSpace::pack_plot_little_game* pack);

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.plot_little_game_get_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pack();
  inline void clear_has_pack();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::pack_plot_little_game* pack_;
  int protoid_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static plot_little_game_get_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_get_req : public ::google::protobuf::Message {
 public:
  pet_get_req();
  virtual ~pet_get_req();

  pet_get_req(const pet_get_req& from);

  inline pet_get_req& operator=(const pet_get_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_get_req& default_instance();

  void Swap(pet_get_req* other);

  // implements Message ----------------------------------------------

  pet_get_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_get_req& from);
  void MergeFrom(const pet_get_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // repeated int32 ask_pet_id_s = 2;
  inline int ask_pet_id_s_size() const;
  inline void clear_ask_pet_id_s();
  static const int kAskPetIdSFieldNumber = 2;
  inline ::google::protobuf::int32 ask_pet_id_s(int index) const;
  inline void set_ask_pet_id_s(int index, ::google::protobuf::int32 value);
  inline void add_ask_pet_id_s(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ask_pet_id_s() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ask_pet_id_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_get_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ask_pet_id_s_;
  int protoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_get_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_get_ack : public ::google::protobuf::Message {
 public:
  pet_get_ack();
  virtual ~pet_get_ack();

  pet_get_ack(const pet_get_ack& from);

  inline pet_get_ack& operator=(const pet_get_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_get_ack& default_instance();

  void Swap(pet_get_ack* other);

  // implements Message ----------------------------------------------

  pet_get_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_get_ack& from);
  void MergeFrom(const pet_get_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional .SProtoSpace.pet_pack_data pet_pack = 2;
  inline bool has_pet_pack() const;
  inline void clear_pet_pack();
  static const int kPetPackFieldNumber = 2;
  inline const ::SProtoSpace::pet_pack_data& pet_pack() const;
  inline ::SProtoSpace::pet_pack_data* mutable_pet_pack();
  inline ::SProtoSpace::pet_pack_data* release_pet_pack();
  inline void set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack);

  // optional int32 cur_show_pet_id = 3;
  inline bool has_cur_show_pet_id() const;
  inline void clear_cur_show_pet_id();
  static const int kCurShowPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 cur_show_pet_id() const;
  inline void set_cur_show_pet_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_get_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_pack();
  inline void clear_has_pet_pack();
  inline void set_has_cur_show_pet_id();
  inline void clear_has_cur_show_pet_id();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SProtoSpace::pet_pack_data* pet_pack_;
  int protoid_;
  ::google::protobuf::int32 cur_show_pet_id_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_get_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_change_name_req : public ::google::protobuf::Message {
 public:
  pet_change_name_req();
  virtual ~pet_change_name_req();

  pet_change_name_req(const pet_change_name_req& from);

  inline pet_change_name_req& operator=(const pet_change_name_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_change_name_req& default_instance();

  void Swap(pet_change_name_req* other);

  // implements Message ----------------------------------------------

  pet_change_name_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_change_name_req& from);
  void MergeFrom(const pet_change_name_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional string new_name = 3;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 3;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_change_name_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_new_name();
  inline void clear_has_new_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  ::std::string* new_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_change_name_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_change_name_ack : public ::google::protobuf::Message {
 public:
  pet_change_name_ack();
  virtual ~pet_change_name_ack();

  pet_change_name_ack(const pet_change_name_ack& from);

  inline pet_change_name_ack& operator=(const pet_change_name_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_change_name_ack& default_instance();

  void Swap(pet_change_name_ack* other);

  // implements Message ----------------------------------------------

  pet_change_name_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_change_name_ack& from);
  void MergeFrom(const pet_change_name_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional string new_name = 3;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 3;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  inline void set_allocated_new_name(::std::string* new_name);

  // optional .SProtoSpace.MsgErrorType error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_change_name_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_new_name();
  inline void clear_has_new_name();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  ::std::string* new_name_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_change_name_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_do_action_req : public ::google::protobuf::Message {
 public:
  pet_do_action_req();
  virtual ~pet_do_action_req();

  pet_do_action_req(const pet_do_action_req& from);

  inline pet_do_action_req& operator=(const pet_do_action_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_do_action_req& default_instance();

  void Swap(pet_do_action_req* other);

  // implements Message ----------------------------------------------

  pet_do_action_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_do_action_req& from);
  void MergeFrom(const pet_do_action_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // optional int32 pet_id = 3;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_do_action_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 action_id_;
  ::google::protobuf::int32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_do_action_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_do_action_ack : public ::google::protobuf::Message {
 public:
  pet_do_action_ack();
  virtual ~pet_do_action_ack();

  pet_do_action_ack(const pet_do_action_ack& from);

  inline pet_do_action_ack& operator=(const pet_do_action_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_do_action_ack& default_instance();

  void Swap(pet_do_action_ack* other);

  // implements Message ----------------------------------------------

  pet_do_action_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_do_action_ack& from);
  void MergeFrom(const pet_do_action_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 action_id = 2;
  inline bool has_action_id() const;
  inline void clear_action_id();
  static const int kActionIdFieldNumber = 2;
  inline ::google::protobuf::int32 action_id() const;
  inline void set_action_id(::google::protobuf::int32 value);

  // optional int32 pet_id = 3;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.pet_pack_data pet_pack = 4;
  inline bool has_pet_pack() const;
  inline void clear_pet_pack();
  static const int kPetPackFieldNumber = 4;
  inline const ::SProtoSpace::pet_pack_data& pet_pack() const;
  inline ::SProtoSpace::pet_pack_data* mutable_pet_pack();
  inline ::SProtoSpace::pet_pack_data* release_pet_pack();
  inline void set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack);

  // optional .SProtoSpace.MsgErrorType error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_do_action_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_action_id();
  inline void clear_has_action_id();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_pack();
  inline void clear_has_pet_pack();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 action_id_;
  ::SProtoSpace::pet_pack_data* pet_pack_;
  ::google::protobuf::int32 pet_id_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_do_action_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_send_out_req : public ::google::protobuf::Message {
 public:
  pet_send_out_req();
  virtual ~pet_send_out_req();

  pet_send_out_req(const pet_send_out_req& from);

  inline pet_send_out_req& operator=(const pet_send_out_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_send_out_req& default_instance();

  void Swap(pet_send_out_req* other);

  // implements Message ----------------------------------------------

  pet_send_out_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_send_out_req& from);
  void MergeFrom(const pet_send_out_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 out_id = 2;
  inline bool has_out_id() const;
  inline void clear_out_id();
  static const int kOutIdFieldNumber = 2;
  inline ::google::protobuf::int32 out_id() const;
  inline void set_out_id(::google::protobuf::int32 value);

  // optional int32 pet_id = 3;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_send_out_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_out_id();
  inline void clear_has_out_id();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 out_id_;
  ::google::protobuf::int32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_send_out_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_send_out_ack : public ::google::protobuf::Message {
 public:
  pet_send_out_ack();
  virtual ~pet_send_out_ack();

  pet_send_out_ack(const pet_send_out_ack& from);

  inline pet_send_out_ack& operator=(const pet_send_out_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_send_out_ack& default_instance();

  void Swap(pet_send_out_ack* other);

  // implements Message ----------------------------------------------

  pet_send_out_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_send_out_ack& from);
  void MergeFrom(const pet_send_out_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 out_id = 2;
  inline bool has_out_id() const;
  inline void clear_out_id();
  static const int kOutIdFieldNumber = 2;
  inline ::google::protobuf::int32 out_id() const;
  inline void set_out_id(::google::protobuf::int32 value);

  // optional int32 pet_id = 3;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 3;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.pet_pack_data pet_pack = 4;
  inline bool has_pet_pack() const;
  inline void clear_pet_pack();
  static const int kPetPackFieldNumber = 4;
  inline const ::SProtoSpace::pet_pack_data& pet_pack() const;
  inline ::SProtoSpace::pet_pack_data* mutable_pet_pack();
  inline ::SProtoSpace::pet_pack_data* release_pet_pack();
  inline void set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack);

  // optional .SProtoSpace.MsgErrorType error = 5;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 5;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_send_out_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_out_id();
  inline void clear_has_out_id();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_pack();
  inline void clear_has_pet_pack();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 out_id_;
  ::SProtoSpace::pet_pack_data* pet_pack_;
  ::google::protobuf::int32 pet_id_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_send_out_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_get_out_award_req : public ::google::protobuf::Message {
 public:
  pet_get_out_award_req();
  virtual ~pet_get_out_award_req();

  pet_get_out_award_req(const pet_get_out_award_req& from);

  inline pet_get_out_award_req& operator=(const pet_get_out_award_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_get_out_award_req& default_instance();

  void Swap(pet_get_out_award_req* other);

  // implements Message ----------------------------------------------

  pet_get_out_award_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_get_out_award_req& from);
  void MergeFrom(const pet_get_out_award_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_get_out_award_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_get_out_award_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_get_out_award_ack : public ::google::protobuf::Message {
 public:
  pet_get_out_award_ack();
  virtual ~pet_get_out_award_ack();

  pet_get_out_award_ack(const pet_get_out_award_ack& from);

  inline pet_get_out_award_ack& operator=(const pet_get_out_award_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_get_out_award_ack& default_instance();

  void Swap(pet_get_out_award_ack* other);

  // implements Message ----------------------------------------------

  pet_get_out_award_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_get_out_award_ack& from);
  void MergeFrom(const pet_get_out_award_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.pet_pack_data pet_pack = 3;
  inline bool has_pet_pack() const;
  inline void clear_pet_pack();
  static const int kPetPackFieldNumber = 3;
  inline const ::SProtoSpace::pet_pack_data& pet_pack() const;
  inline ::SProtoSpace::pet_pack_data* mutable_pet_pack();
  inline ::SProtoSpace::pet_pack_data* release_pet_pack();
  inline void set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack);

  // optional .SProtoSpace.MsgErrorType error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // repeated .SProtoSpace.pet_out_event_item rand_item_s = 5;
  inline int rand_item_s_size() const;
  inline void clear_rand_item_s();
  static const int kRandItemSFieldNumber = 5;
  inline const ::SProtoSpace::pet_out_event_item& rand_item_s(int index) const;
  inline ::SProtoSpace::pet_out_event_item* mutable_rand_item_s(int index);
  inline ::SProtoSpace::pet_out_event_item* add_rand_item_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >&
      rand_item_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >*
      mutable_rand_item_s();

  // repeated .SProtoSpace.pet_out_event_item get_item_s = 6;
  inline int get_item_s_size() const;
  inline void clear_get_item_s();
  static const int kGetItemSFieldNumber = 6;
  inline const ::SProtoSpace::pet_out_event_item& get_item_s(int index) const;
  inline ::SProtoSpace::pet_out_event_item* mutable_get_item_s(int index);
  inline ::SProtoSpace::pet_out_event_item* add_get_item_s();
  inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >&
      get_item_s() const;
  inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >*
      mutable_get_item_s();

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_get_out_award_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_pet_pack();
  inline void clear_has_pet_pack();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  ::SProtoSpace::pet_pack_data* pet_pack_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item > rand_item_s_;
  ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item > get_item_s_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_get_out_award_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_feed_food_req : public ::google::protobuf::Message {
 public:
  pet_feed_food_req();
  virtual ~pet_feed_food_req();

  pet_feed_food_req(const pet_feed_food_req& from);

  inline pet_feed_food_req& operator=(const pet_feed_food_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_feed_food_req& default_instance();

  void Swap(pet_feed_food_req* other);

  // implements Message ----------------------------------------------

  pet_feed_food_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_feed_food_req& from);
  void MergeFrom(const pet_feed_food_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_feed_food_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  ::google::protobuf::int32 item_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_feed_food_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_feed_food_ack : public ::google::protobuf::Message {
 public:
  pet_feed_food_ack();
  virtual ~pet_feed_food_ack();

  pet_feed_food_ack(const pet_feed_food_ack& from);

  inline pet_feed_food_ack& operator=(const pet_feed_food_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_feed_food_ack& default_instance();

  void Swap(pet_feed_food_ack* other);

  // implements Message ----------------------------------------------

  pet_feed_food_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_feed_food_ack& from);
  void MergeFrom(const pet_feed_food_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional int32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 item_id() const;
  inline void set_item_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // optional .SProtoSpace.pet_pack_data pet_pack = 5;
  inline bool has_pet_pack() const;
  inline void clear_pet_pack();
  static const int kPetPackFieldNumber = 5;
  inline const ::SProtoSpace::pet_pack_data& pet_pack() const;
  inline ::SProtoSpace::pet_pack_data* mutable_pet_pack();
  inline ::SProtoSpace::pet_pack_data* release_pet_pack();
  inline void set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_feed_food_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_pet_pack();
  inline void clear_has_pet_pack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  ::google::protobuf::int32 item_id_;
  int error_;
  ::SProtoSpace::pet_pack_data* pet_pack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_feed_food_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_set_show_pet_req : public ::google::protobuf::Message {
 public:
  pet_set_show_pet_req();
  virtual ~pet_set_show_pet_req();

  pet_set_show_pet_req(const pet_set_show_pet_req& from);

  inline pet_set_show_pet_req& operator=(const pet_set_show_pet_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_set_show_pet_req& default_instance();

  void Swap(pet_set_show_pet_req* other);

  // implements Message ----------------------------------------------

  pet_set_show_pet_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_set_show_pet_req& from);
  void MergeFrom(const pet_set_show_pet_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_set_show_pet_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_set_show_pet_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_set_show_pet_ack : public ::google::protobuf::Message {
 public:
  pet_set_show_pet_ack();
  virtual ~pet_set_show_pet_ack();

  pet_set_show_pet_ack(const pet_set_show_pet_ack& from);

  inline pet_set_show_pet_ack& operator=(const pet_set_show_pet_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_set_show_pet_ack& default_instance();

  void Swap(pet_set_show_pet_ack* other);

  // implements Message ----------------------------------------------

  pet_set_show_pet_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_set_show_pet_ack& from);
  void MergeFrom(const pet_set_show_pet_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_set_show_pet_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_set_show_pet_ack* default_instance_;
};
// -------------------------------------------------------------------

class pet_out_back_req : public ::google::protobuf::Message {
 public:
  pet_out_back_req();
  virtual ~pet_out_back_req();

  pet_out_back_req(const pet_out_back_req& from);

  inline pet_out_back_req& operator=(const pet_out_back_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_out_back_req& default_instance();

  void Swap(pet_out_back_req* other);

  // implements Message ----------------------------------------------

  pet_out_back_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_out_back_req& from);
  void MergeFrom(const pet_out_back_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_req_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_out_back_req)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_out_back_req* default_instance_;
};
// -------------------------------------------------------------------

class pet_out_back_ack : public ::google::protobuf::Message {
 public:
  pet_out_back_ack();
  virtual ~pet_out_back_ack();

  pet_out_back_ack(const pet_out_back_ack& from);

  inline pet_out_back_ack& operator=(const pet_out_back_ack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pet_out_back_ack& default_instance();

  void Swap(pet_out_back_ack* other);

  // implements Message ----------------------------------------------

  pet_out_back_ack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pet_out_back_ack& from);
  void MergeFrom(const pet_out_back_ack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_ack_id];
  inline bool has_protoid() const;
  inline void clear_protoid();
  static const int kProtoidFieldNumber = 1;
  inline ::SProtoSpace::ECSProtoID protoid() const;
  inline void set_protoid(::SProtoSpace::ECSProtoID value);

  // optional int32 pet_id = 2;
  inline bool has_pet_id() const;
  inline void clear_pet_id();
  static const int kPetIdFieldNumber = 2;
  inline ::google::protobuf::int32 pet_id() const;
  inline void set_pet_id(::google::protobuf::int32 value);

  // optional .SProtoSpace.MsgErrorType error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline ::SProtoSpace::MsgErrorType error() const;
  inline void set_error(::SProtoSpace::MsgErrorType value);

  // @@protoc_insertion_point(class_scope:SProtoSpace.pet_out_back_ack)
 private:
  inline void set_has_protoid();
  inline void clear_has_protoid();
  inline void set_has_pet_id();
  inline void clear_has_pet_id();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int protoid_;
  ::google::protobuf::int32 pet_id_;
  int error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cs_5frole_2eproto();
  friend void protobuf_AssignDesc_cs_5frole_2eproto();
  friend void protobuf_ShutdownFile_cs_5frole_2eproto();

  void InitAsDefaultInstance();
  static pet_out_back_ack* default_instance_;
};
// ===================================================================


// ===================================================================

// account_check_in_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_req_id];
inline bool account_check_in_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_check_in_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_check_in_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_check_in_req::clear_protoid() {
  protoid_ = 5020;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID account_check_in_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void account_check_in_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool account_check_in_req::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account_check_in_req::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account_check_in_req::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account_check_in_req::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& account_check_in_req::account() const {
  return *account_;
}
inline void account_check_in_req::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void account_check_in_req::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void account_check_in_req::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* account_check_in_req::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* account_check_in_req::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void account_check_in_req::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 3;
inline bool account_check_in_req::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account_check_in_req::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account_check_in_req::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account_check_in_req::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& account_check_in_req::token() const {
  return *token_;
}
inline void account_check_in_req::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void account_check_in_req::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void account_check_in_req::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* account_check_in_req::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* account_check_in_req::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void account_check_in_req::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 tempid = 4;
inline bool account_check_in_req::has_tempid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void account_check_in_req::set_has_tempid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void account_check_in_req::clear_has_tempid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void account_check_in_req::clear_tempid() {
  tempid_ = 0u;
  clear_has_tempid();
}
inline ::google::protobuf::uint32 account_check_in_req::tempid() const {
  return tempid_;
}
inline void account_check_in_req::set_tempid(::google::protobuf::uint32 value) {
  set_has_tempid();
  tempid_ = value;
}

// optional uint32 areaid = 5;
inline bool account_check_in_req::has_areaid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void account_check_in_req::set_has_areaid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void account_check_in_req::clear_has_areaid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void account_check_in_req::clear_areaid() {
  areaid_ = 0u;
  clear_has_areaid();
}
inline ::google::protobuf::uint32 account_check_in_req::areaid() const {
  return areaid_;
}
inline void account_check_in_req::set_areaid(::google::protobuf::uint32 value) {
  set_has_areaid();
  areaid_ = value;
}

// -------------------------------------------------------------------

// account_check_in_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_check_in_ack_id];
inline bool account_check_in_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_check_in_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_check_in_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_check_in_ack::clear_protoid() {
  protoid_ = 5021;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID account_check_in_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void account_check_in_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool account_check_in_ack::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account_check_in_ack::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account_check_in_ack::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account_check_in_ack::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& account_check_in_ack::account() const {
  return *account_;
}
inline void account_check_in_ack::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void account_check_in_ack::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void account_check_in_ack::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* account_check_in_ack::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* account_check_in_ack::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void account_check_in_ack::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ret = 3;
inline bool account_check_in_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account_check_in_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account_check_in_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account_check_in_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 account_check_in_ack::ret() const {
  return ret_;
}
inline void account_check_in_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// sys_packet_seq_id_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ntf_id];
inline bool sys_packet_seq_id_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sys_packet_seq_id_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sys_packet_seq_id_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sys_packet_seq_id_ntf::clear_protoid() {
  protoid_ = 5025;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID sys_packet_seq_id_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void sys_packet_seq_id_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// sys_packet_seq_id_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_req_id];
inline bool sys_packet_seq_id_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sys_packet_seq_id_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sys_packet_seq_id_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sys_packet_seq_id_req::clear_protoid() {
  protoid_ = 5022;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID sys_packet_seq_id_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void sys_packet_seq_id_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 downlink_seq_id = 2;
inline bool sys_packet_seq_id_req::has_downlink_seq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sys_packet_seq_id_req::set_has_downlink_seq_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sys_packet_seq_id_req::clear_has_downlink_seq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sys_packet_seq_id_req::clear_downlink_seq_id() {
  downlink_seq_id_ = 0u;
  clear_has_downlink_seq_id();
}
inline ::google::protobuf::uint32 sys_packet_seq_id_req::downlink_seq_id() const {
  return downlink_seq_id_;
}
inline void sys_packet_seq_id_req::set_downlink_seq_id(::google::protobuf::uint32 value) {
  set_has_downlink_seq_id();
  downlink_seq_id_ = value;
}

// -------------------------------------------------------------------

// sys_packet_seq_id_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_id_ack_id];
inline bool sys_packet_seq_id_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sys_packet_seq_id_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sys_packet_seq_id_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sys_packet_seq_id_ack::clear_protoid() {
  protoid_ = 5023;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID sys_packet_seq_id_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void sys_packet_seq_id_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 uplink_seq_id = 2;
inline bool sys_packet_seq_id_ack::has_uplink_seq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sys_packet_seq_id_ack::set_has_uplink_seq_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sys_packet_seq_id_ack::clear_has_uplink_seq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sys_packet_seq_id_ack::clear_uplink_seq_id() {
  uplink_seq_id_ = 0u;
  clear_has_uplink_seq_id();
}
inline ::google::protobuf::uint32 sys_packet_seq_id_ack::uplink_seq_id() const {
  return uplink_seq_id_;
}
inline void sys_packet_seq_id_ack::set_uplink_seq_id(::google::protobuf::uint32 value) {
  set_has_uplink_seq_id();
  uplink_seq_id_ = value;
}

// -------------------------------------------------------------------

// uplink_packet_seq_error_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sys_packet_seq_error_ntf_id];
inline bool uplink_packet_seq_error_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uplink_packet_seq_error_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uplink_packet_seq_error_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uplink_packet_seq_error_ntf::clear_protoid() {
  protoid_ = 5024;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID uplink_packet_seq_error_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void uplink_packet_seq_error_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 uplink_seq_id = 2;
inline bool uplink_packet_seq_error_ntf::has_uplink_seq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uplink_packet_seq_error_ntf::set_has_uplink_seq_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uplink_packet_seq_error_ntf::clear_has_uplink_seq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uplink_packet_seq_error_ntf::clear_uplink_seq_id() {
  uplink_seq_id_ = 0u;
  clear_has_uplink_seq_id();
}
inline ::google::protobuf::uint32 uplink_packet_seq_error_ntf::uplink_seq_id() const {
  return uplink_seq_id_;
}
inline void uplink_packet_seq_error_ntf::set_uplink_seq_id(::google::protobuf::uint32 value) {
  set_has_uplink_seq_id();
  uplink_seq_id_ = value;
}

// -------------------------------------------------------------------

// client_secret_key_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_req_id];
inline bool client_secret_key_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_secret_key_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_secret_key_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_secret_key_req::clear_protoid() {
  protoid_ = 5060;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID client_secret_key_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void client_secret_key_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string public_key = 2;
inline bool client_secret_key_req::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_secret_key_req::set_has_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_secret_key_req::clear_has_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_secret_key_req::clear_public_key() {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    public_key_->clear();
  }
  clear_has_public_key();
}
inline const ::std::string& client_secret_key_req::public_key() const {
  return *public_key_;
}
inline void client_secret_key_req::set_public_key(const ::std::string& value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void client_secret_key_req::set_public_key(const char* value) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(value);
}
inline void client_secret_key_req::set_public_key(const char* value, size_t size) {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  public_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* client_secret_key_req::mutable_public_key() {
  set_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    public_key_ = new ::std::string;
  }
  return public_key_;
}
inline ::std::string* client_secret_key_req::release_public_key() {
  clear_has_public_key();
  if (public_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_key_;
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void client_secret_key_req::set_allocated_public_key(::std::string* public_key) {
  if (public_key_ != &::google::protobuf::internal::kEmptyString) {
    delete public_key_;
  }
  if (public_key) {
    set_has_public_key();
    public_key_ = public_key;
  } else {
    clear_has_public_key();
    public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string seed = 3;
inline bool client_secret_key_req::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void client_secret_key_req::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void client_secret_key_req::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void client_secret_key_req::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& client_secret_key_req::seed() const {
  return *seed_;
}
inline void client_secret_key_req::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void client_secret_key_req::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void client_secret_key_req::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* client_secret_key_req::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* client_secret_key_req::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void client_secret_key_req::set_allocated_seed(::std::string* seed) {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (seed) {
    set_has_seed();
    seed_ = seed;
  } else {
    clear_has_seed();
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// client_secret_key_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_key_ack_id];
inline bool client_secret_key_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_secret_key_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_secret_key_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_secret_key_ack::clear_protoid() {
  protoid_ = 5061;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID client_secret_key_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void client_secret_key_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string secret_key = 2;
inline bool client_secret_key_ack::has_secret_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_secret_key_ack::set_has_secret_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_secret_key_ack::clear_has_secret_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_secret_key_ack::clear_secret_key() {
  if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
    secret_key_->clear();
  }
  clear_has_secret_key();
}
inline const ::std::string& client_secret_key_ack::secret_key() const {
  return *secret_key_;
}
inline void client_secret_key_ack::set_secret_key(const ::std::string& value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
}
inline void client_secret_key_ack::set_secret_key(const char* value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
}
inline void client_secret_key_ack::set_secret_key(const char* value, size_t size) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* client_secret_key_ack::mutable_secret_key() {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  return secret_key_;
}
inline ::std::string* client_secret_key_ack::release_secret_key() {
  clear_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secret_key_;
    secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void client_secret_key_ack::set_allocated_secret_key(::std::string* secret_key) {
  if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
    delete secret_key_;
  }
  if (secret_key) {
    set_has_secret_key();
    secret_key_ = secret_key;
  } else {
    clear_has_secret_key();
    secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// client_secret_start_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_req_id];
inline bool client_secret_start_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_secret_start_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_secret_start_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_secret_start_req::clear_protoid() {
  protoid_ = 5062;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID client_secret_start_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void client_secret_start_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool client_secret_start_req::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_secret_start_req::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_secret_start_req::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_secret_start_req::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 client_secret_start_req::ret() const {
  return ret_;
}
inline void client_secret_start_req::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// client_secret_start_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_secret_start_ack_id];
inline bool client_secret_start_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_secret_start_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_secret_start_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_secret_start_ack::clear_protoid() {
  protoid_ = 5063;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID client_secret_start_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void client_secret_start_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool client_secret_start_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_secret_start_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_secret_start_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_secret_start_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 client_secret_start_ack::ret() const {
  return ret_;
}
inline void client_secret_start_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// account_role_data_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = account_role_data_ack_id];
inline bool account_role_data_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void account_role_data_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void account_role_data_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void account_role_data_ack::clear_protoid() {
  protoid_ = 5000;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID account_role_data_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void account_role_data_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool account_role_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void account_role_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void account_role_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void account_role_data_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 account_role_data_ack::ret() const {
  return ret_;
}
inline void account_role_data_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.account_role_data data = 3;
inline bool account_role_data_ack::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void account_role_data_ack::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void account_role_data_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void account_role_data_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::account_role_data& account_role_data_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::account_role_data* account_role_data_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::account_role_data;
  return data_;
}
inline ::SProtoSpace::account_role_data* account_role_data_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::account_role_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void account_role_data_ack::set_allocated_data(::SProtoSpace::account_role_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// create_role_of_game

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_id];
inline bool create_role_of_game::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_role_of_game::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_role_of_game::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_role_of_game::clear_protoid() {
  protoid_ = 5001;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID create_role_of_game::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void create_role_of_game::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string account = 2;
inline bool create_role_of_game::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_role_of_game::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_role_of_game::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_role_of_game::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& create_role_of_game::account() const {
  return *account_;
}
inline void create_role_of_game::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void create_role_of_game::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void create_role_of_game::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_role_of_game::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* create_role_of_game::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_role_of_game::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string rolename = 3;
inline bool create_role_of_game::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_role_of_game::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_role_of_game::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_role_of_game::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& create_role_of_game::rolename() const {
  return *rolename_;
}
inline void create_role_of_game::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void create_role_of_game::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void create_role_of_game::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_role_of_game::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* create_role_of_game::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_role_of_game::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rolesex = 4;
inline bool create_role_of_game::has_rolesex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_role_of_game::set_has_rolesex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_role_of_game::clear_has_rolesex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_role_of_game::clear_rolesex() {
  rolesex_ = 0;
  clear_has_rolesex();
}
inline ::google::protobuf::int32 create_role_of_game::rolesex() const {
  return rolesex_;
}
inline void create_role_of_game::set_rolesex(::google::protobuf::int32 value) {
  set_has_rolesex();
  rolesex_ = value;
}

// -------------------------------------------------------------------

// create_role_of_game_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = create_role_of_game_ack_id];
inline bool create_role_of_game_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_role_of_game_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_role_of_game_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_role_of_game_ack::clear_protoid() {
  protoid_ = 5002;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID create_role_of_game_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void create_role_of_game_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 create_ret = 2;
inline bool create_role_of_game_ack::has_create_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_role_of_game_ack::set_has_create_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_role_of_game_ack::clear_has_create_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_role_of_game_ack::clear_create_ret() {
  create_ret_ = 0;
  clear_has_create_ret();
}
inline ::google::protobuf::int32 create_role_of_game_ack::create_ret() const {
  return create_ret_;
}
inline void create_role_of_game_ack::set_create_ret(::google::protobuf::int32 value) {
  set_has_create_ret();
  create_ret_ = value;
}

// optional string account = 3;
inline bool create_role_of_game_ack::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_role_of_game_ack::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_role_of_game_ack::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_role_of_game_ack::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& create_role_of_game_ack::account() const {
  return *account_;
}
inline void create_role_of_game_ack::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void create_role_of_game_ack::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void create_role_of_game_ack::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_role_of_game_ack::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* create_role_of_game_ack::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_role_of_game_ack::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.account_role_data data = 4;
inline bool create_role_of_game_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_role_of_game_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_role_of_game_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_role_of_game_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::account_role_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::account_role_data& create_role_of_game_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::account_role_data* create_role_of_game_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::account_role_data;
  return data_;
}
inline ::SProtoSpace::account_role_data* create_role_of_game_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::account_role_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void create_role_of_game_ack::set_allocated_data(::SProtoSpace::account_role_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// switch_scene_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_scene_req_id];
inline bool switch_scene_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void switch_scene_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void switch_scene_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void switch_scene_req::clear_protoid() {
  protoid_ = 5003;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID switch_scene_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void switch_scene_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 scene_id = 2;
inline bool switch_scene_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void switch_scene_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void switch_scene_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void switch_scene_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 switch_scene_req::scene_id() const {
  return scene_id_;
}
inline void switch_scene_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 scene_type = 3;
inline bool switch_scene_req::has_scene_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void switch_scene_req::set_has_scene_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void switch_scene_req::clear_has_scene_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void switch_scene_req::clear_scene_type() {
  scene_type_ = 0u;
  clear_has_scene_type();
}
inline ::google::protobuf::uint32 switch_scene_req::scene_type() const {
  return scene_type_;
}
inline void switch_scene_req::set_scene_type(::google::protobuf::uint32 value) {
  set_has_scene_type();
  scene_type_ = value;
}

// optional uint64 game_id = 4;
inline bool switch_scene_req::has_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void switch_scene_req::set_has_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void switch_scene_req::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void switch_scene_req::clear_game_id() {
  game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_game_id();
}
inline ::google::protobuf::uint64 switch_scene_req::game_id() const {
  return game_id_;
}
inline void switch_scene_req::set_game_id(::google::protobuf::uint64 value) {
  set_has_game_id();
  game_id_ = value;
}

// -------------------------------------------------------------------

// enter_game_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_req_id];
inline bool enter_game_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_game_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_game_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_game_req::clear_protoid() {
  protoid_ = 5005;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID enter_game_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void enter_game_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 roleid = 2;
inline bool enter_game_req::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_game_req::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_game_req::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_game_req::clear_roleid() {
  roleid_ = GOOGLE_ULONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::uint64 enter_game_req::roleid() const {
  return roleid_;
}
inline void enter_game_req::set_roleid(::google::protobuf::uint64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional uint32 reason = 3;
inline bool enter_game_req::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_game_req::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_game_req::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_game_req::clear_reason() {
  reason_ = 0u;
  clear_has_reason();
}
inline ::google::protobuf::uint32 enter_game_req::reason() const {
  return reason_;
}
inline void enter_game_req::set_reason(::google::protobuf::uint32 value) {
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// enter_game_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_game_ack_id];
inline bool enter_game_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_game_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_game_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_game_ack::clear_protoid() {
  protoid_ = 5009;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID enter_game_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void enter_game_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool enter_game_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_game_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_game_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_game_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 enter_game_ack::ret() const {
  return ret_;
}
inline void enter_game_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// system_unlock_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_req_id];
inline bool system_unlock_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void system_unlock_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void system_unlock_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void system_unlock_req::clear_protoid() {
  protoid_ = 7600;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID system_unlock_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void system_unlock_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// system_unlock_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ack_id];
inline bool system_unlock_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void system_unlock_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void system_unlock_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void system_unlock_ack::clear_protoid() {
  protoid_ = 7601;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID system_unlock_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void system_unlock_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 lock_module_ids = 2;
inline int system_unlock_ack::lock_module_ids_size() const {
  return lock_module_ids_.size();
}
inline void system_unlock_ack::clear_lock_module_ids() {
  lock_module_ids_.Clear();
}
inline ::google::protobuf::int32 system_unlock_ack::lock_module_ids(int index) const {
  return lock_module_ids_.Get(index);
}
inline void system_unlock_ack::set_lock_module_ids(int index, ::google::protobuf::int32 value) {
  lock_module_ids_.Set(index, value);
}
inline void system_unlock_ack::add_lock_module_ids(::google::protobuf::int32 value) {
  lock_module_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
system_unlock_ack::lock_module_ids() const {
  return lock_module_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
system_unlock_ack::mutable_lock_module_ids() {
  return &lock_module_ids_;
}

// -------------------------------------------------------------------

// system_unlock_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = system_unlock_ntf_id];
inline bool system_unlock_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void system_unlock_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void system_unlock_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void system_unlock_ntf::clear_protoid() {
  protoid_ = 7602;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID system_unlock_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void system_unlock_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 unlock_module_ids = 2;
inline int system_unlock_ntf::unlock_module_ids_size() const {
  return unlock_module_ids_.size();
}
inline void system_unlock_ntf::clear_unlock_module_ids() {
  unlock_module_ids_.Clear();
}
inline ::google::protobuf::int32 system_unlock_ntf::unlock_module_ids(int index) const {
  return unlock_module_ids_.Get(index);
}
inline void system_unlock_ntf::set_unlock_module_ids(int index, ::google::protobuf::int32 value) {
  unlock_module_ids_.Set(index, value);
}
inline void system_unlock_ntf::add_unlock_module_ids(::google::protobuf::int32 value) {
  unlock_module_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
system_unlock_ntf::unlock_module_ids() const {
  return unlock_module_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
system_unlock_ntf::mutable_unlock_module_ids() {
  return &unlock_module_ids_;
}

// -------------------------------------------------------------------

// role_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_info_ntf_id];
inline bool role_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_info_ntf::clear_protoid() {
  protoid_ = 5102;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 role_id = 2;
inline bool role_info_ntf::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_info_ntf::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_info_ntf::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_info_ntf::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 role_info_ntf::role_id() const {
  return role_id_;
}
inline void role_info_ntf::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string rolename = 3;
inline bool role_info_ntf::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_info_ntf::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_info_ntf::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_info_ntf::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& role_info_ntf::rolename() const {
  return *rolename_;
}
inline void role_info_ntf::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void role_info_ntf::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void role_info_ntf::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_info_ntf::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* role_info_ntf::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_info_ntf::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SProtoSpace.soul_info soul_s = 4;
inline int role_info_ntf::soul_s_size() const {
  return soul_s_.size();
}
inline void role_info_ntf::clear_soul_s() {
  soul_s_.Clear();
}
inline const ::SProtoSpace::soul_info& role_info_ntf::soul_s(int index) const {
  return soul_s_.Get(index);
}
inline ::SProtoSpace::soul_info* role_info_ntf::mutable_soul_s(int index) {
  return soul_s_.Mutable(index);
}
inline ::SProtoSpace::soul_info* role_info_ntf::add_soul_s() {
  return soul_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
role_info_ntf::soul_s() const {
  return soul_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
role_info_ntf::mutable_soul_s() {
  return &soul_s_;
}

// repeated .SProtoSpace.item_info item_s = 5;
inline int role_info_ntf::item_s_size() const {
  return item_s_.size();
}
inline void role_info_ntf::clear_item_s() {
  item_s_.Clear();
}
inline const ::SProtoSpace::item_info& role_info_ntf::item_s(int index) const {
  return item_s_.Get(index);
}
inline ::SProtoSpace::item_info* role_info_ntf::mutable_item_s(int index) {
  return item_s_.Mutable(index);
}
inline ::SProtoSpace::item_info* role_info_ntf::add_item_s() {
  return item_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
role_info_ntf::item_s() const {
  return item_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
role_info_ntf::mutable_item_s() {
  return &item_s_;
}

// optional int32 lv = 7;
inline bool role_info_ntf::has_lv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_info_ntf::set_has_lv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_info_ntf::clear_has_lv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_info_ntf::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 role_info_ntf::lv() const {
  return lv_;
}
inline void role_info_ntf::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 exp = 8;
inline bool role_info_ntf::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_info_ntf::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_info_ntf::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_info_ntf::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 role_info_ntf::exp() const {
  return exp_;
}
inline void role_info_ntf::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 sex = 9;
inline bool role_info_ntf::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_info_ntf::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_info_ntf::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_info_ntf::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 role_info_ntf::sex() const {
  return sex_;
}
inline void role_info_ntf::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 gold = 10;
inline bool role_info_ntf::has_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_info_ntf::set_has_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_info_ntf::clear_has_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_info_ntf::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 role_info_ntf::gold() const {
  return gold_;
}
inline void role_info_ntf::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 jade = 11;
inline bool role_info_ntf::has_jade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_info_ntf::set_has_jade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_info_ntf::clear_has_jade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_info_ntf::clear_jade() {
  jade_ = 0;
  clear_has_jade();
}
inline ::google::protobuf::int32 role_info_ntf::jade() const {
  return jade_;
}
inline void role_info_ntf::set_jade(::google::protobuf::int32 value) {
  set_has_jade();
  jade_ = value;
}

// optional int32 power = 12;
inline bool role_info_ntf::has_power() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_info_ntf::set_has_power() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_info_ntf::clear_has_power() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_info_ntf::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 role_info_ntf::power() const {
  return power_;
}
inline void role_info_ntf::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 buy_power_times = 13;
inline bool role_info_ntf::has_buy_power_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_info_ntf::set_has_buy_power_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_info_ntf::clear_has_buy_power_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_info_ntf::clear_buy_power_times() {
  buy_power_times_ = 0;
  clear_has_buy_power_times();
}
inline ::google::protobuf::int32 role_info_ntf::buy_power_times() const {
  return buy_power_times_;
}
inline void role_info_ntf::set_buy_power_times(::google::protobuf::int32 value) {
  set_has_buy_power_times();
  buy_power_times_ = value;
}

// optional int32 merit = 14;
inline bool role_info_ntf::has_merit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_info_ntf::set_has_merit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_info_ntf::clear_has_merit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_info_ntf::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 role_info_ntf::merit() const {
  return merit_;
}
inline void role_info_ntf::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// optional int32 grade = 15;
inline bool role_info_ntf::has_grade() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_info_ntf::set_has_grade() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_info_ntf::clear_has_grade() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_info_ntf::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 role_info_ntf::grade() const {
  return grade_;
}
inline void role_info_ntf::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 tender = 16;
inline bool role_info_ntf::has_tender() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void role_info_ntf::set_has_tender() {
  _has_bits_[0] |= 0x00004000u;
}
inline void role_info_ntf::clear_has_tender() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void role_info_ntf::clear_tender() {
  tender_ = 0;
  clear_has_tender();
}
inline ::google::protobuf::int32 role_info_ntf::tender() const {
  return tender_;
}
inline void role_info_ntf::set_tender(::google::protobuf::int32 value) {
  set_has_tender();
  tender_ = value;
}

// optional int32 treason = 17;
inline bool role_info_ntf::has_treason() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void role_info_ntf::set_has_treason() {
  _has_bits_[0] |= 0x00008000u;
}
inline void role_info_ntf::clear_has_treason() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void role_info_ntf::clear_treason() {
  treason_ = 0;
  clear_has_treason();
}
inline ::google::protobuf::int32 role_info_ntf::treason() const {
  return treason_;
}
inline void role_info_ntf::set_treason(::google::protobuf::int32 value) {
  set_has_treason();
  treason_ = value;
}

// optional int32 wise = 18;
inline bool role_info_ntf::has_wise() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void role_info_ntf::set_has_wise() {
  _has_bits_[0] |= 0x00010000u;
}
inline void role_info_ntf::clear_has_wise() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void role_info_ntf::clear_wise() {
  wise_ = 0;
  clear_has_wise();
}
inline ::google::protobuf::int32 role_info_ntf::wise() const {
  return wise_;
}
inline void role_info_ntf::set_wise(::google::protobuf::int32 value) {
  set_has_wise();
  wise_ = value;
}

// optional int32 adorkable = 19;
inline bool role_info_ntf::has_adorkable() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void role_info_ntf::set_has_adorkable() {
  _has_bits_[0] |= 0x00020000u;
}
inline void role_info_ntf::clear_has_adorkable() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void role_info_ntf::clear_adorkable() {
  adorkable_ = 0;
  clear_has_adorkable();
}
inline ::google::protobuf::int32 role_info_ntf::adorkable() const {
  return adorkable_;
}
inline void role_info_ntf::set_adorkable(::google::protobuf::int32 value) {
  set_has_adorkable();
  adorkable_ = value;
}

// optional int32 good = 20;
inline bool role_info_ntf::has_good() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void role_info_ntf::set_has_good() {
  _has_bits_[0] |= 0x00040000u;
}
inline void role_info_ntf::clear_has_good() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void role_info_ntf::clear_good() {
  good_ = 0;
  clear_has_good();
}
inline ::google::protobuf::int32 role_info_ntf::good() const {
  return good_;
}
inline void role_info_ntf::set_good(::google::protobuf::int32 value) {
  set_has_good();
  good_ = value;
}

// optional int32 scheming = 21;
inline bool role_info_ntf::has_scheming() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void role_info_ntf::set_has_scheming() {
  _has_bits_[0] |= 0x00080000u;
}
inline void role_info_ntf::clear_has_scheming() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void role_info_ntf::clear_scheming() {
  scheming_ = 0;
  clear_has_scheming();
}
inline ::google::protobuf::int32 role_info_ntf::scheming() const {
  return scheming_;
}
inline void role_info_ntf::set_scheming(::google::protobuf::int32 value) {
  set_has_scheming();
  scheming_ = value;
}

// optional uint32 bag_capacity = 22;
inline bool role_info_ntf::has_bag_capacity() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void role_info_ntf::set_has_bag_capacity() {
  _has_bits_[0] |= 0x00100000u;
}
inline void role_info_ntf::clear_has_bag_capacity() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void role_info_ntf::clear_bag_capacity() {
  bag_capacity_ = 0u;
  clear_has_bag_capacity();
}
inline ::google::protobuf::uint32 role_info_ntf::bag_capacity() const {
  return bag_capacity_;
}
inline void role_info_ntf::set_bag_capacity(::google::protobuf::uint32 value) {
  set_has_bag_capacity();
  bag_capacity_ = value;
}

// optional int32 task_activity = 23;
inline bool role_info_ntf::has_task_activity() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void role_info_ntf::set_has_task_activity() {
  _has_bits_[0] |= 0x00200000u;
}
inline void role_info_ntf::clear_has_task_activity() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void role_info_ntf::clear_task_activity() {
  task_activity_ = 0;
  clear_has_task_activity();
}
inline ::google::protobuf::int32 role_info_ntf::task_activity() const {
  return task_activity_;
}
inline void role_info_ntf::set_task_activity(::google::protobuf::int32 value) {
  set_has_task_activity();
  task_activity_ = value;
}

// optional bool offical_salary = 24;
inline bool role_info_ntf::has_offical_salary() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void role_info_ntf::set_has_offical_salary() {
  _has_bits_[0] |= 0x00400000u;
}
inline void role_info_ntf::clear_has_offical_salary() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void role_info_ntf::clear_offical_salary() {
  offical_salary_ = false;
  clear_has_offical_salary();
}
inline bool role_info_ntf::offical_salary() const {
  return offical_salary_;
}
inline void role_info_ntf::set_offical_salary(bool value) {
  set_has_offical_salary();
  offical_salary_ = value;
}

// optional uint32 first_offical_award = 25;
inline bool role_info_ntf::has_first_offical_award() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void role_info_ntf::set_has_first_offical_award() {
  _has_bits_[0] |= 0x00800000u;
}
inline void role_info_ntf::clear_has_first_offical_award() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void role_info_ntf::clear_first_offical_award() {
  first_offical_award_ = 0u;
  clear_has_first_offical_award();
}
inline ::google::protobuf::uint32 role_info_ntf::first_offical_award() const {
  return first_offical_award_;
}
inline void role_info_ntf::set_first_offical_award(::google::protobuf::uint32 value) {
  set_has_first_offical_award();
  first_offical_award_ = value;
}

// optional int32 skill_point = 26;
inline bool role_info_ntf::has_skill_point() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void role_info_ntf::set_has_skill_point() {
  _has_bits_[0] |= 0x01000000u;
}
inline void role_info_ntf::clear_has_skill_point() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void role_info_ntf::clear_skill_point() {
  skill_point_ = 0;
  clear_has_skill_point();
}
inline ::google::protobuf::int32 role_info_ntf::skill_point() const {
  return skill_point_;
}
inline void role_info_ntf::set_skill_point(::google::protobuf::int32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// optional uint32 wine = 27;
inline bool role_info_ntf::has_wine() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void role_info_ntf::set_has_wine() {
  _has_bits_[0] |= 0x02000000u;
}
inline void role_info_ntf::clear_has_wine() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void role_info_ntf::clear_wine() {
  wine_ = 0u;
  clear_has_wine();
}
inline ::google::protobuf::uint32 role_info_ntf::wine() const {
  return wine_;
}
inline void role_info_ntf::set_wine(::google::protobuf::uint32 value) {
  set_has_wine();
  wine_ = value;
}

// optional uint32 wine_cup = 28;
inline bool role_info_ntf::has_wine_cup() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void role_info_ntf::set_has_wine_cup() {
  _has_bits_[0] |= 0x04000000u;
}
inline void role_info_ntf::clear_has_wine_cup() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void role_info_ntf::clear_wine_cup() {
  wine_cup_ = 0u;
  clear_has_wine_cup();
}
inline ::google::protobuf::uint32 role_info_ntf::wine_cup() const {
  return wine_cup_;
}
inline void role_info_ntf::set_wine_cup(::google::protobuf::uint32 value) {
  set_has_wine_cup();
  wine_cup_ = value;
}

// optional int32 daily_fortune = 29;
inline bool role_info_ntf::has_daily_fortune() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void role_info_ntf::set_has_daily_fortune() {
  _has_bits_[0] |= 0x08000000u;
}
inline void role_info_ntf::clear_has_daily_fortune() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void role_info_ntf::clear_daily_fortune() {
  daily_fortune_ = 0;
  clear_has_daily_fortune();
}
inline ::google::protobuf::int32 role_info_ntf::daily_fortune() const {
  return daily_fortune_;
}
inline void role_info_ntf::set_daily_fortune(::google::protobuf::int32 value) {
  set_has_daily_fortune();
  daily_fortune_ = value;
}

// optional int32 adv_energy = 30;
inline bool role_info_ntf::has_adv_energy() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void role_info_ntf::set_has_adv_energy() {
  _has_bits_[0] |= 0x10000000u;
}
inline void role_info_ntf::clear_has_adv_energy() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void role_info_ntf::clear_adv_energy() {
  adv_energy_ = 0;
  clear_has_adv_energy();
}
inline ::google::protobuf::int32 role_info_ntf::adv_energy() const {
  return adv_energy_;
}
inline void role_info_ntf::set_adv_energy(::google::protobuf::int32 value) {
  set_has_adv_energy();
  adv_energy_ = value;
}

// optional int32 adv_times = 31;
inline bool role_info_ntf::has_adv_times() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void role_info_ntf::set_has_adv_times() {
  _has_bits_[0] |= 0x20000000u;
}
inline void role_info_ntf::clear_has_adv_times() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void role_info_ntf::clear_adv_times() {
  adv_times_ = 0;
  clear_has_adv_times();
}
inline ::google::protobuf::int32 role_info_ntf::adv_times() const {
  return adv_times_;
}
inline void role_info_ntf::set_adv_times(::google::protobuf::int32 value) {
  set_has_adv_times();
  adv_times_ = value;
}

// optional int32 talent_point = 32;
inline bool role_info_ntf::has_talent_point() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void role_info_ntf::set_has_talent_point() {
  _has_bits_[0] |= 0x40000000u;
}
inline void role_info_ntf::clear_has_talent_point() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void role_info_ntf::clear_talent_point() {
  talent_point_ = 0;
  clear_has_talent_point();
}
inline ::google::protobuf::int32 role_info_ntf::talent_point() const {
  return talent_point_;
}
inline void role_info_ntf::set_talent_point(::google::protobuf::int32 value) {
  set_has_talent_point();
  talent_point_ = value;
}

// optional int32 change_name_time = 33;
inline bool role_info_ntf::has_change_name_time() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void role_info_ntf::set_has_change_name_time() {
  _has_bits_[0] |= 0x80000000u;
}
inline void role_info_ntf::clear_has_change_name_time() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void role_info_ntf::clear_change_name_time() {
  change_name_time_ = 0;
  clear_has_change_name_time();
}
inline ::google::protobuf::int32 role_info_ntf::change_name_time() const {
  return change_name_time_;
}
inline void role_info_ntf::set_change_name_time(::google::protobuf::int32 value) {
  set_has_change_name_time();
  change_name_time_ = value;
}

// -------------------------------------------------------------------

// item_info

// optional int32 item_id = 1;
inline bool item_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_info::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 item_info::item_id() const {
  return item_id_;
}
inline void item_info::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_count = 2;
inline bool item_info::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_info::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_info::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_info::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 item_info::item_count() const {
  return item_count_;
}
inline void item_info::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// update_role_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_role_info_ntf_id];
inline bool update_role_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_role_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_role_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_role_info_ntf::clear_protoid() {
  protoid_ = 5100;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID update_role_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void update_role_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string rolename = 2;
inline bool update_role_info_ntf::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_role_info_ntf::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_role_info_ntf::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_role_info_ntf::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& update_role_info_ntf::rolename() const {
  return *rolename_;
}
inline void update_role_info_ntf::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void update_role_info_ntf::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void update_role_info_ntf::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* update_role_info_ntf::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* update_role_info_ntf::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void update_role_info_ntf::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .SProtoSpace.item_info item_s = 3;
inline int update_role_info_ntf::item_s_size() const {
  return item_s_.size();
}
inline void update_role_info_ntf::clear_item_s() {
  item_s_.Clear();
}
inline const ::SProtoSpace::item_info& update_role_info_ntf::item_s(int index) const {
  return item_s_.Get(index);
}
inline ::SProtoSpace::item_info* update_role_info_ntf::mutable_item_s(int index) {
  return item_s_.Mutable(index);
}
inline ::SProtoSpace::item_info* update_role_info_ntf::add_item_s() {
  return item_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
update_role_info_ntf::item_s() const {
  return item_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
update_role_info_ntf::mutable_item_s() {
  return &item_s_;
}

// optional int32 lv = 4;
inline bool update_role_info_ntf::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void update_role_info_ntf::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void update_role_info_ntf::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void update_role_info_ntf::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 update_role_info_ntf::lv() const {
  return lv_;
}
inline void update_role_info_ntf::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 exp = 5;
inline bool update_role_info_ntf::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void update_role_info_ntf::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void update_role_info_ntf::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void update_role_info_ntf::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 update_role_info_ntf::exp() const {
  return exp_;
}
inline void update_role_info_ntf::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 gold = 6;
inline bool update_role_info_ntf::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void update_role_info_ntf::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void update_role_info_ntf::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void update_role_info_ntf::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 update_role_info_ntf::gold() const {
  return gold_;
}
inline void update_role_info_ntf::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 jade = 7;
inline bool update_role_info_ntf::has_jade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void update_role_info_ntf::set_has_jade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void update_role_info_ntf::clear_has_jade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void update_role_info_ntf::clear_jade() {
  jade_ = 0;
  clear_has_jade();
}
inline ::google::protobuf::int32 update_role_info_ntf::jade() const {
  return jade_;
}
inline void update_role_info_ntf::set_jade(::google::protobuf::int32 value) {
  set_has_jade();
  jade_ = value;
}

// optional int32 power = 8;
inline bool update_role_info_ntf::has_power() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void update_role_info_ntf::set_has_power() {
  _has_bits_[0] |= 0x00000080u;
}
inline void update_role_info_ntf::clear_has_power() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void update_role_info_ntf::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 update_role_info_ntf::power() const {
  return power_;
}
inline void update_role_info_ntf::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// repeated int32 plot_ids = 9;
inline int update_role_info_ntf::plot_ids_size() const {
  return plot_ids_.size();
}
inline void update_role_info_ntf::clear_plot_ids() {
  plot_ids_.Clear();
}
inline ::google::protobuf::int32 update_role_info_ntf::plot_ids(int index) const {
  return plot_ids_.Get(index);
}
inline void update_role_info_ntf::set_plot_ids(int index, ::google::protobuf::int32 value) {
  plot_ids_.Set(index, value);
}
inline void update_role_info_ntf::add_plot_ids(::google::protobuf::int32 value) {
  plot_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
update_role_info_ntf::plot_ids() const {
  return plot_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
update_role_info_ntf::mutable_plot_ids() {
  return &plot_ids_;
}

// optional int32 buy_power_times = 10;
inline bool update_role_info_ntf::has_buy_power_times() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void update_role_info_ntf::set_has_buy_power_times() {
  _has_bits_[0] |= 0x00000200u;
}
inline void update_role_info_ntf::clear_has_buy_power_times() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void update_role_info_ntf::clear_buy_power_times() {
  buy_power_times_ = 0;
  clear_has_buy_power_times();
}
inline ::google::protobuf::int32 update_role_info_ntf::buy_power_times() const {
  return buy_power_times_;
}
inline void update_role_info_ntf::set_buy_power_times(::google::protobuf::int32 value) {
  set_has_buy_power_times();
  buy_power_times_ = value;
}

// optional int32 merit = 11;
inline bool update_role_info_ntf::has_merit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void update_role_info_ntf::set_has_merit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void update_role_info_ntf::clear_has_merit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void update_role_info_ntf::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 update_role_info_ntf::merit() const {
  return merit_;
}
inline void update_role_info_ntf::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// optional int32 grade = 12;
inline bool update_role_info_ntf::has_grade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void update_role_info_ntf::set_has_grade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void update_role_info_ntf::clear_has_grade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void update_role_info_ntf::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 update_role_info_ntf::grade() const {
  return grade_;
}
inline void update_role_info_ntf::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 tender = 13;
inline bool update_role_info_ntf::has_tender() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void update_role_info_ntf::set_has_tender() {
  _has_bits_[0] |= 0x00001000u;
}
inline void update_role_info_ntf::clear_has_tender() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void update_role_info_ntf::clear_tender() {
  tender_ = 0;
  clear_has_tender();
}
inline ::google::protobuf::int32 update_role_info_ntf::tender() const {
  return tender_;
}
inline void update_role_info_ntf::set_tender(::google::protobuf::int32 value) {
  set_has_tender();
  tender_ = value;
}

// optional int32 treason = 14;
inline bool update_role_info_ntf::has_treason() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void update_role_info_ntf::set_has_treason() {
  _has_bits_[0] |= 0x00002000u;
}
inline void update_role_info_ntf::clear_has_treason() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void update_role_info_ntf::clear_treason() {
  treason_ = 0;
  clear_has_treason();
}
inline ::google::protobuf::int32 update_role_info_ntf::treason() const {
  return treason_;
}
inline void update_role_info_ntf::set_treason(::google::protobuf::int32 value) {
  set_has_treason();
  treason_ = value;
}

// optional int32 wise = 15;
inline bool update_role_info_ntf::has_wise() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void update_role_info_ntf::set_has_wise() {
  _has_bits_[0] |= 0x00004000u;
}
inline void update_role_info_ntf::clear_has_wise() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void update_role_info_ntf::clear_wise() {
  wise_ = 0;
  clear_has_wise();
}
inline ::google::protobuf::int32 update_role_info_ntf::wise() const {
  return wise_;
}
inline void update_role_info_ntf::set_wise(::google::protobuf::int32 value) {
  set_has_wise();
  wise_ = value;
}

// optional int32 adorkable = 16;
inline bool update_role_info_ntf::has_adorkable() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void update_role_info_ntf::set_has_adorkable() {
  _has_bits_[0] |= 0x00008000u;
}
inline void update_role_info_ntf::clear_has_adorkable() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void update_role_info_ntf::clear_adorkable() {
  adorkable_ = 0;
  clear_has_adorkable();
}
inline ::google::protobuf::int32 update_role_info_ntf::adorkable() const {
  return adorkable_;
}
inline void update_role_info_ntf::set_adorkable(::google::protobuf::int32 value) {
  set_has_adorkable();
  adorkable_ = value;
}

// optional int32 good = 17;
inline bool update_role_info_ntf::has_good() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void update_role_info_ntf::set_has_good() {
  _has_bits_[0] |= 0x00010000u;
}
inline void update_role_info_ntf::clear_has_good() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void update_role_info_ntf::clear_good() {
  good_ = 0;
  clear_has_good();
}
inline ::google::protobuf::int32 update_role_info_ntf::good() const {
  return good_;
}
inline void update_role_info_ntf::set_good(::google::protobuf::int32 value) {
  set_has_good();
  good_ = value;
}

// optional int32 scheming = 18;
inline bool update_role_info_ntf::has_scheming() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void update_role_info_ntf::set_has_scheming() {
  _has_bits_[0] |= 0x00020000u;
}
inline void update_role_info_ntf::clear_has_scheming() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void update_role_info_ntf::clear_scheming() {
  scheming_ = 0;
  clear_has_scheming();
}
inline ::google::protobuf::int32 update_role_info_ntf::scheming() const {
  return scheming_;
}
inline void update_role_info_ntf::set_scheming(::google::protobuf::int32 value) {
  set_has_scheming();
  scheming_ = value;
}

// optional uint32 bag_capacity = 19;
inline bool update_role_info_ntf::has_bag_capacity() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void update_role_info_ntf::set_has_bag_capacity() {
  _has_bits_[0] |= 0x00040000u;
}
inline void update_role_info_ntf::clear_has_bag_capacity() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void update_role_info_ntf::clear_bag_capacity() {
  bag_capacity_ = 0u;
  clear_has_bag_capacity();
}
inline ::google::protobuf::uint32 update_role_info_ntf::bag_capacity() const {
  return bag_capacity_;
}
inline void update_role_info_ntf::set_bag_capacity(::google::protobuf::uint32 value) {
  set_has_bag_capacity();
  bag_capacity_ = value;
}

// optional int32 task_activity = 20;
inline bool update_role_info_ntf::has_task_activity() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void update_role_info_ntf::set_has_task_activity() {
  _has_bits_[0] |= 0x00080000u;
}
inline void update_role_info_ntf::clear_has_task_activity() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void update_role_info_ntf::clear_task_activity() {
  task_activity_ = 0;
  clear_has_task_activity();
}
inline ::google::protobuf::int32 update_role_info_ntf::task_activity() const {
  return task_activity_;
}
inline void update_role_info_ntf::set_task_activity(::google::protobuf::int32 value) {
  set_has_task_activity();
  task_activity_ = value;
}

// optional bool offical_salary = 21;
inline bool update_role_info_ntf::has_offical_salary() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void update_role_info_ntf::set_has_offical_salary() {
  _has_bits_[0] |= 0x00100000u;
}
inline void update_role_info_ntf::clear_has_offical_salary() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void update_role_info_ntf::clear_offical_salary() {
  offical_salary_ = false;
  clear_has_offical_salary();
}
inline bool update_role_info_ntf::offical_salary() const {
  return offical_salary_;
}
inline void update_role_info_ntf::set_offical_salary(bool value) {
  set_has_offical_salary();
  offical_salary_ = value;
}

// optional int32 skill_point = 22;
inline bool update_role_info_ntf::has_skill_point() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void update_role_info_ntf::set_has_skill_point() {
  _has_bits_[0] |= 0x00200000u;
}
inline void update_role_info_ntf::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void update_role_info_ntf::clear_skill_point() {
  skill_point_ = 0;
  clear_has_skill_point();
}
inline ::google::protobuf::int32 update_role_info_ntf::skill_point() const {
  return skill_point_;
}
inline void update_role_info_ntf::set_skill_point(::google::protobuf::int32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// optional int32 talent_point = 23;
inline bool update_role_info_ntf::has_talent_point() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void update_role_info_ntf::set_has_talent_point() {
  _has_bits_[0] |= 0x00400000u;
}
inline void update_role_info_ntf::clear_has_talent_point() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void update_role_info_ntf::clear_talent_point() {
  talent_point_ = 0;
  clear_has_talent_point();
}
inline ::google::protobuf::int32 update_role_info_ntf::talent_point() const {
  return talent_point_;
}
inline void update_role_info_ntf::set_talent_point(::google::protobuf::int32 value) {
  set_has_talent_point();
  talent_point_ = value;
}

// -------------------------------------------------------------------

// role_common_base_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_common_base_ntf_id];
inline bool role_common_base_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_common_base_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_common_base_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_common_base_ntf::clear_protoid() {
  protoid_ = 5103;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_common_base_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_common_base_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 lv = 2;
inline bool role_common_base_ntf::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_common_base_ntf::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_common_base_ntf::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_common_base_ntf::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 role_common_base_ntf::lv() const {
  return lv_;
}
inline void role_common_base_ntf::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 exp = 3;
inline bool role_common_base_ntf::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_common_base_ntf::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_common_base_ntf::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_common_base_ntf::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 role_common_base_ntf::exp() const {
  return exp_;
}
inline void role_common_base_ntf::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 gold = 4;
inline bool role_common_base_ntf::has_gold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_common_base_ntf::set_has_gold() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_common_base_ntf::clear_has_gold() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_common_base_ntf::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 role_common_base_ntf::gold() const {
  return gold_;
}
inline void role_common_base_ntf::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 jade = 5;
inline bool role_common_base_ntf::has_jade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_common_base_ntf::set_has_jade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_common_base_ntf::clear_has_jade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_common_base_ntf::clear_jade() {
  jade_ = 0;
  clear_has_jade();
}
inline ::google::protobuf::int32 role_common_base_ntf::jade() const {
  return jade_;
}
inline void role_common_base_ntf::set_jade(::google::protobuf::int32 value) {
  set_has_jade();
  jade_ = value;
}

// optional int32 power = 6;
inline bool role_common_base_ntf::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_common_base_ntf::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_common_base_ntf::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_common_base_ntf::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 role_common_base_ntf::power() const {
  return power_;
}
inline void role_common_base_ntf::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 merit = 7;
inline bool role_common_base_ntf::has_merit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_common_base_ntf::set_has_merit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_common_base_ntf::clear_has_merit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_common_base_ntf::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 role_common_base_ntf::merit() const {
  return merit_;
}
inline void role_common_base_ntf::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// optional int32 task_activity = 8;
inline bool role_common_base_ntf::has_task_activity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_common_base_ntf::set_has_task_activity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_common_base_ntf::clear_has_task_activity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_common_base_ntf::clear_task_activity() {
  task_activity_ = 0;
  clear_has_task_activity();
}
inline ::google::protobuf::int32 role_common_base_ntf::task_activity() const {
  return task_activity_;
}
inline void role_common_base_ntf::set_task_activity(::google::protobuf::int32 value) {
  set_has_task_activity();
  task_activity_ = value;
}

// optional int32 skill_point = 9;
inline bool role_common_base_ntf::has_skill_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_common_base_ntf::set_has_skill_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_common_base_ntf::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_common_base_ntf::clear_skill_point() {
  skill_point_ = 0;
  clear_has_skill_point();
}
inline ::google::protobuf::int32 role_common_base_ntf::skill_point() const {
  return skill_point_;
}
inline void role_common_base_ntf::set_skill_point(::google::protobuf::int32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// optional uint32 wine = 10;
inline bool role_common_base_ntf::has_wine() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_common_base_ntf::set_has_wine() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_common_base_ntf::clear_has_wine() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_common_base_ntf::clear_wine() {
  wine_ = 0u;
  clear_has_wine();
}
inline ::google::protobuf::uint32 role_common_base_ntf::wine() const {
  return wine_;
}
inline void role_common_base_ntf::set_wine(::google::protobuf::uint32 value) {
  set_has_wine();
  wine_ = value;
}

// optional uint32 wine_cup = 11;
inline bool role_common_base_ntf::has_wine_cup() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void role_common_base_ntf::set_has_wine_cup() {
  _has_bits_[0] |= 0x00000400u;
}
inline void role_common_base_ntf::clear_has_wine_cup() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void role_common_base_ntf::clear_wine_cup() {
  wine_cup_ = 0u;
  clear_has_wine_cup();
}
inline ::google::protobuf::uint32 role_common_base_ntf::wine_cup() const {
  return wine_cup_;
}
inline void role_common_base_ntf::set_wine_cup(::google::protobuf::uint32 value) {
  set_has_wine_cup();
  wine_cup_ = value;
}

// optional int32 adv_energy = 12;
inline bool role_common_base_ntf::has_adv_energy() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void role_common_base_ntf::set_has_adv_energy() {
  _has_bits_[0] |= 0x00000800u;
}
inline void role_common_base_ntf::clear_has_adv_energy() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void role_common_base_ntf::clear_adv_energy() {
  adv_energy_ = 0;
  clear_has_adv_energy();
}
inline ::google::protobuf::int32 role_common_base_ntf::adv_energy() const {
  return adv_energy_;
}
inline void role_common_base_ntf::set_adv_energy(::google::protobuf::int32 value) {
  set_has_adv_energy();
  adv_energy_ = value;
}

// optional int32 adv_times = 13;
inline bool role_common_base_ntf::has_adv_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void role_common_base_ntf::set_has_adv_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void role_common_base_ntf::clear_has_adv_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void role_common_base_ntf::clear_adv_times() {
  adv_times_ = 0;
  clear_has_adv_times();
}
inline ::google::protobuf::int32 role_common_base_ntf::adv_times() const {
  return adv_times_;
}
inline void role_common_base_ntf::set_adv_times(::google::protobuf::int32 value) {
  set_has_adv_times();
  adv_times_ = value;
}

// optional int32 talent_point = 14;
inline bool role_common_base_ntf::has_talent_point() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void role_common_base_ntf::set_has_talent_point() {
  _has_bits_[0] |= 0x00002000u;
}
inline void role_common_base_ntf::clear_has_talent_point() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void role_common_base_ntf::clear_talent_point() {
  talent_point_ = 0;
  clear_has_talent_point();
}
inline ::google::protobuf::int32 role_common_base_ntf::talent_point() const {
  return talent_point_;
}
inline void role_common_base_ntf::set_talent_point(::google::protobuf::int32 value) {
  set_has_talent_point();
  talent_point_ = value;
}

// -------------------------------------------------------------------

// soul_update_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_update_ntf_id];
inline bool soul_update_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_update_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_update_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_update_ntf::clear_protoid() {
  protoid_ = 5306;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_update_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_update_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.soul_info add_soul_s = 2;
inline int soul_update_ntf::add_soul_s_size() const {
  return add_soul_s_.size();
}
inline void soul_update_ntf::clear_add_soul_s() {
  add_soul_s_.Clear();
}
inline const ::SProtoSpace::soul_info& soul_update_ntf::add_soul_s(int index) const {
  return add_soul_s_.Get(index);
}
inline ::SProtoSpace::soul_info* soul_update_ntf::mutable_add_soul_s(int index) {
  return add_soul_s_.Mutable(index);
}
inline ::SProtoSpace::soul_info* soul_update_ntf::add_add_soul_s() {
  return add_soul_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
soul_update_ntf::add_soul_s() const {
  return add_soul_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
soul_update_ntf::mutable_add_soul_s() {
  return &add_soul_s_;
}

// repeated .SProtoSpace.soul_info del_soul_s = 3;
inline int soul_update_ntf::del_soul_s_size() const {
  return del_soul_s_.size();
}
inline void soul_update_ntf::clear_del_soul_s() {
  del_soul_s_.Clear();
}
inline const ::SProtoSpace::soul_info& soul_update_ntf::del_soul_s(int index) const {
  return del_soul_s_.Get(index);
}
inline ::SProtoSpace::soul_info* soul_update_ntf::mutable_del_soul_s(int index) {
  return del_soul_s_.Mutable(index);
}
inline ::SProtoSpace::soul_info* soul_update_ntf::add_del_soul_s() {
  return del_soul_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
soul_update_ntf::del_soul_s() const {
  return del_soul_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
soul_update_ntf::mutable_del_soul_s() {
  return &del_soul_s_;
}

// repeated .SProtoSpace.soul_info fix_soul_s = 4;
inline int soul_update_ntf::fix_soul_s_size() const {
  return fix_soul_s_.size();
}
inline void soul_update_ntf::clear_fix_soul_s() {
  fix_soul_s_.Clear();
}
inline const ::SProtoSpace::soul_info& soul_update_ntf::fix_soul_s(int index) const {
  return fix_soul_s_.Get(index);
}
inline ::SProtoSpace::soul_info* soul_update_ntf::mutable_fix_soul_s(int index) {
  return fix_soul_s_.Mutable(index);
}
inline ::SProtoSpace::soul_info* soul_update_ntf::add_fix_soul_s() {
  return fix_soul_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >&
soul_update_ntf::fix_soul_s() const {
  return fix_soul_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::soul_info >*
soul_update_ntf::mutable_fix_soul_s() {
  return &fix_soul_s_;
}

// -------------------------------------------------------------------

// soul_raise_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_req_id];
inline bool soul_raise_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_raise_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_raise_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_raise_req::clear_protoid() {
  protoid_ = 5300;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_raise_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_raise_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_raise_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_raise_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_raise_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_raise_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_raise_req::id() const {
  return id_;
}
inline void soul_raise_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated uint64 consume_id = 3;
inline int soul_raise_req::consume_id_size() const {
  return consume_id_.size();
}
inline void soul_raise_req::clear_consume_id() {
  consume_id_.Clear();
}
inline ::google::protobuf::uint64 soul_raise_req::consume_id(int index) const {
  return consume_id_.Get(index);
}
inline void soul_raise_req::set_consume_id(int index, ::google::protobuf::uint64 value) {
  consume_id_.Set(index, value);
}
inline void soul_raise_req::add_consume_id(::google::protobuf::uint64 value) {
  consume_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
soul_raise_req::consume_id() const {
  return consume_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
soul_raise_req::mutable_consume_id() {
  return &consume_id_;
}

// -------------------------------------------------------------------

// soul_raise_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_raise_ack_id];
inline bool soul_raise_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_raise_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_raise_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_raise_ack::clear_protoid() {
  protoid_ = 5301;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_raise_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_raise_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_raise_ack::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_raise_ack::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_raise_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_raise_ack::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_raise_ack::id() const {
  return id_;
}
inline void soul_raise_ack::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ret = 3 [default = 0];
inline bool soul_raise_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_raise_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_raise_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_raise_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 soul_raise_ack::ret() const {
  return ret_;
}
inline void soul_raise_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// soul_bind_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_req_id];
inline bool soul_bind_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_bind_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_bind_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_bind_req::clear_protoid() {
  protoid_ = 5302;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_bind_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_bind_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_bind_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_bind_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_bind_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_bind_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_bind_req::id() const {
  return id_;
}
inline void soul_bind_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 hero_uid = 3;
inline bool soul_bind_req::has_hero_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_bind_req::set_has_hero_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_bind_req::clear_has_hero_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_bind_req::clear_hero_uid() {
  hero_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uid();
}
inline ::google::protobuf::uint64 soul_bind_req::hero_uid() const {
  return hero_uid_;
}
inline void soul_bind_req::set_hero_uid(::google::protobuf::uint64 value) {
  set_has_hero_uid();
  hero_uid_ = value;
}

// -------------------------------------------------------------------

// soul_bind_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_bind_ack_id];
inline bool soul_bind_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_bind_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_bind_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_bind_ack::clear_protoid() {
  protoid_ = 5303;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_bind_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_bind_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_bind_ack::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_bind_ack::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_bind_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_bind_ack::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_bind_ack::id() const {
  return id_;
}
inline void soul_bind_ack::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 hero_uid = 3;
inline bool soul_bind_ack::has_hero_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_bind_ack::set_has_hero_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_bind_ack::clear_has_hero_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_bind_ack::clear_hero_uid() {
  hero_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uid();
}
inline ::google::protobuf::uint64 soul_bind_ack::hero_uid() const {
  return hero_uid_;
}
inline void soul_bind_ack::set_hero_uid(::google::protobuf::uint64 value) {
  set_has_hero_uid();
  hero_uid_ = value;
}

// optional int32 ret = 4 [default = 0];
inline bool soul_bind_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void soul_bind_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void soul_bind_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void soul_bind_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 soul_bind_ack::ret() const {
  return ret_;
}
inline void soul_bind_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// soul_unbind_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_req_id];
inline bool soul_unbind_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_unbind_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_unbind_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_unbind_req::clear_protoid() {
  protoid_ = 5304;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_unbind_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_unbind_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_unbind_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_unbind_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_unbind_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_unbind_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_unbind_req::id() const {
  return id_;
}
inline void soul_unbind_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 hero_uid = 3;
inline bool soul_unbind_req::has_hero_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_unbind_req::set_has_hero_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_unbind_req::clear_has_hero_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_unbind_req::clear_hero_uid() {
  hero_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uid();
}
inline ::google::protobuf::uint64 soul_unbind_req::hero_uid() const {
  return hero_uid_;
}
inline void soul_unbind_req::set_hero_uid(::google::protobuf::uint64 value) {
  set_has_hero_uid();
  hero_uid_ = value;
}

// -------------------------------------------------------------------

// soul_unbind_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unbind_ack_id];
inline bool soul_unbind_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_unbind_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_unbind_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_unbind_ack::clear_protoid() {
  protoid_ = 5305;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_unbind_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_unbind_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_unbind_ack::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_unbind_ack::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_unbind_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_unbind_ack::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_unbind_ack::id() const {
  return id_;
}
inline void soul_unbind_ack::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ret = 3 [default = 0];
inline bool soul_unbind_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_unbind_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_unbind_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_unbind_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 soul_unbind_ack::ret() const {
  return ret_;
}
inline void soul_unbind_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// soul_lock_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_req_id];
inline bool soul_lock_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_lock_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_lock_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_lock_req::clear_protoid() {
  protoid_ = 5307;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_lock_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_lock_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_lock_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_lock_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_lock_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_lock_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_lock_req::id() const {
  return id_;
}
inline void soul_lock_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// soul_lock_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_lock_ack_id];
inline bool soul_lock_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_lock_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_lock_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_lock_ack::clear_protoid() {
  protoid_ = 5308;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_lock_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_lock_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_lock_ack::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_lock_ack::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_lock_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_lock_ack::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_lock_ack::id() const {
  return id_;
}
inline void soul_lock_ack::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ret = 3 [default = 0];
inline bool soul_lock_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_lock_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_lock_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_lock_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 soul_lock_ack::ret() const {
  return ret_;
}
inline void soul_lock_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// soul_unlock_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_req_id];
inline bool soul_unlock_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_unlock_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_unlock_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_unlock_req::clear_protoid() {
  protoid_ = 5309;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_unlock_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_unlock_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_unlock_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_unlock_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_unlock_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_unlock_req::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_unlock_req::id() const {
  return id_;
}
inline void soul_unlock_req::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// soul_unlock_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_unlock_ack_id];
inline bool soul_unlock_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_unlock_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_unlock_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_unlock_ack::clear_protoid() {
  protoid_ = 5310;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_unlock_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_unlock_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 id = 2;
inline bool soul_unlock_ack::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_unlock_ack::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_unlock_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_unlock_ack::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 soul_unlock_ack::id() const {
  return id_;
}
inline void soul_unlock_ack::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ret = 3 [default = 0];
inline bool soul_unlock_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void soul_unlock_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void soul_unlock_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void soul_unlock_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 soul_unlock_ack::ret() const {
  return ret_;
}
inline void soul_unlock_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// soul_sell_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_req_id];
inline bool soul_sell_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_sell_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_sell_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_sell_req::clear_protoid() {
  protoid_ = 5311;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_sell_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_sell_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 soul_ids = 2;
inline int soul_sell_req::soul_ids_size() const {
  return soul_ids_.size();
}
inline void soul_sell_req::clear_soul_ids() {
  soul_ids_.Clear();
}
inline ::google::protobuf::uint64 soul_sell_req::soul_ids(int index) const {
  return soul_ids_.Get(index);
}
inline void soul_sell_req::set_soul_ids(int index, ::google::protobuf::uint64 value) {
  soul_ids_.Set(index, value);
}
inline void soul_sell_req::add_soul_ids(::google::protobuf::uint64 value) {
  soul_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
soul_sell_req::soul_ids() const {
  return soul_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
soul_sell_req::mutable_soul_ids() {
  return &soul_ids_;
}

// -------------------------------------------------------------------

// soul_sell_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = soul_sell_ack_id];
inline bool soul_sell_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void soul_sell_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void soul_sell_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void soul_sell_ack::clear_protoid() {
  protoid_ = 5312;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID soul_sell_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void soul_sell_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool soul_sell_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void soul_sell_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void soul_sell_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void soul_sell_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 soul_sell_ack::ret() const {
  return ret_;
}
inline void soul_sell_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// item_packet_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_req_id];
inline bool item_packet_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_packet_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_packet_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_packet_req::clear_protoid() {
  protoid_ = 5110;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_packet_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_packet_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 playerid = 2;
inline bool item_packet_req::has_playerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_packet_req::set_has_playerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_packet_req::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_packet_req::clear_playerid() {
  playerid_ = GOOGLE_ULONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::uint64 item_packet_req::playerid() const {
  return playerid_;
}
inline void item_packet_req::set_playerid(::google::protobuf::uint64 value) {
  set_has_playerid();
  playerid_ = value;
}

// -------------------------------------------------------------------

// item_packet_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_packet_ack_id];
inline bool item_packet_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_packet_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_packet_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_packet_ack::clear_protoid() {
  protoid_ = 5111;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_packet_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_packet_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional bool all = 2;
inline bool item_packet_ack::has_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_packet_ack::set_has_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_packet_ack::clear_has_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_packet_ack::clear_all() {
  all_ = false;
  clear_has_all();
}
inline bool item_packet_ack::all() const {
  return all_;
}
inline void item_packet_ack::set_all(bool value) {
  set_has_all();
  all_ = value;
}

// repeated .SProtoSpace.unit_item_data fix_items = 3;
inline int item_packet_ack::fix_items_size() const {
  return fix_items_.size();
}
inline void item_packet_ack::clear_fix_items() {
  fix_items_.Clear();
}
inline const ::SProtoSpace::unit_item_data& item_packet_ack::fix_items(int index) const {
  return fix_items_.Get(index);
}
inline ::SProtoSpace::unit_item_data* item_packet_ack::mutable_fix_items(int index) {
  return fix_items_.Mutable(index);
}
inline ::SProtoSpace::unit_item_data* item_packet_ack::add_fix_items() {
  return fix_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >&
item_packet_ack::fix_items() const {
  return fix_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::unit_item_data >*
item_packet_ack::mutable_fix_items() {
  return &fix_items_;
}

// repeated uint64 del_items = 4;
inline int item_packet_ack::del_items_size() const {
  return del_items_.size();
}
inline void item_packet_ack::clear_del_items() {
  del_items_.Clear();
}
inline ::google::protobuf::uint64 item_packet_ack::del_items(int index) const {
  return del_items_.Get(index);
}
inline void item_packet_ack::set_del_items(int index, ::google::protobuf::uint64 value) {
  del_items_.Set(index, value);
}
inline void item_packet_ack::add_del_items(::google::protobuf::uint64 value) {
  del_items_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
item_packet_ack::del_items() const {
  return del_items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
item_packet_ack::mutable_del_items() {
  return &del_items_;
}

// optional .SProtoSpace.MsgErrorType error_code = 5;
inline bool item_packet_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void item_packet_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000010u;
}
inline void item_packet_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void item_packet_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType item_packet_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void item_packet_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// item_use_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_req_id];
inline bool item_use_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_use_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_use_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_use_req::clear_protoid() {
  protoid_ = 5112;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_use_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_use_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 uid = 2;
inline bool item_use_req::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_use_req::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_use_req::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_use_req::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 item_use_req::uid() const {
  return uid_;
}
inline void item_use_req::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 count = 3;
inline bool item_use_req::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_use_req::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_use_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_use_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 item_use_req::count() const {
  return count_;
}
inline void item_use_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 index = 4;
inline bool item_use_req::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void item_use_req::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void item_use_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void item_use_req::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 item_use_req::index() const {
  return index_;
}
inline void item_use_req::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// item_use_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_use_ack_id];
inline bool item_use_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_use_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_use_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_use_ack::clear_protoid() {
  protoid_ = 5113;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_use_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_use_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool item_use_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_use_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_use_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_use_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 item_use_ack::result() const {
  return result_;
}
inline void item_use_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.reward_item items = 3;
inline int item_use_ack::items_size() const {
  return items_.size();
}
inline void item_use_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::reward_item& item_use_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::reward_item* item_use_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::reward_item* item_use_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
item_use_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
item_use_ack::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// item_sold_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_req_id];
inline bool item_sold_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_sold_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_sold_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_sold_req::clear_protoid() {
  protoid_ = 5114;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_sold_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_sold_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional bool is_batch = 2;
inline bool item_sold_req::has_is_batch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_sold_req::set_has_is_batch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_sold_req::clear_has_is_batch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_sold_req::clear_is_batch() {
  is_batch_ = false;
  clear_has_is_batch();
}
inline bool item_sold_req::is_batch() const {
  return is_batch_;
}
inline void item_sold_req::set_is_batch(bool value) {
  set_has_is_batch();
  is_batch_ = value;
}

// repeated uint64 item_uid_list = 3;
inline int item_sold_req::item_uid_list_size() const {
  return item_uid_list_.size();
}
inline void item_sold_req::clear_item_uid_list() {
  item_uid_list_.Clear();
}
inline ::google::protobuf::uint64 item_sold_req::item_uid_list(int index) const {
  return item_uid_list_.Get(index);
}
inline void item_sold_req::set_item_uid_list(int index, ::google::protobuf::uint64 value) {
  item_uid_list_.Set(index, value);
}
inline void item_sold_req::add_item_uid_list(::google::protobuf::uint64 value) {
  item_uid_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
item_sold_req::item_uid_list() const {
  return item_uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
item_sold_req::mutable_item_uid_list() {
  return &item_uid_list_;
}

// optional uint64 item_uid = 4;
inline bool item_sold_req::has_item_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void item_sold_req::set_has_item_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void item_sold_req::clear_has_item_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void item_sold_req::clear_item_uid() {
  item_uid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_uid();
}
inline ::google::protobuf::uint64 item_sold_req::item_uid() const {
  return item_uid_;
}
inline void item_sold_req::set_item_uid(::google::protobuf::uint64 value) {
  set_has_item_uid();
  item_uid_ = value;
}

// optional uint32 item_count = 5;
inline bool item_sold_req::has_item_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void item_sold_req::set_has_item_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void item_sold_req::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void item_sold_req::clear_item_count() {
  item_count_ = 0u;
  clear_has_item_count();
}
inline ::google::protobuf::uint32 item_sold_req::item_count() const {
  return item_count_;
}
inline void item_sold_req::set_item_count(::google::protobuf::uint32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// item_sold_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_sold_ack_id];
inline bool item_sold_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_sold_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_sold_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_sold_ack::clear_protoid() {
  protoid_ = 5115;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_sold_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_sold_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.MsgErrorType error_code = 2;
inline bool item_sold_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_sold_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_sold_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_sold_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType item_sold_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void item_sold_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// bag_expand_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_req_id];
inline bool bag_expand_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bag_expand_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bag_expand_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bag_expand_req::clear_protoid() {
  protoid_ = 5116;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID bag_expand_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void bag_expand_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 add_size = 2;
inline bool bag_expand_req::has_add_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bag_expand_req::set_has_add_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bag_expand_req::clear_has_add_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bag_expand_req::clear_add_size() {
  add_size_ = 0u;
  clear_has_add_size();
}
inline ::google::protobuf::uint32 bag_expand_req::add_size() const {
  return add_size_;
}
inline void bag_expand_req::set_add_size(::google::protobuf::uint32 value) {
  set_has_add_size();
  add_size_ = value;
}

// -------------------------------------------------------------------

// bag_expand_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_expand_ack_id];
inline bool bag_expand_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bag_expand_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bag_expand_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bag_expand_ack::clear_protoid() {
  protoid_ = 5117;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID bag_expand_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void bag_expand_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.MsgErrorType error_code = 2;
inline bool bag_expand_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bag_expand_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bag_expand_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bag_expand_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType bag_expand_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void bag_expand_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// bag_capacity_not_enough_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = bag_capacity_not_enough_ntf_id];
inline bool bag_capacity_not_enough_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bag_capacity_not_enough_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bag_capacity_not_enough_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bag_capacity_not_enough_ntf::clear_protoid() {
  protoid_ = 5118;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID bag_capacity_not_enough_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void bag_capacity_not_enough_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// hero_list_data_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_list_data_ntf_id];
inline bool hero_list_data_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_list_data_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_list_data_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_list_data_ntf::clear_protoid() {
  protoid_ = 5400;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_list_data_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_list_data_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.hero_show_data heroes = 2;
inline int hero_list_data_ntf::heroes_size() const {
  return heroes_.size();
}
inline void hero_list_data_ntf::clear_heroes() {
  heroes_.Clear();
}
inline const ::SProtoSpace::hero_show_data& hero_list_data_ntf::heroes(int index) const {
  return heroes_.Get(index);
}
inline ::SProtoSpace::hero_show_data* hero_list_data_ntf::mutable_heroes(int index) {
  return heroes_.Mutable(index);
}
inline ::SProtoSpace::hero_show_data* hero_list_data_ntf::add_heroes() {
  return heroes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >&
hero_list_data_ntf::heroes() const {
  return heroes_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >*
hero_list_data_ntf::mutable_heroes() {
  return &heroes_;
}

// -------------------------------------------------------------------

// add_hero_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = add_hero_ntf_id];
inline bool add_hero_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void add_hero_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void add_hero_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void add_hero_ntf::clear_protoid() {
  protoid_ = 5401;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID add_hero_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void add_hero_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.hero_show_data heroes = 2;
inline int add_hero_ntf::heroes_size() const {
  return heroes_.size();
}
inline void add_hero_ntf::clear_heroes() {
  heroes_.Clear();
}
inline const ::SProtoSpace::hero_show_data& add_hero_ntf::heroes(int index) const {
  return heroes_.Get(index);
}
inline ::SProtoSpace::hero_show_data* add_hero_ntf::mutable_heroes(int index) {
  return heroes_.Mutable(index);
}
inline ::SProtoSpace::hero_show_data* add_hero_ntf::add_heroes() {
  return heroes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >&
add_hero_ntf::heroes() const {
  return heroes_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_show_data >*
add_hero_ntf::mutable_heroes() {
  return &heroes_;
}

// -------------------------------------------------------------------

// remove_hero_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = remove_hero_ntf_id];
inline bool remove_hero_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void remove_hero_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void remove_hero_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void remove_hero_ntf::clear_protoid() {
  protoid_ = 5402;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID remove_hero_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void remove_hero_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 ids = 2;
inline int remove_hero_ntf::ids_size() const {
  return ids_.size();
}
inline void remove_hero_ntf::clear_ids() {
  ids_.Clear();
}
inline ::google::protobuf::uint64 remove_hero_ntf::ids(int index) const {
  return ids_.Get(index);
}
inline void remove_hero_ntf::set_ids(int index, ::google::protobuf::uint64 value) {
  ids_.Set(index, value);
}
inline void remove_hero_ntf::add_ids(::google::protobuf::uint64 value) {
  ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
remove_hero_ntf::ids() const {
  return ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
remove_hero_ntf::mutable_ids() {
  return &ids_;
}

// -------------------------------------------------------------------

// hero_info_change_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_info_change_ntf_id];
inline bool hero_info_change_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_info_change_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_info_change_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_info_change_ntf::clear_protoid() {
  protoid_ = 5407;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_info_change_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_info_change_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required .SProtoSpace.EHeroInfoChangeTag tag = 2;
inline bool hero_info_change_ntf::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_info_change_ntf::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_info_change_ntf::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_info_change_ntf::clear_tag() {
  tag_ = 1;
  clear_has_tag();
}
inline ::SProtoSpace::EHeroInfoChangeTag hero_info_change_ntf::tag() const {
  return static_cast< ::SProtoSpace::EHeroInfoChangeTag >(tag_);
}
inline void hero_info_change_ntf::set_tag(::SProtoSpace::EHeroInfoChangeTag value) {
  assert(::SProtoSpace::EHeroInfoChangeTag_IsValid(value));
  set_has_tag();
  tag_ = value;
}

// required uint64 hero_id = 3;
inline bool hero_info_change_ntf::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_info_change_ntf::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_info_change_ntf::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_info_change_ntf::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_info_change_ntf::hero_id() const {
  return hero_id_;
}
inline void hero_info_change_ntf::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 level = 4;
inline bool hero_info_change_ntf::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_info_change_ntf::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_info_change_ntf::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_info_change_ntf::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 hero_info_change_ntf::level() const {
  return level_;
}
inline void hero_info_change_ntf::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 star = 5;
inline bool hero_info_change_ntf::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_info_change_ntf::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_info_change_ntf::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_info_change_ntf::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 hero_info_change_ntf::star() const {
  return star_;
}
inline void hero_info_change_ntf::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 exp = 6;
inline bool hero_info_change_ntf::has_exp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_info_change_ntf::set_has_exp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_info_change_ntf::clear_has_exp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_info_change_ntf::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 hero_info_change_ntf::exp() const {
  return exp_;
}
inline void hero_info_change_ntf::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated .SProtoSpace.client_skill_data skill = 7;
inline int hero_info_change_ntf::skill_size() const {
  return skill_.size();
}
inline void hero_info_change_ntf::clear_skill() {
  skill_.Clear();
}
inline const ::SProtoSpace::client_skill_data& hero_info_change_ntf::skill(int index) const {
  return skill_.Get(index);
}
inline ::SProtoSpace::client_skill_data* hero_info_change_ntf::mutable_skill(int index) {
  return skill_.Mutable(index);
}
inline ::SProtoSpace::client_skill_data* hero_info_change_ntf::add_skill() {
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >&
hero_info_change_ntf::skill() const {
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_skill_data >*
hero_info_change_ntf::mutable_skill() {
  return &skill_;
}

// repeated .SProtoSpace.client_soul_data soul = 8;
inline int hero_info_change_ntf::soul_size() const {
  return soul_.size();
}
inline void hero_info_change_ntf::clear_soul() {
  soul_.Clear();
}
inline const ::SProtoSpace::client_soul_data& hero_info_change_ntf::soul(int index) const {
  return soul_.Get(index);
}
inline ::SProtoSpace::client_soul_data* hero_info_change_ntf::mutable_soul(int index) {
  return soul_.Mutable(index);
}
inline ::SProtoSpace::client_soul_data* hero_info_change_ntf::add_soul() {
  return soul_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >&
hero_info_change_ntf::soul() const {
  return soul_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_soul_data >*
hero_info_change_ntf::mutable_soul() {
  return &soul_;
}

// optional bool awaken = 9;
inline bool hero_info_change_ntf::has_awaken() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void hero_info_change_ntf::set_has_awaken() {
  _has_bits_[0] |= 0x00000100u;
}
inline void hero_info_change_ntf::clear_has_awaken() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void hero_info_change_ntf::clear_awaken() {
  awaken_ = false;
  clear_has_awaken();
}
inline bool hero_info_change_ntf::awaken() const {
  return awaken_;
}
inline void hero_info_change_ntf::set_awaken(bool value) {
  set_has_awaken();
  awaken_ = value;
}

// repeated .SProtoSpace.hero_attr_value awaken_attr = 10;
inline int hero_info_change_ntf::awaken_attr_size() const {
  return awaken_attr_.size();
}
inline void hero_info_change_ntf::clear_awaken_attr() {
  awaken_attr_.Clear();
}
inline const ::SProtoSpace::hero_attr_value& hero_info_change_ntf::awaken_attr(int index) const {
  return awaken_attr_.Get(index);
}
inline ::SProtoSpace::hero_attr_value* hero_info_change_ntf::mutable_awaken_attr(int index) {
  return awaken_attr_.Mutable(index);
}
inline ::SProtoSpace::hero_attr_value* hero_info_change_ntf::add_awaken_attr() {
  return awaken_attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >&
hero_info_change_ntf::awaken_attr() const {
  return awaken_attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_attr_value >*
hero_info_change_ntf::mutable_awaken_attr() {
  return &awaken_attr_;
}

// optional .SProtoSpace.skin_data skin_info = 11;
inline bool hero_info_change_ntf::has_skin_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void hero_info_change_ntf::set_has_skin_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void hero_info_change_ntf::clear_has_skin_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void hero_info_change_ntf::clear_skin_info() {
  if (skin_info_ != NULL) skin_info_->::SProtoSpace::skin_data::Clear();
  clear_has_skin_info();
}
inline const ::SProtoSpace::skin_data& hero_info_change_ntf::skin_info() const {
  return skin_info_ != NULL ? *skin_info_ : *default_instance_->skin_info_;
}
inline ::SProtoSpace::skin_data* hero_info_change_ntf::mutable_skin_info() {
  set_has_skin_info();
  if (skin_info_ == NULL) skin_info_ = new ::SProtoSpace::skin_data;
  return skin_info_;
}
inline ::SProtoSpace::skin_data* hero_info_change_ntf::release_skin_info() {
  clear_has_skin_info();
  ::SProtoSpace::skin_data* temp = skin_info_;
  skin_info_ = NULL;
  return temp;
}
inline void hero_info_change_ntf::set_allocated_skin_info(::SProtoSpace::skin_data* skin_info) {
  delete skin_info_;
  skin_info_ = skin_info;
  if (skin_info) {
    set_has_skin_info();
  } else {
    clear_has_skin_info();
  }
}

// optional int64 fight_power = 12;
inline bool hero_info_change_ntf::has_fight_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void hero_info_change_ntf::set_has_fight_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void hero_info_change_ntf::clear_has_fight_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void hero_info_change_ntf::clear_fight_power() {
  fight_power_ = GOOGLE_LONGLONG(0);
  clear_has_fight_power();
}
inline ::google::protobuf::int64 hero_info_change_ntf::fight_power() const {
  return fight_power_;
}
inline void hero_info_change_ntf::set_fight_power(::google::protobuf::int64 value) {
  set_has_fight_power();
  fight_power_ = value;
}

// repeated .SProtoSpace.hero_equip_data equips = 13;
inline int hero_info_change_ntf::equips_size() const {
  return equips_.size();
}
inline void hero_info_change_ntf::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::hero_equip_data& hero_info_change_ntf::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::hero_equip_data* hero_info_change_ntf::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_data* hero_info_change_ntf::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
hero_info_change_ntf::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
hero_info_change_ntf::mutable_equips() {
  return &equips_;
}

// optional int32 quality = 14;
inline bool hero_info_change_ntf::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void hero_info_change_ntf::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void hero_info_change_ntf::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void hero_info_change_ntf::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline ::google::protobuf::int32 hero_info_change_ntf::quality() const {
  return quality_;
}
inline void hero_info_change_ntf::set_quality(::google::protobuf::int32 value) {
  set_has_quality();
  quality_ = value;
}

// repeated .SProtoSpace.talisman_data talismans = 15;
inline int hero_info_change_ntf::talismans_size() const {
  return talismans_.size();
}
inline void hero_info_change_ntf::clear_talismans() {
  talismans_.Clear();
}
inline const ::SProtoSpace::talisman_data& hero_info_change_ntf::talismans(int index) const {
  return talismans_.Get(index);
}
inline ::SProtoSpace::talisman_data* hero_info_change_ntf::mutable_talismans(int index) {
  return talismans_.Mutable(index);
}
inline ::SProtoSpace::talisman_data* hero_info_change_ntf::add_talismans() {
  return talismans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >&
hero_info_change_ntf::talismans() const {
  return talismans_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::talisman_data >*
hero_info_change_ntf::mutable_talismans() {
  return &talismans_;
}

// -------------------------------------------------------------------

// hero_upgrade_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_req_id];
inline bool hero_upgrade_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_upgrade_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_upgrade_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_upgrade_req::clear_protoid() {
  protoid_ = 5403;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_upgrade_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_upgrade_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_upgrade_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_upgrade_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_upgrade_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_upgrade_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_upgrade_req::hero_id() const {
  return hero_id_;
}
inline void hero_upgrade_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated uint64 materials = 3;
inline int hero_upgrade_req::materials_size() const {
  return materials_.size();
}
inline void hero_upgrade_req::clear_materials() {
  materials_.Clear();
}
inline ::google::protobuf::uint64 hero_upgrade_req::materials(int index) const {
  return materials_.Get(index);
}
inline void hero_upgrade_req::set_materials(int index, ::google::protobuf::uint64 value) {
  materials_.Set(index, value);
}
inline void hero_upgrade_req::add_materials(::google::protobuf::uint64 value) {
  materials_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
hero_upgrade_req::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
hero_upgrade_req::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// hero_upgrade_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upgrade_ack_id];
inline bool hero_upgrade_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_upgrade_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_upgrade_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_upgrade_ack::clear_protoid() {
  protoid_ = 5404;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_upgrade_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_upgrade_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_upgrade_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_upgrade_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_upgrade_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_upgrade_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_upgrade_ack::hero_id() const {
  return hero_id_;
}
inline void hero_upgrade_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 hero_level = 3;
inline bool hero_upgrade_ack::has_hero_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_upgrade_ack::set_has_hero_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_upgrade_ack::clear_has_hero_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_upgrade_ack::clear_hero_level() {
  hero_level_ = 0;
  clear_has_hero_level();
}
inline ::google::protobuf::int32 hero_upgrade_ack::hero_level() const {
  return hero_level_;
}
inline void hero_upgrade_ack::set_hero_level(::google::protobuf::int32 value) {
  set_has_hero_level();
  hero_level_ = value;
}

// required int32 ret = 4;
inline bool hero_upgrade_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_upgrade_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_upgrade_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_upgrade_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_upgrade_ack::ret() const {
  return ret_;
}
inline void hero_upgrade_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_upstar_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_req_id];
inline bool hero_upstar_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_upstar_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_upstar_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_upstar_req::clear_protoid() {
  protoid_ = 5405;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_upstar_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_upstar_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_upstar_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_upstar_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_upstar_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_upstar_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_upstar_req::hero_id() const {
  return hero_id_;
}
inline void hero_upstar_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated uint64 materials = 3;
inline int hero_upstar_req::materials_size() const {
  return materials_.size();
}
inline void hero_upstar_req::clear_materials() {
  materials_.Clear();
}
inline ::google::protobuf::uint64 hero_upstar_req::materials(int index) const {
  return materials_.Get(index);
}
inline void hero_upstar_req::set_materials(int index, ::google::protobuf::uint64 value) {
  materials_.Set(index, value);
}
inline void hero_upstar_req::add_materials(::google::protobuf::uint64 value) {
  materials_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
hero_upstar_req::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
hero_upstar_req::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// hero_upstar_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_upstar_ack_id];
inline bool hero_upstar_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_upstar_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_upstar_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_upstar_ack::clear_protoid() {
  protoid_ = 5406;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_upstar_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_upstar_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_upstar_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_upstar_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_upstar_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_upstar_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_upstar_ack::hero_id() const {
  return hero_id_;
}
inline void hero_upstar_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 hero_star = 3;
inline bool hero_upstar_ack::has_hero_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_upstar_ack::set_has_hero_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_upstar_ack::clear_has_hero_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_upstar_ack::clear_hero_star() {
  hero_star_ = 0;
  clear_has_hero_star();
}
inline ::google::protobuf::int32 hero_upstar_ack::hero_star() const {
  return hero_star_;
}
inline void hero_upstar_ack::set_hero_star(::google::protobuf::int32 value) {
  set_has_hero_star();
  hero_star_ = value;
}

// required int32 ret = 4;
inline bool hero_upstar_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_upstar_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_upstar_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_upstar_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_upstar_ack::ret() const {
  return ret_;
}
inline void hero_upstar_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_awaken_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_req_id];
inline bool hero_awaken_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_awaken_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_awaken_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_awaken_req::clear_protoid() {
  protoid_ = 5408;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_awaken_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_awaken_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_awaken_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_awaken_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_awaken_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_awaken_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_awaken_req::hero_id() const {
  return hero_id_;
}
inline void hero_awaken_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// hero_awaken_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_awaken_ack_id];
inline bool hero_awaken_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_awaken_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_awaken_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_awaken_ack::clear_protoid() {
  protoid_ = 5409;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_awaken_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_awaken_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_awaken_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_awaken_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_awaken_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_awaken_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_awaken_ack::hero_id() const {
  return hero_id_;
}
inline void hero_awaken_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required int32 ret = 3;
inline bool hero_awaken_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_awaken_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_awaken_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_awaken_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_awaken_ack::ret() const {
  return ret_;
}
inline void hero_awaken_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_lock_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_req_id];
inline bool hero_lock_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_lock_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_lock_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_lock_req::clear_protoid() {
  protoid_ = 5410;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_lock_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_lock_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_lock_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_lock_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_lock_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_lock_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_lock_req::hero_id() const {
  return hero_id_;
}
inline void hero_lock_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required bool lock = 3;
inline bool hero_lock_req::has_lock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_lock_req::set_has_lock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_lock_req::clear_has_lock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_lock_req::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool hero_lock_req::lock() const {
  return lock_;
}
inline void hero_lock_req::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// -------------------------------------------------------------------

// hero_lock_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_lock_ack_id];
inline bool hero_lock_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_lock_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_lock_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_lock_ack::clear_protoid() {
  protoid_ = 5411;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_lock_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_lock_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint64 hero_id = 2;
inline bool hero_lock_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_lock_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_lock_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_lock_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_lock_ack::hero_id() const {
  return hero_id_;
}
inline void hero_lock_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// required bool lock = 3;
inline bool hero_lock_ack::has_lock() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_lock_ack::set_has_lock() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_lock_ack::clear_has_lock() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_lock_ack::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool hero_lock_ack::lock() const {
  return lock_;
}
inline void hero_lock_ack::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// required int32 ret = 4;
inline bool hero_lock_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_lock_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_lock_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_lock_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_lock_ack::ret() const {
  return ret_;
}
inline void hero_lock_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_compose_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_req_id];
inline bool hero_compose_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_compose_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_compose_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_compose_req::clear_protoid() {
  protoid_ = 5412;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_compose_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_compose_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 template_id = 2;
inline bool hero_compose_req::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_compose_req::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_compose_req::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_compose_req::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 hero_compose_req::template_id() const {
  return template_id_;
}
inline void hero_compose_req::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// hero_compose_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_compose_ack_id];
inline bool hero_compose_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_compose_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_compose_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_compose_ack::clear_protoid() {
  protoid_ = 5413;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_compose_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_compose_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 template_id = 2;
inline bool hero_compose_ack::has_template_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_compose_ack::set_has_template_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_compose_ack::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_compose_ack::clear_template_id() {
  template_id_ = 0;
  clear_has_template_id();
}
inline ::google::protobuf::int32 hero_compose_ack::template_id() const {
  return template_id_;
}
inline void hero_compose_ack::set_template_id(::google::protobuf::int32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_compose_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_compose_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_compose_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_compose_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_compose_ack::hero_id() const {
  return hero_id_;
}
inline void hero_compose_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 ret = 4;
inline bool hero_compose_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_compose_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_compose_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_compose_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_compose_ack::ret() const {
  return ret_;
}
inline void hero_compose_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_skin_active_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_req_id];
inline bool hero_skin_active_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_skin_active_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_skin_active_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_skin_active_req::clear_protoid() {
  protoid_ = 5414;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_skin_active_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_skin_active_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_skin_active_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_skin_active_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_skin_active_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_skin_active_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_skin_active_req::hero_id() const {
  return hero_id_;
}
inline void hero_skin_active_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 template_id = 3;
inline bool hero_skin_active_req::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_skin_active_req::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_skin_active_req::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_skin_active_req::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 hero_skin_active_req::template_id() const {
  return template_id_;
}
inline void hero_skin_active_req::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// -------------------------------------------------------------------

// hero_skin_active_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skin_active_ack_id];
inline bool hero_skin_active_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_skin_active_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_skin_active_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_skin_active_ack::clear_protoid() {
  protoid_ = 5415;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_skin_active_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_skin_active_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_skin_active_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_skin_active_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_skin_active_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_skin_active_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_skin_active_ack::hero_id() const {
  return hero_id_;
}
inline void hero_skin_active_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 template_id = 3;
inline bool hero_skin_active_ack::has_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_skin_active_ack::set_has_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_skin_active_ack::clear_has_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_skin_active_ack::clear_template_id() {
  template_id_ = 0u;
  clear_has_template_id();
}
inline ::google::protobuf::uint32 hero_skin_active_ack::template_id() const {
  return template_id_;
}
inline void hero_skin_active_ack::set_template_id(::google::protobuf::uint32 value) {
  set_has_template_id();
  template_id_ = value;
}

// optional int32 ret = 4;
inline bool hero_skin_active_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_skin_active_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_skin_active_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_skin_active_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_skin_active_ack::ret() const {
  return ret_;
}
inline void hero_skin_active_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_change_name_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_req_id];
inline bool hero_change_name_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_change_name_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_change_name_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_change_name_req::clear_protoid() {
  protoid_ = 5419;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_change_name_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_change_name_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_change_name_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_change_name_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_change_name_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_change_name_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_change_name_req::hero_id() const {
  return hero_id_;
}
inline void hero_change_name_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional string change_name = 3;
inline bool hero_change_name_req::has_change_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_change_name_req::set_has_change_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_change_name_req::clear_has_change_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_change_name_req::clear_change_name() {
  if (change_name_ != &::google::protobuf::internal::kEmptyString) {
    change_name_->clear();
  }
  clear_has_change_name();
}
inline const ::std::string& hero_change_name_req::change_name() const {
  return *change_name_;
}
inline void hero_change_name_req::set_change_name(const ::std::string& value) {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  change_name_->assign(value);
}
inline void hero_change_name_req::set_change_name(const char* value) {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  change_name_->assign(value);
}
inline void hero_change_name_req::set_change_name(const char* value, size_t size) {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  change_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hero_change_name_req::mutable_change_name() {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  return change_name_;
}
inline ::std::string* hero_change_name_req::release_change_name() {
  clear_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = change_name_;
    change_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hero_change_name_req::set_allocated_change_name(::std::string* change_name) {
  if (change_name_ != &::google::protobuf::internal::kEmptyString) {
    delete change_name_;
  }
  if (change_name) {
    set_has_change_name();
    change_name_ = change_name;
  } else {
    clear_has_change_name();
    change_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// hero_change_name_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_change_name_ack_id];
inline bool hero_change_name_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_change_name_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_change_name_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_change_name_ack::clear_protoid() {
  protoid_ = 5420;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_change_name_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_change_name_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool hero_change_name_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_change_name_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_change_name_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_change_name_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 hero_change_name_ack::result() const {
  return result_;
}
inline void hero_change_name_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_change_name_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_change_name_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_change_name_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_change_name_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_change_name_ack::hero_id() const {
  return hero_id_;
}
inline void hero_change_name_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional string change_name = 4;
inline bool hero_change_name_ack::has_change_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_change_name_ack::set_has_change_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_change_name_ack::clear_has_change_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_change_name_ack::clear_change_name() {
  if (change_name_ != &::google::protobuf::internal::kEmptyString) {
    change_name_->clear();
  }
  clear_has_change_name();
}
inline const ::std::string& hero_change_name_ack::change_name() const {
  return *change_name_;
}
inline void hero_change_name_ack::set_change_name(const ::std::string& value) {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  change_name_->assign(value);
}
inline void hero_change_name_ack::set_change_name(const char* value) {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  change_name_->assign(value);
}
inline void hero_change_name_ack::set_change_name(const char* value, size_t size) {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  change_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hero_change_name_ack::mutable_change_name() {
  set_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    change_name_ = new ::std::string;
  }
  return change_name_;
}
inline ::std::string* hero_change_name_ack::release_change_name() {
  clear_has_change_name();
  if (change_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = change_name_;
    change_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void hero_change_name_ack::set_allocated_change_name(::std::string* change_name) {
  if (change_name_ != &::google::protobuf::internal::kEmptyString) {
    delete change_name_;
  }
  if (change_name) {
    set_has_change_name();
    change_name_ = change_name;
  } else {
    clear_has_change_name();
    change_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// hero_level_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_req_id];
inline bool hero_level_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_level_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_level_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_level_up_req::clear_protoid() {
  protoid_ = 5421;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_level_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_level_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_level_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_level_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_level_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_level_up_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_level_up_req::hero_id() const {
  return hero_id_;
}
inline void hero_level_up_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .SProtoSpace.reward_item materials = 3;
inline int hero_level_up_req::materials_size() const {
  return materials_.size();
}
inline void hero_level_up_req::clear_materials() {
  materials_.Clear();
}
inline const ::SProtoSpace::reward_item& hero_level_up_req::materials(int index) const {
  return materials_.Get(index);
}
inline ::SProtoSpace::reward_item* hero_level_up_req::mutable_materials(int index) {
  return materials_.Mutable(index);
}
inline ::SProtoSpace::reward_item* hero_level_up_req::add_materials() {
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
hero_level_up_req::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
hero_level_up_req::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// hero_level_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_level_up_ack_id];
inline bool hero_level_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_level_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_level_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_level_up_ack::clear_protoid() {
  protoid_ = 5422;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_level_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_level_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_level_up_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_level_up_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_level_up_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_level_up_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_level_up_ack::hero_id() const {
  return hero_id_;
}
inline void hero_level_up_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 hero_level = 3;
inline bool hero_level_up_ack::has_hero_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_level_up_ack::set_has_hero_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_level_up_ack::clear_has_hero_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_level_up_ack::clear_hero_level() {
  hero_level_ = 0;
  clear_has_hero_level();
}
inline ::google::protobuf::int32 hero_level_up_ack::hero_level() const {
  return hero_level_;
}
inline void hero_level_up_ack::set_hero_level(::google::protobuf::int32 value) {
  set_has_hero_level();
  hero_level_ = value;
}

// optional int32 ret = 4;
inline bool hero_level_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_level_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_level_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_level_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_level_up_ack::ret() const {
  return ret_;
}
inline void hero_level_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_quality_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_req_id];
inline bool hero_quality_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_quality_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_quality_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_quality_up_req::clear_protoid() {
  protoid_ = 5445;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_quality_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_quality_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_quality_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_quality_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_quality_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_quality_up_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_quality_up_req::hero_id() const {
  return hero_id_;
}
inline void hero_quality_up_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// hero_quality_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_quality_up_ack_id];
inline bool hero_quality_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_quality_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_quality_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_quality_up_ack::clear_protoid() {
  protoid_ = 5446;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_quality_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_quality_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_quality_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_quality_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_quality_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_quality_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_quality_up_ack::ret() const {
  return ret_;
}
inline void hero_quality_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_quality_up_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_quality_up_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_quality_up_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_quality_up_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_quality_up_ack::hero_id() const {
  return hero_id_;
}
inline void hero_quality_up_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// item_combine_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_req_id];
inline bool item_combine_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_combine_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_combine_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_combine_req::clear_protoid() {
  protoid_ = 5447;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_combine_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_combine_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 dest_equip_tid = 2;
inline bool item_combine_req::has_dest_equip_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_combine_req::set_has_dest_equip_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_combine_req::clear_has_dest_equip_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_combine_req::clear_dest_equip_tid() {
  dest_equip_tid_ = 0u;
  clear_has_dest_equip_tid();
}
inline ::google::protobuf::uint32 item_combine_req::dest_equip_tid() const {
  return dest_equip_tid_;
}
inline void item_combine_req::set_dest_equip_tid(::google::protobuf::uint32 value) {
  set_has_dest_equip_tid();
  dest_equip_tid_ = value;
}

// optional uint32 combine_num = 3;
inline bool item_combine_req::has_combine_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_combine_req::set_has_combine_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_combine_req::clear_has_combine_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_combine_req::clear_combine_num() {
  combine_num_ = 0u;
  clear_has_combine_num();
}
inline ::google::protobuf::uint32 item_combine_req::combine_num() const {
  return combine_num_;
}
inline void item_combine_req::set_combine_num(::google::protobuf::uint32 value) {
  set_has_combine_num();
  combine_num_ = value;
}

// repeated uint64 cost_item_uid = 4;
inline int item_combine_req::cost_item_uid_size() const {
  return cost_item_uid_.size();
}
inline void item_combine_req::clear_cost_item_uid() {
  cost_item_uid_.Clear();
}
inline ::google::protobuf::uint64 item_combine_req::cost_item_uid(int index) const {
  return cost_item_uid_.Get(index);
}
inline void item_combine_req::set_cost_item_uid(int index, ::google::protobuf::uint64 value) {
  cost_item_uid_.Set(index, value);
}
inline void item_combine_req::add_cost_item_uid(::google::protobuf::uint64 value) {
  cost_item_uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
item_combine_req::cost_item_uid() const {
  return cost_item_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
item_combine_req::mutable_cost_item_uid() {
  return &cost_item_uid_;
}

// -------------------------------------------------------------------

// item_combine_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = item_combine_ack_id];
inline bool item_combine_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void item_combine_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void item_combine_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void item_combine_ack::clear_protoid() {
  protoid_ = 5448;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID item_combine_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void item_combine_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool item_combine_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void item_combine_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void item_combine_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void item_combine_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 item_combine_ack::ret() const {
  return ret_;
}
inline void item_combine_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 dest_equip_tid = 3;
inline bool item_combine_ack::has_dest_equip_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void item_combine_ack::set_has_dest_equip_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void item_combine_ack::clear_has_dest_equip_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void item_combine_ack::clear_dest_equip_tid() {
  dest_equip_tid_ = 0u;
  clear_has_dest_equip_tid();
}
inline ::google::protobuf::uint32 item_combine_ack::dest_equip_tid() const {
  return dest_equip_tid_;
}
inline void item_combine_ack::set_dest_equip_tid(::google::protobuf::uint32 value) {
  set_has_dest_equip_tid();
  dest_equip_tid_ = value;
}

// optional uint32 combine_num = 4;
inline bool item_combine_ack::has_combine_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void item_combine_ack::set_has_combine_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void item_combine_ack::clear_has_combine_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void item_combine_ack::clear_combine_num() {
  combine_num_ = 0u;
  clear_has_combine_num();
}
inline ::google::protobuf::uint32 item_combine_ack::combine_num() const {
  return combine_num_;
}
inline void item_combine_ack::set_combine_num(::google::protobuf::uint32 value) {
  set_has_combine_num();
  combine_num_ = value;
}

// -------------------------------------------------------------------

// hero_star_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_req_id];
inline bool hero_star_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_star_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_star_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_star_up_req::clear_protoid() {
  protoid_ = 5423;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_star_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_star_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_star_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_star_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_star_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_star_up_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_star_up_req::hero_id() const {
  return hero_id_;
}
inline void hero_star_up_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .SProtoSpace.reward_item materials = 3;
inline int hero_star_up_req::materials_size() const {
  return materials_.size();
}
inline void hero_star_up_req::clear_materials() {
  materials_.Clear();
}
inline const ::SProtoSpace::reward_item& hero_star_up_req::materials(int index) const {
  return materials_.Get(index);
}
inline ::SProtoSpace::reward_item* hero_star_up_req::mutable_materials(int index) {
  return materials_.Mutable(index);
}
inline ::SProtoSpace::reward_item* hero_star_up_req::add_materials() {
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
hero_star_up_req::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
hero_star_up_req::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// hero_star_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_star_up_ack_id];
inline bool hero_star_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_star_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_star_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_star_up_ack::clear_protoid() {
  protoid_ = 5424;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_star_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_star_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_star_up_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_star_up_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_star_up_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_star_up_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_star_up_ack::hero_id() const {
  return hero_id_;
}
inline void hero_star_up_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 hero_star = 3;
inline bool hero_star_up_ack::has_hero_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_star_up_ack::set_has_hero_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_star_up_ack::clear_has_hero_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_star_up_ack::clear_hero_star() {
  hero_star_ = 0;
  clear_has_hero_star();
}
inline ::google::protobuf::int32 hero_star_up_ack::hero_star() const {
  return hero_star_;
}
inline void hero_star_up_ack::set_hero_star(::google::protobuf::int32 value) {
  set_has_hero_star();
  hero_star_ = value;
}

// optional int32 ret = 4;
inline bool hero_star_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_star_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_star_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_star_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_star_up_ack::ret() const {
  return ret_;
}
inline void hero_star_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// hero_skill_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_req_id];
inline bool hero_skill_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_skill_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_skill_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_skill_up_req::clear_protoid() {
  protoid_ = 5425;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_skill_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_skill_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_skill_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_skill_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_skill_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_skill_up_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_skill_up_req::hero_id() const {
  return hero_id_;
}
inline void hero_skill_up_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 skill_id = 3;
inline bool hero_skill_up_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_skill_up_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_skill_up_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_skill_up_req::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 hero_skill_up_req::skill_id() const {
  return skill_id_;
}
inline void hero_skill_up_req::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// repeated .SProtoSpace.reward_item materials = 4;
inline int hero_skill_up_req::materials_size() const {
  return materials_.size();
}
inline void hero_skill_up_req::clear_materials() {
  materials_.Clear();
}
inline const ::SProtoSpace::reward_item& hero_skill_up_req::materials(int index) const {
  return materials_.Get(index);
}
inline ::SProtoSpace::reward_item* hero_skill_up_req::mutable_materials(int index) {
  return materials_.Mutable(index);
}
inline ::SProtoSpace::reward_item* hero_skill_up_req::add_materials() {
  return materials_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
hero_skill_up_req::materials() const {
  return materials_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
hero_skill_up_req::mutable_materials() {
  return &materials_;
}

// -------------------------------------------------------------------

// hero_skill_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_skill_up_ack_id];
inline bool hero_skill_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_skill_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_skill_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_skill_up_ack::clear_protoid() {
  protoid_ = 5426;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_skill_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_skill_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_skill_up_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_skill_up_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_skill_up_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_skill_up_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_skill_up_ack::hero_id() const {
  return hero_id_;
}
inline void hero_skill_up_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional int32 ret = 3;
inline bool hero_skill_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_skill_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_skill_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_skill_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_skill_up_ack::ret() const {
  return ret_;
}
inline void hero_skill_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 skill_id = 4;
inline bool hero_skill_up_ack::has_skill_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_skill_up_ack::set_has_skill_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_skill_up_ack::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_skill_up_ack::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 hero_skill_up_ack::skill_id() const {
  return skill_id_;
}
inline void hero_skill_up_ack::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 skill_lv = 5;
inline bool hero_skill_up_ack::has_skill_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_skill_up_ack::set_has_skill_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_skill_up_ack::clear_has_skill_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_skill_up_ack::clear_skill_lv() {
  skill_lv_ = 0;
  clear_has_skill_lv();
}
inline ::google::protobuf::int32 hero_skill_up_ack::skill_lv() const {
  return skill_lv_;
}
inline void hero_skill_up_ack::set_skill_lv(::google::protobuf::int32 value) {
  set_has_skill_lv();
  skill_lv_ = value;
}

// optional int32 skill_point = 6;
inline bool hero_skill_up_ack::has_skill_point() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_skill_up_ack::set_has_skill_point() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_skill_up_ack::clear_has_skill_point() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_skill_up_ack::clear_skill_point() {
  skill_point_ = 0;
  clear_has_skill_point();
}
inline ::google::protobuf::int32 hero_skill_up_ack::skill_point() const {
  return skill_point_;
}
inline void hero_skill_up_ack::set_skill_point(::google::protobuf::int32 value) {
  set_has_skill_point();
  skill_point_ = value;
}

// -------------------------------------------------------------------

// hero_equip_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_req_id];
inline bool hero_equip_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_req::clear_protoid() {
  protoid_ = 5431;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_uuid = 2;
inline bool hero_equip_req::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_req::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_req::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_req::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 hero_equip_req::hero_uuid() const {
  return hero_uuid_;
}
inline void hero_equip_req::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional uint64 item_uuid = 3;
inline bool hero_equip_req::has_item_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_equip_req::set_has_item_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_equip_req::clear_has_item_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_equip_req::clear_item_uuid() {
  item_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_uuid();
}
inline ::google::protobuf::uint64 hero_equip_req::item_uuid() const {
  return item_uuid_;
}
inline void hero_equip_req::set_item_uuid(::google::protobuf::uint64 value) {
  set_has_item_uuid();
  item_uuid_ = value;
}

// optional .SProtoSpace.EHeroEquipSlot slot_id = 4;
inline bool hero_equip_req::has_slot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_equip_req::set_has_slot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_equip_req::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_equip_req::clear_slot_id() {
  slot_id_ = 1;
  clear_has_slot_id();
}
inline ::SProtoSpace::EHeroEquipSlot hero_equip_req::slot_id() const {
  return static_cast< ::SProtoSpace::EHeroEquipSlot >(slot_id_);
}
inline void hero_equip_req::set_slot_id(::SProtoSpace::EHeroEquipSlot value) {
  assert(::SProtoSpace::EHeroEquipSlot_IsValid(value));
  set_has_slot_id();
  slot_id_ = value;
}

// -------------------------------------------------------------------

// hero_equip_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_ack_id];
inline bool hero_equip_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_ack::clear_protoid() {
  protoid_ = 5432;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_equip_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_equip_ack::ret() const {
  return ret_;
}
inline void hero_equip_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 hero_uuid = 3;
inline bool hero_equip_ack::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_equip_ack::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_equip_ack::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_equip_ack::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 hero_equip_ack::hero_uuid() const {
  return hero_uuid_;
}
inline void hero_equip_ack::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional uint64 item_uuid = 4;
inline bool hero_equip_ack::has_item_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_equip_ack::set_has_item_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_equip_ack::clear_has_item_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_equip_ack::clear_item_uuid() {
  item_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_item_uuid();
}
inline ::google::protobuf::uint64 hero_equip_ack::item_uuid() const {
  return item_uuid_;
}
inline void hero_equip_ack::set_item_uuid(::google::protobuf::uint64 value) {
  set_has_item_uuid();
  item_uuid_ = value;
}

// optional int32 item_tid = 5;
inline bool hero_equip_ack::has_item_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_equip_ack::set_has_item_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_equip_ack::clear_has_item_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_equip_ack::clear_item_tid() {
  item_tid_ = 0;
  clear_has_item_tid();
}
inline ::google::protobuf::int32 hero_equip_ack::item_tid() const {
  return item_tid_;
}
inline void hero_equip_ack::set_item_tid(::google::protobuf::int32 value) {
  set_has_item_tid();
  item_tid_ = value;
}

// optional .SProtoSpace.EHeroEquipSlot slot_id = 6;
inline bool hero_equip_ack::has_slot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_equip_ack::set_has_slot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_equip_ack::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_equip_ack::clear_slot_id() {
  slot_id_ = 1;
  clear_has_slot_id();
}
inline ::SProtoSpace::EHeroEquipSlot hero_equip_ack::slot_id() const {
  return static_cast< ::SProtoSpace::EHeroEquipSlot >(slot_id_);
}
inline void hero_equip_ack::set_slot_id(::SProtoSpace::EHeroEquipSlot value) {
  assert(::SProtoSpace::EHeroEquipSlot_IsValid(value));
  set_has_slot_id();
  slot_id_ = value;
}

// -------------------------------------------------------------------

// hero_unequip_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_req_id];
inline bool hero_unequip_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_unequip_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_unequip_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_unequip_req::clear_protoid() {
  protoid_ = 5433;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_unequip_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_unequip_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_unequip_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_unequip_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_unequip_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_unequip_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_unequip_req::hero_id() const {
  return hero_id_;
}
inline void hero_unequip_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint64 item_id = 3;
inline bool hero_unequip_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_unequip_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_unequip_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_unequip_req::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_unequip_req::item_id() const {
  return item_id_;
}
inline void hero_unequip_req::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 slot_id = 4;
inline bool hero_unequip_req::has_slot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_unequip_req::set_has_slot_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_unequip_req::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_unequip_req::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 hero_unequip_req::slot_id() const {
  return slot_id_;
}
inline void hero_unequip_req::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// -------------------------------------------------------------------

// hero_unequip_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_ack_id];
inline bool hero_unequip_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_unequip_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_unequip_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_unequip_ack::clear_protoid() {
  protoid_ = 5434;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_unequip_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_unequip_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_unequip_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_unequip_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_unequip_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_unequip_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_unequip_ack::ret() const {
  return ret_;
}
inline void hero_unequip_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_unequip_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_unequip_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_unequip_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_unequip_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_unequip_ack::hero_id() const {
  return hero_id_;
}
inline void hero_unequip_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint64 item_id = 4;
inline bool hero_unequip_ack::has_item_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_unequip_ack::set_has_item_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_unequip_ack::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_unequip_ack::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_unequip_ack::item_id() const {
  return item_id_;
}
inline void hero_unequip_ack::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 slot_id = 5;
inline bool hero_unequip_ack::has_slot_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_unequip_ack::set_has_slot_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_unequip_ack::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_unequip_ack::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 hero_unequip_ack::slot_id() const {
  return slot_id_;
}
inline void hero_unequip_ack::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// -------------------------------------------------------------------

// hero_equip_level_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_req_id];
inline bool hero_equip_level_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_level_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_level_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_level_up_req::clear_protoid() {
  protoid_ = 5435;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_level_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_level_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 item_id = 2;
inline bool hero_equip_level_up_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_level_up_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_level_up_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_level_up_req::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_equip_level_up_req::item_id() const {
  return item_id_;
}
inline void hero_equip_level_up_req::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// hero_equip_level_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_level_up_ack_id];
inline bool hero_equip_level_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_level_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_level_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_level_up_ack::clear_protoid() {
  protoid_ = 5436;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_level_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_level_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_equip_level_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_level_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_level_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_level_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_equip_level_up_ack::ret() const {
  return ret_;
}
inline void hero_equip_level_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 item_id = 3;
inline bool hero_equip_level_up_ack::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_equip_level_up_ack::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_equip_level_up_ack::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_equip_level_up_ack::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_equip_level_up_ack::item_id() const {
  return item_id_;
}
inline void hero_equip_level_up_ack::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// hero_equip_onekey_level_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_req_id];
inline bool hero_equip_onekey_level_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_onekey_level_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_onekey_level_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_onekey_level_up_req::clear_protoid() {
  protoid_ = 5437;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_onekey_level_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_onekey_level_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 item_id = 2;
inline bool hero_equip_onekey_level_up_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_onekey_level_up_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_onekey_level_up_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_onekey_level_up_req::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_equip_onekey_level_up_req::item_id() const {
  return item_id_;
}
inline void hero_equip_onekey_level_up_req::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// hero_equip_onekey_level_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_level_up_ack_id];
inline bool hero_equip_onekey_level_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_onekey_level_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_onekey_level_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_onekey_level_up_ack::clear_protoid() {
  protoid_ = 5438;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_onekey_level_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_onekey_level_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_equip_onekey_level_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_onekey_level_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_onekey_level_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_onekey_level_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_equip_onekey_level_up_ack::ret() const {
  return ret_;
}
inline void hero_equip_onekey_level_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 item_id = 3;
inline bool hero_equip_onekey_level_up_ack::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_equip_onekey_level_up_ack::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_equip_onekey_level_up_ack::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_equip_onekey_level_up_ack::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_equip_onekey_level_up_ack::item_id() const {
  return item_id_;
}
inline void hero_equip_onekey_level_up_ack::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 level = 4;
inline bool hero_equip_onekey_level_up_ack::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void hero_equip_onekey_level_up_ack::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void hero_equip_onekey_level_up_ack::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void hero_equip_onekey_level_up_ack::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 hero_equip_onekey_level_up_ack::level() const {
  return level_;
}
inline void hero_equip_onekey_level_up_ack::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 crit = 5;
inline bool hero_equip_onekey_level_up_ack::has_crit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_equip_onekey_level_up_ack::set_has_crit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_equip_onekey_level_up_ack::clear_has_crit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_equip_onekey_level_up_ack::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 hero_equip_onekey_level_up_ack::crit() const {
  return crit_;
}
inline void hero_equip_onekey_level_up_ack::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 money = 6;
inline bool hero_equip_onekey_level_up_ack::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_equip_onekey_level_up_ack::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_equip_onekey_level_up_ack::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_equip_onekey_level_up_ack::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 hero_equip_onekey_level_up_ack::money() const {
  return money_;
}
inline void hero_equip_onekey_level_up_ack::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// hero_equip_level_info

// optional uint64 item_id = 3;
inline bool hero_equip_level_info::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_level_info::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_level_info::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_level_info::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
inline ::google::protobuf::uint64 hero_equip_level_info::item_id() const {
  return item_id_;
}
inline void hero_equip_level_info::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 level = 4;
inline bool hero_equip_level_info::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_level_info::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_level_info::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_level_info::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 hero_equip_level_info::level() const {
  return level_;
}
inline void hero_equip_level_info::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// hero_equip_all_level_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_req_id];
inline bool hero_equip_all_level_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_all_level_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_all_level_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_all_level_up_req::clear_protoid() {
  protoid_ = 5439;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_all_level_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_all_level_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_equip_all_level_up_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_all_level_up_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_all_level_up_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_all_level_up_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_equip_all_level_up_req::hero_id() const {
  return hero_id_;
}
inline void hero_equip_all_level_up_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// hero_equip_all_level_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_all_level_up_ack_id];
inline bool hero_equip_all_level_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_all_level_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_all_level_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_all_level_up_ack::clear_protoid() {
  protoid_ = 5440;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_all_level_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_all_level_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_equip_all_level_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_all_level_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_all_level_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_all_level_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_equip_all_level_up_ack::ret() const {
  return ret_;
}
inline void hero_equip_all_level_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_equip_all_level_up_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_equip_all_level_up_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_equip_all_level_up_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_equip_all_level_up_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_equip_all_level_up_ack::hero_id() const {
  return hero_id_;
}
inline void hero_equip_all_level_up_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .SProtoSpace.hero_equip_level_info items = 4;
inline int hero_equip_all_level_up_ack::items_size() const {
  return items_.size();
}
inline void hero_equip_all_level_up_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::hero_equip_level_info& hero_equip_all_level_up_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::hero_equip_level_info* hero_equip_all_level_up_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_level_info* hero_equip_all_level_up_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_level_info >&
hero_equip_all_level_up_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_level_info >*
hero_equip_all_level_up_ack::mutable_items() {
  return &items_;
}

// optional int32 crit = 5;
inline bool hero_equip_all_level_up_ack::has_crit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void hero_equip_all_level_up_ack::set_has_crit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void hero_equip_all_level_up_ack::clear_has_crit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void hero_equip_all_level_up_ack::clear_crit() {
  crit_ = 0;
  clear_has_crit();
}
inline ::google::protobuf::int32 hero_equip_all_level_up_ack::crit() const {
  return crit_;
}
inline void hero_equip_all_level_up_ack::set_crit(::google::protobuf::int32 value) {
  set_has_crit();
  crit_ = value;
}

// optional int32 money = 6;
inline bool hero_equip_all_level_up_ack::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void hero_equip_all_level_up_ack::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void hero_equip_all_level_up_ack::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void hero_equip_all_level_up_ack::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 hero_equip_all_level_up_ack::money() const {
  return money_;
}
inline void hero_equip_all_level_up_ack::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// hero_equip_onekey_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_req_id];
inline bool hero_equip_onekey_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_onekey_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_onekey_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_onekey_req::clear_protoid() {
  protoid_ = 5441;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_onekey_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_onekey_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_equip_onekey_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_onekey_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_onekey_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_onekey_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_equip_onekey_req::hero_id() const {
  return hero_id_;
}
inline void hero_equip_onekey_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .SProtoSpace.hero_equip_data equips = 3;
inline int hero_equip_onekey_req::equips_size() const {
  return equips_.size();
}
inline void hero_equip_onekey_req::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::hero_equip_data& hero_equip_onekey_req::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::hero_equip_data* hero_equip_onekey_req::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_data* hero_equip_onekey_req::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
hero_equip_onekey_req::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
hero_equip_onekey_req::mutable_equips() {
  return &equips_;
}

// -------------------------------------------------------------------

// hero_equip_onekey_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_equip_onekey_ack_id];
inline bool hero_equip_onekey_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_equip_onekey_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_equip_onekey_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_equip_onekey_ack::clear_protoid() {
  protoid_ = 5442;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_equip_onekey_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_equip_onekey_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_equip_onekey_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_equip_onekey_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_equip_onekey_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_equip_onekey_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_equip_onekey_ack::ret() const {
  return ret_;
}
inline void hero_equip_onekey_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_equip_onekey_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_equip_onekey_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_equip_onekey_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_equip_onekey_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_equip_onekey_ack::hero_id() const {
  return hero_id_;
}
inline void hero_equip_onekey_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .SProtoSpace.hero_equip_data equips = 4;
inline int hero_equip_onekey_ack::equips_size() const {
  return equips_.size();
}
inline void hero_equip_onekey_ack::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::hero_equip_data& hero_equip_onekey_ack::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::hero_equip_data* hero_equip_onekey_ack::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_data* hero_equip_onekey_ack::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
hero_equip_onekey_ack::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
hero_equip_onekey_ack::mutable_equips() {
  return &equips_;
}

// -------------------------------------------------------------------

// hero_unequip_onekey_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_req_id];
inline bool hero_unequip_onekey_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_unequip_onekey_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_unequip_onekey_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_unequip_onekey_req::clear_protoid() {
  protoid_ = 5443;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_unequip_onekey_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_unequip_onekey_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 hero_id = 2;
inline bool hero_unequip_onekey_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_unequip_onekey_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_unequip_onekey_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_unequip_onekey_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_unequip_onekey_req::hero_id() const {
  return hero_id_;
}
inline void hero_unequip_onekey_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// hero_unequip_onekey_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = hero_unequip_onekey_ack_id];
inline bool hero_unequip_onekey_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void hero_unequip_onekey_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void hero_unequip_onekey_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void hero_unequip_onekey_ack::clear_protoid() {
  protoid_ = 5444;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID hero_unequip_onekey_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void hero_unequip_onekey_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool hero_unequip_onekey_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void hero_unequip_onekey_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void hero_unequip_onekey_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void hero_unequip_onekey_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 hero_unequip_onekey_ack::ret() const {
  return ret_;
}
inline void hero_unequip_onekey_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 hero_id = 3;
inline bool hero_unequip_onekey_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void hero_unequip_onekey_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void hero_unequip_onekey_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void hero_unequip_onekey_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 hero_unequip_onekey_ack::hero_id() const {
  return hero_id_;
}
inline void hero_unequip_onekey_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated .SProtoSpace.hero_equip_data equips = 4;
inline int hero_unequip_onekey_ack::equips_size() const {
  return equips_.size();
}
inline void hero_unequip_onekey_ack::clear_equips() {
  equips_.Clear();
}
inline const ::SProtoSpace::hero_equip_data& hero_unequip_onekey_ack::equips(int index) const {
  return equips_.Get(index);
}
inline ::SProtoSpace::hero_equip_data* hero_unequip_onekey_ack::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::SProtoSpace::hero_equip_data* hero_unequip_onekey_ack::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >&
hero_unequip_onekey_ack::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_equip_data >*
hero_unequip_onekey_ack::mutable_equips() {
  return &equips_;
}

// -------------------------------------------------------------------

// gm_operation_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_req_id];
inline bool gm_operation_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_operation_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_operation_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_operation_req::clear_protoid() {
  protoid_ = 5014;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID gm_operation_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void gm_operation_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string cmd = 2;
inline bool gm_operation_req::has_cmd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_operation_req::set_has_cmd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_operation_req::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_operation_req::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& gm_operation_req::cmd() const {
  return *cmd_;
}
inline void gm_operation_req::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void gm_operation_req::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void gm_operation_req::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gm_operation_req::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* gm_operation_req::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void gm_operation_req::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// gm_operation_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = gm_operation_ack_id];
inline bool gm_operation_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void gm_operation_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void gm_operation_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void gm_operation_ack::clear_protoid() {
  protoid_ = 5015;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID gm_operation_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void gm_operation_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2 [default = 0];
inline bool gm_operation_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void gm_operation_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void gm_operation_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void gm_operation_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 gm_operation_ack::ret() const {
  return ret_;
}
inline void gm_operation_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 3 [default = 0];
inline bool gm_operation_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void gm_operation_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void gm_operation_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void gm_operation_ack::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 gm_operation_ack::type() const {
  return type_;
}
inline void gm_operation_ack::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string info = 4 [default = "Failed"];
inline bool gm_operation_ack::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void gm_operation_ack::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void gm_operation_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void gm_operation_ack::clear_info() {
  if (info_ != _default_info_) {
    info_->assign(*_default_info_);
  }
  clear_has_info();
}
inline const ::std::string& gm_operation_ack::info() const {
  return *info_;
}
inline void gm_operation_ack::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == _default_info_) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void gm_operation_ack::set_info(const char* value) {
  set_has_info();
  if (info_ == _default_info_) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void gm_operation_ack::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == _default_info_) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* gm_operation_ack::mutable_info() {
  set_has_info();
  if (info_ == _default_info_) {
    info_ = new ::std::string(*_default_info_);
  }
  return info_;
}
inline ::std::string* gm_operation_ack::release_info() {
  clear_has_info();
  if (info_ == _default_info_) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(_default_info_);
    return temp;
  }
}
inline void gm_operation_ack::set_allocated_info(::std::string* info) {
  if (info_ != _default_info_) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(_default_info_);
  }
}

// -------------------------------------------------------------------

// leave_game_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = leave_game_req_id];
inline bool leave_game_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void leave_game_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void leave_game_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void leave_game_req::clear_protoid() {
  protoid_ = 5010;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID leave_game_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void leave_game_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// kick_game_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = kick_game_ntf_id];
inline bool kick_game_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void kick_game_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void kick_game_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void kick_game_ntf::clear_protoid() {
  protoid_ = 5016;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID kick_game_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void kick_game_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required .SProtoSpace.eKickoutReason reason = 2;
inline bool kick_game_ntf::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void kick_game_ntf::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void kick_game_ntf::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void kick_game_ntf::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::SProtoSpace::eKickoutReason kick_game_ntf::reason() const {
  return static_cast< ::SProtoSpace::eKickoutReason >(reason_);
}
inline void kick_game_ntf::set_reason(::SProtoSpace::eKickoutReason value) {
  assert(::SProtoSpace::eKickoutReason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// beat_heart_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = beat_heart_ntf_id];
inline bool beat_heart_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void beat_heart_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void beat_heart_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void beat_heart_ntf::clear_protoid() {
  protoid_ = 5017;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID beat_heart_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void beat_heart_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// sync_time_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = sync_time_ntf_id];
inline bool sync_time_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sync_time_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void sync_time_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void sync_time_ntf::clear_protoid() {
  protoid_ = 5018;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID sync_time_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void sync_time_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required uint32 time = 2;
inline bool sync_time_ntf::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sync_time_ntf::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void sync_time_ntf::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void sync_time_ntf::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 sync_time_ntf::time() const {
  return time_;
}
inline void sync_time_ntf::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// client_heart_beat_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_req_id];
inline bool client_heart_beat_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_heart_beat_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_heart_beat_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_heart_beat_req::clear_protoid() {
  protoid_ = 5050;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID client_heart_beat_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void client_heart_beat_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 check_sum = 2;
inline bool client_heart_beat_req::has_check_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_heart_beat_req::set_has_check_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_heart_beat_req::clear_has_check_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_heart_beat_req::clear_check_sum() {
  check_sum_ = 0u;
  clear_has_check_sum();
}
inline ::google::protobuf::uint32 client_heart_beat_req::check_sum() const {
  return check_sum_;
}
inline void client_heart_beat_req::set_check_sum(::google::protobuf::uint32 value) {
  set_has_check_sum();
  check_sum_ = value;
}

// -------------------------------------------------------------------

// client_heart_beat_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = client_heart_beat_ack_id];
inline bool client_heart_beat_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_heart_beat_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_heart_beat_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_heart_beat_ack::clear_protoid() {
  protoid_ = 5051;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID client_heart_beat_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void client_heart_beat_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 check_sum = 2;
inline bool client_heart_beat_ack::has_check_sum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_heart_beat_ack::set_has_check_sum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_heart_beat_ack::clear_has_check_sum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_heart_beat_ack::clear_check_sum() {
  check_sum_ = 0u;
  clear_has_check_sum();
}
inline ::google::protobuf::uint32 client_heart_beat_ack::check_sum() const {
  return check_sum_;
}
inline void client_heart_beat_ack::set_check_sum(::google::protobuf::uint32 value) {
  set_has_check_sum();
  check_sum_ = value;
}

// -------------------------------------------------------------------

// role_player_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_ntf_id];
inline bool role_player_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_info_ntf::clear_protoid() {
  protoid_ = 5200;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.player_property pro = 2;
inline bool role_player_info_ntf::has_pro() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_info_ntf::set_has_pro() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_info_ntf::clear_has_pro() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_info_ntf::clear_pro() {
  if (pro_ != NULL) pro_->::SProtoSpace::player_property::Clear();
  clear_has_pro();
}
inline const ::SProtoSpace::player_property& role_player_info_ntf::pro() const {
  return pro_ != NULL ? *pro_ : *default_instance_->pro_;
}
inline ::SProtoSpace::player_property* role_player_info_ntf::mutable_pro() {
  set_has_pro();
  if (pro_ == NULL) pro_ = new ::SProtoSpace::player_property;
  return pro_;
}
inline ::SProtoSpace::player_property* role_player_info_ntf::release_pro() {
  clear_has_pro();
  ::SProtoSpace::player_property* temp = pro_;
  pro_ = NULL;
  return temp;
}
inline void role_player_info_ntf::set_allocated_pro(::SProtoSpace::player_property* pro) {
  delete pro_;
  pro_ = pro;
  if (pro) {
    set_has_pro();
  } else {
    clear_has_pro();
  }
}

// optional .SProtoSpace.player_data data = 3;
inline bool role_player_info_ntf::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_info_ntf::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_info_ntf::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_info_ntf::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::player_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::player_data& role_player_info_ntf::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::player_data* role_player_info_ntf::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::player_data;
  return data_;
}
inline ::SProtoSpace::player_data* role_player_info_ntf::release_data() {
  clear_has_data();
  ::SProtoSpace::player_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void role_player_info_ntf::set_allocated_data(::SProtoSpace::player_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// repeated uint64 liked_list = 4;
inline int role_player_info_ntf::liked_list_size() const {
  return liked_list_.size();
}
inline void role_player_info_ntf::clear_liked_list() {
  liked_list_.Clear();
}
inline ::google::protobuf::uint64 role_player_info_ntf::liked_list(int index) const {
  return liked_list_.Get(index);
}
inline void role_player_info_ntf::set_liked_list(int index, ::google::protobuf::uint64 value) {
  liked_list_.Set(index, value);
}
inline void role_player_info_ntf::add_liked_list(::google::protobuf::uint64 value) {
  liked_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
role_player_info_ntf::liked_list() const {
  return liked_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
role_player_info_ntf::mutable_liked_list() {
  return &liked_list_;
}

// optional int32 border = 5;
inline bool role_player_info_ntf::has_border() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_player_info_ntf::set_has_border() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_player_info_ntf::clear_has_border() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_player_info_ntf::clear_border() {
  border_ = 0;
  clear_has_border();
}
inline ::google::protobuf::int32 role_player_info_ntf::border() const {
  return border_;
}
inline void role_player_info_ntf::set_border(::google::protobuf::int32 value) {
  set_has_border();
  border_ = value;
}

// optional int32 talent_grade = 6;
inline bool role_player_info_ntf::has_talent_grade() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_player_info_ntf::set_has_talent_grade() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_player_info_ntf::clear_has_talent_grade() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_player_info_ntf::clear_talent_grade() {
  talent_grade_ = 0;
  clear_has_talent_grade();
}
inline ::google::protobuf::int32 role_player_info_ntf::talent_grade() const {
  return talent_grade_;
}
inline void role_player_info_ntf::set_talent_grade(::google::protobuf::int32 value) {
  set_has_talent_grade();
  talent_grade_ = value;
}

// optional .SProtoSpace.fashions_pack fashions_p_wearing = 7;
inline bool role_player_info_ntf::has_fashions_p_wearing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_player_info_ntf::set_has_fashions_p_wearing() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_player_info_ntf::clear_has_fashions_p_wearing() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_player_info_ntf::clear_fashions_p_wearing() {
  if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
  clear_has_fashions_p_wearing();
}
inline const ::SProtoSpace::fashions_pack& role_player_info_ntf::fashions_p_wearing() const {
  return fashions_p_wearing_ != NULL ? *fashions_p_wearing_ : *default_instance_->fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* role_player_info_ntf::mutable_fashions_p_wearing() {
  set_has_fashions_p_wearing();
  if (fashions_p_wearing_ == NULL) fashions_p_wearing_ = new ::SProtoSpace::fashions_pack;
  return fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* role_player_info_ntf::release_fashions_p_wearing() {
  clear_has_fashions_p_wearing();
  ::SProtoSpace::fashions_pack* temp = fashions_p_wearing_;
  fashions_p_wearing_ = NULL;
  return temp;
}
inline void role_player_info_ntf::set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing) {
  delete fashions_p_wearing_;
  fashions_p_wearing_ = fashions_p_wearing;
  if (fashions_p_wearing) {
    set_has_fashions_p_wearing();
  } else {
    clear_has_fashions_p_wearing();
  }
}

// -------------------------------------------------------------------

// role_player_info_update_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_info_update_ntf_id];
inline bool role_player_info_update_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_info_update_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_info_update_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_info_update_ntf::clear_protoid() {
  protoid_ = 5201;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_info_update_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_info_update_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.player_data data = 2;
inline bool role_player_info_update_ntf::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_info_update_ntf::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_info_update_ntf::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_info_update_ntf::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::player_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::player_data& role_player_info_update_ntf::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::player_data* role_player_info_update_ntf::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::player_data;
  return data_;
}
inline ::SProtoSpace::player_data* role_player_info_update_ntf::release_data() {
  clear_has_data();
  ::SProtoSpace::player_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void role_player_info_update_ntf::set_allocated_data(::SProtoSpace::player_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional .SProtoSpace.player_property pro = 3;
inline bool role_player_info_update_ntf::has_pro() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_info_update_ntf::set_has_pro() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_info_update_ntf::clear_has_pro() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_info_update_ntf::clear_pro() {
  if (pro_ != NULL) pro_->::SProtoSpace::player_property::Clear();
  clear_has_pro();
}
inline const ::SProtoSpace::player_property& role_player_info_update_ntf::pro() const {
  return pro_ != NULL ? *pro_ : *default_instance_->pro_;
}
inline ::SProtoSpace::player_property* role_player_info_update_ntf::mutable_pro() {
  set_has_pro();
  if (pro_ == NULL) pro_ = new ::SProtoSpace::player_property;
  return pro_;
}
inline ::SProtoSpace::player_property* role_player_info_update_ntf::release_pro() {
  clear_has_pro();
  ::SProtoSpace::player_property* temp = pro_;
  pro_ = NULL;
  return temp;
}
inline void role_player_info_update_ntf::set_allocated_pro(::SProtoSpace::player_property* pro) {
  delete pro_;
  pro_ = pro;
  if (pro) {
    set_has_pro();
  } else {
    clear_has_pro();
  }
}

// -------------------------------------------------------------------

// role_fight_score_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_fight_score_ntf_id];
inline bool role_fight_score_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_fight_score_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_fight_score_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_fight_score_ntf::clear_protoid() {
  protoid_ = 7206;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_fight_score_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_fight_score_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 value = 2;
inline bool role_fight_score_ntf::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_fight_score_ntf::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_fight_score_ntf::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_fight_score_ntf::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 role_fight_score_ntf::value() const {
  return value_;
}
inline void role_fight_score_ntf::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// role_player_change_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_req_id];
inline bool role_player_change_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_change_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_change_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_change_req::clear_protoid() {
  protoid_ = 5202;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_change_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_change_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 to_player_id = 2;
inline bool role_player_change_req::has_to_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_change_req::set_has_to_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_change_req::clear_has_to_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_change_req::clear_to_player_id() {
  to_player_id_ = 0;
  clear_has_to_player_id();
}
inline ::google::protobuf::int32 role_player_change_req::to_player_id() const {
  return to_player_id_;
}
inline void role_player_change_req::set_to_player_id(::google::protobuf::int32 value) {
  set_has_to_player_id();
  to_player_id_ = value;
}

// -------------------------------------------------------------------

// role_player_change_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_change_ack_id];
inline bool role_player_change_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_change_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_change_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_change_ack::clear_protoid() {
  protoid_ = 5203;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_change_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_change_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 result = 2;
inline bool role_player_change_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_change_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_change_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_change_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_player_change_ack::result() const {
  return result_;
}
inline void role_player_change_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 from_player_id = 3;
inline bool role_player_change_ack::has_from_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_change_ack::set_has_from_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_change_ack::clear_has_from_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_change_ack::clear_from_player_id() {
  from_player_id_ = 0;
  clear_has_from_player_id();
}
inline ::google::protobuf::int32 role_player_change_ack::from_player_id() const {
  return from_player_id_;
}
inline void role_player_change_ack::set_from_player_id(::google::protobuf::int32 value) {
  set_has_from_player_id();
  from_player_id_ = value;
}

// required int32 to_player_id = 4;
inline bool role_player_change_ack::has_to_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_player_change_ack::set_has_to_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_player_change_ack::clear_has_to_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_player_change_ack::clear_to_player_id() {
  to_player_id_ = 0;
  clear_has_to_player_id();
}
inline ::google::protobuf::int32 role_player_change_ack::to_player_id() const {
  return to_player_id_;
}
inline void role_player_change_ack::set_to_player_id(::google::protobuf::int32 value) {
  set_has_to_player_id();
  to_player_id_ = value;
}

// -------------------------------------------------------------------

// role_player_active_skin_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_req_id];
inline bool role_player_active_skin_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_active_skin_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_active_skin_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_active_skin_req::clear_protoid() {
  protoid_ = 5204;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_active_skin_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_active_skin_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 player_id = 2;
inline bool role_player_active_skin_req::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_active_skin_req::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_active_skin_req::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_active_skin_req::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_active_skin_req::player_id() const {
  return player_id_;
}
inline void role_player_active_skin_req::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 active_skin_id = 3;
inline bool role_player_active_skin_req::has_active_skin_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_active_skin_req::set_has_active_skin_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_active_skin_req::clear_has_active_skin_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_active_skin_req::clear_active_skin_id() {
  active_skin_id_ = 0;
  clear_has_active_skin_id();
}
inline ::google::protobuf::int32 role_player_active_skin_req::active_skin_id() const {
  return active_skin_id_;
}
inline void role_player_active_skin_req::set_active_skin_id(::google::protobuf::int32 value) {
  set_has_active_skin_id();
  active_skin_id_ = value;
}

// -------------------------------------------------------------------

// role_player_active_skin_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_active_skin_ack_id];
inline bool role_player_active_skin_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_active_skin_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_active_skin_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_active_skin_ack::clear_protoid() {
  protoid_ = 5205;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_active_skin_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_active_skin_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 result = 2;
inline bool role_player_active_skin_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_active_skin_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_active_skin_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_active_skin_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_player_active_skin_ack::result() const {
  return result_;
}
inline void role_player_active_skin_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 player_id = 3;
inline bool role_player_active_skin_ack::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_active_skin_ack::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_active_skin_ack::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_active_skin_ack::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_active_skin_ack::player_id() const {
  return player_id_;
}
inline void role_player_active_skin_ack::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 active_skin_id = 4;
inline bool role_player_active_skin_ack::has_active_skin_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_player_active_skin_ack::set_has_active_skin_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_player_active_skin_ack::clear_has_active_skin_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_player_active_skin_ack::clear_active_skin_id() {
  active_skin_id_ = 0;
  clear_has_active_skin_id();
}
inline ::google::protobuf::int32 role_player_active_skin_ack::active_skin_id() const {
  return active_skin_id_;
}
inline void role_player_active_skin_ack::set_active_skin_id(::google::protobuf::int32 value) {
  set_has_active_skin_id();
  active_skin_id_ = value;
}

// -------------------------------------------------------------------

// role_player_buy_skin_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_req_id];
inline bool role_player_buy_skin_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_buy_skin_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_buy_skin_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_buy_skin_req::clear_protoid() {
  protoid_ = 5206;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_buy_skin_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_buy_skin_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 player_id = 2;
inline bool role_player_buy_skin_req::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_buy_skin_req::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_buy_skin_req::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_buy_skin_req::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_buy_skin_req::player_id() const {
  return player_id_;
}
inline void role_player_buy_skin_req::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 skin_id = 3;
inline bool role_player_buy_skin_req::has_skin_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_buy_skin_req::set_has_skin_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_buy_skin_req::clear_has_skin_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_buy_skin_req::clear_skin_id() {
  skin_id_ = 0;
  clear_has_skin_id();
}
inline ::google::protobuf::int32 role_player_buy_skin_req::skin_id() const {
  return skin_id_;
}
inline void role_player_buy_skin_req::set_skin_id(::google::protobuf::int32 value) {
  set_has_skin_id();
  skin_id_ = value;
}

// -------------------------------------------------------------------

// role_player_buy_skin_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_buy_skin_ack_id];
inline bool role_player_buy_skin_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_buy_skin_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_buy_skin_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_buy_skin_ack::clear_protoid() {
  protoid_ = 5207;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_buy_skin_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_buy_skin_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 result = 2;
inline bool role_player_buy_skin_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_buy_skin_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_buy_skin_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_buy_skin_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_player_buy_skin_ack::result() const {
  return result_;
}
inline void role_player_buy_skin_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 player_id = 3;
inline bool role_player_buy_skin_ack::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_buy_skin_ack::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_buy_skin_ack::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_buy_skin_ack::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_buy_skin_ack::player_id() const {
  return player_id_;
}
inline void role_player_buy_skin_ack::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 skin_id = 4;
inline bool role_player_buy_skin_ack::has_skin_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_player_buy_skin_ack::set_has_skin_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_player_buy_skin_ack::clear_has_skin_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_player_buy_skin_ack::clear_skin_id() {
  skin_id_ = 0;
  clear_has_skin_id();
}
inline ::google::protobuf::int32 role_player_buy_skin_ack::skin_id() const {
  return skin_id_;
}
inline void role_player_buy_skin_ack::set_skin_id(::google::protobuf::int32 value) {
  set_has_skin_id();
  skin_id_ = value;
}

// -------------------------------------------------------------------

// role_player_wear_skin_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_req_id];
inline bool role_player_wear_skin_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_wear_skin_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_wear_skin_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_wear_skin_req::clear_protoid() {
  protoid_ = 5208;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_wear_skin_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_wear_skin_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 player_id = 2;
inline bool role_player_wear_skin_req::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_wear_skin_req::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_wear_skin_req::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_wear_skin_req::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_wear_skin_req::player_id() const {
  return player_id_;
}
inline void role_player_wear_skin_req::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 skin_id = 3;
inline bool role_player_wear_skin_req::has_skin_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_wear_skin_req::set_has_skin_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_wear_skin_req::clear_has_skin_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_wear_skin_req::clear_skin_id() {
  skin_id_ = 0;
  clear_has_skin_id();
}
inline ::google::protobuf::int32 role_player_wear_skin_req::skin_id() const {
  return skin_id_;
}
inline void role_player_wear_skin_req::set_skin_id(::google::protobuf::int32 value) {
  set_has_skin_id();
  skin_id_ = value;
}

// -------------------------------------------------------------------

// role_player_wear_skin_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_wear_skin_ack_id];
inline bool role_player_wear_skin_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_wear_skin_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_wear_skin_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_wear_skin_ack::clear_protoid() {
  protoid_ = 5209;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_wear_skin_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_wear_skin_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 result = 2;
inline bool role_player_wear_skin_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_wear_skin_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_wear_skin_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_wear_skin_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_player_wear_skin_ack::result() const {
  return result_;
}
inline void role_player_wear_skin_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 player_id = 3;
inline bool role_player_wear_skin_ack::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_wear_skin_ack::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_wear_skin_ack::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_wear_skin_ack::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_wear_skin_ack::player_id() const {
  return player_id_;
}
inline void role_player_wear_skin_ack::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required int32 skin_id = 4;
inline bool role_player_wear_skin_ack::has_skin_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_player_wear_skin_ack::set_has_skin_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_player_wear_skin_ack::clear_has_skin_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_player_wear_skin_ack::clear_skin_id() {
  skin_id_ = 0;
  clear_has_skin_id();
}
inline ::google::protobuf::int32 role_player_wear_skin_ack::skin_id() const {
  return skin_id_;
}
inline void role_player_wear_skin_ack::set_skin_id(::google::protobuf::int32 value) {
  set_has_skin_id();
  skin_id_ = value;
}

// -------------------------------------------------------------------

// role_player_skillup_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_player_skillup_ntf_id];
inline bool role_player_skillup_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_player_skillup_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_player_skillup_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_player_skillup_ntf::clear_protoid() {
  protoid_ = 5210;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_player_skillup_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_player_skillup_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 player_id = 2;
inline bool role_player_skillup_ntf::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_player_skillup_ntf::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_player_skillup_ntf::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_player_skillup_ntf::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 role_player_skillup_ntf::player_id() const {
  return player_id_;
}
inline void role_player_skillup_ntf::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required .SProtoSpace.player_skill_info skill_info = 3;
inline bool role_player_skillup_ntf::has_skill_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_player_skillup_ntf::set_has_skill_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_player_skillup_ntf::clear_has_skill_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_player_skillup_ntf::clear_skill_info() {
  if (skill_info_ != NULL) skill_info_->::SProtoSpace::player_skill_info::Clear();
  clear_has_skill_info();
}
inline const ::SProtoSpace::player_skill_info& role_player_skillup_ntf::skill_info() const {
  return skill_info_ != NULL ? *skill_info_ : *default_instance_->skill_info_;
}
inline ::SProtoSpace::player_skill_info* role_player_skillup_ntf::mutable_skill_info() {
  set_has_skill_info();
  if (skill_info_ == NULL) skill_info_ = new ::SProtoSpace::player_skill_info;
  return skill_info_;
}
inline ::SProtoSpace::player_skill_info* role_player_skillup_ntf::release_skill_info() {
  clear_has_skill_info();
  ::SProtoSpace::player_skill_info* temp = skill_info_;
  skill_info_ = NULL;
  return temp;
}
inline void role_player_skillup_ntf::set_allocated_skill_info(::SProtoSpace::player_skill_info* skill_info) {
  delete skill_info_;
  skill_info_ = skill_info;
  if (skill_info) {
    set_has_skill_info();
  } else {
    clear_has_skill_info();
  }
}

// -------------------------------------------------------------------

// role_buy_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_req_id];
inline bool role_buy_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_buy_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_buy_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_buy_req::clear_protoid() {
  protoid_ = 5213;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_buy_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_buy_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required .SProtoSpace.EItemType buy_type = 2;
inline bool role_buy_req::has_buy_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_buy_req::set_has_buy_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_buy_req::clear_has_buy_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_buy_req::clear_buy_type() {
  buy_type_ = 0;
  clear_has_buy_type();
}
inline ::SProtoSpace::EItemType role_buy_req::buy_type() const {
  return static_cast< ::SProtoSpace::EItemType >(buy_type_);
}
inline void role_buy_req::set_buy_type(::SProtoSpace::EItemType value) {
  assert(::SProtoSpace::EItemType_IsValid(value));
  set_has_buy_type();
  buy_type_ = value;
}

// required int32 buy_count = 3;
inline bool role_buy_req::has_buy_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_buy_req::set_has_buy_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_buy_req::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_buy_req::clear_buy_count() {
  buy_count_ = 0;
  clear_has_buy_count();
}
inline ::google::protobuf::int32 role_buy_req::buy_count() const {
  return buy_count_;
}
inline void role_buy_req::set_buy_count(::google::protobuf::int32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// required int32 buy_id = 4;
inline bool role_buy_req::has_buy_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_buy_req::set_has_buy_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_buy_req::clear_has_buy_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_buy_req::clear_buy_id() {
  buy_id_ = 0;
  clear_has_buy_id();
}
inline ::google::protobuf::int32 role_buy_req::buy_id() const {
  return buy_id_;
}
inline void role_buy_req::set_buy_id(::google::protobuf::int32 value) {
  set_has_buy_id();
  buy_id_ = value;
}

// -------------------------------------------------------------------

// role_buy_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_buy_ack_id];
inline bool role_buy_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_buy_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_buy_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_buy_ack::clear_protoid() {
  protoid_ = 5214;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_buy_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_buy_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// required int32 result = 2;
inline bool role_buy_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_buy_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_buy_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_buy_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_buy_ack::result() const {
  return result_;
}
inline void role_buy_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required .SProtoSpace.EItemType buy_type = 3;
inline bool role_buy_ack::has_buy_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_buy_ack::set_has_buy_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_buy_ack::clear_has_buy_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_buy_ack::clear_buy_type() {
  buy_type_ = 0;
  clear_has_buy_type();
}
inline ::SProtoSpace::EItemType role_buy_ack::buy_type() const {
  return static_cast< ::SProtoSpace::EItemType >(buy_type_);
}
inline void role_buy_ack::set_buy_type(::SProtoSpace::EItemType value) {
  assert(::SProtoSpace::EItemType_IsValid(value));
  set_has_buy_type();
  buy_type_ = value;
}

// required int32 buy_count = 4;
inline bool role_buy_ack::has_buy_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_buy_ack::set_has_buy_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_buy_ack::clear_has_buy_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_buy_ack::clear_buy_count() {
  buy_count_ = 0;
  clear_has_buy_count();
}
inline ::google::protobuf::int32 role_buy_ack::buy_count() const {
  return buy_count_;
}
inline void role_buy_ack::set_buy_count(::google::protobuf::int32 value) {
  set_has_buy_count();
  buy_count_ = value;
}

// required int32 buy_id = 5;
inline bool role_buy_ack::has_buy_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_buy_ack::set_has_buy_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_buy_ack::clear_has_buy_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_buy_ack::clear_buy_id() {
  buy_id_ = 0;
  clear_has_buy_id();
}
inline ::google::protobuf::int32 role_buy_ack::buy_id() const {
  return buy_id_;
}
inline void role_buy_ack::set_buy_id(::google::protobuf::int32 value) {
  set_has_buy_id();
  buy_id_ = value;
}

// -------------------------------------------------------------------

// role_show_base_info_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_req_id];
inline bool role_show_base_info_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_base_info_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_base_info_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_base_info_req::clear_protoid() {
  protoid_ = 5235;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_base_info_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_base_info_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_base_info_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_base_info_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_base_info_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_base_info_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_base_info_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_base_info_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_base_info_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_base_info_ack_id];
inline bool role_show_base_info_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_base_info_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_base_info_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_base_info_ack::clear_protoid() {
  protoid_ = 5236;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_base_info_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_base_info_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_base_info_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_base_info_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_base_info_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_base_info_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_base_info_ack::result() const {
  return result_;
}
inline void role_show_base_info_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 show_role_id = 3;
inline bool role_show_base_info_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_base_info_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_base_info_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_base_info_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_base_info_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_base_info_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.show_player_base show_data = 4;
inline bool role_show_base_info_ack::has_show_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_base_info_ack::set_has_show_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_base_info_ack::clear_has_show_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_base_info_ack::clear_show_data() {
  if (show_data_ != NULL) show_data_->::SProtoSpace::show_player_base::Clear();
  clear_has_show_data();
}
inline const ::SProtoSpace::show_player_base& role_show_base_info_ack::show_data() const {
  return show_data_ != NULL ? *show_data_ : *default_instance_->show_data_;
}
inline ::SProtoSpace::show_player_base* role_show_base_info_ack::mutable_show_data() {
  set_has_show_data();
  if (show_data_ == NULL) show_data_ = new ::SProtoSpace::show_player_base;
  return show_data_;
}
inline ::SProtoSpace::show_player_base* role_show_base_info_ack::release_show_data() {
  clear_has_show_data();
  ::SProtoSpace::show_player_base* temp = show_data_;
  show_data_ = NULL;
  return temp;
}
inline void role_show_base_info_ack::set_allocated_show_data(::SProtoSpace::show_player_base* show_data) {
  delete show_data_;
  show_data_ = show_data;
  if (show_data) {
    set_has_show_data();
  } else {
    clear_has_show_data();
  }
}

// -------------------------------------------------------------------

// role_show_get_like_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_req_id];
inline bool role_show_get_like_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_get_like_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_get_like_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_get_like_req::clear_protoid() {
  protoid_ = 246;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_get_like_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_get_like_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_get_like_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_get_like_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_get_like_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_get_like_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_get_like_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_get_like_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_get_like_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_like_ack_id];
inline bool role_show_get_like_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_get_like_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_get_like_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_get_like_ack::clear_protoid() {
  protoid_ = 247;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_get_like_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_get_like_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_get_like_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_get_like_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_get_like_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_get_like_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_get_like_ack::result() const {
  return result_;
}
inline void role_show_get_like_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 show_role_id = 3;
inline bool role_show_get_like_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_get_like_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_get_like_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_get_like_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_get_like_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_get_like_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional int32 likes = 4;
inline bool role_show_get_like_ack::has_likes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_get_like_ack::set_has_likes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_get_like_ack::clear_has_likes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_get_like_ack::clear_likes() {
  likes_ = 0;
  clear_has_likes();
}
inline ::google::protobuf::int32 role_show_get_like_ack::likes() const {
  return likes_;
}
inline void role_show_get_like_ack::set_likes(::google::protobuf::int32 value) {
  set_has_likes();
  likes_ = value;
}

// -------------------------------------------------------------------

// role_show_player_base_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_req_id];
inline bool role_show_player_base_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_player_base_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_player_base_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_player_base_req::clear_protoid() {
  protoid_ = 5215;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_player_base_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_player_base_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_player_base_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_player_base_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_player_base_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_player_base_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_player_base_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_player_base_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_player_base_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_player_base_ack_id];
inline bool role_show_player_base_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_player_base_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_player_base_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_player_base_ack::clear_protoid() {
  protoid_ = 5216;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_player_base_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_player_base_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_player_base_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_player_base_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_player_base_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_player_base_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_player_base_ack::result() const {
  return result_;
}
inline void role_show_player_base_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 show_role_id = 3;
inline bool role_show_player_base_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_player_base_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_player_base_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_player_base_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_player_base_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_player_base_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.show_player_base show_data = 4;
inline bool role_show_player_base_ack::has_show_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_player_base_ack::set_has_show_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_player_base_ack::clear_has_show_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_player_base_ack::clear_show_data() {
  if (show_data_ != NULL) show_data_->::SProtoSpace::show_player_base::Clear();
  clear_has_show_data();
}
inline const ::SProtoSpace::show_player_base& role_show_player_base_ack::show_data() const {
  return show_data_ != NULL ? *show_data_ : *default_instance_->show_data_;
}
inline ::SProtoSpace::show_player_base* role_show_player_base_ack::mutable_show_data() {
  set_has_show_data();
  if (show_data_ == NULL) show_data_ = new ::SProtoSpace::show_player_base;
  return show_data_;
}
inline ::SProtoSpace::show_player_base* role_show_player_base_ack::release_show_data() {
  clear_has_show_data();
  ::SProtoSpace::show_player_base* temp = show_data_;
  show_data_ = NULL;
  return temp;
}
inline void role_show_player_base_ack::set_allocated_show_data(::SProtoSpace::show_player_base* show_data) {
  delete show_data_;
  show_data_ = show_data;
  if (show_data) {
    set_has_show_data();
  } else {
    clear_has_show_data();
  }
}

// -------------------------------------------------------------------

// role_show_like_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_req_id];
inline bool role_show_like_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_like_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_like_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_like_req::clear_protoid() {
  protoid_ = 5217;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_like_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_like_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_like_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_like_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_like_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_like_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_like_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_like_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_like_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_ack_id];
inline bool role_show_like_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_like_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_like_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_like_ack::clear_protoid() {
  protoid_ = 5218;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_like_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_like_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_like_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_like_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_like_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_like_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_like_ack::result() const {
  return result_;
}
inline void role_show_like_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 show_role_id = 3;
inline bool role_show_like_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_like_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_like_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_like_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_like_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_like_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_change_name_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_req_id];
inline bool role_show_change_name_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_name_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_name_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_name_req::clear_protoid() {
  protoid_ = 5219;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_name_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_name_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string new_name = 2;
inline bool role_show_change_name_req::has_new_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_name_req::set_has_new_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_name_req::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_name_req::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& role_show_change_name_req::new_name() const {
  return *new_name_;
}
inline void role_show_change_name_req::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void role_show_change_name_req::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void role_show_change_name_req::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_change_name_req::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* role_show_change_name_req::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_change_name_req::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// role_show_change_name_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_name_ack_id];
inline bool role_show_change_name_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_name_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_name_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_name_ack::clear_protoid() {
  protoid_ = 5220;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_name_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_name_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_change_name_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_name_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_name_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_name_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_change_name_ack::result() const {
  return result_;
}
inline void role_show_change_name_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string new_name = 3;
inline bool role_show_change_name_ack::has_new_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_change_name_ack::set_has_new_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_change_name_ack::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_change_name_ack::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& role_show_change_name_ack::new_name() const {
  return *new_name_;
}
inline void role_show_change_name_ack::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void role_show_change_name_ack::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void role_show_change_name_ack::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_change_name_ack::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* role_show_change_name_ack::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_change_name_ack::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 change_name_time = 4;
inline bool role_show_change_name_ack::has_change_name_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_change_name_ack::set_has_change_name_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_change_name_ack::clear_has_change_name_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_change_name_ack::clear_change_name_time() {
  change_name_time_ = 0;
  clear_has_change_name_time();
}
inline ::google::protobuf::int32 role_show_change_name_ack::change_name_time() const {
  return change_name_time_;
}
inline void role_show_change_name_ack::set_change_name_time(::google::protobuf::int32 value) {
  set_has_change_name_time();
  change_name_time_ = value;
}

// -------------------------------------------------------------------

// role_show_change_position_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_req_id];
inline bool role_show_change_position_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_position_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_position_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_position_req::clear_protoid() {
  protoid_ = 5221;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_position_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_position_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.lsg_position_info position = 2;
inline bool role_show_change_position_req::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_position_req::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_position_req::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_position_req::clear_position() {
  if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
  clear_has_position();
}
inline const ::SProtoSpace::lsg_position_info& role_show_change_position_req::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::SProtoSpace::lsg_position_info* role_show_change_position_req::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::SProtoSpace::lsg_position_info;
  return position_;
}
inline ::SProtoSpace::lsg_position_info* role_show_change_position_req::release_position() {
  clear_has_position();
  ::SProtoSpace::lsg_position_info* temp = position_;
  position_ = NULL;
  return temp;
}
inline void role_show_change_position_req::set_allocated_position(::SProtoSpace::lsg_position_info* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// role_show_change_position_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_position_ack_id];
inline bool role_show_change_position_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_position_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_position_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_position_ack::clear_protoid() {
  protoid_ = 5222;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_position_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_position_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_change_position_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_position_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_position_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_position_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_change_position_ack::result() const {
  return result_;
}
inline void role_show_change_position_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .SProtoSpace.lsg_position_info position = 3;
inline bool role_show_change_position_ack::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_change_position_ack::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_change_position_ack::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_change_position_ack::clear_position() {
  if (position_ != NULL) position_->::SProtoSpace::lsg_position_info::Clear();
  clear_has_position();
}
inline const ::SProtoSpace::lsg_position_info& role_show_change_position_ack::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::SProtoSpace::lsg_position_info* role_show_change_position_ack::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::SProtoSpace::lsg_position_info;
  return position_;
}
inline ::SProtoSpace::lsg_position_info* role_show_change_position_ack::release_position() {
  clear_has_position();
  ::SProtoSpace::lsg_position_info* temp = position_;
  position_ = NULL;
  return temp;
}
inline void role_show_change_position_ack::set_allocated_position(::SProtoSpace::lsg_position_info* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
}

// -------------------------------------------------------------------

// role_show_change_signature_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_req_id];
inline bool role_show_change_signature_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_signature_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_signature_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_signature_req::clear_protoid() {
  protoid_ = 5223;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_signature_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_signature_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string signature = 2;
inline bool role_show_change_signature_req::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_signature_req::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_signature_req::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_signature_req::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& role_show_change_signature_req::signature() const {
  return *signature_;
}
inline void role_show_change_signature_req::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void role_show_change_signature_req::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void role_show_change_signature_req::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_change_signature_req::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* role_show_change_signature_req::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_change_signature_req::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// role_show_change_signature_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_signature_ack_id];
inline bool role_show_change_signature_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_signature_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_signature_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_signature_ack::clear_protoid() {
  protoid_ = 5224;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_signature_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_signature_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_change_signature_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_signature_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_signature_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_signature_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_change_signature_ack::result() const {
  return result_;
}
inline void role_show_change_signature_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// role_show_change_age_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_req_id];
inline bool role_show_change_age_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_age_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_age_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_age_req::clear_protoid() {
  protoid_ = 5237;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_age_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_age_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 age = 2;
inline bool role_show_change_age_req::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_age_req::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_age_req::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_age_req::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 role_show_change_age_req::age() const {
  return age_;
}
inline void role_show_change_age_req::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// -------------------------------------------------------------------

// role_show_change_age_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_age_ack_id];
inline bool role_show_change_age_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_age_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_age_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_age_ack::clear_protoid() {
  protoid_ = 5238;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_age_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_age_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool role_show_change_age_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_age_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_age_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_age_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_change_age_ack::ret() const {
  return ret_;
}
inline void role_show_change_age_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 age = 3;
inline bool role_show_change_age_ack::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_change_age_ack::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_change_age_ack::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_change_age_ack::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 role_show_change_age_ack::age() const {
  return age_;
}
inline void role_show_change_age_ack::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// -------------------------------------------------------------------

// role_show_change_starsign_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_req_id];
inline bool role_show_change_starsign_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_starsign_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_starsign_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_starsign_req::clear_protoid() {
  protoid_ = 5239;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_starsign_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_starsign_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 star_sign = 2;
inline bool role_show_change_starsign_req::has_star_sign() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_starsign_req::set_has_star_sign() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_starsign_req::clear_has_star_sign() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_starsign_req::clear_star_sign() {
  star_sign_ = 0u;
  clear_has_star_sign();
}
inline ::google::protobuf::uint32 role_show_change_starsign_req::star_sign() const {
  return star_sign_;
}
inline void role_show_change_starsign_req::set_star_sign(::google::protobuf::uint32 value) {
  set_has_star_sign();
  star_sign_ = value;
}

// -------------------------------------------------------------------

// role_show_change_starsign_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_starsign_ack_id];
inline bool role_show_change_starsign_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_starsign_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_starsign_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_starsign_ack::clear_protoid() {
  protoid_ = 5240;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_starsign_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_starsign_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool role_show_change_starsign_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_starsign_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_starsign_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_starsign_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_change_starsign_ack::ret() const {
  return ret_;
}
inline void role_show_change_starsign_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 star_sign = 3;
inline bool role_show_change_starsign_ack::has_star_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_change_starsign_ack::set_has_star_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_change_starsign_ack::clear_has_star_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_change_starsign_ack::clear_star_sign() {
  star_sign_ = 0u;
  clear_has_star_sign();
}
inline ::google::protobuf::uint32 role_show_change_starsign_ack::star_sign() const {
  return star_sign_;
}
inline void role_show_change_starsign_ack::set_star_sign(::google::protobuf::uint32 value) {
  set_has_star_sign();
  star_sign_ = value;
}

// -------------------------------------------------------------------

// role_show_change_birthday_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_req_id];
inline bool role_show_change_birthday_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_birthday_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_birthday_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_birthday_req::clear_protoid() {
  protoid_ = 5241;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_birthday_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_birthday_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 month = 2;
inline bool role_show_change_birthday_req::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_birthday_req::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_birthday_req::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_birthday_req::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 role_show_change_birthday_req::month() const {
  return month_;
}
inline void role_show_change_birthday_req::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// optional uint32 day = 3;
inline bool role_show_change_birthday_req::has_day() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_change_birthday_req::set_has_day() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_change_birthday_req::clear_has_day() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_change_birthday_req::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 role_show_change_birthday_req::day() const {
  return day_;
}
inline void role_show_change_birthday_req::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// -------------------------------------------------------------------

// role_show_change_birthday_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_birthday_ack_id];
inline bool role_show_change_birthday_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_birthday_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_birthday_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_birthday_ack::clear_protoid() {
  protoid_ = 5242;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_birthday_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_birthday_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool role_show_change_birthday_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_birthday_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_birthday_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_birthday_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_change_birthday_ack::ret() const {
  return ret_;
}
inline void role_show_change_birthday_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 month = 3;
inline bool role_show_change_birthday_ack::has_month() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_change_birthday_ack::set_has_month() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_change_birthday_ack::clear_has_month() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_change_birthday_ack::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 role_show_change_birthday_ack::month() const {
  return month_;
}
inline void role_show_change_birthday_ack::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
}

// optional uint32 day = 4;
inline bool role_show_change_birthday_ack::has_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_change_birthday_ack::set_has_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_change_birthday_ack::clear_has_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_change_birthday_ack::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 role_show_change_birthday_ack::day() const {
  return day_;
}
inline void role_show_change_birthday_ack::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
}

// optional uint32 star_sign = 5;
inline bool role_show_change_birthday_ack::has_star_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_change_birthday_ack::set_has_star_sign() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_change_birthday_ack::clear_has_star_sign() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_change_birthday_ack::clear_star_sign() {
  star_sign_ = 0u;
  clear_has_star_sign();
}
inline ::google::protobuf::uint32 role_show_change_birthday_ack::star_sign() const {
  return star_sign_;
}
inline void role_show_change_birthday_ack::set_star_sign(::google::protobuf::uint32 value) {
  set_has_star_sign();
  star_sign_ = value;
}

// -------------------------------------------------------------------

// role_show_change_labels_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_req_id];
inline bool role_show_change_labels_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_labels_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_labels_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_labels_req::clear_protoid() {
  protoid_ = 5243;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_labels_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_labels_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint32 labels = 2;
inline int role_show_change_labels_req::labels_size() const {
  return labels_.size();
}
inline void role_show_change_labels_req::clear_labels() {
  labels_.Clear();
}
inline ::google::protobuf::uint32 role_show_change_labels_req::labels(int index) const {
  return labels_.Get(index);
}
inline void role_show_change_labels_req::set_labels(int index, ::google::protobuf::uint32 value) {
  labels_.Set(index, value);
}
inline void role_show_change_labels_req::add_labels(::google::protobuf::uint32 value) {
  labels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
role_show_change_labels_req::labels() const {
  return labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
role_show_change_labels_req::mutable_labels() {
  return &labels_;
}

// -------------------------------------------------------------------

// role_show_change_labels_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_change_labels_ack_id];
inline bool role_show_change_labels_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_change_labels_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_change_labels_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_change_labels_ack::clear_protoid() {
  protoid_ = 5244;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_change_labels_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_change_labels_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool role_show_change_labels_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_change_labels_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_change_labels_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_change_labels_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_change_labels_ack::ret() const {
  return ret_;
}
inline void role_show_change_labels_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated uint32 labels = 3;
inline int role_show_change_labels_ack::labels_size() const {
  return labels_.size();
}
inline void role_show_change_labels_ack::clear_labels() {
  labels_.Clear();
}
inline ::google::protobuf::uint32 role_show_change_labels_ack::labels(int index) const {
  return labels_.Get(index);
}
inline void role_show_change_labels_ack::set_labels(int index, ::google::protobuf::uint32 value) {
  labels_.Set(index, value);
}
inline void role_show_change_labels_ack::add_labels(::google::protobuf::uint32 value) {
  labels_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
role_show_change_labels_ack::labels() const {
  return labels_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
role_show_change_labels_ack::mutable_labels() {
  return &labels_;
}

// -------------------------------------------------------------------

// role_show_get_emotion_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_req_id];
inline bool role_show_get_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_get_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_get_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_get_emotion_req::clear_protoid() {
  protoid_ = 5245;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_get_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_get_emotion_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_get_emotion_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_get_emotion_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_get_emotion_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_get_emotion_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_get_emotion_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_get_emotion_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint32 start_index = 3;
inline bool role_show_get_emotion_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_get_emotion_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_get_emotion_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_get_emotion_req::clear_start_index() {
  start_index_ = 0u;
  clear_has_start_index();
}
inline ::google::protobuf::uint32 role_show_get_emotion_req::start_index() const {
  return start_index_;
}
inline void role_show_get_emotion_req::set_start_index(::google::protobuf::uint32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional uint32 count = 4;
inline bool role_show_get_emotion_req::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_get_emotion_req::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_get_emotion_req::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_get_emotion_req::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 role_show_get_emotion_req::count() const {
  return count_;
}
inline void role_show_get_emotion_req::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// role_show_get_emotion_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_emotion_ack_id];
inline bool role_show_get_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_get_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_get_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_get_emotion_ack::clear_protoid() {
  protoid_ = 5246;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_get_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_get_emotion_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool role_show_get_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_get_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_get_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_get_emotion_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 role_show_get_emotion_ack::ret() const {
  return ret_;
}
inline void role_show_get_emotion_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 show_role_id = 3;
inline bool role_show_get_emotion_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_get_emotion_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_get_emotion_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_get_emotion_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_get_emotion_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_get_emotion_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.show_emotion_all_info emotion_all = 4;
inline bool role_show_get_emotion_ack::has_emotion_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_get_emotion_ack::set_has_emotion_all() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_get_emotion_ack::clear_has_emotion_all() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_get_emotion_ack::clear_emotion_all() {
  if (emotion_all_ != NULL) emotion_all_->::SProtoSpace::show_emotion_all_info::Clear();
  clear_has_emotion_all();
}
inline const ::SProtoSpace::show_emotion_all_info& role_show_get_emotion_ack::emotion_all() const {
  return emotion_all_ != NULL ? *emotion_all_ : *default_instance_->emotion_all_;
}
inline ::SProtoSpace::show_emotion_all_info* role_show_get_emotion_ack::mutable_emotion_all() {
  set_has_emotion_all();
  if (emotion_all_ == NULL) emotion_all_ = new ::SProtoSpace::show_emotion_all_info;
  return emotion_all_;
}
inline ::SProtoSpace::show_emotion_all_info* role_show_get_emotion_ack::release_emotion_all() {
  clear_has_emotion_all();
  ::SProtoSpace::show_emotion_all_info* temp = emotion_all_;
  emotion_all_ = NULL;
  return temp;
}
inline void role_show_get_emotion_ack::set_allocated_emotion_all(::SProtoSpace::show_emotion_all_info* emotion_all) {
  delete emotion_all_;
  emotion_all_ = emotion_all;
  if (emotion_all) {
    set_has_emotion_all();
  } else {
    clear_has_emotion_all();
  }
}

// -------------------------------------------------------------------

// role_show_write_emotion_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_req_id];
inline bool role_show_write_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_write_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_write_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_write_emotion_req::clear_protoid() {
  protoid_ = 5247;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_write_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_write_emotion_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional string msg_content = 2;
inline bool role_show_write_emotion_req::has_msg_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_write_emotion_req::set_has_msg_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_write_emotion_req::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_write_emotion_req::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& role_show_write_emotion_req::msg_content() const {
  return *msg_content_;
}
inline void role_show_write_emotion_req::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_write_emotion_req::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_write_emotion_req::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_write_emotion_req::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* role_show_write_emotion_req::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_write_emotion_req::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string img_urls = 3;
inline int role_show_write_emotion_req::img_urls_size() const {
  return img_urls_.size();
}
inline void role_show_write_emotion_req::clear_img_urls() {
  img_urls_.Clear();
}
inline const ::std::string& role_show_write_emotion_req::img_urls(int index) const {
  return img_urls_.Get(index);
}
inline ::std::string* role_show_write_emotion_req::mutable_img_urls(int index) {
  return img_urls_.Mutable(index);
}
inline void role_show_write_emotion_req::set_img_urls(int index, const ::std::string& value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void role_show_write_emotion_req::set_img_urls(int index, const char* value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void role_show_write_emotion_req::set_img_urls(int index, const char* value, size_t size) {
  img_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_write_emotion_req::add_img_urls() {
  return img_urls_.Add();
}
inline void role_show_write_emotion_req::add_img_urls(const ::std::string& value) {
  img_urls_.Add()->assign(value);
}
inline void role_show_write_emotion_req::add_img_urls(const char* value) {
  img_urls_.Add()->assign(value);
}
inline void role_show_write_emotion_req::add_img_urls(const char* value, size_t size) {
  img_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
role_show_write_emotion_req::img_urls() const {
  return img_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
role_show_write_emotion_req::mutable_img_urls() {
  return &img_urls_;
}

// optional .SProtoSpace.EmotionType msg_type = 4;
inline bool role_show_write_emotion_req::has_msg_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_write_emotion_req::set_has_msg_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_write_emotion_req::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_write_emotion_req::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::SProtoSpace::EmotionType role_show_write_emotion_req::msg_type() const {
  return static_cast< ::SProtoSpace::EmotionType >(msg_type_);
}
inline void role_show_write_emotion_req::set_msg_type(::SProtoSpace::EmotionType value) {
  assert(::SProtoSpace::EmotionType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// -------------------------------------------------------------------

// role_show_write_emotion_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_write_emotion_ack_id];
inline bool role_show_write_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_write_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_write_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_write_emotion_ack::clear_protoid() {
  protoid_ = 5248;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_write_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_write_emotion_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 ret = 2;
inline bool role_show_write_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_write_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_write_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_write_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_write_emotion_ack::ret() const {
  return ret_;
}
inline void role_show_write_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 emotion_id = 3;
inline bool role_show_write_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_write_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_write_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_write_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_write_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void role_show_write_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional string msg_content = 4;
inline bool role_show_write_emotion_ack::has_msg_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_write_emotion_ack::set_has_msg_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_write_emotion_ack::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_write_emotion_ack::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& role_show_write_emotion_ack::msg_content() const {
  return *msg_content_;
}
inline void role_show_write_emotion_ack::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_write_emotion_ack::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_write_emotion_ack::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_write_emotion_ack::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* role_show_write_emotion_ack::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_write_emotion_ack::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string img_urls = 5;
inline int role_show_write_emotion_ack::img_urls_size() const {
  return img_urls_.size();
}
inline void role_show_write_emotion_ack::clear_img_urls() {
  img_urls_.Clear();
}
inline const ::std::string& role_show_write_emotion_ack::img_urls(int index) const {
  return img_urls_.Get(index);
}
inline ::std::string* role_show_write_emotion_ack::mutable_img_urls(int index) {
  return img_urls_.Mutable(index);
}
inline void role_show_write_emotion_ack::set_img_urls(int index, const ::std::string& value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void role_show_write_emotion_ack::set_img_urls(int index, const char* value) {
  img_urls_.Mutable(index)->assign(value);
}
inline void role_show_write_emotion_ack::set_img_urls(int index, const char* value, size_t size) {
  img_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_write_emotion_ack::add_img_urls() {
  return img_urls_.Add();
}
inline void role_show_write_emotion_ack::add_img_urls(const ::std::string& value) {
  img_urls_.Add()->assign(value);
}
inline void role_show_write_emotion_ack::add_img_urls(const char* value) {
  img_urls_.Add()->assign(value);
}
inline void role_show_write_emotion_ack::add_img_urls(const char* value, size_t size) {
  img_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
role_show_write_emotion_ack::img_urls() const {
  return img_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
role_show_write_emotion_ack::mutable_img_urls() {
  return &img_urls_;
}

// optional .SProtoSpace.EmotionType msg_type = 6;
inline bool role_show_write_emotion_ack::has_msg_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_write_emotion_ack::set_has_msg_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_write_emotion_ack::clear_has_msg_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_write_emotion_ack::clear_msg_type() {
  msg_type_ = 0;
  clear_has_msg_type();
}
inline ::SProtoSpace::EmotionType role_show_write_emotion_ack::msg_type() const {
  return static_cast< ::SProtoSpace::EmotionType >(msg_type_);
}
inline void role_show_write_emotion_ack::set_msg_type(::SProtoSpace::EmotionType value) {
  assert(::SProtoSpace::EmotionType_IsValid(value));
  set_has_msg_type();
  msg_type_ = value;
}

// optional uint64 create_time = 7;
inline bool role_show_write_emotion_ack::has_create_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_show_write_emotion_ack::set_has_create_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_show_write_emotion_ack::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_show_write_emotion_ack::clear_create_time() {
  create_time_ = GOOGLE_ULONGLONG(0);
  clear_has_create_time();
}
inline ::google::protobuf::uint64 role_show_write_emotion_ack::create_time() const {
  return create_time_;
}
inline void role_show_write_emotion_ack::set_create_time(::google::protobuf::uint64 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// role_show_like_emotion_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_req_id];
inline bool role_show_like_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_like_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_like_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_like_emotion_req::clear_protoid() {
  protoid_ = 5249;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_like_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_like_emotion_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool role_show_like_emotion_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_like_emotion_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_like_emotion_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_like_emotion_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 role_show_like_emotion_req::role_id() const {
  return role_id_;
}
inline void role_show_like_emotion_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool role_show_like_emotion_req::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_like_emotion_req::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_like_emotion_req::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_like_emotion_req::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& role_show_like_emotion_req::role_name() const {
  return *role_name_;
}
inline void role_show_like_emotion_req::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_show_like_emotion_req::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_show_like_emotion_req::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_like_emotion_req::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* role_show_like_emotion_req::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_like_emotion_req::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 emotion_id = 4;
inline bool role_show_like_emotion_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_like_emotion_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_like_emotion_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_like_emotion_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_like_emotion_req::emotion_id() const {
  return emotion_id_;
}
inline void role_show_like_emotion_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 show_role_id = 5;
inline bool role_show_like_emotion_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_like_emotion_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_like_emotion_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_like_emotion_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_like_emotion_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_like_emotion_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_like_emotion_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_like_emotion_ack_id];
inline bool role_show_like_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_like_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_like_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_like_emotion_ack::clear_protoid() {
  protoid_ = 5250;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_like_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_like_emotion_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool role_show_like_emotion_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_like_emotion_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_like_emotion_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_like_emotion_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 role_show_like_emotion_ack::role_id() const {
  return role_id_;
}
inline void role_show_like_emotion_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string role_name = 3;
inline bool role_show_like_emotion_ack::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_like_emotion_ack::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_like_emotion_ack::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_like_emotion_ack::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& role_show_like_emotion_ack::role_name() const {
  return *role_name_;
}
inline void role_show_like_emotion_ack::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_show_like_emotion_ack::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void role_show_like_emotion_ack::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_like_emotion_ack::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* role_show_like_emotion_ack::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_like_emotion_ack::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 emotion_id = 4;
inline bool role_show_like_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_like_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_like_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_like_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_like_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void role_show_like_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 show_role_id = 5;
inline bool role_show_like_emotion_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_like_emotion_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_like_emotion_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_like_emotion_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_like_emotion_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_like_emotion_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint32 ret = 6;
inline bool role_show_like_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_like_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_like_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_like_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_like_emotion_ack::ret() const {
  return ret_;
}
inline void role_show_like_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// role_show_comment_emotion_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_req_id];
inline bool role_show_comment_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_comment_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_comment_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_comment_emotion_req::clear_protoid() {
  protoid_ = 5251;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_comment_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_comment_emotion_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool role_show_comment_emotion_req::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_comment_emotion_req::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_comment_emotion_req::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_comment_emotion_req::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_req::from_id() const {
  return from_id_;
}
inline void role_show_comment_emotion_req::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 3;
inline bool role_show_comment_emotion_req::has_from_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_comment_emotion_req::set_has_from_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_comment_emotion_req::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_comment_emotion_req::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& role_show_comment_emotion_req::from_name() const {
  return *from_name_;
}
inline void role_show_comment_emotion_req::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void role_show_comment_emotion_req::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void role_show_comment_emotion_req::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_comment_emotion_req::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* role_show_comment_emotion_req::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_comment_emotion_req::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 to_id = 4;
inline bool role_show_comment_emotion_req::has_to_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_comment_emotion_req::set_has_to_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_comment_emotion_req::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_comment_emotion_req::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_req::to_id() const {
  return to_id_;
}
inline void role_show_comment_emotion_req::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional string to_name = 5;
inline bool role_show_comment_emotion_req::has_to_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_comment_emotion_req::set_has_to_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_comment_emotion_req::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_comment_emotion_req::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& role_show_comment_emotion_req::to_name() const {
  return *to_name_;
}
inline void role_show_comment_emotion_req::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void role_show_comment_emotion_req::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void role_show_comment_emotion_req::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_comment_emotion_req::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* role_show_comment_emotion_req::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_comment_emotion_req::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg_content = 6;
inline bool role_show_comment_emotion_req::has_msg_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_comment_emotion_req::set_has_msg_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_comment_emotion_req::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_comment_emotion_req::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& role_show_comment_emotion_req::msg_content() const {
  return *msg_content_;
}
inline void role_show_comment_emotion_req::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_comment_emotion_req::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_comment_emotion_req::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_comment_emotion_req::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* role_show_comment_emotion_req::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_comment_emotion_req::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 show_role_id = 7;
inline bool role_show_comment_emotion_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_show_comment_emotion_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_show_comment_emotion_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_show_comment_emotion_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_comment_emotion_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 8;
inline bool role_show_comment_emotion_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_show_comment_emotion_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_show_comment_emotion_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_show_comment_emotion_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_req::emotion_id() const {
  return emotion_id_;
}
inline void role_show_comment_emotion_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// -------------------------------------------------------------------

// role_show_comment_emotion_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_emotion_ack_id];
inline bool role_show_comment_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_comment_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_comment_emotion_ack::clear_protoid() {
  protoid_ = 5252;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_comment_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_comment_emotion_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool role_show_comment_emotion_ack::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_comment_emotion_ack::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_comment_emotion_ack::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_ack::from_id() const {
  return from_id_;
}
inline void role_show_comment_emotion_ack::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 3;
inline bool role_show_comment_emotion_ack::has_from_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_from_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_comment_emotion_ack::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_comment_emotion_ack::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& role_show_comment_emotion_ack::from_name() const {
  return *from_name_;
}
inline void role_show_comment_emotion_ack::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void role_show_comment_emotion_ack::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void role_show_comment_emotion_ack::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_comment_emotion_ack::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* role_show_comment_emotion_ack::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_comment_emotion_ack::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 to_id = 4;
inline bool role_show_comment_emotion_ack::has_to_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_to_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_comment_emotion_ack::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_comment_emotion_ack::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_ack::to_id() const {
  return to_id_;
}
inline void role_show_comment_emotion_ack::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional string to_name = 5;
inline bool role_show_comment_emotion_ack::has_to_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_to_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_comment_emotion_ack::clear_has_to_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_comment_emotion_ack::clear_to_name() {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    to_name_->clear();
  }
  clear_has_to_name();
}
inline const ::std::string& role_show_comment_emotion_ack::to_name() const {
  return *to_name_;
}
inline void role_show_comment_emotion_ack::set_to_name(const ::std::string& value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void role_show_comment_emotion_ack::set_to_name(const char* value) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(value);
}
inline void role_show_comment_emotion_ack::set_to_name(const char* value, size_t size) {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  to_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_comment_emotion_ack::mutable_to_name() {
  set_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    to_name_ = new ::std::string;
  }
  return to_name_;
}
inline ::std::string* role_show_comment_emotion_ack::release_to_name() {
  clear_has_to_name();
  if (to_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_name_;
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_comment_emotion_ack::set_allocated_to_name(::std::string* to_name) {
  if (to_name_ != &::google::protobuf::internal::kEmptyString) {
    delete to_name_;
  }
  if (to_name) {
    set_has_to_name();
    to_name_ = to_name;
  } else {
    clear_has_to_name();
    to_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string msg_content = 6;
inline bool role_show_comment_emotion_ack::has_msg_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_msg_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_comment_emotion_ack::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_comment_emotion_ack::clear_msg_content() {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    msg_content_->clear();
  }
  clear_has_msg_content();
}
inline const ::std::string& role_show_comment_emotion_ack::msg_content() const {
  return *msg_content_;
}
inline void role_show_comment_emotion_ack::set_msg_content(const ::std::string& value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_comment_emotion_ack::set_msg_content(const char* value) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(value);
}
inline void role_show_comment_emotion_ack::set_msg_content(const char* value, size_t size) {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  msg_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* role_show_comment_emotion_ack::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    msg_content_ = new ::std::string;
  }
  return msg_content_;
}
inline ::std::string* role_show_comment_emotion_ack::release_msg_content() {
  clear_has_msg_content();
  if (msg_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_content_;
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void role_show_comment_emotion_ack::set_allocated_msg_content(::std::string* msg_content) {
  if (msg_content_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_content_;
  }
  if (msg_content) {
    set_has_msg_content();
    msg_content_ = msg_content;
  } else {
    clear_has_msg_content();
    msg_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 show_role_id = 7;
inline bool role_show_comment_emotion_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_show_comment_emotion_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_show_comment_emotion_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_comment_emotion_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 8;
inline bool role_show_comment_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_show_comment_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_show_comment_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void role_show_comment_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint32 ret = 9;
inline bool role_show_comment_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000100u;
}
inline void role_show_comment_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void role_show_comment_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_comment_emotion_ack::ret() const {
  return ret_;
}
inline void role_show_comment_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 comment_id = 10;
inline bool role_show_comment_emotion_ack::has_comment_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void role_show_comment_emotion_ack::set_has_comment_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void role_show_comment_emotion_ack::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void role_show_comment_emotion_ack::clear_comment_id() {
  comment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comment_id();
}
inline ::google::protobuf::uint64 role_show_comment_emotion_ack::comment_id() const {
  return comment_id_;
}
inline void role_show_comment_emotion_ack::set_comment_id(::google::protobuf::uint64 value) {
  set_has_comment_id();
  comment_id_ = value;
}

// -------------------------------------------------------------------

// role_show_remove_emotion_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_req_id];
inline bool role_show_remove_emotion_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_remove_emotion_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_remove_emotion_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_remove_emotion_req::clear_protoid() {
  protoid_ = 5253;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_remove_emotion_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_remove_emotion_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 emotion_id = 2;
inline bool role_show_remove_emotion_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_remove_emotion_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_remove_emotion_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_remove_emotion_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_remove_emotion_req::emotion_id() const {
  return emotion_id_;
}
inline void role_show_remove_emotion_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// -------------------------------------------------------------------

// role_show_remove_emotion_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_emotion_ack_id];
inline bool role_show_remove_emotion_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_remove_emotion_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_remove_emotion_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_remove_emotion_ack::clear_protoid() {
  protoid_ = 5254;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_remove_emotion_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_remove_emotion_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 emotion_id = 2;
inline bool role_show_remove_emotion_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_remove_emotion_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_remove_emotion_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_remove_emotion_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_remove_emotion_ack::emotion_id() const {
  return emotion_id_;
}
inline void role_show_remove_emotion_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint32 ret = 3;
inline bool role_show_remove_emotion_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_remove_emotion_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_remove_emotion_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_remove_emotion_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_remove_emotion_ack::ret() const {
  return ret_;
}
inline void role_show_remove_emotion_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// role_show_remove_comment_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_req_id];
inline bool role_show_remove_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_remove_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_remove_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_remove_comment_req::clear_protoid() {
  protoid_ = 5255;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_remove_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_remove_comment_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool role_show_remove_comment_req::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_remove_comment_req::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_remove_comment_req::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_remove_comment_req::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_req::from_id() const {
  return from_id_;
}
inline void role_show_remove_comment_req::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional uint64 to_id = 3;
inline bool role_show_remove_comment_req::has_to_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_remove_comment_req::set_has_to_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_remove_comment_req::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_remove_comment_req::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_req::to_id() const {
  return to_id_;
}
inline void role_show_remove_comment_req::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool role_show_remove_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_remove_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_remove_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_remove_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_remove_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 5;
inline bool role_show_remove_comment_req::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_remove_comment_req::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_remove_comment_req::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_remove_comment_req::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_req::emotion_id() const {
  return emotion_id_;
}
inline void role_show_remove_comment_req::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 comment_id = 6;
inline bool role_show_remove_comment_req::has_comment_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_remove_comment_req::set_has_comment_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_remove_comment_req::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_remove_comment_req::clear_comment_id() {
  comment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comment_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_req::comment_id() const {
  return comment_id_;
}
inline void role_show_remove_comment_req::set_comment_id(::google::protobuf::uint64 value) {
  set_has_comment_id();
  comment_id_ = value;
}

// -------------------------------------------------------------------

// role_show_remove_comment_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_remove_comment_ack_id];
inline bool role_show_remove_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_remove_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_remove_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_remove_comment_ack::clear_protoid() {
  protoid_ = 5256;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_remove_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_remove_comment_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_id = 2;
inline bool role_show_remove_comment_ack::has_from_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_remove_comment_ack::set_has_from_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_remove_comment_ack::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_remove_comment_ack::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_ack::from_id() const {
  return from_id_;
}
inline void role_show_remove_comment_ack::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional uint64 to_id = 3;
inline bool role_show_remove_comment_ack::has_to_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_remove_comment_ack::set_has_to_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_remove_comment_ack::clear_has_to_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_remove_comment_ack::clear_to_id() {
  to_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_ack::to_id() const {
  return to_id_;
}
inline void role_show_remove_comment_ack::set_to_id(::google::protobuf::uint64 value) {
  set_has_to_id();
  to_id_ = value;
}

// optional uint64 show_role_id = 4;
inline bool role_show_remove_comment_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_remove_comment_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_remove_comment_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_remove_comment_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_remove_comment_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional uint64 emotion_id = 5;
inline bool role_show_remove_comment_ack::has_emotion_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_show_remove_comment_ack::set_has_emotion_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_show_remove_comment_ack::clear_has_emotion_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_show_remove_comment_ack::clear_emotion_id() {
  emotion_id_ = GOOGLE_ULONGLONG(0);
  clear_has_emotion_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_ack::emotion_id() const {
  return emotion_id_;
}
inline void role_show_remove_comment_ack::set_emotion_id(::google::protobuf::uint64 value) {
  set_has_emotion_id();
  emotion_id_ = value;
}

// optional uint64 comment_id = 6;
inline bool role_show_remove_comment_ack::has_comment_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_show_remove_comment_ack::set_has_comment_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_show_remove_comment_ack::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_show_remove_comment_ack::clear_comment_id() {
  comment_id_ = GOOGLE_ULONGLONG(0);
  clear_has_comment_id();
}
inline ::google::protobuf::uint64 role_show_remove_comment_ack::comment_id() const {
  return comment_id_;
}
inline void role_show_remove_comment_ack::set_comment_id(::google::protobuf::uint64 value) {
  set_has_comment_id();
  comment_id_ = value;
}

// optional uint32 ret = 7;
inline bool role_show_remove_comment_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_show_remove_comment_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_show_remove_comment_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_show_remove_comment_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 role_show_remove_comment_ack::ret() const {
  return ret_;
}
inline void role_show_remove_comment_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// role_show_set_hero_info

// optional int32 index = 1;
inline bool role_show_set_hero_info::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_set_hero_info::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_set_hero_info::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_set_hero_info::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 role_show_set_hero_info::index() const {
  return index_;
}
inline void role_show_set_hero_info::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int64 hero_id = 2;
inline bool role_show_set_hero_info::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_set_hero_info::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_set_hero_info::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_set_hero_info::clear_hero_id() {
  hero_id_ = GOOGLE_LONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::int64 role_show_set_hero_info::hero_id() const {
  return hero_id_;
}
inline void role_show_set_hero_info::set_hero_id(::google::protobuf::int64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// role_show_set_hero_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_req_id];
inline bool role_show_set_hero_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_set_hero_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_set_hero_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_set_hero_req::clear_protoid() {
  protoid_ = 5225;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_set_hero_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_set_hero_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.role_show_set_hero_info data = 2;
inline int role_show_set_hero_req::data_size() const {
  return data_.size();
}
inline void role_show_set_hero_req::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::role_show_set_hero_info& role_show_set_hero_req::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::role_show_set_hero_info* role_show_set_hero_req::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::role_show_set_hero_info* role_show_set_hero_req::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_set_hero_info >&
role_show_set_hero_req::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_set_hero_info >*
role_show_set_hero_req::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// role_show_set_hero_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_hero_ack_id];
inline bool role_show_set_hero_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_set_hero_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_set_hero_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_set_hero_ack::clear_protoid() {
  protoid_ = 5226;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_set_hero_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_set_hero_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_set_hero_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_set_hero_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_set_hero_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_set_hero_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_set_hero_ack::result() const {
  return result_;
}
inline void role_show_set_hero_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// role_show_set_border_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_req_id];
inline bool role_show_set_border_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_set_border_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_set_border_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_set_border_req::clear_protoid() {
  protoid_ = 5227;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_set_border_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_set_border_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 border_id = 2;
inline bool role_show_set_border_req::has_border_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_set_border_req::set_has_border_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_set_border_req::clear_has_border_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_set_border_req::clear_border_id() {
  border_id_ = 0;
  clear_has_border_id();
}
inline ::google::protobuf::int32 role_show_set_border_req::border_id() const {
  return border_id_;
}
inline void role_show_set_border_req::set_border_id(::google::protobuf::int32 value) {
  set_has_border_id();
  border_id_ = value;
}

// -------------------------------------------------------------------

// role_show_set_border_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_set_border_ack_id];
inline bool role_show_set_border_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_set_border_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_set_border_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_set_border_ack::clear_protoid() {
  protoid_ = 5228;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_set_border_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_set_border_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_set_border_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_set_border_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_set_border_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_set_border_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_set_border_ack::result() const {
  return result_;
}
inline void role_show_set_border_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// role_show_comment_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_req_id];
inline bool role_show_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_comment_req::clear_protoid() {
  protoid_ = 5229;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_comment_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.comment_info comment = 3;
inline bool role_show_comment_req::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_comment_req::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_comment_req::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_comment_req::clear_comment() {
  if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
  clear_has_comment();
}
inline const ::SProtoSpace::comment_info& role_show_comment_req::comment() const {
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
}
inline ::SProtoSpace::comment_info* role_show_comment_req::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) comment_ = new ::SProtoSpace::comment_info;
  return comment_;
}
inline ::SProtoSpace::comment_info* role_show_comment_req::release_comment() {
  clear_has_comment();
  ::SProtoSpace::comment_info* temp = comment_;
  comment_ = NULL;
  return temp;
}
inline void role_show_comment_req::set_allocated_comment(::SProtoSpace::comment_info* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
}

// -------------------------------------------------------------------

// role_show_comment_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_comment_ack_id];
inline bool role_show_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_comment_ack::clear_protoid() {
  protoid_ = 5230;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_comment_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_comment_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_comment_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_comment_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_comment_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_comment_ack::result() const {
  return result_;
}
inline void role_show_comment_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .SProtoSpace.comment_info comment = 3;
inline bool role_show_comment_ack::has_comment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_comment_ack::set_has_comment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_comment_ack::clear_has_comment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_comment_ack::clear_comment() {
  if (comment_ != NULL) comment_->::SProtoSpace::comment_info::Clear();
  clear_has_comment();
}
inline const ::SProtoSpace::comment_info& role_show_comment_ack::comment() const {
  return comment_ != NULL ? *comment_ : *default_instance_->comment_;
}
inline ::SProtoSpace::comment_info* role_show_comment_ack::mutable_comment() {
  set_has_comment();
  if (comment_ == NULL) comment_ = new ::SProtoSpace::comment_info;
  return comment_;
}
inline ::SProtoSpace::comment_info* role_show_comment_ack::release_comment() {
  clear_has_comment();
  ::SProtoSpace::comment_info* temp = comment_;
  comment_ = NULL;
  return temp;
}
inline void role_show_comment_ack::set_allocated_comment(::SProtoSpace::comment_info* comment) {
  delete comment_;
  comment_ = comment;
  if (comment) {
    set_has_comment();
  } else {
    clear_has_comment();
  }
}

// -------------------------------------------------------------------

// role_show_delete_comment_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_req_id];
inline bool role_show_delete_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_delete_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_delete_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_delete_comment_req::clear_protoid() {
  protoid_ = 5231;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_delete_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_delete_comment_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 role_id = 2;
inline bool role_show_delete_comment_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_delete_comment_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_delete_comment_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_delete_comment_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 role_show_delete_comment_req::role_id() const {
  return role_id_;
}
inline void role_show_delete_comment_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint64 to_role_id = 3;
inline bool role_show_delete_comment_req::has_to_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_delete_comment_req::set_has_to_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_delete_comment_req::clear_has_to_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_delete_comment_req::clear_to_role_id() {
  to_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_to_role_id();
}
inline ::google::protobuf::uint64 role_show_delete_comment_req::to_role_id() const {
  return to_role_id_;
}
inline void role_show_delete_comment_req::set_to_role_id(::google::protobuf::uint64 value) {
  set_has_to_role_id();
  to_role_id_ = value;
}

// optional uint64 time = 4;
inline bool role_show_delete_comment_req::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_delete_comment_req::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_delete_comment_req::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_delete_comment_req::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 role_show_delete_comment_req::time() const {
  return time_;
}
inline void role_show_delete_comment_req::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// role_show_delete_comment_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_delete_comment_ack_id];
inline bool role_show_delete_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_delete_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_delete_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_delete_comment_ack::clear_protoid() {
  protoid_ = 5232;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_delete_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_delete_comment_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_delete_comment_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_delete_comment_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_delete_comment_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_delete_comment_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_delete_comment_ack::result() const {
  return result_;
}
inline void role_show_delete_comment_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// role_show_get_comment_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_req_id];
inline bool role_show_get_comment_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_get_comment_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_get_comment_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_get_comment_req::clear_protoid() {
  protoid_ = 5233;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_get_comment_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_get_comment_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 show_role_id = 2;
inline bool role_show_get_comment_req::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_get_comment_req::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_get_comment_req::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_get_comment_req::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_get_comment_req::show_role_id() const {
  return show_role_id_;
}
inline void role_show_get_comment_req::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// -------------------------------------------------------------------

// role_show_get_comment_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_show_get_comment_ack_id];
inline bool role_show_get_comment_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_show_get_comment_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_show_get_comment_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_show_get_comment_ack::clear_protoid() {
  protoid_ = 5234;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_show_get_comment_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_show_get_comment_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool role_show_get_comment_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_show_get_comment_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_show_get_comment_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_show_get_comment_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_show_get_comment_ack::result() const {
  return result_;
}
inline void role_show_get_comment_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint64 show_role_id = 3;
inline bool role_show_get_comment_ack::has_show_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_show_get_comment_ack::set_has_show_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_show_get_comment_ack::clear_has_show_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_show_get_comment_ack::clear_show_role_id() {
  show_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_show_role_id();
}
inline ::google::protobuf::uint64 role_show_get_comment_ack::show_role_id() const {
  return show_role_id_;
}
inline void role_show_get_comment_ack::set_show_role_id(::google::protobuf::uint64 value) {
  set_has_show_role_id();
  show_role_id_ = value;
}

// optional .SProtoSpace.comment_all comment_all = 4;
inline bool role_show_get_comment_ack::has_comment_all() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_show_get_comment_ack::set_has_comment_all() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_show_get_comment_ack::clear_has_comment_all() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_show_get_comment_ack::clear_comment_all() {
  if (comment_all_ != NULL) comment_all_->::SProtoSpace::comment_all::Clear();
  clear_has_comment_all();
}
inline const ::SProtoSpace::comment_all& role_show_get_comment_ack::comment_all() const {
  return comment_all_ != NULL ? *comment_all_ : *default_instance_->comment_all_;
}
inline ::SProtoSpace::comment_all* role_show_get_comment_ack::mutable_comment_all() {
  set_has_comment_all();
  if (comment_all_ == NULL) comment_all_ = new ::SProtoSpace::comment_all;
  return comment_all_;
}
inline ::SProtoSpace::comment_all* role_show_get_comment_ack::release_comment_all() {
  clear_has_comment_all();
  ::SProtoSpace::comment_all* temp = comment_all_;
  comment_all_ = NULL;
  return temp;
}
inline void role_show_get_comment_ack::set_allocated_comment_all(::SProtoSpace::comment_all* comment_all) {
  delete comment_all_;
  comment_all_ = comment_all;
  if (comment_all) {
    set_has_comment_all();
  } else {
    clear_has_comment_all();
  }
}

// -------------------------------------------------------------------

// discover_info_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_info_ntf_id];
inline bool discover_info_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discover_info_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discover_info_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discover_info_ntf::clear_protoid() {
  protoid_ = 5800;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discover_info_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discover_info_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 time = 2;
inline bool discover_info_ntf::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discover_info_ntf::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discover_info_ntf::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discover_info_ntf::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 discover_info_ntf::time() const {
  return time_;
}
inline void discover_info_ntf::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional bool update = 3;
inline bool discover_info_ntf::has_update() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void discover_info_ntf::set_has_update() {
  _has_bits_[0] |= 0x00000004u;
}
inline void discover_info_ntf::clear_has_update() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void discover_info_ntf::clear_update() {
  update_ = false;
  clear_has_update();
}
inline bool discover_info_ntf::update() const {
  return update_;
}
inline void discover_info_ntf::set_update(bool value) {
  set_has_update();
  update_ = value;
}

// repeated .SProtoSpace.dischapter_data chapter_s = 4;
inline int discover_info_ntf::chapter_s_size() const {
  return chapter_s_.size();
}
inline void discover_info_ntf::clear_chapter_s() {
  chapter_s_.Clear();
}
inline const ::SProtoSpace::dischapter_data& discover_info_ntf::chapter_s(int index) const {
  return chapter_s_.Get(index);
}
inline ::SProtoSpace::dischapter_data* discover_info_ntf::mutable_chapter_s(int index) {
  return chapter_s_.Mutable(index);
}
inline ::SProtoSpace::dischapter_data* discover_info_ntf::add_chapter_s() {
  return chapter_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::dischapter_data >&
discover_info_ntf::chapter_s() const {
  return chapter_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::dischapter_data >*
discover_info_ntf::mutable_chapter_s() {
  return &chapter_s_;
}

// repeated .SProtoSpace.discover_data discover_s = 5;
inline int discover_info_ntf::discover_s_size() const {
  return discover_s_.size();
}
inline void discover_info_ntf::clear_discover_s() {
  discover_s_.Clear();
}
inline const ::SProtoSpace::discover_data& discover_info_ntf::discover_s(int index) const {
  return discover_s_.Get(index);
}
inline ::SProtoSpace::discover_data* discover_info_ntf::mutable_discover_s(int index) {
  return discover_s_.Mutable(index);
}
inline ::SProtoSpace::discover_data* discover_info_ntf::add_discover_s() {
  return discover_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >&
discover_info_ntf::discover_s() const {
  return discover_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discover_data >*
discover_info_ntf::mutable_discover_s() {
  return &discover_s_;
}

// repeated int32 star_box_ids = 6;
inline int discover_info_ntf::star_box_ids_size() const {
  return star_box_ids_.size();
}
inline void discover_info_ntf::clear_star_box_ids() {
  star_box_ids_.Clear();
}
inline ::google::protobuf::int32 discover_info_ntf::star_box_ids(int index) const {
  return star_box_ids_.Get(index);
}
inline void discover_info_ntf::set_star_box_ids(int index, ::google::protobuf::int32 value) {
  star_box_ids_.Set(index, value);
}
inline void discover_info_ntf::add_star_box_ids(::google::protobuf::int32 value) {
  star_box_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
discover_info_ntf::star_box_ids() const {
  return star_box_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
discover_info_ntf::mutable_star_box_ids() {
  return &star_box_ids_;
}

// -------------------------------------------------------------------

// discover_show_boss_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discover_show_boss_ntf_id];
inline bool discover_show_boss_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discover_show_boss_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discover_show_boss_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discover_show_boss_ntf::clear_protoid() {
  protoid_ = 5801;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discover_show_boss_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discover_show_boss_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 id = 2;
inline bool discover_show_boss_ntf::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discover_show_boss_ntf::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discover_show_boss_ntf::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discover_show_boss_ntf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 discover_show_boss_ntf::id() const {
  return id_;
}
inline void discover_show_boss_ntf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 boss_id = 3;
inline bool discover_show_boss_ntf::has_boss_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void discover_show_boss_ntf::set_has_boss_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void discover_show_boss_ntf::clear_has_boss_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void discover_show_boss_ntf::clear_boss_id() {
  boss_id_ = 0;
  clear_has_boss_id();
}
inline ::google::protobuf::int32 discover_show_boss_ntf::boss_id() const {
  return boss_id_;
}
inline void discover_show_boss_ntf::set_boss_id(::google::protobuf::int32 value) {
  set_has_boss_id();
  boss_id_ = value;
}

// -------------------------------------------------------------------

// enter_discover_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_req_id];
inline bool enter_discover_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_discover_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_discover_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_discover_req::clear_protoid() {
  protoid_ = 5802;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID enter_discover_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void enter_discover_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 id = 2;
inline bool enter_discover_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_discover_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_discover_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_discover_req::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 enter_discover_req::id() const {
  return id_;
}
inline void enter_discover_req::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// enter_discover_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = enter_discover_ack_id];
inline bool enter_discover_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_discover_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_discover_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_discover_ack::clear_protoid() {
  protoid_ = 5803;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID enter_discover_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void enter_discover_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool enter_discover_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_discover_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_discover_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_discover_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 enter_discover_ack::result() const {
  return result_;
}
inline void enter_discover_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 id = 3;
inline bool enter_discover_ack::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_discover_ack::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_discover_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_discover_ack::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 enter_discover_ack::id() const {
  return id_;
}
inline void enter_discover_ack::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// exit_discover_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_req_id];
inline bool exit_discover_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_discover_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_discover_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_discover_req::clear_protoid() {
  protoid_ = 5804;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID exit_discover_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void exit_discover_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 id = 2;
inline bool exit_discover_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_discover_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_discover_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_discover_req::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 exit_discover_req::id() const {
  return id_;
}
inline void exit_discover_req::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// exit_discover_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_discover_ack_id];
inline bool exit_discover_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_discover_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_discover_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_discover_ack::clear_protoid() {
  protoid_ = 5805;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID exit_discover_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void exit_discover_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2;
inline bool exit_discover_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_discover_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_discover_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_discover_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 exit_discover_ack::result() const {
  return result_;
}
inline void exit_discover_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 id = 3;
inline bool exit_discover_ack::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void exit_discover_ack::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void exit_discover_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void exit_discover_ack::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 exit_discover_ack::id() const {
  return id_;
}
inline void exit_discover_ack::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 boxnum = 4;
inline bool exit_discover_ack::has_boxnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void exit_discover_ack::set_has_boxnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void exit_discover_ack::clear_has_boxnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void exit_discover_ack::clear_boxnum() {
  boxnum_ = 0;
  clear_has_boxnum();
}
inline ::google::protobuf::int32 exit_discover_ack::boxnum() const {
  return boxnum_;
}
inline void exit_discover_ack::set_boxnum(::google::protobuf::int32 value) {
  set_has_boxnum();
  boxnum_ = value;
}

// repeated .SProtoSpace.drop_data items = 5;
inline int exit_discover_ack::items_size() const {
  return items_.size();
}
inline void exit_discover_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::drop_data& exit_discover_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::drop_data* exit_discover_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::drop_data* exit_discover_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::drop_data >&
exit_discover_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::drop_data >*
exit_discover_ack::mutable_items() {
  return &items_;
}

// repeated int32 monster = 6;
inline int exit_discover_ack::monster_size() const {
  return monster_.size();
}
inline void exit_discover_ack::clear_monster() {
  monster_.Clear();
}
inline ::google::protobuf::int32 exit_discover_ack::monster(int index) const {
  return monster_.Get(index);
}
inline void exit_discover_ack::set_monster(int index, ::google::protobuf::int32 value) {
  monster_.Set(index, value);
}
inline void exit_discover_ack::add_monster(::google::protobuf::int32 value) {
  monster_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
exit_discover_ack::monster() const {
  return monster_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
exit_discover_ack::mutable_monster() {
  return &monster_;
}

// -------------------------------------------------------------------

// discovery_mopping_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_req_id];
inline bool discovery_mopping_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_mopping_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_mopping_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_mopping_req::clear_protoid() {
  protoid_ = 5806;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discovery_mopping_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discovery_mopping_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
inline bool discovery_mopping_req::has_mopping_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_mopping_req::set_has_mopping_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_mopping_req::clear_has_mopping_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_mopping_req::clear_mopping_type() {
  mopping_type_ = 1;
  clear_has_mopping_type();
}
inline ::SProtoSpace::eDiscoveryMoppingType discovery_mopping_req::mopping_type() const {
  return static_cast< ::SProtoSpace::eDiscoveryMoppingType >(mopping_type_);
}
inline void discovery_mopping_req::set_mopping_type(::SProtoSpace::eDiscoveryMoppingType value) {
  assert(::SProtoSpace::eDiscoveryMoppingType_IsValid(value));
  set_has_mopping_type();
  mopping_type_ = value;
}

// optional int32 times = 3;
inline bool discovery_mopping_req::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void discovery_mopping_req::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void discovery_mopping_req::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void discovery_mopping_req::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 discovery_mopping_req::times() const {
  return times_;
}
inline void discovery_mopping_req::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional int32 discovery_id = 4;
inline bool discovery_mopping_req::has_discovery_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void discovery_mopping_req::set_has_discovery_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void discovery_mopping_req::clear_has_discovery_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void discovery_mopping_req::clear_discovery_id() {
  discovery_id_ = 0;
  clear_has_discovery_id();
}
inline ::google::protobuf::int32 discovery_mopping_req::discovery_id() const {
  return discovery_id_;
}
inline void discovery_mopping_req::set_discovery_id(::google::protobuf::int32 value) {
  set_has_discovery_id();
  discovery_id_ = value;
}

// optional int32 item_id = 5;
inline bool discovery_mopping_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void discovery_mopping_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void discovery_mopping_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void discovery_mopping_req::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 discovery_mopping_req::item_id() const {
  return item_id_;
}
inline void discovery_mopping_req::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_add_num = 6;
inline bool discovery_mopping_req::has_item_add_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void discovery_mopping_req::set_has_item_add_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void discovery_mopping_req::clear_has_item_add_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void discovery_mopping_req::clear_item_add_num() {
  item_add_num_ = 0;
  clear_has_item_add_num();
}
inline ::google::protobuf::int32 discovery_mopping_req::item_add_num() const {
  return item_add_num_;
}
inline void discovery_mopping_req::set_item_add_num(::google::protobuf::int32 value) {
  set_has_item_add_num();
  item_add_num_ = value;
}

// -------------------------------------------------------------------

// discovery_mopping_ack_rewards

// optional int32 item_id = 1;
inline bool discovery_mopping_ack_rewards::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_mopping_ack_rewards::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_mopping_ack_rewards::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_mopping_ack_rewards::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 discovery_mopping_ack_rewards::item_id() const {
  return item_id_;
}
inline void discovery_mopping_ack_rewards::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_count = 2;
inline bool discovery_mopping_ack_rewards::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_mopping_ack_rewards::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_mopping_ack_rewards::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_mopping_ack_rewards::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 discovery_mopping_ack_rewards::item_count() const {
  return item_count_;
}
inline void discovery_mopping_ack_rewards::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// discovery_mopping_ack_moppping

// optional int32 mopping_time = 1;
inline bool discovery_mopping_ack_moppping::has_mopping_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_mopping_ack_moppping::set_has_mopping_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_mopping_ack_moppping::clear_has_mopping_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_mopping_ack_moppping::clear_mopping_time() {
  mopping_time_ = 0;
  clear_has_mopping_time();
}
inline ::google::protobuf::int32 discovery_mopping_ack_moppping::mopping_time() const {
  return mopping_time_;
}
inline void discovery_mopping_ack_moppping::set_mopping_time(::google::protobuf::int32 value) {
  set_has_mopping_time();
  mopping_time_ = value;
}

// repeated .SProtoSpace.discovery_mopping_ack_rewards reward_items = 2;
inline int discovery_mopping_ack_moppping::reward_items_size() const {
  return reward_items_.size();
}
inline void discovery_mopping_ack_moppping::clear_reward_items() {
  reward_items_.Clear();
}
inline const ::SProtoSpace::discovery_mopping_ack_rewards& discovery_mopping_ack_moppping::reward_items(int index) const {
  return reward_items_.Get(index);
}
inline ::SProtoSpace::discovery_mopping_ack_rewards* discovery_mopping_ack_moppping::mutable_reward_items(int index) {
  return reward_items_.Mutable(index);
}
inline ::SProtoSpace::discovery_mopping_ack_rewards* discovery_mopping_ack_moppping::add_reward_items() {
  return reward_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_rewards >&
discovery_mopping_ack_moppping::reward_items() const {
  return reward_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_rewards >*
discovery_mopping_ack_moppping::mutable_reward_items() {
  return &reward_items_;
}

// -------------------------------------------------------------------

// discovery_mopping_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_mopping_ack_id];
inline bool discovery_mopping_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_mopping_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_mopping_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_mopping_ack::clear_protoid() {
  protoid_ = 5807;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discovery_mopping_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discovery_mopping_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.eDiscoveryMoppingType mopping_type = 2;
inline bool discovery_mopping_ack::has_mopping_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_mopping_ack::set_has_mopping_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_mopping_ack::clear_has_mopping_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_mopping_ack::clear_mopping_type() {
  mopping_type_ = 1;
  clear_has_mopping_type();
}
inline ::SProtoSpace::eDiscoveryMoppingType discovery_mopping_ack::mopping_type() const {
  return static_cast< ::SProtoSpace::eDiscoveryMoppingType >(mopping_type_);
}
inline void discovery_mopping_ack::set_mopping_type(::SProtoSpace::eDiscoveryMoppingType value) {
  assert(::SProtoSpace::eDiscoveryMoppingType_IsValid(value));
  set_has_mopping_type();
  mopping_type_ = value;
}

// optional int32 times = 3;
inline bool discovery_mopping_ack::has_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void discovery_mopping_ack::set_has_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void discovery_mopping_ack::clear_has_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void discovery_mopping_ack::clear_times() {
  times_ = 0;
  clear_has_times();
}
inline ::google::protobuf::int32 discovery_mopping_ack::times() const {
  return times_;
}
inline void discovery_mopping_ack::set_times(::google::protobuf::int32 value) {
  set_has_times();
  times_ = value;
}

// optional .SProtoSpace.MsgErrorType ret = 4;
inline bool discovery_mopping_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void discovery_mopping_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void discovery_mopping_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void discovery_mopping_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::SProtoSpace::MsgErrorType discovery_mopping_ack::ret() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(ret_);
}
inline void discovery_mopping_ack::set_ret(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.discovery_mopping_ack_moppping moppings = 5;
inline int discovery_mopping_ack::moppings_size() const {
  return moppings_.size();
}
inline void discovery_mopping_ack::clear_moppings() {
  moppings_.Clear();
}
inline const ::SProtoSpace::discovery_mopping_ack_moppping& discovery_mopping_ack::moppings(int index) const {
  return moppings_.Get(index);
}
inline ::SProtoSpace::discovery_mopping_ack_moppping* discovery_mopping_ack::mutable_moppings(int index) {
  return moppings_.Mutable(index);
}
inline ::SProtoSpace::discovery_mopping_ack_moppping* discovery_mopping_ack::add_moppings() {
  return moppings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_moppping >&
discovery_mopping_ack::moppings() const {
  return moppings_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_mopping_ack_moppping >*
discovery_mopping_ack::mutable_moppings() {
  return &moppings_;
}

// optional int32 mopping_times_remain = 6;
inline bool discovery_mopping_ack::has_mopping_times_remain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void discovery_mopping_ack::set_has_mopping_times_remain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void discovery_mopping_ack::clear_has_mopping_times_remain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void discovery_mopping_ack::clear_mopping_times_remain() {
  mopping_times_remain_ = 0;
  clear_has_mopping_times_remain();
}
inline ::google::protobuf::int32 discovery_mopping_ack::mopping_times_remain() const {
  return mopping_times_remain_;
}
inline void discovery_mopping_ack::set_mopping_times_remain(::google::protobuf::int32 value) {
  set_has_mopping_times_remain();
  mopping_times_remain_ = value;
}

// optional int32 discovery_id = 7;
inline bool discovery_mopping_ack::has_discovery_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void discovery_mopping_ack::set_has_discovery_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void discovery_mopping_ack::clear_has_discovery_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void discovery_mopping_ack::clear_discovery_id() {
  discovery_id_ = 0;
  clear_has_discovery_id();
}
inline ::google::protobuf::int32 discovery_mopping_ack::discovery_id() const {
  return discovery_id_;
}
inline void discovery_mopping_ack::set_discovery_id(::google::protobuf::int32 value) {
  set_has_discovery_id();
  discovery_id_ = value;
}

// -------------------------------------------------------------------

// discovery_buy_times_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_req_id];
inline bool discovery_buy_times_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_buy_times_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_buy_times_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_buy_times_req::clear_protoid() {
  protoid_ = 5808;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discovery_buy_times_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discovery_buy_times_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 discovery_id = 2;
inline bool discovery_buy_times_req::has_discovery_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_buy_times_req::set_has_discovery_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_buy_times_req::clear_has_discovery_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_buy_times_req::clear_discovery_id() {
  discovery_id_ = 0;
  clear_has_discovery_id();
}
inline ::google::protobuf::int32 discovery_buy_times_req::discovery_id() const {
  return discovery_id_;
}
inline void discovery_buy_times_req::set_discovery_id(::google::protobuf::int32 value) {
  set_has_discovery_id();
  discovery_id_ = value;
}

// -------------------------------------------------------------------

// discovery_buy_times_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_buy_times_ack_id];
inline bool discovery_buy_times_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_buy_times_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_buy_times_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_buy_times_ack::clear_protoid() {
  protoid_ = 5809;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discovery_buy_times_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discovery_buy_times_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 discovery_id = 2;
inline bool discovery_buy_times_ack::has_discovery_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_buy_times_ack::set_has_discovery_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_buy_times_ack::clear_has_discovery_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_buy_times_ack::clear_discovery_id() {
  discovery_id_ = 0;
  clear_has_discovery_id();
}
inline ::google::protobuf::int32 discovery_buy_times_ack::discovery_id() const {
  return discovery_id_;
}
inline void discovery_buy_times_ack::set_discovery_id(::google::protobuf::int32 value) {
  set_has_discovery_id();
  discovery_id_ = value;
}

// optional .SProtoSpace.MsgErrorType ret = 4;
inline bool discovery_buy_times_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void discovery_buy_times_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void discovery_buy_times_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void discovery_buy_times_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::SProtoSpace::MsgErrorType discovery_buy_times_ack::ret() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(ret_);
}
inline void discovery_buy_times_ack::set_ret(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// optional int32 mopping_times_remain = 5;
inline bool discovery_buy_times_ack::has_mopping_times_remain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void discovery_buy_times_ack::set_has_mopping_times_remain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void discovery_buy_times_ack::clear_has_mopping_times_remain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void discovery_buy_times_ack::clear_mopping_times_remain() {
  mopping_times_remain_ = 0;
  clear_has_mopping_times_remain();
}
inline ::google::protobuf::int32 discovery_buy_times_ack::mopping_times_remain() const {
  return mopping_times_remain_;
}
inline void discovery_buy_times_ack::set_mopping_times_remain(::google::protobuf::int32 value) {
  set_has_mopping_times_remain();
  mopping_times_remain_ = value;
}

// -------------------------------------------------------------------

// discovery_get_section_star_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_req_id];
inline bool discovery_get_section_star_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_get_section_star_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_get_section_star_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_get_section_star_req::clear_protoid() {
  protoid_ = 5810;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discovery_get_section_star_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discovery_get_section_star_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 reward_id = 2;
inline bool discovery_get_section_star_req::has_reward_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_get_section_star_req::set_has_reward_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_get_section_star_req::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_get_section_star_req::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 discovery_get_section_star_req::reward_id() const {
  return reward_id_;
}
inline void discovery_get_section_star_req::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// -------------------------------------------------------------------

// discovery_get_section_star_ack_rewards

// optional int32 item_id = 1;
inline bool discovery_get_section_star_ack_rewards::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_get_section_star_ack_rewards::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_get_section_star_ack_rewards::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_get_section_star_ack_rewards::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 discovery_get_section_star_ack_rewards::item_id() const {
  return item_id_;
}
inline void discovery_get_section_star_ack_rewards::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional int32 item_count = 2;
inline bool discovery_get_section_star_ack_rewards::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_get_section_star_ack_rewards::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_get_section_star_ack_rewards::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_get_section_star_ack_rewards::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 discovery_get_section_star_ack_rewards::item_count() const {
  return item_count_;
}
inline void discovery_get_section_star_ack_rewards::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
}

// -------------------------------------------------------------------

// discovery_get_section_star_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = discovery_get_section_star_ack_id];
inline bool discovery_get_section_star_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void discovery_get_section_star_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void discovery_get_section_star_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void discovery_get_section_star_ack::clear_protoid() {
  protoid_ = 5811;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID discovery_get_section_star_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void discovery_get_section_star_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 reward_id = 2;
inline bool discovery_get_section_star_ack::has_reward_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void discovery_get_section_star_ack::set_has_reward_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void discovery_get_section_star_ack::clear_has_reward_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void discovery_get_section_star_ack::clear_reward_id() {
  reward_id_ = 0;
  clear_has_reward_id();
}
inline ::google::protobuf::int32 discovery_get_section_star_ack::reward_id() const {
  return reward_id_;
}
inline void discovery_get_section_star_ack::set_reward_id(::google::protobuf::int32 value) {
  set_has_reward_id();
  reward_id_ = value;
}

// repeated .SProtoSpace.discovery_get_section_star_ack_rewards items = 3;
inline int discovery_get_section_star_ack::items_size() const {
  return items_.size();
}
inline void discovery_get_section_star_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::discovery_get_section_star_ack_rewards& discovery_get_section_star_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::discovery_get_section_star_ack_rewards* discovery_get_section_star_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::discovery_get_section_star_ack_rewards* discovery_get_section_star_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_get_section_star_ack_rewards >&
discovery_get_section_star_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::discovery_get_section_star_ack_rewards >*
discovery_get_section_star_ack::mutable_items() {
  return &items_;
}

// optional .SProtoSpace.MsgErrorType ret = 4;
inline bool discovery_get_section_star_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void discovery_get_section_star_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void discovery_get_section_star_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void discovery_get_section_star_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::SProtoSpace::MsgErrorType discovery_get_section_star_ack::ret() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(ret_);
}
inline void discovery_get_section_star_ack::set_ret(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// royal_base_info_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_base_info_ntf_id];
inline bool royal_base_info_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_base_info_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_base_info_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_base_info_ntf::clear_proto_id() {
  proto_id_ = 6126;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_base_info_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_base_info_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.royal_base_info info = 2;
inline bool royal_base_info_ntf::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_base_info_ntf::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_base_info_ntf::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_base_info_ntf::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::royal_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::royal_base_info& royal_base_info_ntf::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::royal_base_info* royal_base_info_ntf::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::royal_base_info;
  return info_;
}
inline ::SProtoSpace::royal_base_info* royal_base_info_ntf::release_info() {
  clear_has_info();
  ::SProtoSpace::royal_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void royal_base_info_ntf::set_allocated_info(::SProtoSpace::royal_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// royal_all_info_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_req_id];
inline bool royal_all_info_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_all_info_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_all_info_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_all_info_req::clear_proto_id() {
  proto_id_ = 6131;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_all_info_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_all_info_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// royal_all_info_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_all_info_ack_id];
inline bool royal_all_info_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_all_info_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_all_info_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_all_info_ack::clear_proto_id() {
  proto_id_ = 6132;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_all_info_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_all_info_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.royal_info royals = 2;
inline int royal_all_info_ack::royals_size() const {
  return royals_.size();
}
inline void royal_all_info_ack::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::royal_info& royal_all_info_ack::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::royal_info* royal_all_info_ack::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::royal_info* royal_all_info_ack::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
royal_all_info_ack::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
royal_all_info_ack::mutable_royals() {
  return &royals_;
}

// optional .SProtoSpace.royal_base_info info = 3;
inline bool royal_all_info_ack::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_all_info_ack::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_all_info_ack::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_all_info_ack::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::royal_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::royal_base_info& royal_all_info_ack::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::royal_base_info* royal_all_info_ack::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::royal_base_info;
  return info_;
}
inline ::SProtoSpace::royal_base_info* royal_all_info_ack::release_info() {
  clear_has_info();
  ::SProtoSpace::royal_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void royal_all_info_ack::set_allocated_info(::SProtoSpace::royal_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// royal_refresh_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_req_id];
inline bool royal_refresh_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_refresh_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_refresh_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_refresh_req::clear_proto_id() {
  proto_id_ = 6133;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_refresh_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_refresh_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// royal_refresh_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_refresh_ack_id];
inline bool royal_refresh_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_refresh_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_refresh_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_refresh_ack::clear_proto_id() {
  proto_id_ = 6134;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_refresh_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_refresh_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 ret = 2;
inline bool royal_refresh_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_refresh_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_refresh_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_refresh_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 royal_refresh_ack::ret() const {
  return ret_;
}
inline void royal_refresh_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int32 royal_ids = 3;
inline int royal_refresh_ack::royal_ids_size() const {
  return royal_ids_.size();
}
inline void royal_refresh_ack::clear_royal_ids() {
  royal_ids_.Clear();
}
inline ::google::protobuf::int32 royal_refresh_ack::royal_ids(int index) const {
  return royal_ids_.Get(index);
}
inline void royal_refresh_ack::set_royal_ids(int index, ::google::protobuf::int32 value) {
  royal_ids_.Set(index, value);
}
inline void royal_refresh_ack::add_royal_ids(::google::protobuf::int32 value) {
  royal_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
royal_refresh_ack::royal_ids() const {
  return royal_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
royal_refresh_ack::mutable_royal_ids() {
  return &royal_ids_;
}

// -------------------------------------------------------------------

// royal_visit_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_req_id];
inline bool royal_visit_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_visit_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_visit_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_visit_req::clear_proto_id() {
  proto_id_ = 6135;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_visit_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_visit_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 royal_id = 2;
inline bool royal_visit_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_visit_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_visit_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_visit_req::clear_royal_id() {
  royal_id_ = 0;
  clear_has_royal_id();
}
inline ::google::protobuf::int32 royal_visit_req::royal_id() const {
  return royal_id_;
}
inline void royal_visit_req::set_royal_id(::google::protobuf::int32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// -------------------------------------------------------------------

// royal_visit_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_visit_ack_id];
inline bool royal_visit_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_visit_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_visit_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_visit_ack::clear_proto_id() {
  proto_id_ = 6136;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_visit_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_visit_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 royal_id = 2;
inline bool royal_visit_ack::has_royal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_visit_ack::set_has_royal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_visit_ack::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_visit_ack::clear_royal_id() {
  royal_id_ = 0;
  clear_has_royal_id();
}
inline ::google::protobuf::int32 royal_visit_ack::royal_id() const {
  return royal_id_;
}
inline void royal_visit_ack::set_royal_id(::google::protobuf::int32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional int32 event_id = 3;
inline bool royal_visit_ack::has_event_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_visit_ack::set_has_event_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_visit_ack::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_visit_ack::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 royal_visit_ack::event_id() const {
  return event_id_;
}
inline void royal_visit_ack::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional .SProtoSpace.question_data data = 4;
inline bool royal_visit_ack::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void royal_visit_ack::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void royal_visit_ack::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void royal_visit_ack::clear_data() {
  if (data_ != NULL) data_->::SProtoSpace::question_data::Clear();
  clear_has_data();
}
inline const ::SProtoSpace::question_data& royal_visit_ack::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::SProtoSpace::question_data* royal_visit_ack::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::SProtoSpace::question_data;
  return data_;
}
inline ::SProtoSpace::question_data* royal_visit_ack::release_data() {
  clear_has_data();
  ::SProtoSpace::question_data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void royal_visit_ack::set_allocated_data(::SProtoSpace::question_data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional int32 ret = 5;
inline bool royal_visit_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void royal_visit_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void royal_visit_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void royal_visit_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 royal_visit_ack::ret() const {
  return ret_;
}
inline void royal_visit_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// royal_reward_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = royal_reward_ntf_id];
inline bool royal_reward_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_reward_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_reward_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_reward_ntf::clear_protoid() {
  protoid_ = 6137;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID royal_reward_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void royal_reward_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 event_id = 2;
inline bool royal_reward_ntf::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_reward_ntf::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_reward_ntf::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_reward_ntf::clear_event_id() {
  event_id_ = 0;
  clear_has_event_id();
}
inline ::google::protobuf::int32 royal_reward_ntf::event_id() const {
  return event_id_;
}
inline void royal_reward_ntf::set_event_id(::google::protobuf::int32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional int32 type = 3;
inline bool royal_reward_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void royal_reward_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void royal_reward_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void royal_reward_ntf::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 royal_reward_ntf::type() const {
  return type_;
}
inline void royal_reward_ntf::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool is_win = 4;
inline bool royal_reward_ntf::has_is_win() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void royal_reward_ntf::set_has_is_win() {
  _has_bits_[0] |= 0x00000008u;
}
inline void royal_reward_ntf::clear_has_is_win() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void royal_reward_ntf::clear_is_win() {
  is_win_ = false;
  clear_has_is_win();
}
inline bool royal_reward_ntf::is_win() const {
  return is_win_;
}
inline void royal_reward_ntf::set_is_win(bool value) {
  set_has_is_win();
  is_win_ = value;
}

// repeated .SProtoSpace.item_info reward = 5;
inline int royal_reward_ntf::reward_size() const {
  return reward_.size();
}
inline void royal_reward_ntf::clear_reward() {
  reward_.Clear();
}
inline const ::SProtoSpace::item_info& royal_reward_ntf::reward(int index) const {
  return reward_.Get(index);
}
inline ::SProtoSpace::item_info* royal_reward_ntf::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::SProtoSpace::item_info* royal_reward_ntf::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >&
royal_reward_ntf::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::item_info >*
royal_reward_ntf::mutable_reward() {
  return &reward_;
}

// optional int32 ret = 6;
inline bool royal_reward_ntf::has_ret() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void royal_reward_ntf::set_has_ret() {
  _has_bits_[0] |= 0x00000020u;
}
inline void royal_reward_ntf::clear_has_ret() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void royal_reward_ntf::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 royal_reward_ntf::ret() const {
  return ret_;
}
inline void royal_reward_ntf::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// all_royals_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = all_royals_ntf_id];
inline bool all_royals_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_royals_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_royals_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_royals_ntf::clear_proto_id() {
  proto_id_ = 6100;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID all_royals_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void all_royals_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.royal_info royals = 2;
inline int all_royals_ntf::royals_size() const {
  return royals_.size();
}
inline void all_royals_ntf::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::royal_info& all_royals_ntf::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::royal_info* all_royals_ntf::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::royal_info* all_royals_ntf::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
all_royals_ntf::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
all_royals_ntf::mutable_royals() {
  return &royals_;
}

// optional .SProtoSpace.royal_base_info info = 3;
inline bool all_royals_ntf::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void all_royals_ntf::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void all_royals_ntf::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void all_royals_ntf::clear_info() {
  if (info_ != NULL) info_->::SProtoSpace::royal_base_info::Clear();
  clear_has_info();
}
inline const ::SProtoSpace::royal_base_info& all_royals_ntf::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::SProtoSpace::royal_base_info* all_royals_ntf::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::SProtoSpace::royal_base_info;
  return info_;
}
inline ::SProtoSpace::royal_base_info* all_royals_ntf::release_info() {
  clear_has_info();
  ::SProtoSpace::royal_base_info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void all_royals_ntf::set_allocated_info(::SProtoSpace::royal_base_info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// royal_pro_update_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_pro_update_ntf_id];
inline bool royal_pro_update_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_pro_update_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_pro_update_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_pro_update_ntf::clear_proto_id() {
  proto_id_ = 6115;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_pro_update_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_pro_update_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.royal_info royal = 2;
inline bool royal_pro_update_ntf::has_royal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_pro_update_ntf::set_has_royal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_pro_update_ntf::clear_has_royal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_pro_update_ntf::clear_royal() {
  if (royal_ != NULL) royal_->::SProtoSpace::royal_info::Clear();
  clear_has_royal();
}
inline const ::SProtoSpace::royal_info& royal_pro_update_ntf::royal() const {
  return royal_ != NULL ? *royal_ : *default_instance_->royal_;
}
inline ::SProtoSpace::royal_info* royal_pro_update_ntf::mutable_royal() {
  set_has_royal();
  if (royal_ == NULL) royal_ = new ::SProtoSpace::royal_info;
  return royal_;
}
inline ::SProtoSpace::royal_info* royal_pro_update_ntf::release_royal() {
  clear_has_royal();
  ::SProtoSpace::royal_info* temp = royal_;
  royal_ = NULL;
  return temp;
}
inline void royal_pro_update_ntf::set_allocated_royal(::SProtoSpace::royal_info* royal) {
  delete royal_;
  royal_ = royal;
  if (royal) {
    set_has_royal();
  } else {
    clear_has_royal();
  }
}

// -------------------------------------------------------------------

// royal_task_reward_draw_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = royal_task_reward_draw_ntf_id];
inline bool royal_task_reward_draw_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void royal_task_reward_draw_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void royal_task_reward_draw_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void royal_task_reward_draw_ntf::clear_proto_id() {
  proto_id_ = 6101;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID royal_task_reward_draw_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void royal_task_reward_draw_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2 [default = 0];
inline bool royal_task_reward_draw_ntf::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void royal_task_reward_draw_ntf::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void royal_task_reward_draw_ntf::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void royal_task_reward_draw_ntf::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 royal_task_reward_draw_ntf::ret() const {
  return ret_;
}
inline void royal_task_reward_draw_ntf::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_update_royal_task_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_update_royal_task_ntf_id];
inline bool game_update_royal_task_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_update_royal_task_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_update_royal_task_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_update_royal_task_ntf::clear_proto_id() {
  proto_id_ = 6110;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_update_royal_task_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_update_royal_task_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.royal_info royals = 2;
inline int game_update_royal_task_ntf::royals_size() const {
  return royals_.size();
}
inline void game_update_royal_task_ntf::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::royal_info& game_update_royal_task_ntf::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::royal_info* game_update_royal_task_ntf::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::royal_info* game_update_royal_task_ntf::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
game_update_royal_task_ntf::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
game_update_royal_task_ntf::mutable_royals() {
  return &royals_;
}

// -------------------------------------------------------------------

// game_royal_intimacy_reward_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_req_id];
inline bool game_royal_intimacy_reward_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_intimacy_reward_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_intimacy_reward_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_intimacy_reward_req::clear_proto_id() {
  proto_id_ = 6118;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_intimacy_reward_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_intimacy_reward_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 royal_id = 2;
inline bool game_royal_intimacy_reward_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_intimacy_reward_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_intimacy_reward_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_intimacy_reward_req::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_intimacy_reward_req::royal_id() const {
  return royal_id_;
}
inline void game_royal_intimacy_reward_req::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional uint32 index = 3;
inline bool game_royal_intimacy_reward_req::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_intimacy_reward_req::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_intimacy_reward_req::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_intimacy_reward_req::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 game_royal_intimacy_reward_req::index() const {
  return index_;
}
inline void game_royal_intimacy_reward_req::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// game_royal_intimacy_reward_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_intimacy_reward_ack_id];
inline bool game_royal_intimacy_reward_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_intimacy_reward_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_intimacy_reward_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_intimacy_reward_ack::clear_proto_id() {
  proto_id_ = 6119;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_intimacy_reward_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_intimacy_reward_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_intimacy_reward_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_intimacy_reward_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_intimacy_reward_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_intimacy_reward_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_intimacy_reward_ack::ret() const {
  return ret_;
}
inline void game_royal_intimacy_reward_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 royal_id = 3;
inline bool game_royal_intimacy_reward_ack::has_royal_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_intimacy_reward_ack::set_has_royal_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_intimacy_reward_ack::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_intimacy_reward_ack::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_intimacy_reward_ack::royal_id() const {
  return royal_id_;
}
inline void game_royal_intimacy_reward_ack::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional uint32 index = 4;
inline bool game_royal_intimacy_reward_ack::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_royal_intimacy_reward_ack::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_royal_intimacy_reward_ack::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_royal_intimacy_reward_ack::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 game_royal_intimacy_reward_ack::index() const {
  return index_;
}
inline void game_royal_intimacy_reward_ack::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// game_royal_draw_reward_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_req_id];
inline bool game_royal_draw_reward_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_draw_reward_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_draw_reward_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_draw_reward_req::clear_proto_id() {
  proto_id_ = 6104;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_draw_reward_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_draw_reward_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 royal_task_config_id = 2;
inline bool game_royal_draw_reward_req::has_royal_task_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_draw_reward_req::set_has_royal_task_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_draw_reward_req::clear_has_royal_task_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_draw_reward_req::clear_royal_task_config_id() {
  royal_task_config_id_ = 0u;
  clear_has_royal_task_config_id();
}
inline ::google::protobuf::uint32 game_royal_draw_reward_req::royal_task_config_id() const {
  return royal_task_config_id_;
}
inline void game_royal_draw_reward_req::set_royal_task_config_id(::google::protobuf::uint32 value) {
  set_has_royal_task_config_id();
  royal_task_config_id_ = value;
}

// optional uint32 royal_config_id = 3;
inline bool game_royal_draw_reward_req::has_royal_config_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_draw_reward_req::set_has_royal_config_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_draw_reward_req::clear_has_royal_config_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_draw_reward_req::clear_royal_config_id() {
  royal_config_id_ = 0u;
  clear_has_royal_config_id();
}
inline ::google::protobuf::uint32 game_royal_draw_reward_req::royal_config_id() const {
  return royal_config_id_;
}
inline void game_royal_draw_reward_req::set_royal_config_id(::google::protobuf::uint32 value) {
  set_has_royal_config_id();
  royal_config_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_draw_reward_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_draw_reward_ack_id];
inline bool game_royal_draw_reward_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_draw_reward_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_draw_reward_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_draw_reward_ack::clear_proto_id() {
  proto_id_ = 6105;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_draw_reward_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_draw_reward_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2 [default = 0];
inline bool game_royal_draw_reward_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_draw_reward_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_draw_reward_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_draw_reward_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_draw_reward_ack::ret() const {
  return ret_;
}
inline void game_royal_draw_reward_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_royal_all_data_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_req_id];
inline bool game_royal_all_data_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_all_data_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_all_data_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_all_data_req::clear_proto_id() {
  proto_id_ = 6106;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_all_data_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_all_data_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated uint32 config_id = 2;
inline int game_royal_all_data_req::config_id_size() const {
  return config_id_.size();
}
inline void game_royal_all_data_req::clear_config_id() {
  config_id_.Clear();
}
inline ::google::protobuf::uint32 game_royal_all_data_req::config_id(int index) const {
  return config_id_.Get(index);
}
inline void game_royal_all_data_req::set_config_id(int index, ::google::protobuf::uint32 value) {
  config_id_.Set(index, value);
}
inline void game_royal_all_data_req::add_config_id(::google::protobuf::uint32 value) {
  config_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
game_royal_all_data_req::config_id() const {
  return config_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
game_royal_all_data_req::mutable_config_id() {
  return &config_id_;
}

// -------------------------------------------------------------------

// game_royal_all_data_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_all_data_ack_id];
inline bool game_royal_all_data_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_all_data_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_all_data_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_all_data_ack::clear_proto_id() {
  proto_id_ = 6107;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_all_data_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_all_data_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.royal_info royals = 2;
inline int game_royal_all_data_ack::royals_size() const {
  return royals_.size();
}
inline void game_royal_all_data_ack::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::royal_info& game_royal_all_data_ack::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::royal_info* game_royal_all_data_ack::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::royal_info* game_royal_all_data_ack::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
game_royal_all_data_ack::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
game_royal_all_data_ack::mutable_royals() {
  return &royals_;
}

// -------------------------------------------------------------------

// game_royal_refresh_data_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_req_id];
inline bool game_royal_refresh_data_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_refresh_data_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_refresh_data_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_refresh_data_req::clear_proto_id() {
  proto_id_ = 6108;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_refresh_data_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_refresh_data_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated uint32 config_id = 2;
inline int game_royal_refresh_data_req::config_id_size() const {
  return config_id_.size();
}
inline void game_royal_refresh_data_req::clear_config_id() {
  config_id_.Clear();
}
inline ::google::protobuf::uint32 game_royal_refresh_data_req::config_id(int index) const {
  return config_id_.Get(index);
}
inline void game_royal_refresh_data_req::set_config_id(int index, ::google::protobuf::uint32 value) {
  config_id_.Set(index, value);
}
inline void game_royal_refresh_data_req::add_config_id(::google::protobuf::uint32 value) {
  config_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
game_royal_refresh_data_req::config_id() const {
  return config_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
game_royal_refresh_data_req::mutable_config_id() {
  return &config_id_;
}

// -------------------------------------------------------------------

// game_royal_refresh_data_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_refresh_data_ack_id];
inline bool game_royal_refresh_data_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_refresh_data_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_refresh_data_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_refresh_data_ack::clear_proto_id() {
  proto_id_ = 6109;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_refresh_data_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_refresh_data_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_refresh_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_refresh_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_refresh_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_refresh_data_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_refresh_data_ack::ret() const {
  return ret_;
}
inline void game_royal_refresh_data_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.royal_info royals = 3;
inline int game_royal_refresh_data_ack::royals_size() const {
  return royals_.size();
}
inline void game_royal_refresh_data_ack::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::royal_info& game_royal_refresh_data_ack::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::royal_info* game_royal_refresh_data_ack::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::royal_info* game_royal_refresh_data_ack::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
game_royal_refresh_data_ack::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
game_royal_refresh_data_ack::mutable_royals() {
  return &royals_;
}

// -------------------------------------------------------------------

// game_royal_qingan_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_req_id];
inline bool game_royal_qingan_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_qingan_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_qingan_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_qingan_req::clear_proto_id() {
  proto_id_ = 6111;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_qingan_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_qingan_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 uuid = 2;
inline bool game_royal_qingan_req::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_qingan_req::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_qingan_req::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_qingan_req::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 game_royal_qingan_req::uuid() const {
  return uuid_;
}
inline void game_royal_qingan_req::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// optional uint32 royal_id = 3;
inline bool game_royal_qingan_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_qingan_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_qingan_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_qingan_req::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_qingan_req::royal_id() const {
  return royal_id_;
}
inline void game_royal_qingan_req::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_qingan_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_qingan_ack_id];
inline bool game_royal_qingan_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_qingan_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_qingan_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_qingan_ack::clear_proto_id() {
  proto_id_ = 6112;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_qingan_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_qingan_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_qingan_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_qingan_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_qingan_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_qingan_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_qingan_ack::ret() const {
  return ret_;
}
inline void game_royal_qingan_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.royal_info royals = 3;
inline int game_royal_qingan_ack::royals_size() const {
  return royals_.size();
}
inline void game_royal_qingan_ack::clear_royals() {
  royals_.Clear();
}
inline const ::SProtoSpace::royal_info& game_royal_qingan_ack::royals(int index) const {
  return royals_.Get(index);
}
inline ::SProtoSpace::royal_info* game_royal_qingan_ack::mutable_royals(int index) {
  return royals_.Mutable(index);
}
inline ::SProtoSpace::royal_info* game_royal_qingan_ack::add_royals() {
  return royals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >&
game_royal_qingan_ack::royals() const {
  return royals_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_info >*
game_royal_qingan_ack::mutable_royals() {
  return &royals_;
}

// -------------------------------------------------------------------

// game_royal_unlock_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_req_id];
inline bool game_royal_unlock_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_unlock_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_unlock_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_unlock_req::clear_proto_id() {
  proto_id_ = 6113;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_unlock_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_unlock_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 config_id = 2;
inline bool game_royal_unlock_req::has_config_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_unlock_req::set_has_config_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_unlock_req::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_unlock_req::clear_config_id() {
  config_id_ = 0u;
  clear_has_config_id();
}
inline ::google::protobuf::uint32 game_royal_unlock_req::config_id() const {
  return config_id_;
}
inline void game_royal_unlock_req::set_config_id(::google::protobuf::uint32 value) {
  set_has_config_id();
  config_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_unlock_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_unlock_ack_id];
inline bool game_royal_unlock_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_unlock_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_unlock_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_unlock_ack::clear_proto_id() {
  proto_id_ = 6114;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_unlock_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_unlock_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_unlock_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_unlock_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_unlock_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_unlock_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_unlock_ack::ret() const {
  return ret_;
}
inline void game_royal_unlock_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_branch_task_fin_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_req_id];
inline bool game_branch_task_fin_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_branch_task_fin_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_branch_task_fin_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_branch_task_fin_req::clear_proto_id() {
  proto_id_ = 6116;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_branch_task_fin_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_branch_task_fin_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 royal_id = 2;
inline bool game_branch_task_fin_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_branch_task_fin_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_branch_task_fin_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_branch_task_fin_req::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_branch_task_fin_req::royal_id() const {
  return royal_id_;
}
inline void game_branch_task_fin_req::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional uint32 task_id = 3;
inline bool game_branch_task_fin_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_branch_task_fin_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_branch_task_fin_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_branch_task_fin_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 game_branch_task_fin_req::task_id() const {
  return task_id_;
}
inline void game_branch_task_fin_req::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// game_branch_task_fin_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_branch_task_fin_ack_id];
inline bool game_branch_task_fin_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_branch_task_fin_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_branch_task_fin_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_branch_task_fin_ack::clear_proto_id() {
  proto_id_ = 6117;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_branch_task_fin_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_branch_task_fin_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_branch_task_fin_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_branch_task_fin_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_branch_task_fin_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_branch_task_fin_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_branch_task_fin_ack::ret() const {
  return ret_;
}
inline void game_branch_task_fin_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_royal_chat_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_req_id];
inline bool game_royal_chat_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_chat_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_chat_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_chat_req::clear_proto_id() {
  proto_id_ = 6120;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_chat_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_chat_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 royal_id = 2;
inline bool game_royal_chat_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_chat_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_chat_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_chat_req::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_chat_req::royal_id() const {
  return royal_id_;
}
inline void game_royal_chat_req::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_chat_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_chat_ack_id];
inline bool game_royal_chat_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_chat_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_chat_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_chat_ack::clear_proto_id() {
  proto_id_ = 6121;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_chat_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_chat_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_chat_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_chat_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_chat_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_chat_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_chat_ack::ret() const {
  return ret_;
}
inline void game_royal_chat_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 task_id = 3;
inline bool game_royal_chat_ack::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_chat_ack::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_chat_ack::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_chat_ack::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 game_royal_chat_ack::task_id() const {
  return task_id_;
}
inline void game_royal_chat_ack::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_get_gifts_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_req_id];
inline bool game_royal_get_gifts_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_get_gifts_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_get_gifts_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_get_gifts_req::clear_proto_id() {
  proto_id_ = 6122;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_get_gifts_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_get_gifts_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_get_gifts_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_get_gifts_ack_id];
inline bool game_royal_get_gifts_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_get_gifts_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_get_gifts_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_get_gifts_ack::clear_proto_id() {
  proto_id_ = 6123;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_get_gifts_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_get_gifts_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// repeated .SProtoSpace.royal_gift_info gift_infos = 2;
inline int game_royal_get_gifts_ack::gift_infos_size() const {
  return gift_infos_.size();
}
inline void game_royal_get_gifts_ack::clear_gift_infos() {
  gift_infos_.Clear();
}
inline const ::SProtoSpace::royal_gift_info& game_royal_get_gifts_ack::gift_infos(int index) const {
  return gift_infos_.Get(index);
}
inline ::SProtoSpace::royal_gift_info* game_royal_get_gifts_ack::mutable_gift_infos(int index) {
  return gift_infos_.Mutable(index);
}
inline ::SProtoSpace::royal_gift_info* game_royal_get_gifts_ack::add_gift_infos() {
  return gift_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_gift_info >&
game_royal_get_gifts_ack::gift_infos() const {
  return gift_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::royal_gift_info >*
game_royal_get_gifts_ack::mutable_gift_infos() {
  return &gift_infos_;
}

// optional uint32 ret = 3;
inline bool game_royal_get_gifts_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_get_gifts_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_get_gifts_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_get_gifts_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_get_gifts_ack::ret() const {
  return ret_;
}
inline void game_royal_get_gifts_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// game_royal_give_gift_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_req_id];
inline bool game_royal_give_gift_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_give_gift_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_give_gift_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_give_gift_req::clear_proto_id() {
  proto_id_ = 6124;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_give_gift_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_give_gift_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 royal_id = 2;
inline bool game_royal_give_gift_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_give_gift_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_give_gift_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_give_gift_req::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_give_gift_req::royal_id() const {
  return royal_id_;
}
inline void game_royal_give_gift_req::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional uint32 gift_id = 3;
inline bool game_royal_give_gift_req::has_gift_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_give_gift_req::set_has_gift_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_give_gift_req::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_give_gift_req::clear_gift_id() {
  gift_id_ = 0u;
  clear_has_gift_id();
}
inline ::google::protobuf::uint32 game_royal_give_gift_req::gift_id() const {
  return gift_id_;
}
inline void game_royal_give_gift_req::set_gift_id(::google::protobuf::uint32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_give_gift_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_give_gift_ack_id];
inline bool game_royal_give_gift_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_give_gift_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_give_gift_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_give_gift_ack::clear_proto_id() {
  proto_id_ = 6125;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_give_gift_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_give_gift_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_give_gift_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_give_gift_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_give_gift_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_give_gift_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_give_gift_ack::ret() const {
  return ret_;
}
inline void game_royal_give_gift_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 gift_id = 3;
inline bool game_royal_give_gift_ack::has_gift_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_give_gift_ack::set_has_gift_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_give_gift_ack::clear_has_gift_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_give_gift_ack::clear_gift_id() {
  gift_id_ = 0u;
  clear_has_gift_id();
}
inline ::google::protobuf::uint32 game_royal_give_gift_ack::gift_id() const {
  return gift_id_;
}
inline void game_royal_give_gift_ack::set_gift_id(::google::protobuf::uint32 value) {
  set_has_gift_id();
  gift_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_enter_scene_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_req_id];
inline bool game_royal_enter_scene_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_enter_scene_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_enter_scene_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_enter_scene_req::clear_proto_id() {
  proto_id_ = 6127;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_enter_scene_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_enter_scene_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 scene_id = 2;
inline bool game_royal_enter_scene_req::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_enter_scene_req::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_enter_scene_req::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_enter_scene_req::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 game_royal_enter_scene_req::scene_id() const {
  return scene_id_;
}
inline void game_royal_enter_scene_req::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// game_royal_enter_scene_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_enter_scene_ack_id];
inline bool game_royal_enter_scene_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_enter_scene_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_enter_scene_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_enter_scene_ack::clear_proto_id() {
  proto_id_ = 6128;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_enter_scene_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_enter_scene_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool game_royal_enter_scene_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_enter_scene_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_enter_scene_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_enter_scene_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_enter_scene_ack::ret() const {
  return ret_;
}
inline void game_royal_enter_scene_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 task_id = 3;
inline bool game_royal_enter_scene_ack::has_task_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_enter_scene_ack::set_has_task_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_enter_scene_ack::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_enter_scene_ack::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 game_royal_enter_scene_ack::task_id() const {
  return task_id_;
}
inline void game_royal_enter_scene_ack::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 scene_id = 4;
inline bool game_royal_enter_scene_ack::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_royal_enter_scene_ack::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_royal_enter_scene_ack::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_royal_enter_scene_ack::clear_scene_id() {
  scene_id_ = 0u;
  clear_has_scene_id();
}
inline ::google::protobuf::uint32 game_royal_enter_scene_ack::scene_id() const {
  return scene_id_;
}
inline void game_royal_enter_scene_ack::set_scene_id(::google::protobuf::uint32 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// optional uint32 royal_id = 5;
inline bool game_royal_enter_scene_ack::has_royal_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_royal_enter_scene_ack::set_has_royal_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_royal_enter_scene_ack::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_royal_enter_scene_ack::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_enter_scene_ack::royal_id() const {
  return royal_id_;
}
inline void game_royal_enter_scene_ack::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional bool can_find = 6 [default = false];
inline bool game_royal_enter_scene_ack::has_can_find() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void game_royal_enter_scene_ack::set_has_can_find() {
  _has_bits_[0] |= 0x00000020u;
}
inline void game_royal_enter_scene_ack::clear_has_can_find() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void game_royal_enter_scene_ack::clear_can_find() {
  can_find_ = false;
  clear_has_can_find();
}
inline bool game_royal_enter_scene_ack::can_find() const {
  return can_find_;
}
inline void game_royal_enter_scene_ack::set_can_find(bool value) {
  set_has_can_find();
  can_find_ = value;
}

// -------------------------------------------------------------------

// game_royal_event_fin_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_req_id];
inline bool game_royal_event_fin_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_event_fin_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_event_fin_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_event_fin_req::clear_proto_id() {
  proto_id_ = 6129;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_event_fin_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_event_fin_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 task_id = 2;
inline bool game_royal_event_fin_req::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_event_fin_req::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_event_fin_req::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_event_fin_req::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 game_royal_event_fin_req::task_id() const {
  return task_id_;
}
inline void game_royal_event_fin_req::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 royal_id = 3;
inline bool game_royal_event_fin_req::has_royal_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_event_fin_req::set_has_royal_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_event_fin_req::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_event_fin_req::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_event_fin_req::royal_id() const {
  return royal_id_;
}
inline void game_royal_event_fin_req::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional uint32 result = 4;
inline bool game_royal_event_fin_req::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_royal_event_fin_req::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_royal_event_fin_req::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_royal_event_fin_req::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 game_royal_event_fin_req::result() const {
  return result_;
}
inline void game_royal_event_fin_req::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// game_royal_event_fin_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = game_royal_event_fin_ack_id];
inline bool game_royal_event_fin_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void game_royal_event_fin_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void game_royal_event_fin_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void game_royal_event_fin_ack::clear_proto_id() {
  proto_id_ = 6130;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID game_royal_event_fin_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void game_royal_event_fin_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 task_id = 2;
inline bool game_royal_event_fin_ack::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void game_royal_event_fin_ack::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void game_royal_event_fin_ack::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void game_royal_event_fin_ack::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 game_royal_event_fin_ack::task_id() const {
  return task_id_;
}
inline void game_royal_event_fin_ack::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 royal_id = 3;
inline bool game_royal_event_fin_ack::has_royal_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void game_royal_event_fin_ack::set_has_royal_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void game_royal_event_fin_ack::clear_has_royal_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void game_royal_event_fin_ack::clear_royal_id() {
  royal_id_ = 0u;
  clear_has_royal_id();
}
inline ::google::protobuf::uint32 game_royal_event_fin_ack::royal_id() const {
  return royal_id_;
}
inline void game_royal_event_fin_ack::set_royal_id(::google::protobuf::uint32 value) {
  set_has_royal_id();
  royal_id_ = value;
}

// optional uint32 result = 4;
inline bool game_royal_event_fin_ack::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void game_royal_event_fin_ack::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void game_royal_event_fin_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void game_royal_event_fin_ack::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 game_royal_event_fin_ack::result() const {
  return result_;
}
inline void game_royal_event_fin_ack::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 ret = 5;
inline bool game_royal_event_fin_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void game_royal_event_fin_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void game_royal_event_fin_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void game_royal_event_fin_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 game_royal_event_fin_ack::ret() const {
  return ret_;
}
inline void game_royal_event_fin_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// get_offical_data_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_req_id];
inline bool get_offical_data_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_data_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_data_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_data_req::clear_proto_id() {
  proto_id_ = 6713;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_data_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_data_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// -------------------------------------------------------------------

// get_offical_data_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_data_ack_id];
inline bool get_offical_data_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_data_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_data_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_data_ack::clear_proto_id() {
  proto_id_ = 6714;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_data_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_data_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_offical_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_data_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_offical_data_ack::ret() const {
  return ret_;
}
inline void get_offical_data_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 cur_grade = 3;
inline bool get_offical_data_ack::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_data_ack::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_data_ack::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_data_ack::clear_cur_grade() {
  cur_grade_ = 0u;
  clear_has_cur_grade();
}
inline ::google::protobuf::uint32 get_offical_data_ack::cur_grade() const {
  return cur_grade_;
}
inline void get_offical_data_ack::set_cur_grade(::google::protobuf::uint32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional uint32 max_grade = 4;
inline bool get_offical_data_ack::has_max_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_data_ack::set_has_max_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_data_ack::clear_has_max_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_data_ack::clear_max_grade() {
  max_grade_ = 0u;
  clear_has_max_grade();
}
inline ::google::protobuf::uint32 get_offical_data_ack::max_grade() const {
  return max_grade_;
}
inline void get_offical_data_ack::set_max_grade(::google::protobuf::uint32 value) {
  set_has_max_grade();
  max_grade_ = value;
}

// optional uint32 apply_grade = 5;
inline bool get_offical_data_ack::has_apply_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_offical_data_ack::set_has_apply_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_offical_data_ack::clear_has_apply_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_offical_data_ack::clear_apply_grade() {
  apply_grade_ = 0u;
  clear_has_apply_grade();
}
inline ::google::protobuf::uint32 get_offical_data_ack::apply_grade() const {
  return apply_grade_;
}
inline void get_offical_data_ack::set_apply_grade(::google::protobuf::uint32 value) {
  set_has_apply_grade();
  apply_grade_ = value;
}

// optional uint64 apply_time = 6;
inline bool get_offical_data_ack::has_apply_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void get_offical_data_ack::set_has_apply_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void get_offical_data_ack::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void get_offical_data_ack::clear_apply_time() {
  apply_time_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::uint64 get_offical_data_ack::apply_time() const {
  return apply_time_;
}
inline void get_offical_data_ack::set_apply_time(::google::protobuf::uint64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional bool is_draw = 7;
inline bool get_offical_data_ack::has_is_draw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void get_offical_data_ack::set_has_is_draw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void get_offical_data_ack::clear_has_is_draw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void get_offical_data_ack::clear_is_draw() {
  is_draw_ = false;
  clear_has_is_draw();
}
inline bool get_offical_data_ack::is_draw() const {
  return is_draw_;
}
inline void get_offical_data_ack::set_is_draw(bool value) {
  set_has_is_draw();
  is_draw_ = value;
}

// optional uint64 last_draw_time = 8;
inline bool get_offical_data_ack::has_last_draw_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void get_offical_data_ack::set_has_last_draw_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void get_offical_data_ack::clear_has_last_draw_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void get_offical_data_ack::clear_last_draw_time() {
  last_draw_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_draw_time();
}
inline ::google::protobuf::uint64 get_offical_data_ack::last_draw_time() const {
  return last_draw_time_;
}
inline void get_offical_data_ack::set_last_draw_time(::google::protobuf::uint64 value) {
  set_has_last_draw_time();
  last_draw_time_ = value;
}

// optional int32 daily_offical_chal_num = 9;
inline bool get_offical_data_ack::has_daily_offical_chal_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void get_offical_data_ack::set_has_daily_offical_chal_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void get_offical_data_ack::clear_has_daily_offical_chal_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void get_offical_data_ack::clear_daily_offical_chal_num() {
  daily_offical_chal_num_ = 0;
  clear_has_daily_offical_chal_num();
}
inline ::google::protobuf::int32 get_offical_data_ack::daily_offical_chal_num() const {
  return daily_offical_chal_num_;
}
inline void get_offical_data_ack::set_daily_offical_chal_num(::google::protobuf::int32 value) {
  set_has_daily_offical_chal_num();
  daily_offical_chal_num_ = value;
}

// optional uint32 last_grade = 10;
inline bool get_offical_data_ack::has_last_grade() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void get_offical_data_ack::set_has_last_grade() {
  _has_bits_[0] |= 0x00000200u;
}
inline void get_offical_data_ack::clear_has_last_grade() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void get_offical_data_ack::clear_last_grade() {
  last_grade_ = 0u;
  clear_has_last_grade();
}
inline ::google::protobuf::uint32 get_offical_data_ack::last_grade() const {
  return last_grade_;
}
inline void get_offical_data_ack::set_last_grade(::google::protobuf::uint32 value) {
  set_has_last_grade();
  last_grade_ = value;
}

// optional bool exist = 11;
inline bool get_offical_data_ack::has_exist() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void get_offical_data_ack::set_has_exist() {
  _has_bits_[0] |= 0x00000400u;
}
inline void get_offical_data_ack::clear_has_exist() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void get_offical_data_ack::clear_exist() {
  exist_ = false;
  clear_has_exist();
}
inline bool get_offical_data_ack::exist() const {
  return exist_;
}
inline void get_offical_data_ack::set_exist(bool value) {
  set_has_exist();
  exist_ = value;
}

// optional int32 ranking_id = 12;
inline bool get_offical_data_ack::has_ranking_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void get_offical_data_ack::set_has_ranking_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void get_offical_data_ack::clear_has_ranking_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void get_offical_data_ack::clear_ranking_id() {
  ranking_id_ = 0;
  clear_has_ranking_id();
}
inline ::google::protobuf::int32 get_offical_data_ack::ranking_id() const {
  return ranking_id_;
}
inline void get_offical_data_ack::set_ranking_id(::google::protobuf::int32 value) {
  set_has_ranking_id();
  ranking_id_ = value;
}

// repeated .SProtoSpace.grade_match_conf time_data = 13;
inline int get_offical_data_ack::time_data_size() const {
  return time_data_.size();
}
inline void get_offical_data_ack::clear_time_data() {
  time_data_.Clear();
}
inline const ::SProtoSpace::grade_match_conf& get_offical_data_ack::time_data(int index) const {
  return time_data_.Get(index);
}
inline ::SProtoSpace::grade_match_conf* get_offical_data_ack::mutable_time_data(int index) {
  return time_data_.Mutable(index);
}
inline ::SProtoSpace::grade_match_conf* get_offical_data_ack::add_time_data() {
  return time_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::grade_match_conf >&
get_offical_data_ack::time_data() const {
  return time_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::grade_match_conf >*
get_offical_data_ack::mutable_time_data() {
  return &time_data_;
}

// -------------------------------------------------------------------

// offical_data_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_data_ntf_id];
inline bool offical_data_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_data_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_data_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_data_ntf::clear_proto_id() {
  proto_id_ = 6701;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID offical_data_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void offical_data_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 cur_grade = 2;
inline bool offical_data_ntf::has_cur_grade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_data_ntf::set_has_cur_grade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_data_ntf::clear_has_cur_grade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_data_ntf::clear_cur_grade() {
  cur_grade_ = 0;
  clear_has_cur_grade();
}
inline ::google::protobuf::int32 offical_data_ntf::cur_grade() const {
  return cur_grade_;
}
inline void offical_data_ntf::set_cur_grade(::google::protobuf::int32 value) {
  set_has_cur_grade();
  cur_grade_ = value;
}

// optional int32 max_grade = 3;
inline bool offical_data_ntf::has_max_grade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_data_ntf::set_has_max_grade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_data_ntf::clear_has_max_grade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_data_ntf::clear_max_grade() {
  max_grade_ = 0;
  clear_has_max_grade();
}
inline ::google::protobuf::int32 offical_data_ntf::max_grade() const {
  return max_grade_;
}
inline void offical_data_ntf::set_max_grade(::google::protobuf::int32 value) {
  set_has_max_grade();
  max_grade_ = value;
}

// optional int32 apply_grade = 4;
inline bool offical_data_ntf::has_apply_grade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void offical_data_ntf::set_has_apply_grade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void offical_data_ntf::clear_has_apply_grade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void offical_data_ntf::clear_apply_grade() {
  apply_grade_ = 0;
  clear_has_apply_grade();
}
inline ::google::protobuf::int32 offical_data_ntf::apply_grade() const {
  return apply_grade_;
}
inline void offical_data_ntf::set_apply_grade(::google::protobuf::int32 value) {
  set_has_apply_grade();
  apply_grade_ = value;
}

// optional bool lock = 5;
inline bool offical_data_ntf::has_lock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void offical_data_ntf::set_has_lock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void offical_data_ntf::clear_has_lock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void offical_data_ntf::clear_lock() {
  lock_ = false;
  clear_has_lock();
}
inline bool offical_data_ntf::lock() const {
  return lock_;
}
inline void offical_data_ntf::set_lock(bool value) {
  set_has_lock();
  lock_ = value;
}

// optional uint64 apply_time = 6;
inline bool offical_data_ntf::has_apply_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_data_ntf::set_has_apply_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_data_ntf::clear_has_apply_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_data_ntf::clear_apply_time() {
  apply_time_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_time();
}
inline ::google::protobuf::uint64 offical_data_ntf::apply_time() const {
  return apply_time_;
}
inline void offical_data_ntf::set_apply_time(::google::protobuf::uint64 value) {
  set_has_apply_time();
  apply_time_ = value;
}

// optional bool is_draw = 7;
inline bool offical_data_ntf::has_is_draw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_data_ntf::set_has_is_draw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_data_ntf::clear_has_is_draw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_data_ntf::clear_is_draw() {
  is_draw_ = false;
  clear_has_is_draw();
}
inline bool offical_data_ntf::is_draw() const {
  return is_draw_;
}
inline void offical_data_ntf::set_is_draw(bool value) {
  set_has_is_draw();
  is_draw_ = value;
}

// optional uint64 last_draw_time = 8;
inline bool offical_data_ntf::has_last_draw_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void offical_data_ntf::set_has_last_draw_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void offical_data_ntf::clear_has_last_draw_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void offical_data_ntf::clear_last_draw_time() {
  last_draw_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_draw_time();
}
inline ::google::protobuf::uint64 offical_data_ntf::last_draw_time() const {
  return last_draw_time_;
}
inline void offical_data_ntf::set_last_draw_time(::google::protobuf::uint64 value) {
  set_has_last_draw_time();
  last_draw_time_ = value;
}

// optional int32 daily_offical_chal_num = 9;
inline bool offical_data_ntf::has_daily_offical_chal_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void offical_data_ntf::set_has_daily_offical_chal_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void offical_data_ntf::clear_has_daily_offical_chal_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void offical_data_ntf::clear_daily_offical_chal_num() {
  daily_offical_chal_num_ = 0;
  clear_has_daily_offical_chal_num();
}
inline ::google::protobuf::int32 offical_data_ntf::daily_offical_chal_num() const {
  return daily_offical_chal_num_;
}
inline void offical_data_ntf::set_daily_offical_chal_num(::google::protobuf::int32 value) {
  set_has_daily_offical_chal_num();
  daily_offical_chal_num_ = value;
}

// -------------------------------------------------------------------

// update_chest_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = update_chest_ntf_id];
inline bool update_chest_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_chest_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_chest_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_chest_ntf::clear_protoid() {
  protoid_ = 5122;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID update_chest_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void update_chest_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.role_chest chests = 2;
inline int update_chest_ntf::chests_size() const {
  return chests_.size();
}
inline void update_chest_ntf::clear_chests() {
  chests_.Clear();
}
inline const ::SProtoSpace::role_chest& update_chest_ntf::chests(int index) const {
  return chests_.Get(index);
}
inline ::SProtoSpace::role_chest* update_chest_ntf::mutable_chests(int index) {
  return chests_.Mutable(index);
}
inline ::SProtoSpace::role_chest* update_chest_ntf::add_chests() {
  return chests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_chest >&
update_chest_ntf::chests() const {
  return chests_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_chest >*
update_chest_ntf::mutable_chests() {
  return &chests_;
}

// -------------------------------------------------------------------

// get_role_chest_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_req_id];
inline bool get_role_chest_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_role_chest_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_role_chest_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_role_chest_req::clear_proto_id() {
  proto_id_ = 5120;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_role_chest_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_role_chest_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 chest_id = 2;
inline bool get_role_chest_req::has_chest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_role_chest_req::set_has_chest_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_role_chest_req::clear_has_chest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_role_chest_req::clear_chest_id() {
  chest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chest_id();
}
inline ::google::protobuf::uint64 get_role_chest_req::chest_id() const {
  return chest_id_;
}
inline void get_role_chest_req::set_chest_id(::google::protobuf::uint64 value) {
  set_has_chest_id();
  chest_id_ = value;
}

// -------------------------------------------------------------------

// get_role_chest_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_role_chest_ack_id];
inline bool get_role_chest_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_role_chest_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_role_chest_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_role_chest_ack::clear_proto_id() {
  proto_id_ = 5121;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_role_chest_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_role_chest_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 chest_id = 2;
inline bool get_role_chest_ack::has_chest_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_role_chest_ack::set_has_chest_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_role_chest_ack::clear_has_chest_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_role_chest_ack::clear_chest_id() {
  chest_id_ = GOOGLE_ULONGLONG(0);
  clear_has_chest_id();
}
inline ::google::protobuf::uint64 get_role_chest_ack::chest_id() const {
  return chest_id_;
}
inline void get_role_chest_ack::set_chest_id(::google::protobuf::uint64 value) {
  set_has_chest_id();
  chest_id_ = value;
}

// optional uint32 ret = 3;
inline bool get_role_chest_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_role_chest_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_role_chest_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_role_chest_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_role_chest_ack::ret() const {
  return ret_;
}
inline void get_role_chest_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// create_team_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_req_id];
inline bool create_team_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_team_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_team_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_team_req::clear_proto_id() {
  proto_id_ = 6500;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID create_team_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void create_team_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.eTeamType team_type = 2;
inline bool create_team_req::has_team_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_team_req::set_has_team_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_team_req::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_team_req::clear_team_type() {
  team_type_ = 1;
  clear_has_team_type();
}
inline ::SProtoSpace::eTeamType create_team_req::team_type() const {
  return static_cast< ::SProtoSpace::eTeamType >(team_type_);
}
inline void create_team_req::set_team_type(::SProtoSpace::eTeamType value) {
  assert(::SProtoSpace::eTeamType_IsValid(value));
  set_has_team_type();
  team_type_ = value;
}

// optional .SProtoSpace.eTeamSize team_size = 3;
inline bool create_team_req::has_team_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_team_req::set_has_team_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_team_req::clear_has_team_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_team_req::clear_team_size() {
  team_size_ = 1;
  clear_has_team_size();
}
inline ::SProtoSpace::eTeamSize create_team_req::team_size() const {
  return static_cast< ::SProtoSpace::eTeamSize >(team_size_);
}
inline void create_team_req::set_team_size(::SProtoSpace::eTeamSize value) {
  assert(::SProtoSpace::eTeamSize_IsValid(value));
  set_has_team_size();
  team_size_ = value;
}

// optional .SProtoSpace.eTeamPermission team_perm = 4;
inline bool create_team_req::has_team_perm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_team_req::set_has_team_perm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_team_req::clear_has_team_perm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_team_req::clear_team_perm() {
  team_perm_ = 1;
  clear_has_team_perm();
}
inline ::SProtoSpace::eTeamPermission create_team_req::team_perm() const {
  return static_cast< ::SProtoSpace::eTeamPermission >(team_perm_);
}
inline void create_team_req::set_team_perm(::SProtoSpace::eTeamPermission value) {
  assert(::SProtoSpace::eTeamPermission_IsValid(value));
  set_has_team_perm();
  team_perm_ = value;
}

// optional string team_name = 5;
inline bool create_team_req::has_team_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void create_team_req::set_has_team_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void create_team_req::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void create_team_req::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& create_team_req::team_name() const {
  return *team_name_;
}
inline void create_team_req::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void create_team_req::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void create_team_req::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_team_req::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* create_team_req::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_team_req::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 heros = 6;
inline int create_team_req::heros_size() const {
  return heros_.size();
}
inline void create_team_req::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint64 create_team_req::heros(int index) const {
  return heros_.Get(index);
}
inline void create_team_req::set_heros(int index, ::google::protobuf::uint64 value) {
  heros_.Set(index, value);
}
inline void create_team_req::add_heros(::google::protobuf::uint64 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
create_team_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
create_team_req::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// create_team_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = create_team_ack_id];
inline bool create_team_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void create_team_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void create_team_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void create_team_ack::clear_proto_id() {
  proto_id_ = 6501;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID create_team_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void create_team_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.eTeamType team_type = 2;
inline bool create_team_ack::has_team_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void create_team_ack::set_has_team_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void create_team_ack::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void create_team_ack::clear_team_type() {
  team_type_ = 1;
  clear_has_team_type();
}
inline ::SProtoSpace::eTeamType create_team_ack::team_type() const {
  return static_cast< ::SProtoSpace::eTeamType >(team_type_);
}
inline void create_team_ack::set_team_type(::SProtoSpace::eTeamType value) {
  assert(::SProtoSpace::eTeamType_IsValid(value));
  set_has_team_type();
  team_type_ = value;
}

// optional .SProtoSpace.eTeamSize team_size = 3;
inline bool create_team_ack::has_team_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void create_team_ack::set_has_team_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void create_team_ack::clear_has_team_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void create_team_ack::clear_team_size() {
  team_size_ = 1;
  clear_has_team_size();
}
inline ::SProtoSpace::eTeamSize create_team_ack::team_size() const {
  return static_cast< ::SProtoSpace::eTeamSize >(team_size_);
}
inline void create_team_ack::set_team_size(::SProtoSpace::eTeamSize value) {
  assert(::SProtoSpace::eTeamSize_IsValid(value));
  set_has_team_size();
  team_size_ = value;
}

// optional .SProtoSpace.eTeamPermission team_perm = 4;
inline bool create_team_ack::has_team_perm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void create_team_ack::set_has_team_perm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void create_team_ack::clear_has_team_perm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void create_team_ack::clear_team_perm() {
  team_perm_ = 1;
  clear_has_team_perm();
}
inline ::SProtoSpace::eTeamPermission create_team_ack::team_perm() const {
  return static_cast< ::SProtoSpace::eTeamPermission >(team_perm_);
}
inline void create_team_ack::set_team_perm(::SProtoSpace::eTeamPermission value) {
  assert(::SProtoSpace::eTeamPermission_IsValid(value));
  set_has_team_perm();
  team_perm_ = value;
}

// optional string team_name = 5;
inline bool create_team_ack::has_team_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void create_team_ack::set_has_team_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void create_team_ack::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void create_team_ack::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& create_team_ack::team_name() const {
  return *team_name_;
}
inline void create_team_ack::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void create_team_ack::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void create_team_ack::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* create_team_ack::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* create_team_ack::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void create_team_ack::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint64 heros = 6;
inline int create_team_ack::heros_size() const {
  return heros_.size();
}
inline void create_team_ack::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint64 create_team_ack::heros(int index) const {
  return heros_.Get(index);
}
inline void create_team_ack::set_heros(int index, ::google::protobuf::uint64 value) {
  heros_.Set(index, value);
}
inline void create_team_ack::add_heros(::google::protobuf::uint64 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
create_team_ack::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
create_team_ack::mutable_heros() {
  return &heros_;
}

// optional uint32 ret = 7;
inline bool create_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void create_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void create_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void create_team_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 create_team_ack::ret() const {
  return ret_;
}
inline void create_team_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// enter_team_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_req_id];
inline bool enter_team_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_team_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_team_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_team_req::clear_proto_id() {
  proto_id_ = 6502;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID enter_team_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void enter_team_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool enter_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 enter_team_req::team_id() const {
  return team_id_;
}
inline void enter_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// repeated uint64 heros = 3;
inline int enter_team_req::heros_size() const {
  return heros_.size();
}
inline void enter_team_req::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint64 enter_team_req::heros(int index) const {
  return heros_.Get(index);
}
inline void enter_team_req::set_heros(int index, ::google::protobuf::uint64 value) {
  heros_.Set(index, value);
}
inline void enter_team_req::add_heros(::google::protobuf::uint64 value) {
  heros_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
enter_team_req::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
enter_team_req::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// enter_team_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = enter_team_ack_id];
inline bool enter_team_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void enter_team_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void enter_team_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void enter_team_ack::clear_proto_id() {
  proto_id_ = 6503;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID enter_team_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void enter_team_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool enter_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void enter_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void enter_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void enter_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 enter_team_ack::team_id() const {
  return team_id_;
}
inline void enter_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 ret = 3;
inline bool enter_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void enter_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void enter_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void enter_team_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 enter_team_ack::ret() const {
  return ret_;
}
inline void enter_team_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// exit_team_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_req_id];
inline bool exit_team_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_team_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_team_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_team_req::clear_proto_id() {
  proto_id_ = 6504;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID exit_team_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void exit_team_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool exit_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 exit_team_req::team_id() const {
  return team_id_;
}
inline void exit_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// -------------------------------------------------------------------

// exit_team_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = exit_team_ack_id];
inline bool exit_team_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_team_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_team_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_team_ack::clear_proto_id() {
  proto_id_ = 6505;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID exit_team_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void exit_team_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool exit_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 exit_team_ack::team_id() const {
  return team_id_;
}
inline void exit_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 ret = 3;
inline bool exit_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void exit_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void exit_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void exit_team_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 exit_team_ack::ret() const {
  return ret_;
}
inline void exit_team_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// update_team_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ntf_id];
inline bool update_team_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_team_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_team_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_team_ntf::clear_proto_id() {
  proto_id_ = 6506;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID update_team_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void update_team_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.team_data team = 2;
inline bool update_team_ntf::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_team_ntf::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_team_ntf::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_team_ntf::clear_team() {
  if (team_ != NULL) team_->::SProtoSpace::team_data::Clear();
  clear_has_team();
}
inline const ::SProtoSpace::team_data& update_team_ntf::team() const {
  return team_ != NULL ? *team_ : *default_instance_->team_;
}
inline ::SProtoSpace::team_data* update_team_ntf::mutable_team() {
  set_has_team();
  if (team_ == NULL) team_ = new ::SProtoSpace::team_data;
  return team_;
}
inline ::SProtoSpace::team_data* update_team_ntf::release_team() {
  clear_has_team();
  ::SProtoSpace::team_data* temp = team_;
  team_ = NULL;
  return temp;
}
inline void update_team_ntf::set_allocated_team(::SProtoSpace::team_data* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
}

// -------------------------------------------------------------------

// ready_team_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_req_id];
inline bool ready_team_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ready_team_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ready_team_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ready_team_req::clear_proto_id() {
  proto_id_ = 6507;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID ready_team_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void ready_team_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool ready_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ready_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ready_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ready_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ready_team_req::team_id() const {
  return team_id_;
}
inline void ready_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// -------------------------------------------------------------------

// ready_team_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = ready_team_ack_id];
inline bool ready_team_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ready_team_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ready_team_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ready_team_ack::clear_proto_id() {
  proto_id_ = 6508;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID ready_team_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void ready_team_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool ready_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ready_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ready_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ready_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 ready_team_ack::team_id() const {
  return team_id_;
}
inline void ready_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 ret = 3;
inline bool ready_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ready_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ready_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ready_team_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 ready_team_ack::ret() const {
  return ret_;
}
inline void ready_team_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// update_team_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_req_id];
inline bool update_team_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_team_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_team_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_team_req::clear_proto_id() {
  proto_id_ = 6509;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID update_team_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void update_team_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool update_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 update_team_req::team_id() const {
  return team_id_;
}
inline void update_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 slot_id = 3;
inline bool update_team_req::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_team_req::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_team_req::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_team_req::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 update_team_req::slot_id() const {
  return slot_id_;
}
inline void update_team_req::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// optional uint64 hero_id = 4;
inline bool update_team_req::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void update_team_req::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void update_team_req::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void update_team_req::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 update_team_req::hero_id() const {
  return hero_id_;
}
inline void update_team_req::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// -------------------------------------------------------------------

// update_team_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = update_team_ack_id];
inline bool update_team_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void update_team_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void update_team_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void update_team_ack::clear_proto_id() {
  proto_id_ = 6510;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID update_team_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void update_team_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool update_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void update_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void update_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void update_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 update_team_ack::team_id() const {
  return team_id_;
}
inline void update_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 slot_id = 3;
inline bool update_team_ack::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void update_team_ack::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void update_team_ack::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void update_team_ack::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
inline ::google::protobuf::uint32 update_team_ack::slot_id() const {
  return slot_id_;
}
inline void update_team_ack::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
}

// optional uint64 hero_id = 4;
inline bool update_team_ack::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void update_team_ack::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void update_team_ack::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void update_team_ack::clear_hero_id() {
  hero_id_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_id();
}
inline ::google::protobuf::uint64 update_team_ack::hero_id() const {
  return hero_id_;
}
inline void update_team_ack::set_hero_id(::google::protobuf::uint64 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// optional uint32 ret = 5;
inline bool update_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void update_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void update_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void update_team_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 update_team_ack::ret() const {
  return ret_;
}
inline void update_team_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// get_teams_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_req_id];
inline bool get_teams_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_teams_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_teams_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_teams_req::clear_proto_id() {
  proto_id_ = 6511;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_teams_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_teams_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional .SProtoSpace.eTeamType team_type = 2;
inline bool get_teams_req::has_team_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_teams_req::set_has_team_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_teams_req::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_teams_req::clear_team_type() {
  team_type_ = 1;
  clear_has_team_type();
}
inline ::SProtoSpace::eTeamType get_teams_req::team_type() const {
  return static_cast< ::SProtoSpace::eTeamType >(team_type_);
}
inline void get_teams_req::set_team_type(::SProtoSpace::eTeamType value) {
  assert(::SProtoSpace::eTeamType_IsValid(value));
  set_has_team_type();
  team_type_ = value;
}

// optional .SProtoSpace.eTeamSize team_size = 3;
inline bool get_teams_req::has_team_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_teams_req::set_has_team_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_teams_req::clear_has_team_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_teams_req::clear_team_size() {
  team_size_ = 1;
  clear_has_team_size();
}
inline ::SProtoSpace::eTeamSize get_teams_req::team_size() const {
  return static_cast< ::SProtoSpace::eTeamSize >(team_size_);
}
inline void get_teams_req::set_team_size(::SProtoSpace::eTeamSize value) {
  assert(::SProtoSpace::eTeamSize_IsValid(value));
  set_has_team_size();
  team_size_ = value;
}

// optional .SProtoSpace.eTeamPermission team_perm = 4;
inline bool get_teams_req::has_team_perm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_teams_req::set_has_team_perm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_teams_req::clear_has_team_perm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_teams_req::clear_team_perm() {
  team_perm_ = 1;
  clear_has_team_perm();
}
inline ::SProtoSpace::eTeamPermission get_teams_req::team_perm() const {
  return static_cast< ::SProtoSpace::eTeamPermission >(team_perm_);
}
inline void get_teams_req::set_team_perm(::SProtoSpace::eTeamPermission value) {
  assert(::SProtoSpace::eTeamPermission_IsValid(value));
  set_has_team_perm();
  team_perm_ = value;
}

// repeated int32 parms = 5;
inline int get_teams_req::parms_size() const {
  return parms_.size();
}
inline void get_teams_req::clear_parms() {
  parms_.Clear();
}
inline ::google::protobuf::int32 get_teams_req::parms(int index) const {
  return parms_.Get(index);
}
inline void get_teams_req::set_parms(int index, ::google::protobuf::int32 value) {
  parms_.Set(index, value);
}
inline void get_teams_req::add_parms(::google::protobuf::int32 value) {
  parms_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
get_teams_req::parms() const {
  return parms_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
get_teams_req::mutable_parms() {
  return &parms_;
}

// -------------------------------------------------------------------

// get_teams_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_teams_ack_id];
inline bool get_teams_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_teams_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_teams_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_teams_ack::clear_proto_id() {
  proto_id_ = 6512;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_teams_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_teams_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_teams_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_teams_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_teams_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_teams_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_teams_ack::ret() const {
  return ret_;
}
inline void get_teams_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.team_brief teams = 3;
inline int get_teams_ack::teams_size() const {
  return teams_.size();
}
inline void get_teams_ack::clear_teams() {
  teams_.Clear();
}
inline const ::SProtoSpace::team_brief& get_teams_ack::teams(int index) const {
  return teams_.Get(index);
}
inline ::SProtoSpace::team_brief* get_teams_ack::mutable_teams(int index) {
  return teams_.Mutable(index);
}
inline ::SProtoSpace::team_brief* get_teams_ack::add_teams() {
  return teams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >&
get_teams_ack::teams() const {
  return teams_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::team_brief >*
get_teams_ack::mutable_teams() {
  return &teams_;
}

// -------------------------------------------------------------------

// invite_roles_enter_team_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_req_id];
inline bool invite_roles_enter_team_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_roles_enter_team_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_roles_enter_team_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_roles_enter_team_req::clear_proto_id() {
  proto_id_ = 6513;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID invite_roles_enter_team_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void invite_roles_enter_team_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool invite_roles_enter_team_req::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_roles_enter_team_req::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_roles_enter_team_req::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_roles_enter_team_req::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 invite_roles_enter_team_req::team_id() const {
  return team_id_;
}
inline void invite_roles_enter_team_req::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// repeated uint64 roles = 3;
inline int invite_roles_enter_team_req::roles_size() const {
  return roles_.size();
}
inline void invite_roles_enter_team_req::clear_roles() {
  roles_.Clear();
}
inline ::google::protobuf::uint64 invite_roles_enter_team_req::roles(int index) const {
  return roles_.Get(index);
}
inline void invite_roles_enter_team_req::set_roles(int index, ::google::protobuf::uint64 value) {
  roles_.Set(index, value);
}
inline void invite_roles_enter_team_req::add_roles(::google::protobuf::uint64 value) {
  roles_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
invite_roles_enter_team_req::roles() const {
  return roles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
invite_roles_enter_team_req::mutable_roles() {
  return &roles_;
}

// -------------------------------------------------------------------

// invite_roles_enter_team_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_roles_enter_team_ack_id];
inline bool invite_roles_enter_team_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_roles_enter_team_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_roles_enter_team_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_roles_enter_team_ack::clear_proto_id() {
  proto_id_ = 6514;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID invite_roles_enter_team_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void invite_roles_enter_team_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 team_id = 2;
inline bool invite_roles_enter_team_ack::has_team_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_roles_enter_team_ack::set_has_team_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_roles_enter_team_ack::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_roles_enter_team_ack::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 invite_roles_enter_team_ack::team_id() const {
  return team_id_;
}
inline void invite_roles_enter_team_ack::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 ret = 3;
inline bool invite_roles_enter_team_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void invite_roles_enter_team_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void invite_roles_enter_team_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void invite_roles_enter_team_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 invite_roles_enter_team_ack::ret() const {
  return ret_;
}
inline void invite_roles_enter_team_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// invite_enter_team_ntf

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = invite_enter_team_ntf_id];
inline bool invite_enter_team_ntf::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void invite_enter_team_ntf::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void invite_enter_team_ntf::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void invite_enter_team_ntf::clear_proto_id() {
  proto_id_ = 6515;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID invite_enter_team_ntf::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void invite_enter_team_ntf::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 dest_role_id = 2;
inline bool invite_enter_team_ntf::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void invite_enter_team_ntf::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void invite_enter_team_ntf::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void invite_enter_team_ntf::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 invite_enter_team_ntf::dest_role_id() const {
  return dest_role_id_;
}
inline void invite_enter_team_ntf::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional uint64 team_id = 3;
inline bool invite_enter_team_ntf::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void invite_enter_team_ntf::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void invite_enter_team_ntf::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void invite_enter_team_ntf::clear_team_id() {
  team_id_ = GOOGLE_ULONGLONG(0);
  clear_has_team_id();
}
inline ::google::protobuf::uint64 invite_enter_team_ntf::team_id() const {
  return team_id_;
}
inline void invite_enter_team_ntf::set_team_id(::google::protobuf::uint64 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional string team_name = 4;
inline bool invite_enter_team_ntf::has_team_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void invite_enter_team_ntf::set_has_team_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void invite_enter_team_ntf::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void invite_enter_team_ntf::clear_team_name() {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    team_name_->clear();
  }
  clear_has_team_name();
}
inline const ::std::string& invite_enter_team_ntf::team_name() const {
  return *team_name_;
}
inline void invite_enter_team_ntf::set_team_name(const ::std::string& value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void invite_enter_team_ntf::set_team_name(const char* value) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(value);
}
inline void invite_enter_team_ntf::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  team_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* invite_enter_team_ntf::mutable_team_name() {
  set_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    team_name_ = new ::std::string;
  }
  return team_name_;
}
inline ::std::string* invite_enter_team_ntf::release_team_name() {
  clear_has_team_name();
  if (team_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = team_name_;
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void invite_enter_team_ntf::set_allocated_team_name(::std::string* team_name) {
  if (team_name_ != &::google::protobuf::internal::kEmptyString) {
    delete team_name_;
  }
  if (team_name) {
    set_has_team_name();
    team_name_ = team_name;
  } else {
    clear_has_team_name();
    team_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 team_type = 5;
inline bool invite_enter_team_ntf::has_team_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void invite_enter_team_ntf::set_has_team_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void invite_enter_team_ntf::clear_has_team_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void invite_enter_team_ntf::clear_team_type() {
  team_type_ = 0u;
  clear_has_team_type();
}
inline ::google::protobuf::uint32 invite_enter_team_ntf::team_type() const {
  return team_type_;
}
inline void invite_enter_team_ntf::set_team_type(::google::protobuf::uint32 value) {
  set_has_team_type();
  team_type_ = value;
}

// optional uint64 sour_role_id = 6;
inline bool invite_enter_team_ntf::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void invite_enter_team_ntf::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void invite_enter_team_ntf::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void invite_enter_team_ntf::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 invite_enter_team_ntf::sour_role_id() const {
  return sour_role_id_;
}
inline void invite_enter_team_ntf::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional string sour_role_name = 7;
inline bool invite_enter_team_ntf::has_sour_role_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void invite_enter_team_ntf::set_has_sour_role_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void invite_enter_team_ntf::clear_has_sour_role_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void invite_enter_team_ntf::clear_sour_role_name() {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    sour_role_name_->clear();
  }
  clear_has_sour_role_name();
}
inline const ::std::string& invite_enter_team_ntf::sour_role_name() const {
  return *sour_role_name_;
}
inline void invite_enter_team_ntf::set_sour_role_name(const ::std::string& value) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(value);
}
inline void invite_enter_team_ntf::set_sour_role_name(const char* value) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(value);
}
inline void invite_enter_team_ntf::set_sour_role_name(const char* value, size_t size) {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  sour_role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* invite_enter_team_ntf::mutable_sour_role_name() {
  set_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    sour_role_name_ = new ::std::string;
  }
  return sour_role_name_;
}
inline ::std::string* invite_enter_team_ntf::release_sour_role_name() {
  clear_has_sour_role_name();
  if (sour_role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sour_role_name_;
    sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void invite_enter_team_ntf::set_allocated_sour_role_name(::std::string* sour_role_name) {
  if (sour_role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sour_role_name_;
  }
  if (sour_role_name) {
    set_has_sour_role_name();
    sour_role_name_ = sour_role_name;
  } else {
    clear_has_sour_role_name();
    sour_role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// get_offical_rank_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_req_id];
inline bool get_offical_rank_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_rank_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_rank_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_rank_req::clear_proto_id() {
  proto_id_ = 6702;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_rank_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_rank_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 office_lv = 2;
inline bool get_offical_rank_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_rank_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_rank_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_rank_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::google::protobuf::int32 get_offical_rank_req::office_lv() const {
  return office_lv_;
}
inline void get_offical_rank_req::set_office_lv(::google::protobuf::int32 value) {
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint32 start_index = 3;
inline bool get_offical_rank_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_rank_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_rank_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_rank_req::clear_start_index() {
  start_index_ = 0u;
  clear_has_start_index();
}
inline ::google::protobuf::uint32 get_offical_rank_req::start_index() const {
  return start_index_;
}
inline void get_offical_rank_req::set_start_index(::google::protobuf::uint32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional uint32 end_index = 4;
inline bool get_offical_rank_req::has_end_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_rank_req::set_has_end_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_rank_req::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_rank_req::clear_end_index() {
  end_index_ = 0u;
  clear_has_end_index();
}
inline ::google::protobuf::uint32 get_offical_rank_req::end_index() const {
  return end_index_;
}
inline void get_offical_rank_req::set_end_index(::google::protobuf::uint32 value) {
  set_has_end_index();
  end_index_ = value;
}

// -------------------------------------------------------------------

// get_offical_rank_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_ack_id];
inline bool get_offical_rank_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_rank_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_rank_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_rank_ack::clear_proto_id() {
  proto_id_ = 6703;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_rank_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_rank_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_offical_rank_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_rank_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_rank_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_rank_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_offical_rank_ack::ret() const {
  return ret_;
}
inline void get_offical_rank_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .SProtoSpace.offical_item_data rank_items = 3;
inline int get_offical_rank_ack::rank_items_size() const {
  return rank_items_.size();
}
inline void get_offical_rank_ack::clear_rank_items() {
  rank_items_.Clear();
}
inline const ::SProtoSpace::offical_item_data& get_offical_rank_ack::rank_items(int index) const {
  return rank_items_.Get(index);
}
inline ::SProtoSpace::offical_item_data* get_offical_rank_ack::mutable_rank_items(int index) {
  return rank_items_.Mutable(index);
}
inline ::SProtoSpace::offical_item_data* get_offical_rank_ack::add_rank_items() {
  return rank_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
get_offical_rank_ack::rank_items() const {
  return rank_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
get_offical_rank_ack::mutable_rank_items() {
  return &rank_items_;
}

// -------------------------------------------------------------------

// get_offical_rank_info_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_req_id];
inline bool get_offical_rank_info_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_rank_info_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_rank_info_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_rank_info_req::clear_proto_id() {
  proto_id_ = 6732;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_rank_info_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_rank_info_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 office_lv = 2;
inline bool get_offical_rank_info_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_rank_info_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_rank_info_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_rank_info_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::google::protobuf::int32 get_offical_rank_info_req::office_lv() const {
  return office_lv_;
}
inline void get_offical_rank_info_req::set_office_lv(::google::protobuf::int32 value) {
  set_has_office_lv();
  office_lv_ = value;
}

// optional int32 start_index = 3;
inline bool get_offical_rank_info_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_rank_info_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_rank_info_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_rank_info_req::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 get_offical_rank_info_req::start_index() const {
  return start_index_;
}
inline void get_offical_rank_info_req::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 len = 4;
inline bool get_offical_rank_info_req::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_rank_info_req::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_rank_info_req::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_rank_info_req::clear_len() {
  len_ = 0;
  clear_has_len();
}
inline ::google::protobuf::int32 get_offical_rank_info_req::len() const {
  return len_;
}
inline void get_offical_rank_info_req::set_len(::google::protobuf::int32 value) {
  set_has_len();
  len_ = value;
}

// optional bool show = 5;
inline bool get_offical_rank_info_req::has_show() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_offical_rank_info_req::set_has_show() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_offical_rank_info_req::clear_has_show() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_offical_rank_info_req::clear_show() {
  show_ = false;
  clear_has_show();
}
inline bool get_offical_rank_info_req::show() const {
  return show_;
}
inline void get_offical_rank_info_req::set_show(bool value) {
  set_has_show();
  show_ = value;
}

// -------------------------------------------------------------------

// get_offical_rank_info_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_rank_info_ack_id];
inline bool get_offical_rank_info_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_rank_info_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_rank_info_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_rank_info_ack::clear_proto_id() {
  proto_id_ = 6733;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_rank_info_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_rank_info_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_offical_rank_info_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_rank_info_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_rank_info_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_rank_info_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_offical_rank_info_ack::ret() const {
  return ret_;
}
inline void get_offical_rank_info_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 offical_challenge_num = 3;
inline bool get_offical_rank_info_ack::has_offical_challenge_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_rank_info_ack::set_has_offical_challenge_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_rank_info_ack::clear_has_offical_challenge_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_rank_info_ack::clear_offical_challenge_num() {
  offical_challenge_num_ = 0;
  clear_has_offical_challenge_num();
}
inline ::google::protobuf::int32 get_offical_rank_info_ack::offical_challenge_num() const {
  return offical_challenge_num_;
}
inline void get_offical_rank_info_ack::set_offical_challenge_num(::google::protobuf::int32 value) {
  set_has_offical_challenge_num();
  offical_challenge_num_ = value;
}

// optional int32 offical_challenge_buy = 4;
inline bool get_offical_rank_info_ack::has_offical_challenge_buy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_rank_info_ack::set_has_offical_challenge_buy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_rank_info_ack::clear_has_offical_challenge_buy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_rank_info_ack::clear_offical_challenge_buy() {
  offical_challenge_buy_ = 0;
  clear_has_offical_challenge_buy();
}
inline ::google::protobuf::int32 get_offical_rank_info_ack::offical_challenge_buy() const {
  return offical_challenge_buy_;
}
inline void get_offical_rank_info_ack::set_offical_challenge_buy(::google::protobuf::int32 value) {
  set_has_offical_challenge_buy();
  offical_challenge_buy_ = value;
}

// optional .SProtoSpace.offical_item_data my_item = 5;
inline bool get_offical_rank_info_ack::has_my_item() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_offical_rank_info_ack::set_has_my_item() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_offical_rank_info_ack::clear_has_my_item() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_offical_rank_info_ack::clear_my_item() {
  if (my_item_ != NULL) my_item_->::SProtoSpace::offical_item_data::Clear();
  clear_has_my_item();
}
inline const ::SProtoSpace::offical_item_data& get_offical_rank_info_ack::my_item() const {
  return my_item_ != NULL ? *my_item_ : *default_instance_->my_item_;
}
inline ::SProtoSpace::offical_item_data* get_offical_rank_info_ack::mutable_my_item() {
  set_has_my_item();
  if (my_item_ == NULL) my_item_ = new ::SProtoSpace::offical_item_data;
  return my_item_;
}
inline ::SProtoSpace::offical_item_data* get_offical_rank_info_ack::release_my_item() {
  clear_has_my_item();
  ::SProtoSpace::offical_item_data* temp = my_item_;
  my_item_ = NULL;
  return temp;
}
inline void get_offical_rank_info_ack::set_allocated_my_item(::SProtoSpace::offical_item_data* my_item) {
  delete my_item_;
  my_item_ = my_item;
  if (my_item) {
    set_has_my_item();
  } else {
    clear_has_my_item();
  }
}

// optional int32 current_size = 6;
inline bool get_offical_rank_info_ack::has_current_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void get_offical_rank_info_ack::set_has_current_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void get_offical_rank_info_ack::clear_has_current_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void get_offical_rank_info_ack::clear_current_size() {
  current_size_ = 0;
  clear_has_current_size();
}
inline ::google::protobuf::int32 get_offical_rank_info_ack::current_size() const {
  return current_size_;
}
inline void get_offical_rank_info_ack::set_current_size(::google::protobuf::int32 value) {
  set_has_current_size();
  current_size_ = value;
}

// repeated .SProtoSpace.offical_item_data rank_items = 7;
inline int get_offical_rank_info_ack::rank_items_size() const {
  return rank_items_.size();
}
inline void get_offical_rank_info_ack::clear_rank_items() {
  rank_items_.Clear();
}
inline const ::SProtoSpace::offical_item_data& get_offical_rank_info_ack::rank_items(int index) const {
  return rank_items_.Get(index);
}
inline ::SProtoSpace::offical_item_data* get_offical_rank_info_ack::mutable_rank_items(int index) {
  return rank_items_.Mutable(index);
}
inline ::SProtoSpace::offical_item_data* get_offical_rank_info_ack::add_rank_items() {
  return rank_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >&
get_offical_rank_info_ack::rank_items() const {
  return rank_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_item_data >*
get_offical_rank_info_ack::mutable_rank_items() {
  return &rank_items_;
}

// repeated .SProtoSpace.role_show_role_equipped equip_items = 8;
inline int get_offical_rank_info_ack::equip_items_size() const {
  return equip_items_.size();
}
inline void get_offical_rank_info_ack::clear_equip_items() {
  equip_items_.Clear();
}
inline const ::SProtoSpace::role_show_role_equipped& get_offical_rank_info_ack::equip_items(int index) const {
  return equip_items_.Get(index);
}
inline ::SProtoSpace::role_show_role_equipped* get_offical_rank_info_ack::mutable_equip_items(int index) {
  return equip_items_.Mutable(index);
}
inline ::SProtoSpace::role_show_role_equipped* get_offical_rank_info_ack::add_equip_items() {
  return equip_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >&
get_offical_rank_info_ack::equip_items() const {
  return equip_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_show_role_equipped >*
get_offical_rank_info_ack::mutable_equip_items() {
  return &equip_items_;
}

// -------------------------------------------------------------------

// get_offical_formation_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_req_id];
inline bool get_offical_formation_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_formation_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_formation_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_formation_req::clear_proto_id() {
  proto_id_ = 6734;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_formation_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_formation_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint64 role_id = 2;
inline bool get_offical_formation_req::has_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_formation_req::set_has_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_formation_req::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_formation_req::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 get_offical_formation_req::role_id() const {
  return role_id_;
}
inline void get_offical_formation_req::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// get_offical_formation_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = get_offical_formation_ack_id];
inline bool get_offical_formation_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_offical_formation_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_offical_formation_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_offical_formation_ack::clear_proto_id() {
  proto_id_ = 6735;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID get_offical_formation_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void get_offical_formation_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool get_offical_formation_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_offical_formation_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_offical_formation_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_offical_formation_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 get_offical_formation_ack::ret() const {
  return ret_;
}
inline void get_offical_formation_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 role_id = 3;
inline bool get_offical_formation_ack::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_offical_formation_ack::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_offical_formation_ack::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_offical_formation_ack::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 get_offical_formation_ack::role_id() const {
  return role_id_;
}
inline void get_offical_formation_ack::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional string name = 4;
inline bool get_offical_formation_ack::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_offical_formation_ack::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_offical_formation_ack::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_offical_formation_ack::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& get_offical_formation_ack::name() const {
  return *name_;
}
inline void get_offical_formation_ack::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void get_offical_formation_ack::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void get_offical_formation_ack::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* get_offical_formation_ack::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* get_offical_formation_ack::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void get_offical_formation_ack::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 5;
inline bool get_offical_formation_ack::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_offical_formation_ack::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_offical_formation_ack::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_offical_formation_ack::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 get_offical_formation_ack::sex() const {
  return sex_;
}
inline void get_offical_formation_ack::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string head = 6;
inline bool get_offical_formation_ack::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void get_offical_formation_ack::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void get_offical_formation_ack::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void get_offical_formation_ack::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& get_offical_formation_ack::head() const {
  return *head_;
}
inline void get_offical_formation_ack::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void get_offical_formation_ack::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void get_offical_formation_ack::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* get_offical_formation_ack::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* get_offical_formation_ack::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void get_offical_formation_ack::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bord = 7;
inline bool get_offical_formation_ack::has_bord() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void get_offical_formation_ack::set_has_bord() {
  _has_bits_[0] |= 0x00000040u;
}
inline void get_offical_formation_ack::clear_has_bord() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void get_offical_formation_ack::clear_bord() {
  bord_ = 0;
  clear_has_bord();
}
inline ::google::protobuf::int32 get_offical_formation_ack::bord() const {
  return bord_;
}
inline void get_offical_formation_ack::set_bord(::google::protobuf::int32 value) {
  set_has_bord();
  bord_ = value;
}

// optional int32 grade = 8;
inline bool get_offical_formation_ack::has_grade() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void get_offical_formation_ack::set_has_grade() {
  _has_bits_[0] |= 0x00000080u;
}
inline void get_offical_formation_ack::clear_has_grade() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void get_offical_formation_ack::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 get_offical_formation_ack::grade() const {
  return grade_;
}
inline void get_offical_formation_ack::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional int32 lv = 9;
inline bool get_offical_formation_ack::has_lv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void get_offical_formation_ack::set_has_lv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void get_offical_formation_ack::clear_has_lv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void get_offical_formation_ack::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 get_offical_formation_ack::lv() const {
  return lv_;
}
inline void get_offical_formation_ack::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// repeated .SProtoSpace.hero_base_info heros = 10;
inline int get_offical_formation_ack::heros_size() const {
  return heros_.size();
}
inline void get_offical_formation_ack::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::hero_base_info& get_offical_formation_ack::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::hero_base_info* get_offical_formation_ack::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::hero_base_info* get_offical_formation_ack::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
get_offical_formation_ack::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
get_offical_formation_ack::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// challenge_offical_rank_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_req_id];
inline bool challenge_offical_rank_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void challenge_offical_rank_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void challenge_offical_rank_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void challenge_offical_rank_req::clear_proto_id() {
  proto_id_ = 6704;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID challenge_offical_rank_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void challenge_offical_rank_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 office_lv = 2;
inline bool challenge_offical_rank_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void challenge_offical_rank_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void challenge_offical_rank_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void challenge_offical_rank_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::google::protobuf::int32 challenge_offical_rank_req::office_lv() const {
  return office_lv_;
}
inline void challenge_offical_rank_req::set_office_lv(::google::protobuf::int32 value) {
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 dest_role_id = 3;
inline bool challenge_offical_rank_req::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void challenge_offical_rank_req::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void challenge_offical_rank_req::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void challenge_offical_rank_req::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 challenge_offical_rank_req::dest_role_id() const {
  return dest_role_id_;
}
inline void challenge_offical_rank_req::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// -------------------------------------------------------------------

// challenge_offical_rank_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = challenge_offical_rank_ack_id];
inline bool challenge_offical_rank_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void challenge_offical_rank_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void challenge_offical_rank_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void challenge_offical_rank_ack::clear_proto_id() {
  proto_id_ = 6705;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID challenge_offical_rank_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void challenge_offical_rank_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional uint32 ret = 2;
inline bool challenge_offical_rank_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void challenge_offical_rank_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void challenge_offical_rank_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void challenge_offical_rank_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 challenge_offical_rank_ack::ret() const {
  return ret_;
}
inline void challenge_offical_rank_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 office_lv = 3;
inline bool challenge_offical_rank_ack::has_office_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void challenge_offical_rank_ack::set_has_office_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void challenge_offical_rank_ack::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void challenge_offical_rank_ack::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::google::protobuf::int32 challenge_offical_rank_ack::office_lv() const {
  return office_lv_;
}
inline void challenge_offical_rank_ack::set_office_lv(::google::protobuf::int32 value) {
  set_has_office_lv();
  office_lv_ = value;
}

// optional uint64 dest_role_id = 4;
inline bool challenge_offical_rank_ack::has_dest_role_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void challenge_offical_rank_ack::set_has_dest_role_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void challenge_offical_rank_ack::clear_has_dest_role_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void challenge_offical_rank_ack::clear_dest_role_id() {
  dest_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_dest_role_id();
}
inline ::google::protobuf::uint64 challenge_offical_rank_ack::dest_role_id() const {
  return dest_role_id_;
}
inline void challenge_offical_rank_ack::set_dest_role_id(::google::protobuf::uint64 value) {
  set_has_dest_role_id();
  dest_role_id_ = value;
}

// optional int32 dest_older_rankingid = 5;
inline bool challenge_offical_rank_ack::has_dest_older_rankingid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void challenge_offical_rank_ack::set_has_dest_older_rankingid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void challenge_offical_rank_ack::clear_has_dest_older_rankingid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void challenge_offical_rank_ack::clear_dest_older_rankingid() {
  dest_older_rankingid_ = 0;
  clear_has_dest_older_rankingid();
}
inline ::google::protobuf::int32 challenge_offical_rank_ack::dest_older_rankingid() const {
  return dest_older_rankingid_;
}
inline void challenge_offical_rank_ack::set_dest_older_rankingid(::google::protobuf::int32 value) {
  set_has_dest_older_rankingid();
  dest_older_rankingid_ = value;
}

// optional int32 dest_new_rankingid = 6;
inline bool challenge_offical_rank_ack::has_dest_new_rankingid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void challenge_offical_rank_ack::set_has_dest_new_rankingid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void challenge_offical_rank_ack::clear_has_dest_new_rankingid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void challenge_offical_rank_ack::clear_dest_new_rankingid() {
  dest_new_rankingid_ = 0;
  clear_has_dest_new_rankingid();
}
inline ::google::protobuf::int32 challenge_offical_rank_ack::dest_new_rankingid() const {
  return dest_new_rankingid_;
}
inline void challenge_offical_rank_ack::set_dest_new_rankingid(::google::protobuf::int32 value) {
  set_has_dest_new_rankingid();
  dest_new_rankingid_ = value;
}

// optional uint64 sour_role_id = 7;
inline bool challenge_offical_rank_ack::has_sour_role_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void challenge_offical_rank_ack::set_has_sour_role_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void challenge_offical_rank_ack::clear_has_sour_role_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void challenge_offical_rank_ack::clear_sour_role_id() {
  sour_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sour_role_id();
}
inline ::google::protobuf::uint64 challenge_offical_rank_ack::sour_role_id() const {
  return sour_role_id_;
}
inline void challenge_offical_rank_ack::set_sour_role_id(::google::protobuf::uint64 value) {
  set_has_sour_role_id();
  sour_role_id_ = value;
}

// optional int32 sour_older_rankingid = 8;
inline bool challenge_offical_rank_ack::has_sour_older_rankingid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void challenge_offical_rank_ack::set_has_sour_older_rankingid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void challenge_offical_rank_ack::clear_has_sour_older_rankingid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void challenge_offical_rank_ack::clear_sour_older_rankingid() {
  sour_older_rankingid_ = 0;
  clear_has_sour_older_rankingid();
}
inline ::google::protobuf::int32 challenge_offical_rank_ack::sour_older_rankingid() const {
  return sour_older_rankingid_;
}
inline void challenge_offical_rank_ack::set_sour_older_rankingid(::google::protobuf::int32 value) {
  set_has_sour_older_rankingid();
  sour_older_rankingid_ = value;
}

// optional int32 sour_new_rankingid = 9;
inline bool challenge_offical_rank_ack::has_sour_new_rankingid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void challenge_offical_rank_ack::set_has_sour_new_rankingid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void challenge_offical_rank_ack::clear_has_sour_new_rankingid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void challenge_offical_rank_ack::clear_sour_new_rankingid() {
  sour_new_rankingid_ = 0;
  clear_has_sour_new_rankingid();
}
inline ::google::protobuf::int32 challenge_offical_rank_ack::sour_new_rankingid() const {
  return sour_new_rankingid_;
}
inline void challenge_offical_rank_ack::set_sour_new_rankingid(::google::protobuf::int32 value) {
  set_has_sour_new_rankingid();
  sour_new_rankingid_ = value;
}

// optional uint64 battle_id = 10;
inline bool challenge_offical_rank_ack::has_battle_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void challenge_offical_rank_ack::set_has_battle_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void challenge_offical_rank_ack::clear_has_battle_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void challenge_offical_rank_ack::clear_battle_id() {
  battle_id_ = GOOGLE_ULONGLONG(0);
  clear_has_battle_id();
}
inline ::google::protobuf::uint64 challenge_offical_rank_ack::battle_id() const {
  return battle_id_;
}
inline void challenge_offical_rank_ack::set_battle_id(::google::protobuf::uint64 value) {
  set_has_battle_id();
  battle_id_ = value;
}

// optional bool win = 11;
inline bool challenge_offical_rank_ack::has_win() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void challenge_offical_rank_ack::set_has_win() {
  _has_bits_[0] |= 0x00000400u;
}
inline void challenge_offical_rank_ack::clear_has_win() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void challenge_offical_rank_ack::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool challenge_offical_rank_ack::win() const {
  return win_;
}
inline void challenge_offical_rank_ack::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// repeated .SProtoSpace.reward_item items = 12;
inline int challenge_offical_rank_ack::items_size() const {
  return items_.size();
}
inline void challenge_offical_rank_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::reward_item& challenge_offical_rank_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::reward_item* challenge_offical_rank_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::reward_item* challenge_offical_rank_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >&
challenge_offical_rank_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::reward_item >*
challenge_offical_rank_ack::mutable_items() {
  return &items_;
}

// optional int32 merit = 13;
inline bool challenge_offical_rank_ack::has_merit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void challenge_offical_rank_ack::set_has_merit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void challenge_offical_rank_ack::clear_has_merit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void challenge_offical_rank_ack::clear_merit() {
  merit_ = 0;
  clear_has_merit();
}
inline ::google::protobuf::int32 challenge_offical_rank_ack::merit() const {
  return merit_;
}
inline void challenge_offical_rank_ack::set_merit(::google::protobuf::int32 value) {
  set_has_merit();
  merit_ = value;
}

// repeated .SProtoSpace.hero_base_info heros = 14;
inline int challenge_offical_rank_ack::heros_size() const {
  return heros_.size();
}
inline void challenge_offical_rank_ack::clear_heros() {
  heros_.Clear();
}
inline const ::SProtoSpace::hero_base_info& challenge_offical_rank_ack::heros(int index) const {
  return heros_.Get(index);
}
inline ::SProtoSpace::hero_base_info* challenge_offical_rank_ack::mutable_heros(int index) {
  return heros_.Mutable(index);
}
inline ::SProtoSpace::hero_base_info* challenge_offical_rank_ack::add_heros() {
  return heros_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >&
challenge_offical_rank_ack::heros() const {
  return heros_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::hero_base_info >*
challenge_offical_rank_ack::mutable_heros() {
  return &heros_;
}

// -------------------------------------------------------------------

// offical_apply_battle_result_req

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_req_id];
inline bool offical_apply_battle_result_req::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_apply_battle_result_req::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_apply_battle_result_req::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_apply_battle_result_req::clear_proto_id() {
  proto_id_ = 6708;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID offical_apply_battle_result_req::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void offical_apply_battle_result_req::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 office_lv = 2;
inline bool offical_apply_battle_result_req::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_apply_battle_result_req::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_apply_battle_result_req::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_apply_battle_result_req::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::google::protobuf::int32 offical_apply_battle_result_req::office_lv() const {
  return office_lv_;
}
inline void offical_apply_battle_result_req::set_office_lv(::google::protobuf::int32 value) {
  set_has_office_lv();
  office_lv_ = value;
}

// -------------------------------------------------------------------

// offical_apply_battle_result_ack

// optional .SProtoSpace.ECSProtoID proto_id = 1 [default = offical_apply_battle_result_ack_id];
inline bool offical_apply_battle_result_ack::has_proto_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void offical_apply_battle_result_ack::set_has_proto_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void offical_apply_battle_result_ack::clear_has_proto_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void offical_apply_battle_result_ack::clear_proto_id() {
  proto_id_ = 6709;
  clear_has_proto_id();
}
inline ::SProtoSpace::ECSProtoID offical_apply_battle_result_ack::proto_id() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(proto_id_);
}
inline void offical_apply_battle_result_ack::set_proto_id(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_proto_id();
  proto_id_ = value;
}

// optional int32 office_lv = 2;
inline bool offical_apply_battle_result_ack::has_office_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void offical_apply_battle_result_ack::set_has_office_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void offical_apply_battle_result_ack::clear_has_office_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void offical_apply_battle_result_ack::clear_office_lv() {
  office_lv_ = 0;
  clear_has_office_lv();
}
inline ::google::protobuf::int32 offical_apply_battle_result_ack::office_lv() const {
  return office_lv_;
}
inline void offical_apply_battle_result_ack::set_office_lv(::google::protobuf::int32 value) {
  set_has_office_lv();
  office_lv_ = value;
}

// optional int32 time = 3;
inline bool offical_apply_battle_result_ack::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void offical_apply_battle_result_ack::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void offical_apply_battle_result_ack::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void offical_apply_battle_result_ack::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 offical_apply_battle_result_ack::time() const {
  return time_;
}
inline void offical_apply_battle_result_ack::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// repeated .SProtoSpace.offical_member_data data = 4;
inline int offical_apply_battle_result_ack::data_size() const {
  return data_.size();
}
inline void offical_apply_battle_result_ack::clear_data() {
  data_.Clear();
}
inline const ::SProtoSpace::offical_member_data& offical_apply_battle_result_ack::data(int index) const {
  return data_.Get(index);
}
inline ::SProtoSpace::offical_member_data* offical_apply_battle_result_ack::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SProtoSpace::offical_member_data* offical_apply_battle_result_ack::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >&
offical_apply_battle_result_ack::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_member_data >*
offical_apply_battle_result_ack::mutable_data() {
  return &data_;
}

// repeated .SProtoSpace.offical_apply_my_battle_data mydata = 5;
inline int offical_apply_battle_result_ack::mydata_size() const {
  return mydata_.size();
}
inline void offical_apply_battle_result_ack::clear_mydata() {
  mydata_.Clear();
}
inline const ::SProtoSpace::offical_apply_my_battle_data& offical_apply_battle_result_ack::mydata(int index) const {
  return mydata_.Get(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* offical_apply_battle_result_ack::mutable_mydata(int index) {
  return mydata_.Mutable(index);
}
inline ::SProtoSpace::offical_apply_my_battle_data* offical_apply_battle_result_ack::add_mydata() {
  return mydata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >&
offical_apply_battle_result_ack::mydata() const {
  return mydata_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::offical_apply_my_battle_data >*
offical_apply_battle_result_ack::mutable_mydata() {
  return &mydata_;
}

// optional int32 my_place_id = 6;
inline bool offical_apply_battle_result_ack::has_my_place_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void offical_apply_battle_result_ack::set_has_my_place_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void offical_apply_battle_result_ack::clear_has_my_place_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void offical_apply_battle_result_ack::clear_my_place_id() {
  my_place_id_ = 0;
  clear_has_my_place_id();
}
inline ::google::protobuf::int32 offical_apply_battle_result_ack::my_place_id() const {
  return my_place_id_;
}
inline void offical_apply_battle_result_ack::set_my_place_id(::google::protobuf::int32 value) {
  set_has_my_place_id();
  my_place_id_ = value;
}

// optional uint32 ret = 7;
inline bool offical_apply_battle_result_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void offical_apply_battle_result_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void offical_apply_battle_result_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void offical_apply_battle_result_ack::clear_ret() {
  ret_ = 0u;
  clear_has_ret();
}
inline ::google::protobuf::uint32 offical_apply_battle_result_ack::ret() const {
  return ret_;
}
inline void offical_apply_battle_result_ack::set_ret(::google::protobuf::uint32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// role_plot_upload_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_req_id];
inline bool role_plot_upload_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_plot_upload_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_plot_upload_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_plot_upload_req::clear_protoid() {
  protoid_ = 5820;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_plot_upload_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_plot_upload_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 chapter_id = 2;
inline bool role_plot_upload_req::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_plot_upload_req::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_plot_upload_req::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_plot_upload_req::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 role_plot_upload_req::chapter_id() const {
  return chapter_id_;
}
inline void role_plot_upload_req::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 3;
inline bool role_plot_upload_req::has_screen_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_plot_upload_req::set_has_screen_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_plot_upload_req::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_plot_upload_req::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 role_plot_upload_req::screen_id() const {
  return screen_id_;
}
inline void role_plot_upload_req::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// optional uint32 section_id = 4;
inline bool role_plot_upload_req::has_section_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_plot_upload_req::set_has_section_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_plot_upload_req::clear_has_section_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_plot_upload_req::clear_section_id() {
  section_id_ = 0u;
  clear_has_section_id();
}
inline ::google::protobuf::uint32 role_plot_upload_req::section_id() const {
  return section_id_;
}
inline void role_plot_upload_req::set_section_id(::google::protobuf::uint32 value) {
  set_has_section_id();
  section_id_ = value;
}

// -------------------------------------------------------------------

// role_plot_upload_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_upload_ack_id];
inline bool role_plot_upload_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_plot_upload_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_plot_upload_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_plot_upload_ack::clear_protoid() {
  protoid_ = 5821;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_plot_upload_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_plot_upload_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool role_plot_upload_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_plot_upload_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_plot_upload_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_plot_upload_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_plot_upload_ack::result() const {
  return result_;
}
inline void role_plot_upload_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// role_plot_get_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_req_id];
inline bool role_plot_get_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_plot_get_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_plot_get_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_plot_get_req::clear_protoid() {
  protoid_ = 5822;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_plot_get_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_plot_get_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.GET_PLOT_TYPE get_type = 2;
inline bool role_plot_get_req::has_get_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_plot_get_req::set_has_get_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_plot_get_req::clear_has_get_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_plot_get_req::clear_get_type() {
  get_type_ = 1;
  clear_has_get_type();
}
inline ::SProtoSpace::GET_PLOT_TYPE role_plot_get_req::get_type() const {
  return static_cast< ::SProtoSpace::GET_PLOT_TYPE >(get_type_);
}
inline void role_plot_get_req::set_get_type(::SProtoSpace::GET_PLOT_TYPE value) {
  assert(::SProtoSpace::GET_PLOT_TYPE_IsValid(value));
  set_has_get_type();
  get_type_ = value;
}

// -------------------------------------------------------------------

// role_plot_get_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_plot_get_ack_id];
inline bool role_plot_get_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_plot_get_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_plot_get_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_plot_get_ack::clear_protoid() {
  protoid_ = 5823;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_plot_get_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_plot_get_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool role_plot_get_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_plot_get_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_plot_get_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_plot_get_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 role_plot_get_ack::result() const {
  return result_;
}
inline void role_plot_get_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.plot_screen_info plot_infos = 3;
inline int role_plot_get_ack::plot_infos_size() const {
  return plot_infos_.size();
}
inline void role_plot_get_ack::clear_plot_infos() {
  plot_infos_.Clear();
}
inline const ::SProtoSpace::plot_screen_info& role_plot_get_ack::plot_infos(int index) const {
  return plot_infos_.Get(index);
}
inline ::SProtoSpace::plot_screen_info* role_plot_get_ack::mutable_plot_infos(int index) {
  return plot_infos_.Mutable(index);
}
inline ::SProtoSpace::plot_screen_info* role_plot_get_ack::add_plot_infos() {
  return plot_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::plot_screen_info >&
role_plot_get_ack::plot_infos() const {
  return plot_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::plot_screen_info >*
role_plot_get_ack::mutable_plot_infos() {
  return &plot_infos_;
}

// repeated uint32 branch_ids = 4;
inline int role_plot_get_ack::branch_ids_size() const {
  return branch_ids_.size();
}
inline void role_plot_get_ack::clear_branch_ids() {
  branch_ids_.Clear();
}
inline ::google::protobuf::uint32 role_plot_get_ack::branch_ids(int index) const {
  return branch_ids_.Get(index);
}
inline void role_plot_get_ack::set_branch_ids(int index, ::google::protobuf::uint32 value) {
  branch_ids_.Set(index, value);
}
inline void role_plot_get_ack::add_branch_ids(::google::protobuf::uint32 value) {
  branch_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
role_plot_get_ack::branch_ids() const {
  return branch_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
role_plot_get_ack::mutable_branch_ids() {
  return &branch_ids_;
}

// repeated uint32 end_ids = 5;
inline int role_plot_get_ack::end_ids_size() const {
  return end_ids_.size();
}
inline void role_plot_get_ack::clear_end_ids() {
  end_ids_.Clear();
}
inline ::google::protobuf::uint32 role_plot_get_ack::end_ids(int index) const {
  return end_ids_.Get(index);
}
inline void role_plot_get_ack::set_end_ids(int index, ::google::protobuf::uint32 value) {
  end_ids_.Set(index, value);
}
inline void role_plot_get_ack::add_end_ids(::google::protobuf::uint32 value) {
  end_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
role_plot_get_ack::end_ids() const {
  return end_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
role_plot_get_ack::mutable_end_ids() {
  return &end_ids_;
}

// -------------------------------------------------------------------

// plot_end_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_req_id];
inline bool plot_end_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_end_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_end_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_end_req::clear_protoid() {
  protoid_ = 5824;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_end_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_end_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 chapter_id = 2;
inline bool plot_end_req::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_end_req::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_end_req::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_end_req::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 plot_end_req::chapter_id() const {
  return chapter_id_;
}
inline void plot_end_req::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 3;
inline bool plot_end_req::has_screen_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plot_end_req::set_has_screen_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plot_end_req::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plot_end_req::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 plot_end_req::screen_id() const {
  return screen_id_;
}
inline void plot_end_req::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// -------------------------------------------------------------------

// plot_end_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_end_ack_id];
inline bool plot_end_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_end_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_end_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_end_ack::clear_protoid() {
  protoid_ = 5825;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_end_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_end_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool plot_end_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_end_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_end_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_end_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 plot_end_ack::result() const {
  return result_;
}
inline void plot_end_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated int32 get_end_id = 3;
inline int plot_end_ack::get_end_id_size() const {
  return get_end_id_.size();
}
inline void plot_end_ack::clear_get_end_id() {
  get_end_id_.Clear();
}
inline ::google::protobuf::int32 plot_end_ack::get_end_id(int index) const {
  return get_end_id_.Get(index);
}
inline void plot_end_ack::set_get_end_id(int index, ::google::protobuf::int32 value) {
  get_end_id_.Set(index, value);
}
inline void plot_end_ack::add_get_end_id(::google::protobuf::int32 value) {
  get_end_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
plot_end_ack::get_end_id() const {
  return get_end_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
plot_end_ack::mutable_get_end_id() {
  return &get_end_id_;
}

// -------------------------------------------------------------------

// plot_chapter_end_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_req_id];
inline bool plot_chapter_end_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_chapter_end_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_chapter_end_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_chapter_end_req::clear_protoid() {
  protoid_ = 5828;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_chapter_end_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_chapter_end_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 chapter_id = 2;
inline bool plot_chapter_end_req::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_chapter_end_req::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_chapter_end_req::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_chapter_end_req::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 plot_chapter_end_req::chapter_id() const {
  return chapter_id_;
}
inline void plot_chapter_end_req::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 3;
inline bool plot_chapter_end_req::has_screen_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plot_chapter_end_req::set_has_screen_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plot_chapter_end_req::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plot_chapter_end_req::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 plot_chapter_end_req::screen_id() const {
  return screen_id_;
}
inline void plot_chapter_end_req::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// -------------------------------------------------------------------

// plot_chapter_end_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_chapter_end_ack_id];
inline bool plot_chapter_end_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_chapter_end_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_chapter_end_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_chapter_end_ack::clear_protoid() {
  protoid_ = 5829;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_chapter_end_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_chapter_end_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool plot_chapter_end_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_chapter_end_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_chapter_end_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_chapter_end_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 plot_chapter_end_ack::result() const {
  return result_;
}
inline void plot_chapter_end_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// plot_choose_branch_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_req_id];
inline bool plot_choose_branch_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_choose_branch_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_choose_branch_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_choose_branch_req::clear_protoid() {
  protoid_ = 5826;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_choose_branch_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_choose_branch_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 chapter_id = 2;
inline bool plot_choose_branch_req::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_choose_branch_req::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_choose_branch_req::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_choose_branch_req::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 plot_choose_branch_req::chapter_id() const {
  return chapter_id_;
}
inline void plot_choose_branch_req::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 3;
inline bool plot_choose_branch_req::has_screen_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plot_choose_branch_req::set_has_screen_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plot_choose_branch_req::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plot_choose_branch_req::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 plot_choose_branch_req::screen_id() const {
  return screen_id_;
}
inline void plot_choose_branch_req::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// optional uint32 branch_id = 4;
inline bool plot_choose_branch_req::has_branch_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void plot_choose_branch_req::set_has_branch_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void plot_choose_branch_req::clear_has_branch_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void plot_choose_branch_req::clear_branch_id() {
  branch_id_ = 0u;
  clear_has_branch_id();
}
inline ::google::protobuf::uint32 plot_choose_branch_req::branch_id() const {
  return branch_id_;
}
inline void plot_choose_branch_req::set_branch_id(::google::protobuf::uint32 value) {
  set_has_branch_id();
  branch_id_ = value;
}

// -------------------------------------------------------------------

// plot_choose_branch_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_choose_branch_ack_id];
inline bool plot_choose_branch_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_choose_branch_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_choose_branch_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_choose_branch_ack::clear_protoid() {
  protoid_ = 5827;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_choose_branch_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_choose_branch_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool plot_choose_branch_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_choose_branch_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_choose_branch_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_choose_branch_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 plot_choose_branch_ack::result() const {
  return result_;
}
inline void plot_choose_branch_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.add_character_attr_info add_character_infos = 3;
inline int plot_choose_branch_ack::add_character_infos_size() const {
  return add_character_infos_.size();
}
inline void plot_choose_branch_ack::clear_add_character_infos() {
  add_character_infos_.Clear();
}
inline const ::SProtoSpace::add_character_attr_info& plot_choose_branch_ack::add_character_infos(int index) const {
  return add_character_infos_.Get(index);
}
inline ::SProtoSpace::add_character_attr_info* plot_choose_branch_ack::mutable_add_character_infos(int index) {
  return add_character_infos_.Mutable(index);
}
inline ::SProtoSpace::add_character_attr_info* plot_choose_branch_ack::add_add_character_infos() {
  return add_character_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_character_attr_info >&
plot_choose_branch_ack::add_character_infos() const {
  return add_character_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_character_attr_info >*
plot_choose_branch_ack::mutable_add_character_infos() {
  return &add_character_infos_;
}

// repeated .SProtoSpace.add_royal_value_info add_royal_infos = 4;
inline int plot_choose_branch_ack::add_royal_infos_size() const {
  return add_royal_infos_.size();
}
inline void plot_choose_branch_ack::clear_add_royal_infos() {
  add_royal_infos_.Clear();
}
inline const ::SProtoSpace::add_royal_value_info& plot_choose_branch_ack::add_royal_infos(int index) const {
  return add_royal_infos_.Get(index);
}
inline ::SProtoSpace::add_royal_value_info* plot_choose_branch_ack::mutable_add_royal_infos(int index) {
  return add_royal_infos_.Mutable(index);
}
inline ::SProtoSpace::add_royal_value_info* plot_choose_branch_ack::add_add_royal_infos() {
  return add_royal_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_royal_value_info >&
plot_choose_branch_ack::add_royal_infos() const {
  return add_royal_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::add_royal_value_info >*
plot_choose_branch_ack::mutable_add_royal_infos() {
  return &add_royal_infos_;
}

// repeated .SProtoSpace.itemid_and_num reward_items = 5;
inline int plot_choose_branch_ack::reward_items_size() const {
  return reward_items_.size();
}
inline void plot_choose_branch_ack::clear_reward_items() {
  reward_items_.Clear();
}
inline const ::SProtoSpace::itemid_and_num& plot_choose_branch_ack::reward_items(int index) const {
  return reward_items_.Get(index);
}
inline ::SProtoSpace::itemid_and_num* plot_choose_branch_ack::mutable_reward_items(int index) {
  return reward_items_.Mutable(index);
}
inline ::SProtoSpace::itemid_and_num* plot_choose_branch_ack::add_reward_items() {
  return reward_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >&
plot_choose_branch_ack::reward_items() const {
  return reward_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >*
plot_choose_branch_ack::mutable_reward_items() {
  return &reward_items_;
}

// optional uint32 chapter_id = 6;
inline bool plot_choose_branch_ack::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void plot_choose_branch_ack::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void plot_choose_branch_ack::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void plot_choose_branch_ack::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 plot_choose_branch_ack::chapter_id() const {
  return chapter_id_;
}
inline void plot_choose_branch_ack::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 7;
inline bool plot_choose_branch_ack::has_screen_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void plot_choose_branch_ack::set_has_screen_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void plot_choose_branch_ack::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void plot_choose_branch_ack::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 plot_choose_branch_ack::screen_id() const {
  return screen_id_;
}
inline void plot_choose_branch_ack::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// optional uint32 branch_id = 8;
inline bool plot_choose_branch_ack::has_branch_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void plot_choose_branch_ack::set_has_branch_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void plot_choose_branch_ack::clear_has_branch_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void plot_choose_branch_ack::clear_branch_id() {
  branch_id_ = 0u;
  clear_has_branch_id();
}
inline ::google::protobuf::uint32 plot_choose_branch_ack::branch_id() const {
  return branch_id_;
}
inline void plot_choose_branch_ack::set_branch_id(::google::protobuf::uint32 value) {
  set_has_branch_id();
  branch_id_ = value;
}

// -------------------------------------------------------------------

// plot_trigger_action_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_req_id];
inline bool plot_trigger_action_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_trigger_action_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_trigger_action_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_trigger_action_req::clear_protoid() {
  protoid_ = 5830;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_trigger_action_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_trigger_action_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 chapter_id = 2;
inline bool plot_trigger_action_req::has_chapter_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_trigger_action_req::set_has_chapter_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_trigger_action_req::clear_has_chapter_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_trigger_action_req::clear_chapter_id() {
  chapter_id_ = 0u;
  clear_has_chapter_id();
}
inline ::google::protobuf::uint32 plot_trigger_action_req::chapter_id() const {
  return chapter_id_;
}
inline void plot_trigger_action_req::set_chapter_id(::google::protobuf::uint32 value) {
  set_has_chapter_id();
  chapter_id_ = value;
}

// optional uint32 screen_id = 3;
inline bool plot_trigger_action_req::has_screen_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plot_trigger_action_req::set_has_screen_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plot_trigger_action_req::clear_has_screen_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plot_trigger_action_req::clear_screen_id() {
  screen_id_ = 0u;
  clear_has_screen_id();
}
inline ::google::protobuf::uint32 plot_trigger_action_req::screen_id() const {
  return screen_id_;
}
inline void plot_trigger_action_req::set_screen_id(::google::protobuf::uint32 value) {
  set_has_screen_id();
  screen_id_ = value;
}

// optional uint32 action_id = 4;
inline bool plot_trigger_action_req::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void plot_trigger_action_req::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void plot_trigger_action_req::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void plot_trigger_action_req::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
inline ::google::protobuf::uint32 plot_trigger_action_req::action_id() const {
  return action_id_;
}
inline void plot_trigger_action_req::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
}

// -------------------------------------------------------------------

// plot_trigger_action_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_trigger_action_ack_id];
inline bool plot_trigger_action_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_trigger_action_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_trigger_action_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_trigger_action_ack::clear_protoid() {
  protoid_ = 5831;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_trigger_action_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_trigger_action_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool plot_trigger_action_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_trigger_action_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_trigger_action_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_trigger_action_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 plot_trigger_action_ack::result() const {
  return result_;
}
inline void plot_trigger_action_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.itemid_and_num reward_items = 3;
inline int plot_trigger_action_ack::reward_items_size() const {
  return reward_items_.size();
}
inline void plot_trigger_action_ack::clear_reward_items() {
  reward_items_.Clear();
}
inline const ::SProtoSpace::itemid_and_num& plot_trigger_action_ack::reward_items(int index) const {
  return reward_items_.Get(index);
}
inline ::SProtoSpace::itemid_and_num* plot_trigger_action_ack::mutable_reward_items(int index) {
  return reward_items_.Mutable(index);
}
inline ::SProtoSpace::itemid_and_num* plot_trigger_action_ack::add_reward_items() {
  return reward_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >&
plot_trigger_action_ack::reward_items() const {
  return reward_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::itemid_and_num >*
plot_trigger_action_ack::mutable_reward_items() {
  return &reward_items_;
}

// -------------------------------------------------------------------

// all_event_info

// optional .SProtoSpace.event_offical_info event_offical = 1;
inline bool all_event_info::has_event_offical() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_event_info::set_has_event_offical() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_event_info::clear_has_event_offical() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_event_info::clear_event_offical() {
  if (event_offical_ != NULL) event_offical_->::SProtoSpace::event_offical_info::Clear();
  clear_has_event_offical();
}
inline const ::SProtoSpace::event_offical_info& all_event_info::event_offical() const {
  return event_offical_ != NULL ? *event_offical_ : *default_instance_->event_offical_;
}
inline ::SProtoSpace::event_offical_info* all_event_info::mutable_event_offical() {
  set_has_event_offical();
  if (event_offical_ == NULL) event_offical_ = new ::SProtoSpace::event_offical_info;
  return event_offical_;
}
inline ::SProtoSpace::event_offical_info* all_event_info::release_event_offical() {
  clear_has_event_offical();
  ::SProtoSpace::event_offical_info* temp = event_offical_;
  event_offical_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_offical(::SProtoSpace::event_offical_info* event_offical) {
  delete event_offical_;
  event_offical_ = event_offical;
  if (event_offical) {
    set_has_event_offical();
  } else {
    clear_has_event_offical();
  }
}

// optional .SProtoSpace.event_qingan_info event_qingan = 2;
inline bool all_event_info::has_event_qingan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void all_event_info::set_has_event_qingan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void all_event_info::clear_has_event_qingan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void all_event_info::clear_event_qingan() {
  if (event_qingan_ != NULL) event_qingan_->::SProtoSpace::event_qingan_info::Clear();
  clear_has_event_qingan();
}
inline const ::SProtoSpace::event_qingan_info& all_event_info::event_qingan() const {
  return event_qingan_ != NULL ? *event_qingan_ : *default_instance_->event_qingan_;
}
inline ::SProtoSpace::event_qingan_info* all_event_info::mutable_event_qingan() {
  set_has_event_qingan();
  if (event_qingan_ == NULL) event_qingan_ = new ::SProtoSpace::event_qingan_info;
  return event_qingan_;
}
inline ::SProtoSpace::event_qingan_info* all_event_info::release_event_qingan() {
  clear_has_event_qingan();
  ::SProtoSpace::event_qingan_info* temp = event_qingan_;
  event_qingan_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_qingan(::SProtoSpace::event_qingan_info* event_qingan) {
  delete event_qingan_;
  event_qingan_ = event_qingan;
  if (event_qingan) {
    set_has_event_qingan();
  } else {
    clear_has_event_qingan();
  }
}

// optional .SProtoSpace.event_slap_info event_slap = 3;
inline bool all_event_info::has_event_slap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void all_event_info::set_has_event_slap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void all_event_info::clear_has_event_slap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void all_event_info::clear_event_slap() {
  if (event_slap_ != NULL) event_slap_->::SProtoSpace::event_slap_info::Clear();
  clear_has_event_slap();
}
inline const ::SProtoSpace::event_slap_info& all_event_info::event_slap() const {
  return event_slap_ != NULL ? *event_slap_ : *default_instance_->event_slap_;
}
inline ::SProtoSpace::event_slap_info* all_event_info::mutable_event_slap() {
  set_has_event_slap();
  if (event_slap_ == NULL) event_slap_ = new ::SProtoSpace::event_slap_info;
  return event_slap_;
}
inline ::SProtoSpace::event_slap_info* all_event_info::release_event_slap() {
  clear_has_event_slap();
  ::SProtoSpace::event_slap_info* temp = event_slap_;
  event_slap_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_slap(::SProtoSpace::event_slap_info* event_slap) {
  delete event_slap_;
  event_slap_ = event_slap;
  if (event_slap) {
    set_has_event_slap();
  } else {
    clear_has_event_slap();
  }
}

// optional .SProtoSpace.event_tribute_info event_tribute = 4;
inline bool all_event_info::has_event_tribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void all_event_info::set_has_event_tribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void all_event_info::clear_has_event_tribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void all_event_info::clear_event_tribute() {
  if (event_tribute_ != NULL) event_tribute_->::SProtoSpace::event_tribute_info::Clear();
  clear_has_event_tribute();
}
inline const ::SProtoSpace::event_tribute_info& all_event_info::event_tribute() const {
  return event_tribute_ != NULL ? *event_tribute_ : *default_instance_->event_tribute_;
}
inline ::SProtoSpace::event_tribute_info* all_event_info::mutable_event_tribute() {
  set_has_event_tribute();
  if (event_tribute_ == NULL) event_tribute_ = new ::SProtoSpace::event_tribute_info;
  return event_tribute_;
}
inline ::SProtoSpace::event_tribute_info* all_event_info::release_event_tribute() {
  clear_has_event_tribute();
  ::SProtoSpace::event_tribute_info* temp = event_tribute_;
  event_tribute_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_tribute(::SProtoSpace::event_tribute_info* event_tribute) {
  delete event_tribute_;
  event_tribute_ = event_tribute;
  if (event_tribute) {
    set_has_event_tribute();
  } else {
    clear_has_event_tribute();
  }
}

// optional .SProtoSpace.event_flower_send_info event_send_flower = 5;
inline bool all_event_info::has_event_send_flower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void all_event_info::set_has_event_send_flower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void all_event_info::clear_has_event_send_flower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void all_event_info::clear_event_send_flower() {
  if (event_send_flower_ != NULL) event_send_flower_->::SProtoSpace::event_flower_send_info::Clear();
  clear_has_event_send_flower();
}
inline const ::SProtoSpace::event_flower_send_info& all_event_info::event_send_flower() const {
  return event_send_flower_ != NULL ? *event_send_flower_ : *default_instance_->event_send_flower_;
}
inline ::SProtoSpace::event_flower_send_info* all_event_info::mutable_event_send_flower() {
  set_has_event_send_flower();
  if (event_send_flower_ == NULL) event_send_flower_ = new ::SProtoSpace::event_flower_send_info;
  return event_send_flower_;
}
inline ::SProtoSpace::event_flower_send_info* all_event_info::release_event_send_flower() {
  clear_has_event_send_flower();
  ::SProtoSpace::event_flower_send_info* temp = event_send_flower_;
  event_send_flower_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_send_flower(::SProtoSpace::event_flower_send_info* event_send_flower) {
  delete event_send_flower_;
  event_send_flower_ = event_send_flower;
  if (event_send_flower) {
    set_has_event_send_flower();
  } else {
    clear_has_event_send_flower();
  }
}

// optional .SProtoSpace.event_flower_info event_receive_flower = 6;
inline bool all_event_info::has_event_receive_flower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void all_event_info::set_has_event_receive_flower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void all_event_info::clear_has_event_receive_flower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void all_event_info::clear_event_receive_flower() {
  if (event_receive_flower_ != NULL) event_receive_flower_->::SProtoSpace::event_flower_info::Clear();
  clear_has_event_receive_flower();
}
inline const ::SProtoSpace::event_flower_info& all_event_info::event_receive_flower() const {
  return event_receive_flower_ != NULL ? *event_receive_flower_ : *default_instance_->event_receive_flower_;
}
inline ::SProtoSpace::event_flower_info* all_event_info::mutable_event_receive_flower() {
  set_has_event_receive_flower();
  if (event_receive_flower_ == NULL) event_receive_flower_ = new ::SProtoSpace::event_flower_info;
  return event_receive_flower_;
}
inline ::SProtoSpace::event_flower_info* all_event_info::release_event_receive_flower() {
  clear_has_event_receive_flower();
  ::SProtoSpace::event_flower_info* temp = event_receive_flower_;
  event_receive_flower_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_receive_flower(::SProtoSpace::event_flower_info* event_receive_flower) {
  delete event_receive_flower_;
  event_receive_flower_ = event_receive_flower;
  if (event_receive_flower) {
    set_has_event_receive_flower();
  } else {
    clear_has_event_receive_flower();
  }
}

// optional .SProtoSpace.event_offical_reduce event_reduce = 7;
inline bool all_event_info::has_event_reduce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void all_event_info::set_has_event_reduce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void all_event_info::clear_has_event_reduce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void all_event_info::clear_event_reduce() {
  if (event_reduce_ != NULL) event_reduce_->::SProtoSpace::event_offical_reduce::Clear();
  clear_has_event_reduce();
}
inline const ::SProtoSpace::event_offical_reduce& all_event_info::event_reduce() const {
  return event_reduce_ != NULL ? *event_reduce_ : *default_instance_->event_reduce_;
}
inline ::SProtoSpace::event_offical_reduce* all_event_info::mutable_event_reduce() {
  set_has_event_reduce();
  if (event_reduce_ == NULL) event_reduce_ = new ::SProtoSpace::event_offical_reduce;
  return event_reduce_;
}
inline ::SProtoSpace::event_offical_reduce* all_event_info::release_event_reduce() {
  clear_has_event_reduce();
  ::SProtoSpace::event_offical_reduce* temp = event_reduce_;
  event_reduce_ = NULL;
  return temp;
}
inline void all_event_info::set_allocated_event_reduce(::SProtoSpace::event_offical_reduce* event_reduce) {
  delete event_reduce_;
  event_reduce_ = event_reduce;
  if (event_reduce) {
    set_has_event_reduce();
  } else {
    clear_has_event_reduce();
  }
}

// -------------------------------------------------------------------

// client_event_msg_info

// optional uint64 from_id = 1;
inline bool client_event_msg_info::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client_event_msg_info::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client_event_msg_info::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client_event_msg_info::clear_from_id() {
  from_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_id();
}
inline ::google::protobuf::uint64 client_event_msg_info::from_id() const {
  return from_id_;
}
inline void client_event_msg_info::set_from_id(::google::protobuf::uint64 value) {
  set_has_from_id();
  from_id_ = value;
}

// optional string from_name = 2;
inline bool client_event_msg_info::has_from_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client_event_msg_info::set_has_from_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client_event_msg_info::clear_has_from_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client_event_msg_info::clear_from_name() {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    from_name_->clear();
  }
  clear_has_from_name();
}
inline const ::std::string& client_event_msg_info::from_name() const {
  return *from_name_;
}
inline void client_event_msg_info::set_from_name(const ::std::string& value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void client_event_msg_info::set_from_name(const char* value) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(value);
}
inline void client_event_msg_info::set_from_name(const char* value, size_t size) {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  from_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* client_event_msg_info::mutable_from_name() {
  set_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    from_name_ = new ::std::string;
  }
  return from_name_;
}
inline ::std::string* client_event_msg_info::release_from_name() {
  clear_has_from_name();
  if (from_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_name_;
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void client_event_msg_info::set_allocated_from_name(::std::string* from_name) {
  if (from_name_ != &::google::protobuf::internal::kEmptyString) {
    delete from_name_;
  }
  if (from_name) {
    set_has_from_name();
    from_name_ = from_name;
  } else {
    clear_has_from_name();
    from_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 from_lv = 3;
inline bool client_event_msg_info::has_from_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void client_event_msg_info::set_has_from_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void client_event_msg_info::clear_has_from_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void client_event_msg_info::clear_from_lv() {
  from_lv_ = 0u;
  clear_has_from_lv();
}
inline ::google::protobuf::uint32 client_event_msg_info::from_lv() const {
  return from_lv_;
}
inline void client_event_msg_info::set_from_lv(::google::protobuf::uint32 value) {
  set_has_from_lv();
  from_lv_ = value;
}

// optional uint32 from_sex = 4;
inline bool client_event_msg_info::has_from_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void client_event_msg_info::set_has_from_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void client_event_msg_info::clear_has_from_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void client_event_msg_info::clear_from_sex() {
  from_sex_ = 0u;
  clear_has_from_sex();
}
inline ::google::protobuf::uint32 client_event_msg_info::from_sex() const {
  return from_sex_;
}
inline void client_event_msg_info::set_from_sex(::google::protobuf::uint32 value) {
  set_has_from_sex();
  from_sex_ = value;
}

// optional uint32 from_grade = 5;
inline bool client_event_msg_info::has_from_grade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void client_event_msg_info::set_has_from_grade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void client_event_msg_info::clear_has_from_grade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void client_event_msg_info::clear_from_grade() {
  from_grade_ = 0u;
  clear_has_from_grade();
}
inline ::google::protobuf::uint32 client_event_msg_info::from_grade() const {
  return from_grade_;
}
inline void client_event_msg_info::set_from_grade(::google::protobuf::uint32 value) {
  set_has_from_grade();
  from_grade_ = value;
}

// optional int32 from_border = 6;
inline bool client_event_msg_info::has_from_border() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void client_event_msg_info::set_has_from_border() {
  _has_bits_[0] |= 0x00000020u;
}
inline void client_event_msg_info::clear_has_from_border() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void client_event_msg_info::clear_from_border() {
  from_border_ = 0;
  clear_has_from_border();
}
inline ::google::protobuf::int32 client_event_msg_info::from_border() const {
  return from_border_;
}
inline void client_event_msg_info::set_from_border(::google::protobuf::int32 value) {
  set_has_from_border();
  from_border_ = value;
}

// optional uint32 event_type = 7;
inline bool client_event_msg_info::has_event_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void client_event_msg_info::set_has_event_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void client_event_msg_info::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void client_event_msg_info::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 client_event_msg_info::event_type() const {
  return event_type_;
}
inline void client_event_msg_info::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// optional uint64 add_time = 8;
inline bool client_event_msg_info::has_add_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void client_event_msg_info::set_has_add_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void client_event_msg_info::clear_has_add_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void client_event_msg_info::clear_add_time() {
  add_time_ = GOOGLE_ULONGLONG(0);
  clear_has_add_time();
}
inline ::google::protobuf::uint64 client_event_msg_info::add_time() const {
  return add_time_;
}
inline void client_event_msg_info::set_add_time(::google::protobuf::uint64 value) {
  set_has_add_time();
  add_time_ = value;
}

// optional bool is_read = 9;
inline bool client_event_msg_info::has_is_read() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void client_event_msg_info::set_has_is_read() {
  _has_bits_[0] |= 0x00000100u;
}
inline void client_event_msg_info::clear_has_is_read() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void client_event_msg_info::clear_is_read() {
  is_read_ = false;
  clear_has_is_read();
}
inline bool client_event_msg_info::is_read() const {
  return is_read_;
}
inline void client_event_msg_info::set_is_read(bool value) {
  set_has_is_read();
  is_read_ = value;
}

// optional uint32 msg_template_id = 10;
inline bool client_event_msg_info::has_msg_template_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void client_event_msg_info::set_has_msg_template_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void client_event_msg_info::clear_has_msg_template_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void client_event_msg_info::clear_msg_template_id() {
  msg_template_id_ = 0u;
  clear_has_msg_template_id();
}
inline ::google::protobuf::uint32 client_event_msg_info::msg_template_id() const {
  return msg_template_id_;
}
inline void client_event_msg_info::set_msg_template_id(::google::protobuf::uint32 value) {
  set_has_msg_template_id();
  msg_template_id_ = value;
}

// optional .SProtoSpace.all_event_info msg_content = 11;
inline bool client_event_msg_info::has_msg_content() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void client_event_msg_info::set_has_msg_content() {
  _has_bits_[0] |= 0x00000400u;
}
inline void client_event_msg_info::clear_has_msg_content() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void client_event_msg_info::clear_msg_content() {
  if (msg_content_ != NULL) msg_content_->::SProtoSpace::all_event_info::Clear();
  clear_has_msg_content();
}
inline const ::SProtoSpace::all_event_info& client_event_msg_info::msg_content() const {
  return msg_content_ != NULL ? *msg_content_ : *default_instance_->msg_content_;
}
inline ::SProtoSpace::all_event_info* client_event_msg_info::mutable_msg_content() {
  set_has_msg_content();
  if (msg_content_ == NULL) msg_content_ = new ::SProtoSpace::all_event_info;
  return msg_content_;
}
inline ::SProtoSpace::all_event_info* client_event_msg_info::release_msg_content() {
  clear_has_msg_content();
  ::SProtoSpace::all_event_info* temp = msg_content_;
  msg_content_ = NULL;
  return temp;
}
inline void client_event_msg_info::set_allocated_msg_content(::SProtoSpace::all_event_info* msg_content) {
  delete msg_content_;
  msg_content_ = msg_content;
  if (msg_content) {
    set_has_msg_content();
  } else {
    clear_has_msg_content();
  }
}

// -------------------------------------------------------------------

// event_msg_get_all_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_req_id];
inline bool event_msg_get_all_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_get_all_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_get_all_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_get_all_req::clear_protoid() {
  protoid_ = 7000;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_get_all_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_get_all_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// event_msg_get_all_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_all_ack_id];
inline bool event_msg_get_all_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_get_all_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_get_all_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_get_all_ack::clear_protoid() {
  protoid_ = 7001;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_get_all_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_get_all_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool event_msg_get_all_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_get_all_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_get_all_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_get_all_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 event_msg_get_all_ack::result() const {
  return result_;
}
inline void event_msg_get_all_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.client_event_msg_info msgs = 3;
inline int event_msg_get_all_ack::msgs_size() const {
  return msgs_.size();
}
inline void event_msg_get_all_ack::clear_msgs() {
  msgs_.Clear();
}
inline const ::SProtoSpace::client_event_msg_info& event_msg_get_all_ack::msgs(int index) const {
  return msgs_.Get(index);
}
inline ::SProtoSpace::client_event_msg_info* event_msg_get_all_ack::mutable_msgs(int index) {
  return msgs_.Mutable(index);
}
inline ::SProtoSpace::client_event_msg_info* event_msg_get_all_ack::add_msgs() {
  return msgs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_event_msg_info >&
event_msg_get_all_ack::msgs() const {
  return msgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::client_event_msg_info >*
event_msg_get_all_ack::mutable_msgs() {
  return &msgs_;
}

// -------------------------------------------------------------------

// event_msg_read_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_req_id];
inline bool event_msg_read_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_read_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_read_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_read_req::clear_protoid() {
  protoid_ = 7002;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_read_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_read_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 event_type = 2;
inline bool event_msg_read_req::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_read_req::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_read_req::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_read_req::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 event_msg_read_req::event_type() const {
  return event_type_;
}
inline void event_msg_read_req::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// event_msg_read_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_read_ack_id];
inline bool event_msg_read_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_read_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_read_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_read_ack::clear_protoid() {
  protoid_ = 7003;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_read_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_read_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool event_msg_read_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_read_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_read_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_read_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 event_msg_read_ack::result() const {
  return result_;
}
inline void event_msg_read_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 event_type = 3;
inline bool event_msg_read_ack::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void event_msg_read_ack::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void event_msg_read_ack::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void event_msg_read_ack::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 event_msg_read_ack::event_type() const {
  return event_type_;
}
inline void event_msg_read_ack::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// event_msg_del_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_req_id];
inline bool event_msg_del_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_del_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_del_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_del_req::clear_protoid() {
  protoid_ = 7004;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_del_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_del_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint32 event_type = 2;
inline bool event_msg_del_req::has_event_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_del_req::set_has_event_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_del_req::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_del_req::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 event_msg_del_req::event_type() const {
  return event_type_;
}
inline void event_msg_del_req::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// event_msg_del_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_del_ack_id];
inline bool event_msg_del_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_del_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_del_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_del_ack::clear_protoid() {
  protoid_ = 7005;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_del_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_del_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool event_msg_del_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_del_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_del_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_del_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 event_msg_del_ack::result() const {
  return result_;
}
inline void event_msg_del_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 event_type = 3;
inline bool event_msg_del_ack::has_event_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void event_msg_del_ack::set_has_event_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void event_msg_del_ack::clear_has_event_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void event_msg_del_ack::clear_event_type() {
  event_type_ = 0u;
  clear_has_event_type();
}
inline ::google::protobuf::uint32 event_msg_del_ack::event_type() const {
  return event_type_;
}
inline void event_msg_del_ack::set_event_type(::google::protobuf::uint32 value) {
  set_has_event_type();
  event_type_ = value;
}

// -------------------------------------------------------------------

// event_msg_nty

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_nty_id];
inline bool event_msg_nty::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_nty::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_nty::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_nty::clear_protoid() {
  protoid_ = 7006;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_nty::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_nty::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.client_event_msg_info msgs = 2;
inline bool event_msg_nty::has_msgs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_nty::set_has_msgs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_nty::clear_has_msgs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_nty::clear_msgs() {
  if (msgs_ != NULL) msgs_->::SProtoSpace::client_event_msg_info::Clear();
  clear_has_msgs();
}
inline const ::SProtoSpace::client_event_msg_info& event_msg_nty::msgs() const {
  return msgs_ != NULL ? *msgs_ : *default_instance_->msgs_;
}
inline ::SProtoSpace::client_event_msg_info* event_msg_nty::mutable_msgs() {
  set_has_msgs();
  if (msgs_ == NULL) msgs_ = new ::SProtoSpace::client_event_msg_info;
  return msgs_;
}
inline ::SProtoSpace::client_event_msg_info* event_msg_nty::release_msgs() {
  clear_has_msgs();
  ::SProtoSpace::client_event_msg_info* temp = msgs_;
  msgs_ = NULL;
  return temp;
}
inline void event_msg_nty::set_allocated_msgs(::SProtoSpace::client_event_msg_info* msgs) {
  delete msgs_;
  msgs_ = msgs;
  if (msgs) {
    set_has_msgs();
  } else {
    clear_has_msgs();
  }
}

// -------------------------------------------------------------------

// event_msg_get_by_id_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_req_id];
inline bool event_msg_get_by_id_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_get_by_id_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_get_by_id_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_get_by_id_req::clear_protoid() {
  protoid_ = 7007;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_get_by_id_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_get_by_id_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 event_uuid = 2;
inline bool event_msg_get_by_id_req::has_event_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_get_by_id_req::set_has_event_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_get_by_id_req::clear_has_event_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_get_by_id_req::clear_event_uuid() {
  event_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_event_uuid();
}
inline ::google::protobuf::uint64 event_msg_get_by_id_req::event_uuid() const {
  return event_uuid_;
}
inline void event_msg_get_by_id_req::set_event_uuid(::google::protobuf::uint64 value) {
  set_has_event_uuid();
  event_uuid_ = value;
}

// -------------------------------------------------------------------

// event_msg_get_by_id_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = event_msg_get_by_id_ack_id];
inline bool event_msg_get_by_id_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void event_msg_get_by_id_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void event_msg_get_by_id_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void event_msg_get_by_id_ack::clear_protoid() {
  protoid_ = 7008;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID event_msg_get_by_id_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void event_msg_get_by_id_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool event_msg_get_by_id_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void event_msg_get_by_id_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void event_msg_get_by_id_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void event_msg_get_by_id_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 event_msg_get_by_id_ack::result() const {
  return result_;
}
inline void event_msg_get_by_id_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .SProtoSpace.client_event_msg_info msg = 3;
inline bool event_msg_get_by_id_ack::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void event_msg_get_by_id_ack::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void event_msg_get_by_id_ack::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void event_msg_get_by_id_ack::clear_msg() {
  if (msg_ != NULL) msg_->::SProtoSpace::client_event_msg_info::Clear();
  clear_has_msg();
}
inline const ::SProtoSpace::client_event_msg_info& event_msg_get_by_id_ack::msg() const {
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::SProtoSpace::client_event_msg_info* event_msg_get_by_id_ack::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::SProtoSpace::client_event_msg_info;
  return msg_;
}
inline ::SProtoSpace::client_event_msg_info* event_msg_get_by_id_ack::release_msg() {
  clear_has_msg();
  ::SProtoSpace::client_event_msg_info* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void event_msg_get_by_id_ack::set_allocated_msg(::SProtoSpace::client_event_msg_info* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
}

// -------------------------------------------------------------------

// get_rank_data_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_req_id];
inline bool get_rank_data_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_rank_data_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_rank_data_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_rank_data_req::clear_protoid() {
  protoid_ = 6801;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_rank_data_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_rank_data_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.RANK_TYPE type = 2;
inline bool get_rank_data_req::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_rank_data_req::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_rank_data_req::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_rank_data_req::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::SProtoSpace::RANK_TYPE get_rank_data_req::type() const {
  return static_cast< ::SProtoSpace::RANK_TYPE >(type_);
}
inline void get_rank_data_req::set_type(::SProtoSpace::RANK_TYPE value) {
  assert(::SProtoSpace::RANK_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 start_index = 3;
inline bool get_rank_data_req::has_start_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_rank_data_req::set_has_start_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_rank_data_req::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_rank_data_req::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 get_rank_data_req::start_index() const {
  return start_index_;
}
inline void get_rank_data_req::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 end_index = 4;
inline bool get_rank_data_req::has_end_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_rank_data_req::set_has_end_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_rank_data_req::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_rank_data_req::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 get_rank_data_req::end_index() const {
  return end_index_;
}
inline void get_rank_data_req::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
}

// -------------------------------------------------------------------

// get_rank_data_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_rank_data_ack_id];
inline bool get_rank_data_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_rank_data_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_rank_data_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_rank_data_ack::clear_protoid() {
  protoid_ = 6802;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_rank_data_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_rank_data_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool get_rank_data_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_rank_data_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_rank_data_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_rank_data_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 get_rank_data_ack::ret() const {
  return ret_;
}
inline void get_rank_data_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.RANK_TYPE type = 3;
inline bool get_rank_data_ack::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_rank_data_ack::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_rank_data_ack::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_rank_data_ack::clear_type() {
  type_ = 1000;
  clear_has_type();
}
inline ::SProtoSpace::RANK_TYPE get_rank_data_ack::type() const {
  return static_cast< ::SProtoSpace::RANK_TYPE >(type_);
}
inline void get_rank_data_ack::set_type(::SProtoSpace::RANK_TYPE value) {
  assert(::SProtoSpace::RANK_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 start_index = 4;
inline bool get_rank_data_ack::has_start_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_rank_data_ack::set_has_start_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_rank_data_ack::clear_has_start_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_rank_data_ack::clear_start_index() {
  start_index_ = 0;
  clear_has_start_index();
}
inline ::google::protobuf::int32 get_rank_data_ack::start_index() const {
  return start_index_;
}
inline void get_rank_data_ack::set_start_index(::google::protobuf::int32 value) {
  set_has_start_index();
  start_index_ = value;
}

// optional int32 end_index = 5;
inline bool get_rank_data_ack::has_end_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void get_rank_data_ack::set_has_end_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void get_rank_data_ack::clear_has_end_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void get_rank_data_ack::clear_end_index() {
  end_index_ = 0;
  clear_has_end_index();
}
inline ::google::protobuf::int32 get_rank_data_ack::end_index() const {
  return end_index_;
}
inline void get_rank_data_ack::set_end_index(::google::protobuf::int32 value) {
  set_has_end_index();
  end_index_ = value;
}

// optional .SProtoSpace.rank_common_item my_item = 6;
inline bool get_rank_data_ack::has_my_item() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void get_rank_data_ack::set_has_my_item() {
  _has_bits_[0] |= 0x00000020u;
}
inline void get_rank_data_ack::clear_has_my_item() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void get_rank_data_ack::clear_my_item() {
  if (my_item_ != NULL) my_item_->::SProtoSpace::rank_common_item::Clear();
  clear_has_my_item();
}
inline const ::SProtoSpace::rank_common_item& get_rank_data_ack::my_item() const {
  return my_item_ != NULL ? *my_item_ : *default_instance_->my_item_;
}
inline ::SProtoSpace::rank_common_item* get_rank_data_ack::mutable_my_item() {
  set_has_my_item();
  if (my_item_ == NULL) my_item_ = new ::SProtoSpace::rank_common_item;
  return my_item_;
}
inline ::SProtoSpace::rank_common_item* get_rank_data_ack::release_my_item() {
  clear_has_my_item();
  ::SProtoSpace::rank_common_item* temp = my_item_;
  my_item_ = NULL;
  return temp;
}
inline void get_rank_data_ack::set_allocated_my_item(::SProtoSpace::rank_common_item* my_item) {
  delete my_item_;
  my_item_ = my_item;
  if (my_item) {
    set_has_my_item();
  } else {
    clear_has_my_item();
  }
}

// repeated .SProtoSpace.rank_common_item items = 7;
inline int get_rank_data_ack::items_size() const {
  return items_.size();
}
inline void get_rank_data_ack::clear_items() {
  items_.Clear();
}
inline const ::SProtoSpace::rank_common_item& get_rank_data_ack::items(int index) const {
  return items_.Get(index);
}
inline ::SProtoSpace::rank_common_item* get_rank_data_ack::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SProtoSpace::rank_common_item* get_rank_data_ack::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >&
get_rank_data_ack::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::rank_common_item >*
get_rank_data_ack::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// role_uint_achievement

// optional int32 task_config_id = 1;
inline bool role_uint_achievement::has_task_config_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_uint_achievement::set_has_task_config_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_uint_achievement::clear_has_task_config_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_uint_achievement::clear_task_config_id() {
  task_config_id_ = 0;
  clear_has_task_config_id();
}
inline ::google::protobuf::int32 role_uint_achievement::task_config_id() const {
  return task_config_id_;
}
inline void role_uint_achievement::set_task_config_id(::google::protobuf::int32 value) {
  set_has_task_config_id();
  task_config_id_ = value;
}

// optional .SProtoSpace.EQuestStatus state = 2;
inline bool role_uint_achievement::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_uint_achievement::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_uint_achievement::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_uint_achievement::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::SProtoSpace::EQuestStatus role_uint_achievement::state() const {
  return static_cast< ::SProtoSpace::EQuestStatus >(state_);
}
inline void role_uint_achievement::set_state(::SProtoSpace::EQuestStatus value) {
  assert(::SProtoSpace::EQuestStatus_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint32 state_utc_time = 3;
inline bool role_uint_achievement::has_state_utc_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_uint_achievement::set_has_state_utc_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_uint_achievement::clear_has_state_utc_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_uint_achievement::clear_state_utc_time() {
  state_utc_time_ = 0u;
  clear_has_state_utc_time();
}
inline ::google::protobuf::uint32 role_uint_achievement::state_utc_time() const {
  return state_utc_time_;
}
inline void role_uint_achievement::set_state_utc_time(::google::protobuf::uint32 value) {
  set_has_state_utc_time();
  state_utc_time_ = value;
}

// optional uint32 current_step = 4;
inline bool role_uint_achievement::has_current_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_uint_achievement::set_has_current_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_uint_achievement::clear_has_current_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_uint_achievement::clear_current_step() {
  current_step_ = 0u;
  clear_has_current_step();
}
inline ::google::protobuf::uint32 role_uint_achievement::current_step() const {
  return current_step_;
}
inline void role_uint_achievement::set_current_step(::google::protobuf::uint32 value) {
  set_has_current_step();
  current_step_ = value;
}

// optional uint32 max_step = 5;
inline bool role_uint_achievement::has_max_step() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_uint_achievement::set_has_max_step() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_uint_achievement::clear_has_max_step() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_uint_achievement::clear_max_step() {
  max_step_ = 0u;
  clear_has_max_step();
}
inline ::google::protobuf::uint32 role_uint_achievement::max_step() const {
  return max_step_;
}
inline void role_uint_achievement::set_max_step(::google::protobuf::uint32 value) {
  set_has_max_step();
  max_step_ = value;
}

// optional bool is_new = 6;
inline bool role_uint_achievement::has_is_new() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_uint_achievement::set_has_is_new() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_uint_achievement::clear_has_is_new() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_uint_achievement::clear_is_new() {
  is_new_ = false;
  clear_has_is_new();
}
inline bool role_uint_achievement::is_new() const {
  return is_new_;
}
inline void role_uint_achievement::set_is_new(bool value) {
  set_has_is_new();
  is_new_ = value;
}

// -------------------------------------------------------------------

// role_achievements_ntf_type_list

// optional int32 big_types = 1;
inline bool role_achievements_ntf_type_list::has_big_types() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_achievements_ntf_type_list::set_has_big_types() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_achievements_ntf_type_list::clear_has_big_types() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_achievements_ntf_type_list::clear_big_types() {
  big_types_ = 0;
  clear_has_big_types();
}
inline ::google::protobuf::int32 role_achievements_ntf_type_list::big_types() const {
  return big_types_;
}
inline void role_achievements_ntf_type_list::set_big_types(::google::protobuf::int32 value) {
  set_has_big_types();
  big_types_ = value;
}

// repeated int32 small_types = 2;
inline int role_achievements_ntf_type_list::small_types_size() const {
  return small_types_.size();
}
inline void role_achievements_ntf_type_list::clear_small_types() {
  small_types_.Clear();
}
inline ::google::protobuf::int32 role_achievements_ntf_type_list::small_types(int index) const {
  return small_types_.Get(index);
}
inline void role_achievements_ntf_type_list::set_small_types(int index, ::google::protobuf::int32 value) {
  small_types_.Set(index, value);
}
inline void role_achievements_ntf_type_list::add_small_types(::google::protobuf::int32 value) {
  small_types_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievements_ntf_type_list::small_types() const {
  return small_types_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievements_ntf_type_list::mutable_small_types() {
  return &small_types_;
}

// optional uint32 big_type_pt = 3;
inline bool role_achievements_ntf_type_list::has_big_type_pt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_achievements_ntf_type_list::set_has_big_type_pt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_achievements_ntf_type_list::clear_has_big_type_pt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_achievements_ntf_type_list::clear_big_type_pt() {
  big_type_pt_ = 0u;
  clear_has_big_type_pt();
}
inline ::google::protobuf::uint32 role_achievements_ntf_type_list::big_type_pt() const {
  return big_type_pt_;
}
inline void role_achievements_ntf_type_list::set_big_type_pt(::google::protobuf::uint32 value) {
  set_has_big_type_pt();
  big_type_pt_ = value;
}

// -------------------------------------------------------------------

// role_achievements_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievements_ntf_id];
inline bool role_achievements_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_achievements_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_achievements_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_achievements_ntf::clear_protoid() {
  protoid_ = 6900;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_achievements_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_achievements_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.role_uint_achievement achievements = 2;
inline int role_achievements_ntf::achievements_size() const {
  return achievements_.size();
}
inline void role_achievements_ntf::clear_achievements() {
  achievements_.Clear();
}
inline const ::SProtoSpace::role_uint_achievement& role_achievements_ntf::achievements(int index) const {
  return achievements_.Get(index);
}
inline ::SProtoSpace::role_uint_achievement* role_achievements_ntf::mutable_achievements(int index) {
  return achievements_.Mutable(index);
}
inline ::SProtoSpace::role_uint_achievement* role_achievements_ntf::add_achievements() {
  return achievements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_uint_achievement >&
role_achievements_ntf::achievements() const {
  return achievements_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_uint_achievement >*
role_achievements_ntf::mutable_achievements() {
  return &achievements_;
}

// repeated int32 points_reward_getted_ids = 3;
inline int role_achievements_ntf::points_reward_getted_ids_size() const {
  return points_reward_getted_ids_.size();
}
inline void role_achievements_ntf::clear_points_reward_getted_ids() {
  points_reward_getted_ids_.Clear();
}
inline ::google::protobuf::int32 role_achievements_ntf::points_reward_getted_ids(int index) const {
  return points_reward_getted_ids_.Get(index);
}
inline void role_achievements_ntf::set_points_reward_getted_ids(int index, ::google::protobuf::int32 value) {
  points_reward_getted_ids_.Set(index, value);
}
inline void role_achievements_ntf::add_points_reward_getted_ids(::google::protobuf::int32 value) {
  points_reward_getted_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievements_ntf::points_reward_getted_ids() const {
  return points_reward_getted_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievements_ntf::mutable_points_reward_getted_ids() {
  return &points_reward_getted_ids_;
}

// repeated .SProtoSpace.role_achievements_ntf_type_list list = 4;
inline int role_achievements_ntf::list_size() const {
  return list_.size();
}
inline void role_achievements_ntf::clear_list() {
  list_.Clear();
}
inline const ::SProtoSpace::role_achievements_ntf_type_list& role_achievements_ntf::list(int index) const {
  return list_.Get(index);
}
inline ::SProtoSpace::role_achievements_ntf_type_list* role_achievements_ntf::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::SProtoSpace::role_achievements_ntf_type_list* role_achievements_ntf::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_achievements_ntf_type_list >&
role_achievements_ntf::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_achievements_ntf_type_list >*
role_achievements_ntf::mutable_list() {
  return &list_;
}

// optional uint32 current_achieve_pt = 5;
inline bool role_achievements_ntf::has_current_achieve_pt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_achievements_ntf::set_has_current_achieve_pt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_achievements_ntf::clear_has_current_achieve_pt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_achievements_ntf::clear_current_achieve_pt() {
  current_achieve_pt_ = 0u;
  clear_has_current_achieve_pt();
}
inline ::google::protobuf::uint32 role_achievements_ntf::current_achieve_pt() const {
  return current_achieve_pt_;
}
inline void role_achievements_ntf::set_current_achieve_pt(::google::protobuf::uint32 value) {
  set_has_current_achieve_pt();
  current_achieve_pt_ = value;
}

// -------------------------------------------------------------------

// role_achievement_get_rewards_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_req_id];
inline bool role_achievement_get_rewards_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_achievement_get_rewards_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_achievement_get_rewards_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_achievement_get_rewards_req::clear_protoid() {
  protoid_ = 6901;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_achievement_get_rewards_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_achievement_get_rewards_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 task_config_id = 2;
inline int role_achievement_get_rewards_req::task_config_id_size() const {
  return task_config_id_.size();
}
inline void role_achievement_get_rewards_req::clear_task_config_id() {
  task_config_id_.Clear();
}
inline ::google::protobuf::int32 role_achievement_get_rewards_req::task_config_id(int index) const {
  return task_config_id_.Get(index);
}
inline void role_achievement_get_rewards_req::set_task_config_id(int index, ::google::protobuf::int32 value) {
  task_config_id_.Set(index, value);
}
inline void role_achievement_get_rewards_req::add_task_config_id(::google::protobuf::int32 value) {
  task_config_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievement_get_rewards_req::task_config_id() const {
  return task_config_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievement_get_rewards_req::mutable_task_config_id() {
  return &task_config_id_;
}

// -------------------------------------------------------------------

// role_achievement_get_rewards_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_get_rewards_ack_id];
inline bool role_achievement_get_rewards_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_achievement_get_rewards_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_achievement_get_rewards_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_achievement_get_rewards_ack::clear_protoid() {
  protoid_ = 6902;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_achievement_get_rewards_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_achievement_get_rewards_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 succeed_get_award_tasks = 2;
inline int role_achievement_get_rewards_ack::succeed_get_award_tasks_size() const {
  return succeed_get_award_tasks_.size();
}
inline void role_achievement_get_rewards_ack::clear_succeed_get_award_tasks() {
  succeed_get_award_tasks_.Clear();
}
inline ::google::protobuf::int32 role_achievement_get_rewards_ack::succeed_get_award_tasks(int index) const {
  return succeed_get_award_tasks_.Get(index);
}
inline void role_achievement_get_rewards_ack::set_succeed_get_award_tasks(int index, ::google::protobuf::int32 value) {
  succeed_get_award_tasks_.Set(index, value);
}
inline void role_achievement_get_rewards_ack::add_succeed_get_award_tasks(::google::protobuf::int32 value) {
  succeed_get_award_tasks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievement_get_rewards_ack::succeed_get_award_tasks() const {
  return succeed_get_award_tasks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievement_get_rewards_ack::mutable_succeed_get_award_tasks() {
  return &succeed_get_award_tasks_;
}

// repeated int32 failed_get_award_tasks = 3;
inline int role_achievement_get_rewards_ack::failed_get_award_tasks_size() const {
  return failed_get_award_tasks_.size();
}
inline void role_achievement_get_rewards_ack::clear_failed_get_award_tasks() {
  failed_get_award_tasks_.Clear();
}
inline ::google::protobuf::int32 role_achievement_get_rewards_ack::failed_get_award_tasks(int index) const {
  return failed_get_award_tasks_.Get(index);
}
inline void role_achievement_get_rewards_ack::set_failed_get_award_tasks(int index, ::google::protobuf::int32 value) {
  failed_get_award_tasks_.Set(index, value);
}
inline void role_achievement_get_rewards_ack::add_failed_get_award_tasks(::google::protobuf::int32 value) {
  failed_get_award_tasks_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievement_get_rewards_ack::failed_get_award_tasks() const {
  return failed_get_award_tasks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievement_get_rewards_ack::mutable_failed_get_award_tasks() {
  return &failed_get_award_tasks_;
}

// repeated .SProtoSpace.MsgErrorType error_codes = 4;
inline int role_achievement_get_rewards_ack::error_codes_size() const {
  return error_codes_.size();
}
inline void role_achievement_get_rewards_ack::clear_error_codes() {
  error_codes_.Clear();
}
inline ::SProtoSpace::MsgErrorType role_achievement_get_rewards_ack::error_codes(int index) const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_codes_.Get(index));
}
inline void role_achievement_get_rewards_ack::set_error_codes(int index, ::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_codes_.Set(index, value);
}
inline void role_achievement_get_rewards_ack::add_error_codes(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_codes_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
role_achievement_get_rewards_ack::error_codes() const {
  return error_codes_;
}
inline ::google::protobuf::RepeatedField<int>*
role_achievement_get_rewards_ack::mutable_error_codes() {
  return &error_codes_;
}

// -------------------------------------------------------------------

// role_achievement_point_rewards_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_req_id];
inline bool role_achievement_point_rewards_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_achievement_point_rewards_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_achievement_point_rewards_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_achievement_point_rewards_req::clear_protoid() {
  protoid_ = 6903;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_achievement_point_rewards_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_achievement_point_rewards_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 achievement_pt_reward_id = 2;
inline int role_achievement_point_rewards_req::achievement_pt_reward_id_size() const {
  return achievement_pt_reward_id_.size();
}
inline void role_achievement_point_rewards_req::clear_achievement_pt_reward_id() {
  achievement_pt_reward_id_.Clear();
}
inline ::google::protobuf::int32 role_achievement_point_rewards_req::achievement_pt_reward_id(int index) const {
  return achievement_pt_reward_id_.Get(index);
}
inline void role_achievement_point_rewards_req::set_achievement_pt_reward_id(int index, ::google::protobuf::int32 value) {
  achievement_pt_reward_id_.Set(index, value);
}
inline void role_achievement_point_rewards_req::add_achievement_pt_reward_id(::google::protobuf::int32 value) {
  achievement_pt_reward_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievement_point_rewards_req::achievement_pt_reward_id() const {
  return achievement_pt_reward_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievement_point_rewards_req::mutable_achievement_pt_reward_id() {
  return &achievement_pt_reward_id_;
}

// -------------------------------------------------------------------

// role_achievement_point_rewards_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_achievement_point_rewards_ack_id];
inline bool role_achievement_point_rewards_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_achievement_point_rewards_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_achievement_point_rewards_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_achievement_point_rewards_ack::clear_protoid() {
  protoid_ = 6904;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_achievement_point_rewards_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_achievement_point_rewards_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 succeed_get_award_ids = 2;
inline int role_achievement_point_rewards_ack::succeed_get_award_ids_size() const {
  return succeed_get_award_ids_.size();
}
inline void role_achievement_point_rewards_ack::clear_succeed_get_award_ids() {
  succeed_get_award_ids_.Clear();
}
inline ::google::protobuf::int32 role_achievement_point_rewards_ack::succeed_get_award_ids(int index) const {
  return succeed_get_award_ids_.Get(index);
}
inline void role_achievement_point_rewards_ack::set_succeed_get_award_ids(int index, ::google::protobuf::int32 value) {
  succeed_get_award_ids_.Set(index, value);
}
inline void role_achievement_point_rewards_ack::add_succeed_get_award_ids(::google::protobuf::int32 value) {
  succeed_get_award_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievement_point_rewards_ack::succeed_get_award_ids() const {
  return succeed_get_award_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievement_point_rewards_ack::mutable_succeed_get_award_ids() {
  return &succeed_get_award_ids_;
}

// repeated int32 failed_get_award_ids = 3;
inline int role_achievement_point_rewards_ack::failed_get_award_ids_size() const {
  return failed_get_award_ids_.size();
}
inline void role_achievement_point_rewards_ack::clear_failed_get_award_ids() {
  failed_get_award_ids_.Clear();
}
inline ::google::protobuf::int32 role_achievement_point_rewards_ack::failed_get_award_ids(int index) const {
  return failed_get_award_ids_.Get(index);
}
inline void role_achievement_point_rewards_ack::set_failed_get_award_ids(int index, ::google::protobuf::int32 value) {
  failed_get_award_ids_.Set(index, value);
}
inline void role_achievement_point_rewards_ack::add_failed_get_award_ids(::google::protobuf::int32 value) {
  failed_get_award_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_achievement_point_rewards_ack::failed_get_award_ids() const {
  return failed_get_award_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_achievement_point_rewards_ack::mutable_failed_get_award_ids() {
  return &failed_get_award_ids_;
}

// repeated .SProtoSpace.MsgErrorType error_codes = 4;
inline int role_achievement_point_rewards_ack::error_codes_size() const {
  return error_codes_.size();
}
inline void role_achievement_point_rewards_ack::clear_error_codes() {
  error_codes_.Clear();
}
inline ::SProtoSpace::MsgErrorType role_achievement_point_rewards_ack::error_codes(int index) const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_codes_.Get(index));
}
inline void role_achievement_point_rewards_ack::set_error_codes(int index, ::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_codes_.Set(index, value);
}
inline void role_achievement_point_rewards_ack::add_error_codes(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  error_codes_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
role_achievement_point_rewards_ack::error_codes() const {
  return error_codes_;
}
inline ::google::protobuf::RepeatedField<int>*
role_achievement_point_rewards_ack::mutable_error_codes() {
  return &error_codes_;
}

// -------------------------------------------------------------------

// flower_bag_nty

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_nty_id];
inline bool flower_bag_nty::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_bag_nty::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_bag_nty::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_bag_nty::clear_protoid() {
  protoid_ = 7050;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_bag_nty::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_bag_nty::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.flower_info flower = 2;
inline bool flower_bag_nty::has_flower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_bag_nty::set_has_flower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_bag_nty::clear_has_flower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_bag_nty::clear_flower() {
  if (flower_ != NULL) flower_->::SProtoSpace::flower_info::Clear();
  clear_has_flower();
}
inline const ::SProtoSpace::flower_info& flower_bag_nty::flower() const {
  return flower_ != NULL ? *flower_ : *default_instance_->flower_;
}
inline ::SProtoSpace::flower_info* flower_bag_nty::mutable_flower() {
  set_has_flower();
  if (flower_ == NULL) flower_ = new ::SProtoSpace::flower_info;
  return flower_;
}
inline ::SProtoSpace::flower_info* flower_bag_nty::release_flower() {
  clear_has_flower();
  ::SProtoSpace::flower_info* temp = flower_;
  flower_ = NULL;
  return temp;
}
inline void flower_bag_nty::set_allocated_flower(::SProtoSpace::flower_info* flower) {
  delete flower_;
  flower_ = flower;
  if (flower) {
    set_has_flower();
  } else {
    clear_has_flower();
  }
}

// -------------------------------------------------------------------

// flower_bag_all_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_req_id];
inline bool flower_bag_all_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_bag_all_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_bag_all_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_bag_all_req::clear_protoid() {
  protoid_ = 7051;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_bag_all_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_bag_all_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// flower_bag_all_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_ack_id];
inline bool flower_bag_all_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_bag_all_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_bag_all_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_bag_all_ack::clear_protoid() {
  protoid_ = 7052;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_bag_all_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_bag_all_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool flower_bag_all_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_bag_all_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_bag_all_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_bag_all_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 flower_bag_all_ack::result() const {
  return result_;
}
inline void flower_bag_all_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// repeated .SProtoSpace.flower_info flower = 3;
inline int flower_bag_all_ack::flower_size() const {
  return flower_.size();
}
inline void flower_bag_all_ack::clear_flower() {
  flower_.Clear();
}
inline const ::SProtoSpace::flower_info& flower_bag_all_ack::flower(int index) const {
  return flower_.Get(index);
}
inline ::SProtoSpace::flower_info* flower_bag_all_ack::mutable_flower(int index) {
  return flower_.Mutable(index);
}
inline ::SProtoSpace::flower_info* flower_bag_all_ack::add_flower() {
  return flower_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >&
flower_bag_all_ack::flower() const {
  return flower_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >*
flower_bag_all_ack::mutable_flower() {
  return &flower_;
}

// -------------------------------------------------------------------

// flower_bag_all_nty

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_bag_all_nty_id];
inline bool flower_bag_all_nty::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_bag_all_nty::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_bag_all_nty::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_bag_all_nty::clear_protoid() {
  protoid_ = 7056;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_bag_all_nty::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_bag_all_nty::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.flower_info flower = 2;
inline int flower_bag_all_nty::flower_size() const {
  return flower_.size();
}
inline void flower_bag_all_nty::clear_flower() {
  flower_.Clear();
}
inline const ::SProtoSpace::flower_info& flower_bag_all_nty::flower(int index) const {
  return flower_.Get(index);
}
inline ::SProtoSpace::flower_info* flower_bag_all_nty::mutable_flower(int index) {
  return flower_.Mutable(index);
}
inline ::SProtoSpace::flower_info* flower_bag_all_nty::add_flower() {
  return flower_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >&
flower_bag_all_nty::flower() const {
  return flower_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::flower_info >*
flower_bag_all_nty::mutable_flower() {
  return &flower_;
}

// -------------------------------------------------------------------

// flower_send_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_req_id];
inline bool flower_send_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_send_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_send_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_send_req::clear_protoid() {
  protoid_ = 7053;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_send_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_send_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.flower_send_info send_info = 2;
inline bool flower_send_req::has_send_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_send_req::set_has_send_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_send_req::clear_has_send_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_send_req::clear_send_info() {
  if (send_info_ != NULL) send_info_->::SProtoSpace::flower_send_info::Clear();
  clear_has_send_info();
}
inline const ::SProtoSpace::flower_send_info& flower_send_req::send_info() const {
  return send_info_ != NULL ? *send_info_ : *default_instance_->send_info_;
}
inline ::SProtoSpace::flower_send_info* flower_send_req::mutable_send_info() {
  set_has_send_info();
  if (send_info_ == NULL) send_info_ = new ::SProtoSpace::flower_send_info;
  return send_info_;
}
inline ::SProtoSpace::flower_send_info* flower_send_req::release_send_info() {
  clear_has_send_info();
  ::SProtoSpace::flower_send_info* temp = send_info_;
  send_info_ = NULL;
  return temp;
}
inline void flower_send_req::set_allocated_send_info(::SProtoSpace::flower_send_info* send_info) {
  delete send_info_;
  send_info_ = send_info;
  if (send_info) {
    set_has_send_info();
  } else {
    clear_has_send_info();
  }
}

// -------------------------------------------------------------------

// flower_send_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_send_ack_id];
inline bool flower_send_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_send_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_send_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_send_ack::clear_protoid() {
  protoid_ = 7054;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_send_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_send_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 result = 2 [default = 0];
inline bool flower_send_ack::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_send_ack::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_send_ack::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_send_ack::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 flower_send_ack::result() const {
  return result_;
}
inline void flower_send_ack::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// flower_receive_nty

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = flower_receive_nty_id];
inline bool flower_receive_nty::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void flower_receive_nty::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void flower_receive_nty::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void flower_receive_nty::clear_protoid() {
  protoid_ = 7055;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID flower_receive_nty::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void flower_receive_nty::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 from_role_id = 2;
inline bool flower_receive_nty::has_from_role_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void flower_receive_nty::set_has_from_role_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void flower_receive_nty::clear_has_from_role_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void flower_receive_nty::clear_from_role_id() {
  from_role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_from_role_id();
}
inline ::google::protobuf::uint64 flower_receive_nty::from_role_id() const {
  return from_role_id_;
}
inline void flower_receive_nty::set_from_role_id(::google::protobuf::uint64 value) {
  set_has_from_role_id();
  from_role_id_ = value;
}

// optional int32 send_flower_template_id = 3;
inline bool flower_receive_nty::has_send_flower_template_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void flower_receive_nty::set_has_send_flower_template_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void flower_receive_nty::clear_has_send_flower_template_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void flower_receive_nty::clear_send_flower_template_id() {
  send_flower_template_id_ = 0;
  clear_has_send_flower_template_id();
}
inline ::google::protobuf::int32 flower_receive_nty::send_flower_template_id() const {
  return send_flower_template_id_;
}
inline void flower_receive_nty::set_send_flower_template_id(::google::protobuf::int32 value) {
  set_has_send_flower_template_id();
  send_flower_template_id_ = value;
}

// optional int32 send_flower_num = 4;
inline bool flower_receive_nty::has_send_flower_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void flower_receive_nty::set_has_send_flower_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void flower_receive_nty::clear_has_send_flower_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void flower_receive_nty::clear_send_flower_num() {
  send_flower_num_ = 0;
  clear_has_send_flower_num();
}
inline ::google::protobuf::int32 flower_receive_nty::send_flower_num() const {
  return send_flower_num_;
}
inline void flower_receive_nty::set_send_flower_num(::google::protobuf::int32 value) {
  set_has_send_flower_num();
  send_flower_num_ = value;
}

// optional string remark = 5;
inline bool flower_receive_nty::has_remark() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void flower_receive_nty::set_has_remark() {
  _has_bits_[0] |= 0x00000010u;
}
inline void flower_receive_nty::clear_has_remark() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void flower_receive_nty::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& flower_receive_nty::remark() const {
  return *remark_;
}
inline void flower_receive_nty::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void flower_receive_nty::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void flower_receive_nty::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* flower_receive_nty::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* flower_receive_nty::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void flower_receive_nty::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// role_draw_card_info

// optional int32 draw_type_id = 1;
inline bool role_draw_card_info::has_draw_type_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_info::set_has_draw_type_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_info::clear_has_draw_type_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_info::clear_draw_type_id() {
  draw_type_id_ = 0;
  clear_has_draw_type_id();
}
inline ::google::protobuf::int32 role_draw_card_info::draw_type_id() const {
  return draw_type_id_;
}
inline void role_draw_card_info::set_draw_type_id(::google::protobuf::int32 value) {
  set_has_draw_type_id();
  draw_type_id_ = value;
}

// optional int32 now_remain_times = 2;
inline bool role_draw_card_info::has_now_remain_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_draw_card_info::set_has_now_remain_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_draw_card_info::clear_has_now_remain_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_draw_card_info::clear_now_remain_times() {
  now_remain_times_ = 0;
  clear_has_now_remain_times();
}
inline ::google::protobuf::int32 role_draw_card_info::now_remain_times() const {
  return now_remain_times_;
}
inline void role_draw_card_info::set_now_remain_times(::google::protobuf::int32 value) {
  set_has_now_remain_times();
  now_remain_times_ = value;
}

// optional int32 remain_free_times = 3;
inline bool role_draw_card_info::has_remain_free_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_draw_card_info::set_has_remain_free_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_draw_card_info::clear_has_remain_free_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_draw_card_info::clear_remain_free_times() {
  remain_free_times_ = 0;
  clear_has_remain_free_times();
}
inline ::google::protobuf::int32 role_draw_card_info::remain_free_times() const {
  return remain_free_times_;
}
inline void role_draw_card_info::set_remain_free_times(::google::protobuf::int32 value) {
  set_has_remain_free_times();
  remain_free_times_ = value;
}

// optional int32 remain_limit_times = 4;
inline bool role_draw_card_info::has_remain_limit_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_draw_card_info::set_has_remain_limit_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_draw_card_info::clear_has_remain_limit_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_draw_card_info::clear_remain_limit_times() {
  remain_limit_times_ = 0;
  clear_has_remain_limit_times();
}
inline ::google::protobuf::int32 role_draw_card_info::remain_limit_times() const {
  return remain_limit_times_;
}
inline void role_draw_card_info::set_remain_limit_times(::google::protobuf::int32 value) {
  set_has_remain_limit_times();
  remain_limit_times_ = value;
}

// optional uint32 next_add_time = 5;
inline bool role_draw_card_info::has_next_add_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_draw_card_info::set_has_next_add_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_draw_card_info::clear_has_next_add_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_draw_card_info::clear_next_add_time() {
  next_add_time_ = 0u;
  clear_has_next_add_time();
}
inline ::google::protobuf::uint32 role_draw_card_info::next_add_time() const {
  return next_add_time_;
}
inline void role_draw_card_info::set_next_add_time(::google::protobuf::uint32 value) {
  set_has_next_add_time();
  next_add_time_ = value;
}

// optional int32 next_sp_drop_time = 6;
inline bool role_draw_card_info::has_next_sp_drop_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_draw_card_info::set_has_next_sp_drop_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_draw_card_info::clear_has_next_sp_drop_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_draw_card_info::clear_next_sp_drop_time() {
  next_sp_drop_time_ = 0;
  clear_has_next_sp_drop_time();
}
inline ::google::protobuf::int32 role_draw_card_info::next_sp_drop_time() const {
  return next_sp_drop_time_;
}
inline void role_draw_card_info::set_next_sp_drop_time(::google::protobuf::int32 value) {
  set_has_next_sp_drop_time();
  next_sp_drop_time_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_reward_item

// optional int32 id = 1;
inline bool role_draw_card_reward_item::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_reward_item::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_reward_item::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_reward_item::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 role_draw_card_reward_item::id() const {
  return id_;
}
inline void role_draw_card_reward_item::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool role_draw_card_reward_item::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_draw_card_reward_item::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_draw_card_reward_item::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_draw_card_reward_item::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 role_draw_card_reward_item::count() const {
  return count_;
}
inline void role_draw_card_reward_item::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_rewards

// optional int32 count = 1;
inline bool role_draw_card_rewards::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_rewards::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_rewards::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_rewards::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 role_draw_card_rewards::count() const {
  return count_;
}
inline void role_draw_card_rewards::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// repeated .SProtoSpace.role_draw_card_reward_item random_results = 2;
inline int role_draw_card_rewards::random_results_size() const {
  return random_results_.size();
}
inline void role_draw_card_rewards::clear_random_results() {
  random_results_.Clear();
}
inline const ::SProtoSpace::role_draw_card_reward_item& role_draw_card_rewards::random_results(int index) const {
  return random_results_.Get(index);
}
inline ::SProtoSpace::role_draw_card_reward_item* role_draw_card_rewards::mutable_random_results(int index) {
  return random_results_.Mutable(index);
}
inline ::SProtoSpace::role_draw_card_reward_item* role_draw_card_rewards::add_random_results() {
  return random_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >&
role_draw_card_rewards::random_results() const {
  return random_results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >*
role_draw_card_rewards::mutable_random_results() {
  return &random_results_;
}

// repeated .SProtoSpace.role_draw_card_reward_item real_results = 3;
inline int role_draw_card_rewards::real_results_size() const {
  return real_results_.size();
}
inline void role_draw_card_rewards::clear_real_results() {
  real_results_.Clear();
}
inline const ::SProtoSpace::role_draw_card_reward_item& role_draw_card_rewards::real_results(int index) const {
  return real_results_.Get(index);
}
inline ::SProtoSpace::role_draw_card_reward_item* role_draw_card_rewards::mutable_real_results(int index) {
  return real_results_.Mutable(index);
}
inline ::SProtoSpace::role_draw_card_reward_item* role_draw_card_rewards::add_real_results() {
  return real_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >&
role_draw_card_rewards::real_results() const {
  return real_results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_reward_item >*
role_draw_card_rewards::mutable_real_results() {
  return &real_results_;
}

// -------------------------------------------------------------------

// role_draw_card_info_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_req_id];
inline bool role_draw_card_info_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_info_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_info_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_info_req::clear_protoid() {
  protoid_ = 7015;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_draw_card_info_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_draw_card_info_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_info_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_info_ack_id];
inline bool role_draw_card_info_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_info_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_info_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_info_ack::clear_protoid() {
  protoid_ = 7016;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_draw_card_info_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_draw_card_info_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.role_draw_card_info lists = 2;
inline int role_draw_card_info_ack::lists_size() const {
  return lists_.size();
}
inline void role_draw_card_info_ack::clear_lists() {
  lists_.Clear();
}
inline const ::SProtoSpace::role_draw_card_info& role_draw_card_info_ack::lists(int index) const {
  return lists_.Get(index);
}
inline ::SProtoSpace::role_draw_card_info* role_draw_card_info_ack::mutable_lists(int index) {
  return lists_.Mutable(index);
}
inline ::SProtoSpace::role_draw_card_info* role_draw_card_info_ack::add_lists() {
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >&
role_draw_card_info_ack::lists() const {
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >*
role_draw_card_info_ack::mutable_lists() {
  return &lists_;
}

// -------------------------------------------------------------------

// role_draw_card_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_req_id];
inline bool role_draw_card_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_req::clear_protoid() {
  protoid_ = 7017;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_draw_card_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_draw_card_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 draw_type_id = 2;
inline bool role_draw_card_req::has_draw_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_draw_card_req::set_has_draw_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_draw_card_req::clear_has_draw_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_draw_card_req::clear_draw_type_id() {
  draw_type_id_ = 0;
  clear_has_draw_type_id();
}
inline ::google::protobuf::int32 role_draw_card_req::draw_type_id() const {
  return draw_type_id_;
}
inline void role_draw_card_req::set_draw_type_id(::google::protobuf::int32 value) {
  set_has_draw_type_id();
  draw_type_id_ = value;
}

// optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
inline bool role_draw_card_req::has_need_coin_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_draw_card_req::set_has_need_coin_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_draw_card_req::clear_has_need_coin_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_draw_card_req::clear_need_coin_type() {
  need_coin_type_ = 0;
  clear_has_need_coin_type();
}
inline ::SProtoSpace::eDrawCardCoinType role_draw_card_req::need_coin_type() const {
  return static_cast< ::SProtoSpace::eDrawCardCoinType >(need_coin_type_);
}
inline void role_draw_card_req::set_need_coin_type(::SProtoSpace::eDrawCardCoinType value) {
  assert(::SProtoSpace::eDrawCardCoinType_IsValid(value));
  set_has_need_coin_type();
  need_coin_type_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ack_id];
inline bool role_draw_card_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_ack::clear_protoid() {
  protoid_ = 7018;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_draw_card_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_draw_card_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 draw_type_id = 2;
inline bool role_draw_card_ack::has_draw_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_draw_card_ack::set_has_draw_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_draw_card_ack::clear_has_draw_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_draw_card_ack::clear_draw_type_id() {
  draw_type_id_ = 0;
  clear_has_draw_type_id();
}
inline ::google::protobuf::int32 role_draw_card_ack::draw_type_id() const {
  return draw_type_id_;
}
inline void role_draw_card_ack::set_draw_type_id(::google::protobuf::int32 value) {
  set_has_draw_type_id();
  draw_type_id_ = value;
}

// optional .SProtoSpace.eDrawCardCoinType need_coin_type = 3;
inline bool role_draw_card_ack::has_need_coin_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_draw_card_ack::set_has_need_coin_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_draw_card_ack::clear_has_need_coin_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_draw_card_ack::clear_need_coin_type() {
  need_coin_type_ = 0;
  clear_has_need_coin_type();
}
inline ::SProtoSpace::eDrawCardCoinType role_draw_card_ack::need_coin_type() const {
  return static_cast< ::SProtoSpace::eDrawCardCoinType >(need_coin_type_);
}
inline void role_draw_card_ack::set_need_coin_type(::SProtoSpace::eDrawCardCoinType value) {
  assert(::SProtoSpace::eDrawCardCoinType_IsValid(value));
  set_has_need_coin_type();
  need_coin_type_ = value;
}

// repeated .SProtoSpace.role_draw_card_rewards results = 4;
inline int role_draw_card_ack::results_size() const {
  return results_.size();
}
inline void role_draw_card_ack::clear_results() {
  results_.Clear();
}
inline const ::SProtoSpace::role_draw_card_rewards& role_draw_card_ack::results(int index) const {
  return results_.Get(index);
}
inline ::SProtoSpace::role_draw_card_rewards* role_draw_card_ack::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::SProtoSpace::role_draw_card_rewards* role_draw_card_ack::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_rewards >&
role_draw_card_ack::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_rewards >*
role_draw_card_ack::mutable_results() {
  return &results_;
}

// repeated .SProtoSpace.role_draw_card_info lists = 5;
inline int role_draw_card_ack::lists_size() const {
  return lists_.size();
}
inline void role_draw_card_ack::clear_lists() {
  lists_.Clear();
}
inline const ::SProtoSpace::role_draw_card_info& role_draw_card_ack::lists(int index) const {
  return lists_.Get(index);
}
inline ::SProtoSpace::role_draw_card_info* role_draw_card_ack::mutable_lists(int index) {
  return lists_.Mutable(index);
}
inline ::SProtoSpace::role_draw_card_info* role_draw_card_ack::add_lists() {
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >&
role_draw_card_ack::lists() const {
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_info >*
role_draw_card_ack::mutable_lists() {
  return &lists_;
}

// optional .SProtoSpace.MsgErrorType error_code = 6;
inline bool role_draw_card_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_draw_card_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_draw_card_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_draw_card_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType role_draw_card_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void role_draw_card_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_ssr_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_req_id];
inline bool role_draw_card_ssr_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_ssr_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_ssr_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_ssr_req::clear_protoid() {
  protoid_ = 7019;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_draw_card_ssr_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_draw_card_ssr_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_ssr_ack_one

// optional uint64 role_id = 1;
inline bool role_draw_card_ssr_ack_one::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_ssr_ack_one::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_ssr_ack_one::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_ssr_ack_one::clear_role_id() {
  role_id_ = GOOGLE_ULONGLONG(0);
  clear_has_role_id();
}
inline ::google::protobuf::uint64 role_draw_card_ssr_ack_one::role_id() const {
  return role_id_;
}
inline void role_draw_card_ssr_ack_one::set_role_id(::google::protobuf::uint64 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional int32 item_id = 2;
inline bool role_draw_card_ssr_ack_one::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_draw_card_ssr_ack_one::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_draw_card_ssr_ack_one::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_draw_card_ssr_ack_one::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 role_draw_card_ssr_ack_one::item_id() const {
  return item_id_;
}
inline void role_draw_card_ssr_ack_one::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// role_draw_card_ssr_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_draw_card_ssr_ack_id];
inline bool role_draw_card_ssr_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_draw_card_ssr_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_draw_card_ssr_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_draw_card_ssr_ack::clear_protoid() {
  protoid_ = 7020;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_draw_card_ssr_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_draw_card_ssr_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.role_draw_card_ssr_ack_one results = 2;
inline int role_draw_card_ssr_ack::results_size() const {
  return results_.size();
}
inline void role_draw_card_ssr_ack::clear_results() {
  results_.Clear();
}
inline const ::SProtoSpace::role_draw_card_ssr_ack_one& role_draw_card_ssr_ack::results(int index) const {
  return results_.Get(index);
}
inline ::SProtoSpace::role_draw_card_ssr_ack_one* role_draw_card_ssr_ack::mutable_results(int index) {
  return results_.Mutable(index);
}
inline ::SProtoSpace::role_draw_card_ssr_ack_one* role_draw_card_ssr_ack::add_results() {
  return results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_ssr_ack_one >&
role_draw_card_ssr_ack::results() const {
  return results_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_draw_card_ssr_ack_one >*
role_draw_card_ssr_ack::mutable_results() {
  return &results_;
}

// -------------------------------------------------------------------

// role_talent_activate_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_req_id];
inline bool role_talent_activate_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_talent_activate_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_talent_activate_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_talent_activate_req::clear_protoid() {
  protoid_ = 7200;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_talent_activate_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_talent_activate_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 id = 2;
inline bool role_talent_activate_req::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_talent_activate_req::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_talent_activate_req::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_talent_activate_req::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 role_talent_activate_req::id() const {
  return id_;
}
inline void role_talent_activate_req::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// role_talent_activate_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_talent_activate_ack_id];
inline bool role_talent_activate_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_talent_activate_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_talent_activate_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_talent_activate_ack::clear_protoid() {
  protoid_ = 7201;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_talent_activate_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_talent_activate_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 id = 2;
inline bool role_talent_activate_ack::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_talent_activate_ack::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_talent_activate_ack::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_talent_activate_ack::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 role_talent_activate_ack::id() const {
  return id_;
}
inline void role_talent_activate_ack::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ret = 4;
inline bool role_talent_activate_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_talent_activate_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_talent_activate_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_talent_activate_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 role_talent_activate_ack::ret() const {
  return ret_;
}
inline void role_talent_activate_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// all_role_talents_activate_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_req_id];
inline bool all_role_talents_activate_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_role_talents_activate_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_role_talents_activate_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_role_talents_activate_req::clear_protoid() {
  protoid_ = 7202;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID all_role_talents_activate_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void all_role_talents_activate_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// all_role_talents_activate_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = all_role_talents_activate_ack_id];
inline bool all_role_talents_activate_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_role_talents_activate_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_role_talents_activate_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_role_talents_activate_ack::clear_protoid() {
  protoid_ = 7203;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID all_role_talents_activate_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void all_role_talents_activate_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 id_list = 2;
inline int all_role_talents_activate_ack::id_list_size() const {
  return id_list_.size();
}
inline void all_role_talents_activate_ack::clear_id_list() {
  id_list_.Clear();
}
inline ::google::protobuf::int32 all_role_talents_activate_ack::id_list(int index) const {
  return id_list_.Get(index);
}
inline void all_role_talents_activate_ack::set_id_list(int index, ::google::protobuf::int32 value) {
  id_list_.Set(index, value);
}
inline void all_role_talents_activate_ack::add_id_list(::google::protobuf::int32 value) {
  id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
all_role_talents_activate_ack::id_list() const {
  return id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
all_role_talents_activate_ack::mutable_id_list() {
  return &id_list_;
}

// optional int32 ret = 3;
inline bool all_role_talents_activate_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void all_role_talents_activate_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void all_role_talents_activate_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void all_role_talents_activate_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 all_role_talents_activate_ack::ret() const {
  return ret_;
}
inline void all_role_talents_activate_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// switch_role_skill_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_req_id];
inline bool switch_role_skill_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void switch_role_skill_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void switch_role_skill_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void switch_role_skill_req::clear_protoid() {
  protoid_ = 7204;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID switch_role_skill_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void switch_role_skill_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 skill_id = 2;
inline bool switch_role_skill_req::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void switch_role_skill_req::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void switch_role_skill_req::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void switch_role_skill_req::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 switch_role_skill_req::skill_id() const {
  return skill_id_;
}
inline void switch_role_skill_req::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// -------------------------------------------------------------------

// switch_role_skill_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = switch_role_skill_ack_id];
inline bool switch_role_skill_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void switch_role_skill_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void switch_role_skill_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void switch_role_skill_ack::clear_protoid() {
  protoid_ = 7205;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID switch_role_skill_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void switch_role_skill_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 skill_id = 2;
inline bool switch_role_skill_ack::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void switch_role_skill_ack::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void switch_role_skill_ack::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void switch_role_skill_ack::clear_skill_id() {
  skill_id_ = 0;
  clear_has_skill_id();
}
inline ::google::protobuf::int32 switch_role_skill_ack::skill_id() const {
  return skill_id_;
}
inline void switch_role_skill_ack::set_skill_id(::google::protobuf::int32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// optional int32 ret = 3;
inline bool switch_role_skill_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void switch_role_skill_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void switch_role_skill_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void switch_role_skill_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 switch_role_skill_ack::ret() const {
  return ret_;
}
inline void switch_role_skill_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// talisman_use_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_req_id];
inline bool talisman_use_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_use_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_use_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_use_req::clear_protoid() {
  protoid_ = 7350;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_use_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_use_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 2;
inline bool talisman_use_req::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_use_req::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_use_req::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_use_req::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_use_req::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_use_req::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 talisman_uuid = 3;
inline bool talisman_use_req::has_talisman_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_use_req::set_has_talisman_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_use_req::clear_has_talisman_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_use_req::clear_talisman_uuid() {
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_talisman_uuid();
}
inline ::google::protobuf::uint64 talisman_use_req::talisman_uuid() const {
  return talisman_uuid_;
}
inline void talisman_use_req::set_talisman_uuid(::google::protobuf::uint64 value) {
  set_has_talisman_uuid();
  talisman_uuid_ = value;
}

// optional uint64 hero_uuid = 4;
inline bool talisman_use_req::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_use_req::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_use_req::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_use_req::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_use_req::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_use_req::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional .SProtoSpace.EHeroTalismanSlot use_slot = 5;
inline bool talisman_use_req::has_use_slot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_use_req::set_has_use_slot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_use_req::clear_has_use_slot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_use_req::clear_use_slot() {
  use_slot_ = 0;
  clear_has_use_slot();
}
inline ::SProtoSpace::EHeroTalismanSlot talisman_use_req::use_slot() const {
  return static_cast< ::SProtoSpace::EHeroTalismanSlot >(use_slot_);
}
inline void talisman_use_req::set_use_slot(::SProtoSpace::EHeroTalismanSlot value) {
  assert(::SProtoSpace::EHeroTalismanSlot_IsValid(value));
  set_has_use_slot();
  use_slot_ = value;
}

// -------------------------------------------------------------------

// talisman_use_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_use_ack_id];
inline bool talisman_use_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_use_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_use_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_use_ack::clear_protoid() {
  protoid_ = 7351;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_use_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_use_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool talisman_use_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_use_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_use_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_use_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 talisman_use_ack::ret() const {
  return ret_;
}
inline void talisman_use_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 3;
inline bool talisman_use_ack::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_use_ack::set_has_dest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_use_ack::clear_has_dest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_use_ack::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_use_ack::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_use_ack::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 talisman_uuid = 4;
inline bool talisman_use_ack::has_talisman_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_use_ack::set_has_talisman_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_use_ack::clear_has_talisman_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_use_ack::clear_talisman_uuid() {
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_talisman_uuid();
}
inline ::google::protobuf::uint64 talisman_use_ack::talisman_uuid() const {
  return talisman_uuid_;
}
inline void talisman_use_ack::set_talisman_uuid(::google::protobuf::uint64 value) {
  set_has_talisman_uuid();
  talisman_uuid_ = value;
}

// optional uint64 hero_uuid = 5;
inline bool talisman_use_ack::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_use_ack::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_use_ack::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_use_ack::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_use_ack::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_use_ack::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional .SProtoSpace.EHeroTalismanSlot use_slot = 6;
inline bool talisman_use_ack::has_use_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void talisman_use_ack::set_has_use_slot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void talisman_use_ack::clear_has_use_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void talisman_use_ack::clear_use_slot() {
  use_slot_ = 0;
  clear_has_use_slot();
}
inline ::SProtoSpace::EHeroTalismanSlot talisman_use_ack::use_slot() const {
  return static_cast< ::SProtoSpace::EHeroTalismanSlot >(use_slot_);
}
inline void talisman_use_ack::set_use_slot(::SProtoSpace::EHeroTalismanSlot value) {
  assert(::SProtoSpace::EHeroTalismanSlot_IsValid(value));
  set_has_use_slot();
  use_slot_ = value;
}

// -------------------------------------------------------------------

// talisman_un_use_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_req_id];
inline bool talisman_un_use_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_un_use_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_un_use_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_un_use_req::clear_protoid() {
  protoid_ = 7352;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_un_use_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_un_use_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 2;
inline bool talisman_un_use_req::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_un_use_req::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_un_use_req::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_un_use_req::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_un_use_req::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_un_use_req::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 3;
inline bool talisman_un_use_req::has_un_use_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_un_use_req::set_has_un_use_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_un_use_req::clear_has_un_use_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_un_use_req::clear_un_use_slot() {
  un_use_slot_ = 0;
  clear_has_un_use_slot();
}
inline ::SProtoSpace::EHeroTalismanSlot talisman_un_use_req::un_use_slot() const {
  return static_cast< ::SProtoSpace::EHeroTalismanSlot >(un_use_slot_);
}
inline void talisman_un_use_req::set_un_use_slot(::SProtoSpace::EHeroTalismanSlot value) {
  assert(::SProtoSpace::EHeroTalismanSlot_IsValid(value));
  set_has_un_use_slot();
  un_use_slot_ = value;
}

// optional uint64 hero_uuid = 4;
inline bool talisman_un_use_req::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_un_use_req::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_un_use_req::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_un_use_req::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_un_use_req::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_un_use_req::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// -------------------------------------------------------------------

// talisman_un_use_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_un_use_ack_id];
inline bool talisman_un_use_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_un_use_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_un_use_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_un_use_ack::clear_protoid() {
  protoid_ = 7353;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_un_use_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_un_use_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool talisman_un_use_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_un_use_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_un_use_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_un_use_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 talisman_un_use_ack::ret() const {
  return ret_;
}
inline void talisman_un_use_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 3;
inline bool talisman_un_use_ack::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_un_use_ack::set_has_dest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_un_use_ack::clear_has_dest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_un_use_ack::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_un_use_ack::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_un_use_ack::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional .SProtoSpace.EHeroTalismanSlot un_use_slot = 4;
inline bool talisman_un_use_ack::has_un_use_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_un_use_ack::set_has_un_use_slot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_un_use_ack::clear_has_un_use_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_un_use_ack::clear_un_use_slot() {
  un_use_slot_ = 0;
  clear_has_un_use_slot();
}
inline ::SProtoSpace::EHeroTalismanSlot talisman_un_use_ack::un_use_slot() const {
  return static_cast< ::SProtoSpace::EHeroTalismanSlot >(un_use_slot_);
}
inline void talisman_un_use_ack::set_un_use_slot(::SProtoSpace::EHeroTalismanSlot value) {
  assert(::SProtoSpace::EHeroTalismanSlot_IsValid(value));
  set_has_un_use_slot();
  un_use_slot_ = value;
}

// optional uint64 hero_uuid = 5;
inline bool talisman_un_use_ack::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_un_use_ack::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_un_use_ack::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_un_use_ack::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_un_use_ack::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_un_use_ack::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// -------------------------------------------------------------------

// talisman_lv_up_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_req_id];
inline bool talisman_lv_up_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_lv_up_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_lv_up_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_lv_up_req::clear_protoid() {
  protoid_ = 7354;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_lv_up_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_lv_up_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 2;
inline bool talisman_lv_up_req::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_lv_up_req::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_lv_up_req::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_lv_up_req::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_lv_up_req::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_lv_up_req::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 hero_uuid = 3;
inline bool talisman_lv_up_req::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_lv_up_req::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_lv_up_req::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_lv_up_req::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_lv_up_req::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_lv_up_req::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional uint64 talisman_uuid = 4;
inline bool talisman_lv_up_req::has_talisman_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_lv_up_req::set_has_talisman_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_lv_up_req::clear_has_talisman_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_lv_up_req::clear_talisman_uuid() {
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_talisman_uuid();
}
inline ::google::protobuf::uint64 talisman_lv_up_req::talisman_uuid() const {
  return talisman_uuid_;
}
inline void talisman_lv_up_req::set_talisman_uuid(::google::protobuf::uint64 value) {
  set_has_talisman_uuid();
  talisman_uuid_ = value;
}

// repeated uint64 cost_uuids = 5;
inline int talisman_lv_up_req::cost_uuids_size() const {
  return cost_uuids_.size();
}
inline void talisman_lv_up_req::clear_cost_uuids() {
  cost_uuids_.Clear();
}
inline ::google::protobuf::uint64 talisman_lv_up_req::cost_uuids(int index) const {
  return cost_uuids_.Get(index);
}
inline void talisman_lv_up_req::set_cost_uuids(int index, ::google::protobuf::uint64 value) {
  cost_uuids_.Set(index, value);
}
inline void talisman_lv_up_req::add_cost_uuids(::google::protobuf::uint64 value) {
  cost_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
talisman_lv_up_req::cost_uuids() const {
  return cost_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
talisman_lv_up_req::mutable_cost_uuids() {
  return &cost_uuids_;
}

// -------------------------------------------------------------------

// talisman_lv_up_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_lv_up_ack_id];
inline bool talisman_lv_up_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_lv_up_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_lv_up_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_lv_up_ack::clear_protoid() {
  protoid_ = 7355;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_lv_up_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_lv_up_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool talisman_lv_up_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_lv_up_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_lv_up_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_lv_up_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 talisman_lv_up_ack::ret() const {
  return ret_;
}
inline void talisman_lv_up_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 3;
inline bool talisman_lv_up_ack::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_lv_up_ack::set_has_dest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_lv_up_ack::clear_has_dest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_lv_up_ack::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_lv_up_ack::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_lv_up_ack::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 hero_uuid = 4;
inline bool talisman_lv_up_ack::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_lv_up_ack::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_lv_up_ack::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_lv_up_ack::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_lv_up_ack::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_lv_up_ack::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional uint64 talisman_uuid = 5;
inline bool talisman_lv_up_ack::has_talisman_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_lv_up_ack::set_has_talisman_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_lv_up_ack::clear_has_talisman_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_lv_up_ack::clear_talisman_uuid() {
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_talisman_uuid();
}
inline ::google::protobuf::uint64 talisman_lv_up_ack::talisman_uuid() const {
  return talisman_uuid_;
}
inline void talisman_lv_up_ack::set_talisman_uuid(::google::protobuf::uint64 value) {
  set_has_talisman_uuid();
  talisman_uuid_ = value;
}

// repeated uint64 cost_uuids = 6;
inline int talisman_lv_up_ack::cost_uuids_size() const {
  return cost_uuids_.size();
}
inline void talisman_lv_up_ack::clear_cost_uuids() {
  cost_uuids_.Clear();
}
inline ::google::protobuf::uint64 talisman_lv_up_ack::cost_uuids(int index) const {
  return cost_uuids_.Get(index);
}
inline void talisman_lv_up_ack::set_cost_uuids(int index, ::google::protobuf::uint64 value) {
  cost_uuids_.Set(index, value);
}
inline void talisman_lv_up_ack::add_cost_uuids(::google::protobuf::uint64 value) {
  cost_uuids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
talisman_lv_up_ack::cost_uuids() const {
  return cost_uuids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
talisman_lv_up_ack::mutable_cost_uuids() {
  return &cost_uuids_;
}

// -------------------------------------------------------------------

// talisman_break_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_req_id];
inline bool talisman_break_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_break_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_break_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_break_req::clear_protoid() {
  protoid_ = 7356;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_break_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_break_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 2;
inline bool talisman_break_req::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_break_req::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_break_req::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_break_req::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_break_req::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_break_req::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 hero_uuid = 3;
inline bool talisman_break_req::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_break_req::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_break_req::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_break_req::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_break_req::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_break_req::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional uint64 talisman_uuid = 4;
inline bool talisman_break_req::has_talisman_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_break_req::set_has_talisman_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_break_req::clear_has_talisman_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_break_req::clear_talisman_uuid() {
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_talisman_uuid();
}
inline ::google::protobuf::uint64 talisman_break_req::talisman_uuid() const {
  return talisman_uuid_;
}
inline void talisman_break_req::set_talisman_uuid(::google::protobuf::uint64 value) {
  set_has_talisman_uuid();
  talisman_uuid_ = value;
}

// -------------------------------------------------------------------

// talisman_break_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_break_ack_id];
inline bool talisman_break_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_break_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_break_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_break_ack::clear_protoid() {
  protoid_ = 7357;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_break_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_break_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool talisman_break_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_break_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_break_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_break_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 talisman_break_ack::ret() const {
  return ret_;
}
inline void talisman_break_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 3;
inline bool talisman_break_ack::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_break_ack::set_has_dest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_break_ack::clear_has_dest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_break_ack::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_break_ack::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_break_ack::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 hero_uuid = 4;
inline bool talisman_break_ack::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_break_ack::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_break_ack::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_break_ack::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_break_ack::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_break_ack::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional uint64 talisman_uuid = 5;
inline bool talisman_break_ack::has_talisman_uuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_break_ack::set_has_talisman_uuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_break_ack::clear_has_talisman_uuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_break_ack::clear_talisman_uuid() {
  talisman_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_talisman_uuid();
}
inline ::google::protobuf::uint64 talisman_break_ack::talisman_uuid() const {
  return talisman_uuid_;
}
inline void talisman_break_ack::set_talisman_uuid(::google::protobuf::uint64 value) {
  set_has_talisman_uuid();
  talisman_uuid_ = value;
}

// -------------------------------------------------------------------

// talisman_change_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = talisman_change_ntf_id];
inline bool talisman_change_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talisman_change_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talisman_change_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talisman_change_ntf::clear_protoid() {
  protoid_ = 7358;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID talisman_change_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void talisman_change_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.ETalismanChangeType type = 2;
inline bool talisman_change_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talisman_change_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talisman_change_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talisman_change_ntf::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::ETalismanChangeType talisman_change_ntf::type() const {
  return static_cast< ::SProtoSpace::ETalismanChangeType >(type_);
}
inline void talisman_change_ntf::set_type(::SProtoSpace::ETalismanChangeType value) {
  assert(::SProtoSpace::ETalismanChangeType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .SProtoSpace.ETalismanDestType dest = 3;
inline bool talisman_change_ntf::has_dest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talisman_change_ntf::set_has_dest() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talisman_change_ntf::clear_has_dest() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talisman_change_ntf::clear_dest() {
  dest_ = 0;
  clear_has_dest();
}
inline ::SProtoSpace::ETalismanDestType talisman_change_ntf::dest() const {
  return static_cast< ::SProtoSpace::ETalismanDestType >(dest_);
}
inline void talisman_change_ntf::set_dest(::SProtoSpace::ETalismanDestType value) {
  assert(::SProtoSpace::ETalismanDestType_IsValid(value));
  set_has_dest();
  dest_ = value;
}

// optional uint64 hero_uuid = 4;
inline bool talisman_change_ntf::has_hero_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void talisman_change_ntf::set_has_hero_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void talisman_change_ntf::clear_has_hero_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void talisman_change_ntf::clear_hero_uuid() {
  hero_uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_hero_uuid();
}
inline ::google::protobuf::uint64 talisman_change_ntf::hero_uuid() const {
  return hero_uuid_;
}
inline void talisman_change_ntf::set_hero_uuid(::google::protobuf::uint64 value) {
  set_has_hero_uuid();
  hero_uuid_ = value;
}

// optional .SProtoSpace.talisman_data talisman = 5;
inline bool talisman_change_ntf::has_talisman() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void talisman_change_ntf::set_has_talisman() {
  _has_bits_[0] |= 0x00000010u;
}
inline void talisman_change_ntf::clear_has_talisman() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void talisman_change_ntf::clear_talisman() {
  if (talisman_ != NULL) talisman_->::SProtoSpace::talisman_data::Clear();
  clear_has_talisman();
}
inline const ::SProtoSpace::talisman_data& talisman_change_ntf::talisman() const {
  return talisman_ != NULL ? *talisman_ : *default_instance_->talisman_;
}
inline ::SProtoSpace::talisman_data* talisman_change_ntf::mutable_talisman() {
  set_has_talisman();
  if (talisman_ == NULL) talisman_ = new ::SProtoSpace::talisman_data;
  return talisman_;
}
inline ::SProtoSpace::talisman_data* talisman_change_ntf::release_talisman() {
  clear_has_talisman();
  ::SProtoSpace::talisman_data* temp = talisman_;
  talisman_ = NULL;
  return temp;
}
inline void talisman_change_ntf::set_allocated_talisman(::SProtoSpace::talisman_data* talisman) {
  delete talisman_;
  talisman_ = talisman;
  if (talisman) {
    set_has_talisman();
  } else {
    clear_has_talisman();
  }
}

// -------------------------------------------------------------------

// red_pt_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_req_id];
inline bool red_pt_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void red_pt_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void red_pt_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void red_pt_req::clear_protoid() {
  protoid_ = 7400;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID red_pt_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void red_pt_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated .SProtoSpace.eRedPtType sys_id_s = 2;
inline int red_pt_req::sys_id_s_size() const {
  return sys_id_s_.size();
}
inline void red_pt_req::clear_sys_id_s() {
  sys_id_s_.Clear();
}
inline ::SProtoSpace::eRedPtType red_pt_req::sys_id_s(int index) const {
  return static_cast< ::SProtoSpace::eRedPtType >(sys_id_s_.Get(index));
}
inline void red_pt_req::set_sys_id_s(int index, ::SProtoSpace::eRedPtType value) {
  assert(::SProtoSpace::eRedPtType_IsValid(value));
  sys_id_s_.Set(index, value);
}
inline void red_pt_req::add_sys_id_s(::SProtoSpace::eRedPtType value) {
  assert(::SProtoSpace::eRedPtType_IsValid(value));
  sys_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
red_pt_req::sys_id_s() const {
  return sys_id_s_;
}
inline ::google::protobuf::RepeatedField<int>*
red_pt_req::mutable_sys_id_s() {
  return &sys_id_s_;
}

// -------------------------------------------------------------------

// red_pt_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ack_id];
inline bool red_pt_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void red_pt_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void red_pt_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void red_pt_ack::clear_protoid() {
  protoid_ = 7401;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID red_pt_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void red_pt_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.red_pt_infos infos = 2;
inline bool red_pt_ack::has_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void red_pt_ack::set_has_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void red_pt_ack::clear_has_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void red_pt_ack::clear_infos() {
  if (infos_ != NULL) infos_->::SProtoSpace::red_pt_infos::Clear();
  clear_has_infos();
}
inline const ::SProtoSpace::red_pt_infos& red_pt_ack::infos() const {
  return infos_ != NULL ? *infos_ : *default_instance_->infos_;
}
inline ::SProtoSpace::red_pt_infos* red_pt_ack::mutable_infos() {
  set_has_infos();
  if (infos_ == NULL) infos_ = new ::SProtoSpace::red_pt_infos;
  return infos_;
}
inline ::SProtoSpace::red_pt_infos* red_pt_ack::release_infos() {
  clear_has_infos();
  ::SProtoSpace::red_pt_infos* temp = infos_;
  infos_ = NULL;
  return temp;
}
inline void red_pt_ack::set_allocated_infos(::SProtoSpace::red_pt_infos* infos) {
  delete infos_;
  infos_ = infos;
  if (infos) {
    set_has_infos();
  } else {
    clear_has_infos();
  }
}

// -------------------------------------------------------------------

// red_pt_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = red_pt_ntf_id];
inline bool red_pt_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void red_pt_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void red_pt_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void red_pt_ntf::clear_protoid() {
  protoid_ = 7402;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID red_pt_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void red_pt_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.red_pt_infos infos = 2;
inline bool red_pt_ntf::has_infos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void red_pt_ntf::set_has_infos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void red_pt_ntf::clear_has_infos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void red_pt_ntf::clear_infos() {
  if (infos_ != NULL) infos_->::SProtoSpace::red_pt_infos::Clear();
  clear_has_infos();
}
inline const ::SProtoSpace::red_pt_infos& red_pt_ntf::infos() const {
  return infos_ != NULL ? *infos_ : *default_instance_->infos_;
}
inline ::SProtoSpace::red_pt_infos* red_pt_ntf::mutable_infos() {
  set_has_infos();
  if (infos_ == NULL) infos_ = new ::SProtoSpace::red_pt_infos;
  return infos_;
}
inline ::SProtoSpace::red_pt_infos* red_pt_ntf::release_infos() {
  clear_has_infos();
  ::SProtoSpace::red_pt_infos* temp = infos_;
  infos_ = NULL;
  return temp;
}
inline void red_pt_ntf::set_allocated_infos(::SProtoSpace::red_pt_infos* infos) {
  delete infos_;
  infos_ = infos;
  if (infos) {
    set_has_infos();
  } else {
    clear_has_infos();
  }
}

// -------------------------------------------------------------------

// get_wearing_fashions_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_req_id];
inline bool get_wearing_fashions_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_wearing_fashions_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_wearing_fashions_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_wearing_fashions_req::clear_protoid() {
  protoid_ = 7450;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_wearing_fashions_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_wearing_fashions_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// get_wearing_fashions_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_wearing_fashions_ack_id];
inline bool get_wearing_fashions_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_wearing_fashions_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_wearing_fashions_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_wearing_fashions_ack::clear_protoid() {
  protoid_ = 7451;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_wearing_fashions_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_wearing_fashions_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
inline bool get_wearing_fashions_ack::has_fashions_p_wearing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_wearing_fashions_ack::set_has_fashions_p_wearing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_wearing_fashions_ack::clear_has_fashions_p_wearing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_wearing_fashions_ack::clear_fashions_p_wearing() {
  if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
  clear_has_fashions_p_wearing();
}
inline const ::SProtoSpace::fashions_pack& get_wearing_fashions_ack::fashions_p_wearing() const {
  return fashions_p_wearing_ != NULL ? *fashions_p_wearing_ : *default_instance_->fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* get_wearing_fashions_ack::mutable_fashions_p_wearing() {
  set_has_fashions_p_wearing();
  if (fashions_p_wearing_ == NULL) fashions_p_wearing_ = new ::SProtoSpace::fashions_pack;
  return fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* get_wearing_fashions_ack::release_fashions_p_wearing() {
  clear_has_fashions_p_wearing();
  ::SProtoSpace::fashions_pack* temp = fashions_p_wearing_;
  fashions_p_wearing_ = NULL;
  return temp;
}
inline void get_wearing_fashions_ack::set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing) {
  delete fashions_p_wearing_;
  fashions_p_wearing_ = fashions_p_wearing;
  if (fashions_p_wearing) {
    set_has_fashions_p_wearing();
  } else {
    clear_has_fashions_p_wearing();
  }
}

// optional .SProtoSpace.MsgErrorType error_code = 3;
inline bool get_wearing_fashions_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_wearing_fashions_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_wearing_fashions_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_wearing_fashions_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType get_wearing_fashions_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void get_wearing_fashions_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// get_all_fashions_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_req_id];
inline bool get_all_fashions_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_all_fashions_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_all_fashions_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_all_fashions_req::clear_protoid() {
  protoid_ = 7452;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_all_fashions_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_all_fashions_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// get_all_fashions_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_all_fashions_ack_id];
inline bool get_all_fashions_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_all_fashions_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_all_fashions_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_all_fashions_ack::clear_protoid() {
  protoid_ = 7453;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_all_fashions_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_all_fashions_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
inline bool get_all_fashions_ack::has_fashions_p_wearing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_all_fashions_ack::set_has_fashions_p_wearing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_all_fashions_ack::clear_has_fashions_p_wearing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_all_fashions_ack::clear_fashions_p_wearing() {
  if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
  clear_has_fashions_p_wearing();
}
inline const ::SProtoSpace::fashions_pack& get_all_fashions_ack::fashions_p_wearing() const {
  return fashions_p_wearing_ != NULL ? *fashions_p_wearing_ : *default_instance_->fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* get_all_fashions_ack::mutable_fashions_p_wearing() {
  set_has_fashions_p_wearing();
  if (fashions_p_wearing_ == NULL) fashions_p_wearing_ = new ::SProtoSpace::fashions_pack;
  return fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* get_all_fashions_ack::release_fashions_p_wearing() {
  clear_has_fashions_p_wearing();
  ::SProtoSpace::fashions_pack* temp = fashions_p_wearing_;
  fashions_p_wearing_ = NULL;
  return temp;
}
inline void get_all_fashions_ack::set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing) {
  delete fashions_p_wearing_;
  fashions_p_wearing_ = fashions_p_wearing;
  if (fashions_p_wearing) {
    set_has_fashions_p_wearing();
  } else {
    clear_has_fashions_p_wearing();
  }
}

// optional .SProtoSpace.fashions_pack fashions_p_wardrobe = 3;
inline bool get_all_fashions_ack::has_fashions_p_wardrobe() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_all_fashions_ack::set_has_fashions_p_wardrobe() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_all_fashions_ack::clear_has_fashions_p_wardrobe() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_all_fashions_ack::clear_fashions_p_wardrobe() {
  if (fashions_p_wardrobe_ != NULL) fashions_p_wardrobe_->::SProtoSpace::fashions_pack::Clear();
  clear_has_fashions_p_wardrobe();
}
inline const ::SProtoSpace::fashions_pack& get_all_fashions_ack::fashions_p_wardrobe() const {
  return fashions_p_wardrobe_ != NULL ? *fashions_p_wardrobe_ : *default_instance_->fashions_p_wardrobe_;
}
inline ::SProtoSpace::fashions_pack* get_all_fashions_ack::mutable_fashions_p_wardrobe() {
  set_has_fashions_p_wardrobe();
  if (fashions_p_wardrobe_ == NULL) fashions_p_wardrobe_ = new ::SProtoSpace::fashions_pack;
  return fashions_p_wardrobe_;
}
inline ::SProtoSpace::fashions_pack* get_all_fashions_ack::release_fashions_p_wardrobe() {
  clear_has_fashions_p_wardrobe();
  ::SProtoSpace::fashions_pack* temp = fashions_p_wardrobe_;
  fashions_p_wardrobe_ = NULL;
  return temp;
}
inline void get_all_fashions_ack::set_allocated_fashions_p_wardrobe(::SProtoSpace::fashions_pack* fashions_p_wardrobe) {
  delete fashions_p_wardrobe_;
  fashions_p_wardrobe_ = fashions_p_wardrobe;
  if (fashions_p_wardrobe) {
    set_has_fashions_p_wardrobe();
  } else {
    clear_has_fashions_p_wardrobe();
  }
}

// optional .SProtoSpace.MsgErrorType error_code = 4;
inline bool get_all_fashions_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void get_all_fashions_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void get_all_fashions_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void get_all_fashions_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType get_all_fashions_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void get_all_fashions_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// wear_fashions_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_req_id];
inline bool wear_fashions_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wear_fashions_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wear_fashions_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wear_fashions_req::clear_protoid() {
  protoid_ = 7457;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID wear_fashions_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void wear_fashions_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 uuid_s = 2;
inline int wear_fashions_req::uuid_s_size() const {
  return uuid_s_.size();
}
inline void wear_fashions_req::clear_uuid_s() {
  uuid_s_.Clear();
}
inline ::google::protobuf::uint64 wear_fashions_req::uuid_s(int index) const {
  return uuid_s_.Get(index);
}
inline void wear_fashions_req::set_uuid_s(int index, ::google::protobuf::uint64 value) {
  uuid_s_.Set(index, value);
}
inline void wear_fashions_req::add_uuid_s(::google::protobuf::uint64 value) {
  uuid_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
wear_fashions_req::uuid_s() const {
  return uuid_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
wear_fashions_req::mutable_uuid_s() {
  return &uuid_s_;
}

// -------------------------------------------------------------------

// wear_fashions_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = wear_fashions_ack_id];
inline bool wear_fashions_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void wear_fashions_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void wear_fashions_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void wear_fashions_ack::clear_protoid() {
  protoid_ = 7458;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID wear_fashions_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void wear_fashions_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 uuid_s = 2;
inline int wear_fashions_ack::uuid_s_size() const {
  return uuid_s_.size();
}
inline void wear_fashions_ack::clear_uuid_s() {
  uuid_s_.Clear();
}
inline ::google::protobuf::uint64 wear_fashions_ack::uuid_s(int index) const {
  return uuid_s_.Get(index);
}
inline void wear_fashions_ack::set_uuid_s(int index, ::google::protobuf::uint64 value) {
  uuid_s_.Set(index, value);
}
inline void wear_fashions_ack::add_uuid_s(::google::protobuf::uint64 value) {
  uuid_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
wear_fashions_ack::uuid_s() const {
  return uuid_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
wear_fashions_ack::mutable_uuid_s() {
  return &uuid_s_;
}

// optional .SProtoSpace.MsgErrorType error_code = 3;
inline bool wear_fashions_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void wear_fashions_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void wear_fashions_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void wear_fashions_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType wear_fashions_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void wear_fashions_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// get_other_role_fashion_cs_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_req_id];
inline bool get_other_role_fashion_cs_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_other_role_fashion_cs_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_other_role_fashion_cs_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_other_role_fashion_cs_req::clear_protoid() {
  protoid_ = 7455;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_other_role_fashion_cs_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_other_role_fashion_cs_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated uint64 role_id_s = 2;
inline int get_other_role_fashion_cs_req::role_id_s_size() const {
  return role_id_s_.size();
}
inline void get_other_role_fashion_cs_req::clear_role_id_s() {
  role_id_s_.Clear();
}
inline ::google::protobuf::uint64 get_other_role_fashion_cs_req::role_id_s(int index) const {
  return role_id_s_.Get(index);
}
inline void get_other_role_fashion_cs_req::set_role_id_s(int index, ::google::protobuf::uint64 value) {
  role_id_s_.Set(index, value);
}
inline void get_other_role_fashion_cs_req::add_role_id_s(::google::protobuf::uint64 value) {
  role_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
get_other_role_fashion_cs_req::role_id_s() const {
  return role_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
get_other_role_fashion_cs_req::mutable_role_id_s() {
  return &role_id_s_;
}

// repeated string role_name_s = 3;
inline int get_other_role_fashion_cs_req::role_name_s_size() const {
  return role_name_s_.size();
}
inline void get_other_role_fashion_cs_req::clear_role_name_s() {
  role_name_s_.Clear();
}
inline const ::std::string& get_other_role_fashion_cs_req::role_name_s(int index) const {
  return role_name_s_.Get(index);
}
inline ::std::string* get_other_role_fashion_cs_req::mutable_role_name_s(int index) {
  return role_name_s_.Mutable(index);
}
inline void get_other_role_fashion_cs_req::set_role_name_s(int index, const ::std::string& value) {
  role_name_s_.Mutable(index)->assign(value);
}
inline void get_other_role_fashion_cs_req::set_role_name_s(int index, const char* value) {
  role_name_s_.Mutable(index)->assign(value);
}
inline void get_other_role_fashion_cs_req::set_role_name_s(int index, const char* value, size_t size) {
  role_name_s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* get_other_role_fashion_cs_req::add_role_name_s() {
  return role_name_s_.Add();
}
inline void get_other_role_fashion_cs_req::add_role_name_s(const ::std::string& value) {
  role_name_s_.Add()->assign(value);
}
inline void get_other_role_fashion_cs_req::add_role_name_s(const char* value) {
  role_name_s_.Add()->assign(value);
}
inline void get_other_role_fashion_cs_req::add_role_name_s(const char* value, size_t size) {
  role_name_s_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
get_other_role_fashion_cs_req::role_name_s() const {
  return role_name_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
get_other_role_fashion_cs_req::mutable_role_name_s() {
  return &role_name_s_;
}

// -------------------------------------------------------------------

// get_other_role_fashion_cs_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = get_other_role_fashion_cs_ack_id];
inline bool get_other_role_fashion_cs_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void get_other_role_fashion_cs_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void get_other_role_fashion_cs_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void get_other_role_fashion_cs_ack::clear_protoid() {
  protoid_ = 7456;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID get_other_role_fashion_cs_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void get_other_role_fashion_cs_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.fashions_pack fashions_p_wearing = 2;
inline bool get_other_role_fashion_cs_ack::has_fashions_p_wearing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void get_other_role_fashion_cs_ack::set_has_fashions_p_wearing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void get_other_role_fashion_cs_ack::clear_has_fashions_p_wearing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void get_other_role_fashion_cs_ack::clear_fashions_p_wearing() {
  if (fashions_p_wearing_ != NULL) fashions_p_wearing_->::SProtoSpace::fashions_pack::Clear();
  clear_has_fashions_p_wearing();
}
inline const ::SProtoSpace::fashions_pack& get_other_role_fashion_cs_ack::fashions_p_wearing() const {
  return fashions_p_wearing_ != NULL ? *fashions_p_wearing_ : *default_instance_->fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* get_other_role_fashion_cs_ack::mutable_fashions_p_wearing() {
  set_has_fashions_p_wearing();
  if (fashions_p_wearing_ == NULL) fashions_p_wearing_ = new ::SProtoSpace::fashions_pack;
  return fashions_p_wearing_;
}
inline ::SProtoSpace::fashions_pack* get_other_role_fashion_cs_ack::release_fashions_p_wearing() {
  clear_has_fashions_p_wearing();
  ::SProtoSpace::fashions_pack* temp = fashions_p_wearing_;
  fashions_p_wearing_ = NULL;
  return temp;
}
inline void get_other_role_fashion_cs_ack::set_allocated_fashions_p_wearing(::SProtoSpace::fashions_pack* fashions_p_wearing) {
  delete fashions_p_wearing_;
  fashions_p_wearing_ = fashions_p_wearing;
  if (fashions_p_wearing) {
    set_has_fashions_p_wearing();
  } else {
    clear_has_fashions_p_wearing();
  }
}

// optional .SProtoSpace.MsgErrorType error_code = 3;
inline bool get_other_role_fashion_cs_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void get_other_role_fashion_cs_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void get_other_role_fashion_cs_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void get_other_role_fashion_cs_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType get_other_role_fashion_cs_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void get_other_role_fashion_cs_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// verify_config_version_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_req_id];
inline bool verify_config_version_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_config_version_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_config_version_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_config_version_req::clear_protoid() {
  protoid_ = 5070;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID verify_config_version_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void verify_config_version_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 version = 2;
inline bool verify_config_version_req::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_config_version_req::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_config_version_req::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_config_version_req::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 verify_config_version_req::version() const {
  return version_;
}
inline void verify_config_version_req::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// -------------------------------------------------------------------

// verify_config_version_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = verify_config_version_ack_id];
inline bool verify_config_version_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void verify_config_version_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void verify_config_version_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void verify_config_version_ack::clear_protoid() {
  protoid_ = 5071;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID verify_config_version_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void verify_config_version_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 version = 2;
inline bool verify_config_version_ack::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void verify_config_version_ack::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void verify_config_version_ack::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void verify_config_version_ack::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 verify_config_version_ack::version() const {
  return version_;
}
inline void verify_config_version_ack::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
}

// optional .SProtoSpace.MsgErrorType error_code = 3;
inline bool verify_config_version_ack::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void verify_config_version_ack::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void verify_config_version_ack::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void verify_config_version_ack::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::SProtoSpace::MsgErrorType verify_config_version_ack::error_code() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_code_);
}
inline void verify_config_version_ack::set_error_code(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// debug_hero_attr_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = debug_hero_attr_ntf_id];
inline bool debug_hero_attr_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void debug_hero_attr_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void debug_hero_attr_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void debug_hero_attr_ntf::clear_protoid() {
  protoid_ = 7700;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID debug_hero_attr_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void debug_hero_attr_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional uint64 uuid = 2;
inline bool debug_hero_attr_ntf::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void debug_hero_attr_ntf::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void debug_hero_attr_ntf::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void debug_hero_attr_ntf::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 debug_hero_attr_ntf::uuid() const {
  return uuid_;
}
inline void debug_hero_attr_ntf::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// repeated string types = 3;
inline int debug_hero_attr_ntf::types_size() const {
  return types_.size();
}
inline void debug_hero_attr_ntf::clear_types() {
  types_.Clear();
}
inline const ::std::string& debug_hero_attr_ntf::types(int index) const {
  return types_.Get(index);
}
inline ::std::string* debug_hero_attr_ntf::mutable_types(int index) {
  return types_.Mutable(index);
}
inline void debug_hero_attr_ntf::set_types(int index, const ::std::string& value) {
  types_.Mutable(index)->assign(value);
}
inline void debug_hero_attr_ntf::set_types(int index, const char* value) {
  types_.Mutable(index)->assign(value);
}
inline void debug_hero_attr_ntf::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* debug_hero_attr_ntf::add_types() {
  return types_.Add();
}
inline void debug_hero_attr_ntf::add_types(const ::std::string& value) {
  types_.Add()->assign(value);
}
inline void debug_hero_attr_ntf::add_types(const char* value) {
  types_.Add()->assign(value);
}
inline void debug_hero_attr_ntf::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
debug_hero_attr_ntf::types() const {
  return types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
debug_hero_attr_ntf::mutable_types() {
  return &types_;
}

// repeated string values = 4;
inline int debug_hero_attr_ntf::values_size() const {
  return values_.size();
}
inline void debug_hero_attr_ntf::clear_values() {
  values_.Clear();
}
inline const ::std::string& debug_hero_attr_ntf::values(int index) const {
  return values_.Get(index);
}
inline ::std::string* debug_hero_attr_ntf::mutable_values(int index) {
  return values_.Mutable(index);
}
inline void debug_hero_attr_ntf::set_values(int index, const ::std::string& value) {
  values_.Mutable(index)->assign(value);
}
inline void debug_hero_attr_ntf::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
}
inline void debug_hero_attr_ntf::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* debug_hero_attr_ntf::add_values() {
  return values_.Add();
}
inline void debug_hero_attr_ntf::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
}
inline void debug_hero_attr_ntf::add_values(const char* value) {
  values_.Add()->assign(value);
}
inline void debug_hero_attr_ntf::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
debug_hero_attr_ntf::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
debug_hero_attr_ntf::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// waiting_in_line_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = waiting_in_line_ntf_id];
inline bool waiting_in_line_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void waiting_in_line_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void waiting_in_line_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void waiting_in_line_ntf::clear_protoid() {
  protoid_ = 5080;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID waiting_in_line_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void waiting_in_line_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 wait_pos = 2;
inline bool waiting_in_line_ntf::has_wait_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void waiting_in_line_ntf::set_has_wait_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void waiting_in_line_ntf::clear_has_wait_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void waiting_in_line_ntf::clear_wait_pos() {
  wait_pos_ = 0;
  clear_has_wait_pos();
}
inline ::google::protobuf::int32 waiting_in_line_ntf::wait_pos() const {
  return wait_pos_;
}
inline void waiting_in_line_ntf::set_wait_pos(::google::protobuf::int32 value) {
  set_has_wait_pos();
  wait_pos_ = value;
}

// optional int32 left_mins = 3;
inline bool waiting_in_line_ntf::has_left_mins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void waiting_in_line_ntf::set_has_left_mins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void waiting_in_line_ntf::clear_has_left_mins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void waiting_in_line_ntf::clear_left_mins() {
  left_mins_ = 0;
  clear_has_left_mins();
}
inline ::google::protobuf::int32 waiting_in_line_ntf::left_mins() const {
  return left_mins_;
}
inline void waiting_in_line_ntf::set_left_mins(::google::protobuf::int32 value) {
  set_has_left_mins();
  left_mins_ = value;
}

// -------------------------------------------------------------------

// finish_in_line_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = finish_in_line_ntf_id];
inline bool finish_in_line_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void finish_in_line_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void finish_in_line_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void finish_in_line_ntf::clear_protoid() {
  protoid_ = 5081;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID finish_in_line_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void finish_in_line_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 tm = 2;
inline bool finish_in_line_ntf::has_tm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void finish_in_line_ntf::set_has_tm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void finish_in_line_ntf::clear_has_tm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void finish_in_line_ntf::clear_tm() {
  tm_ = 0;
  clear_has_tm();
}
inline ::google::protobuf::int32 finish_in_line_ntf::tm() const {
  return tm_;
}
inline void finish_in_line_ntf::set_tm(::google::protobuf::int32 value) {
  set_has_tm();
  tm_ = value;
}

// -------------------------------------------------------------------

// exit_waiting_in_line_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_req_id];
inline bool exit_waiting_in_line_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_waiting_in_line_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_waiting_in_line_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_waiting_in_line_req::clear_protoid() {
  protoid_ = 5087;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID exit_waiting_in_line_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void exit_waiting_in_line_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// exit_waiting_in_line_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = exit_waiting_in_line_ack_id];
inline bool exit_waiting_in_line_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void exit_waiting_in_line_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void exit_waiting_in_line_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void exit_waiting_in_line_ack::clear_protoid() {
  protoid_ = 5088;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID exit_waiting_in_line_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void exit_waiting_in_line_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool exit_waiting_in_line_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void exit_waiting_in_line_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void exit_waiting_in_line_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void exit_waiting_in_line_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 exit_waiting_in_line_ack::ret() const {
  return ret_;
}
inline void exit_waiting_in_line_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// user_event_track_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = user_event_track_ntf_id];
inline bool user_event_track_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void user_event_track_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void user_event_track_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void user_event_track_ntf::clear_protoid() {
  protoid_ = 7820;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID user_event_track_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void user_event_track_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.EUserEventTrackType type = 2;
inline bool user_event_track_ntf::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void user_event_track_ntf::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void user_event_track_ntf::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void user_event_track_ntf::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SProtoSpace::EUserEventTrackType user_event_track_ntf::type() const {
  return static_cast< ::SProtoSpace::EUserEventTrackType >(type_);
}
inline void user_event_track_ntf::set_type(::SProtoSpace::EUserEventTrackType value) {
  assert(::SProtoSpace::EUserEventTrackType_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated sint32 int_data_s = 3;
inline int user_event_track_ntf::int_data_s_size() const {
  return int_data_s_.size();
}
inline void user_event_track_ntf::clear_int_data_s() {
  int_data_s_.Clear();
}
inline ::google::protobuf::int32 user_event_track_ntf::int_data_s(int index) const {
  return int_data_s_.Get(index);
}
inline void user_event_track_ntf::set_int_data_s(int index, ::google::protobuf::int32 value) {
  int_data_s_.Set(index, value);
}
inline void user_event_track_ntf::add_int_data_s(::google::protobuf::int32 value) {
  int_data_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
user_event_track_ntf::int_data_s() const {
  return int_data_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
user_event_track_ntf::mutable_int_data_s() {
  return &int_data_s_;
}

// repeated string str_data_s = 4;
inline int user_event_track_ntf::str_data_s_size() const {
  return str_data_s_.size();
}
inline void user_event_track_ntf::clear_str_data_s() {
  str_data_s_.Clear();
}
inline const ::std::string& user_event_track_ntf::str_data_s(int index) const {
  return str_data_s_.Get(index);
}
inline ::std::string* user_event_track_ntf::mutable_str_data_s(int index) {
  return str_data_s_.Mutable(index);
}
inline void user_event_track_ntf::set_str_data_s(int index, const ::std::string& value) {
  str_data_s_.Mutable(index)->assign(value);
}
inline void user_event_track_ntf::set_str_data_s(int index, const char* value) {
  str_data_s_.Mutable(index)->assign(value);
}
inline void user_event_track_ntf::set_str_data_s(int index, const char* value, size_t size) {
  str_data_s_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* user_event_track_ntf::add_str_data_s() {
  return str_data_s_.Add();
}
inline void user_event_track_ntf::add_str_data_s(const ::std::string& value) {
  str_data_s_.Add()->assign(value);
}
inline void user_event_track_ntf::add_str_data_s(const char* value) {
  str_data_s_.Add()->assign(value);
}
inline void user_event_track_ntf::add_str_data_s(const char* value, size_t size) {
  str_data_s_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
user_event_track_ntf::str_data_s() const {
  return str_data_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
user_event_track_ntf::mutable_str_data_s() {
  return &str_data_s_;
}

// -------------------------------------------------------------------

// role_guide_info

// optional int32 guide_id = 1;
inline bool role_guide_info::has_guide_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_guide_info::set_has_guide_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_guide_info::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_guide_info::clear_guide_id() {
  guide_id_ = 0;
  clear_has_guide_id();
}
inline ::google::protobuf::int32 role_guide_info::guide_id() const {
  return guide_id_;
}
inline void role_guide_info::set_guide_id(::google::protobuf::int32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// repeated int32 step_ids = 2;
inline int role_guide_info::step_ids_size() const {
  return step_ids_.size();
}
inline void role_guide_info::clear_step_ids() {
  step_ids_.Clear();
}
inline ::google::protobuf::int32 role_guide_info::step_ids(int index) const {
  return step_ids_.Get(index);
}
inline void role_guide_info::set_step_ids(int index, ::google::protobuf::int32 value) {
  step_ids_.Set(index, value);
}
inline void role_guide_info::add_step_ids(::google::protobuf::int32 value) {
  step_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_guide_info::step_ids() const {
  return step_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_guide_info::mutable_step_ids() {
  return &step_ids_;
}

// -------------------------------------------------------------------

// role_guide_ntf

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ntf_id];
inline bool role_guide_ntf::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_guide_ntf::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_guide_ntf::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_guide_ntf::clear_protoid() {
  protoid_ = 5082;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_guide_ntf::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_guide_ntf::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional bool pass_all = 2;
inline bool role_guide_ntf::has_pass_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_guide_ntf::set_has_pass_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_guide_ntf::clear_has_pass_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_guide_ntf::clear_pass_all() {
  pass_all_ = false;
  clear_has_pass_all();
}
inline bool role_guide_ntf::pass_all() const {
  return pass_all_;
}
inline void role_guide_ntf::set_pass_all(bool value) {
  set_has_pass_all();
  pass_all_ = value;
}

// repeated .SProtoSpace.role_guide_info guide_data = 3;
inline int role_guide_ntf::guide_data_size() const {
  return guide_data_.size();
}
inline void role_guide_ntf::clear_guide_data() {
  guide_data_.Clear();
}
inline const ::SProtoSpace::role_guide_info& role_guide_ntf::guide_data(int index) const {
  return guide_data_.Get(index);
}
inline ::SProtoSpace::role_guide_info* role_guide_ntf::mutable_guide_data(int index) {
  return guide_data_.Mutable(index);
}
inline ::SProtoSpace::role_guide_info* role_guide_ntf::add_guide_data() {
  return guide_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_guide_info >&
role_guide_ntf::guide_data() const {
  return guide_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::role_guide_info >*
role_guide_ntf::mutable_guide_data() {
  return &guide_data_;
}

// repeated int32 guide_ids = 4;
inline int role_guide_ntf::guide_ids_size() const {
  return guide_ids_.size();
}
inline void role_guide_ntf::clear_guide_ids() {
  guide_ids_.Clear();
}
inline ::google::protobuf::int32 role_guide_ntf::guide_ids(int index) const {
  return guide_ids_.Get(index);
}
inline void role_guide_ntf::set_guide_ids(int index, ::google::protobuf::int32 value) {
  guide_ids_.Set(index, value);
}
inline void role_guide_ntf::add_guide_ids(::google::protobuf::int32 value) {
  guide_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
role_guide_ntf::guide_ids() const {
  return guide_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
role_guide_ntf::mutable_guide_ids() {
  return &guide_ids_;
}

// -------------------------------------------------------------------

// role_guide_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_req_id];
inline bool role_guide_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_guide_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_guide_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_guide_req::clear_protoid() {
  protoid_ = 5083;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_guide_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_guide_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 guide_id = 2;
inline bool role_guide_req::has_guide_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_guide_req::set_has_guide_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_guide_req::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_guide_req::clear_guide_id() {
  guide_id_ = 0;
  clear_has_guide_id();
}
inline ::google::protobuf::int32 role_guide_req::guide_id() const {
  return guide_id_;
}
inline void role_guide_req::set_guide_id(::google::protobuf::int32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// optional int32 step_id = 3;
inline bool role_guide_req::has_step_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_guide_req::set_has_step_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_guide_req::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_guide_req::clear_step_id() {
  step_id_ = 0;
  clear_has_step_id();
}
inline ::google::protobuf::int32 role_guide_req::step_id() const {
  return step_id_;
}
inline void role_guide_req::set_step_id(::google::protobuf::int32 value) {
  set_has_step_id();
  step_id_ = value;
}

// optional bool skip = 4;
inline bool role_guide_req::has_skip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_guide_req::set_has_skip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_guide_req::clear_has_skip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_guide_req::clear_skip() {
  skip_ = false;
  clear_has_skip();
}
inline bool role_guide_req::skip() const {
  return skip_;
}
inline void role_guide_req::set_skip(bool value) {
  set_has_skip();
  skip_ = value;
}

// optional bool cur_guide_pass = 5;
inline bool role_guide_req::has_cur_guide_pass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_guide_req::set_has_cur_guide_pass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_guide_req::clear_has_cur_guide_pass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_guide_req::clear_cur_guide_pass() {
  cur_guide_pass_ = false;
  clear_has_cur_guide_pass();
}
inline bool role_guide_req::cur_guide_pass() const {
  return cur_guide_pass_;
}
inline void role_guide_req::set_cur_guide_pass(bool value) {
  set_has_cur_guide_pass();
  cur_guide_pass_ = value;
}

// -------------------------------------------------------------------

// role_guide_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = role_guide_ack_id];
inline bool role_guide_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_guide_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_guide_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_guide_ack::clear_protoid() {
  protoid_ = 5084;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID role_guide_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void role_guide_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 guide_id = 2;
inline bool role_guide_ack::has_guide_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_guide_ack::set_has_guide_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_guide_ack::clear_has_guide_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_guide_ack::clear_guide_id() {
  guide_id_ = 0;
  clear_has_guide_id();
}
inline ::google::protobuf::int32 role_guide_ack::guide_id() const {
  return guide_id_;
}
inline void role_guide_ack::set_guide_id(::google::protobuf::int32 value) {
  set_has_guide_id();
  guide_id_ = value;
}

// optional int32 step_id = 3;
inline bool role_guide_ack::has_step_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_guide_ack::set_has_step_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_guide_ack::clear_has_step_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_guide_ack::clear_step_id() {
  step_id_ = 0;
  clear_has_step_id();
}
inline ::google::protobuf::int32 role_guide_ack::step_id() const {
  return step_id_;
}
inline void role_guide_ack::set_step_id(::google::protobuf::int32 value) {
  set_has_step_id();
  step_id_ = value;
}

// optional int32 ret = 4;
inline bool role_guide_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_guide_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_guide_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_guide_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 role_guide_ack::ret() const {
  return ret_;
}
inline void role_guide_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// onekey_skip_guide_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_req_id];
inline bool onekey_skip_guide_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void onekey_skip_guide_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void onekey_skip_guide_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void onekey_skip_guide_req::clear_protoid() {
  protoid_ = 5085;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID onekey_skip_guide_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void onekey_skip_guide_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// -------------------------------------------------------------------

// onekey_skip_guide_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = onekey_skip_guide_ack_id];
inline bool onekey_skip_guide_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void onekey_skip_guide_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void onekey_skip_guide_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void onekey_skip_guide_ack::clear_protoid() {
  protoid_ = 5086;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID onekey_skip_guide_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void onekey_skip_guide_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 ret = 2;
inline bool onekey_skip_guide_ack::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void onekey_skip_guide_ack::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void onekey_skip_guide_ack::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void onekey_skip_guide_ack::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 onekey_skip_guide_ack::ret() const {
  return ret_;
}
inline void onekey_skip_guide_ack::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// plot_little_game_set_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_req_id];
inline bool plot_little_game_set_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_little_game_set_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_little_game_set_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_little_game_set_req::clear_protoid() {
  protoid_ = 7850;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_little_game_set_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_little_game_set_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 cfg_id = 2;
inline bool plot_little_game_set_req::has_cfg_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_little_game_set_req::set_has_cfg_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_little_game_set_req::clear_has_cfg_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_little_game_set_req::clear_cfg_id() {
  cfg_id_ = 0;
  clear_has_cfg_id();
}
inline ::google::protobuf::int32 plot_little_game_set_req::cfg_id() const {
  return cfg_id_;
}
inline void plot_little_game_set_req::set_cfg_id(::google::protobuf::int32 value) {
  set_has_cfg_id();
  cfg_id_ = value;
}

// optional int32 state = 3;
inline bool plot_little_game_set_req::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plot_little_game_set_req::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plot_little_game_set_req::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plot_little_game_set_req::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 plot_little_game_set_req::state() const {
  return state_;
}
inline void plot_little_game_set_req::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// plot_little_game_set_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_set_ack_id];
inline bool plot_little_game_set_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_little_game_set_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_little_game_set_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_little_game_set_ack::clear_protoid() {
  protoid_ = 7851;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_little_game_set_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_little_game_set_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.MsgErrorType error = 2;
inline bool plot_little_game_set_ack::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_little_game_set_ack::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_little_game_set_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_little_game_set_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType plot_little_game_set_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void plot_little_game_set_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// plot_little_game_get_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_req_id];
inline bool plot_little_game_get_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_little_game_get_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_little_game_get_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_little_game_get_req::clear_protoid() {
  protoid_ = 7852;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_little_game_get_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_little_game_get_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 cfg_id_s = 2;
inline int plot_little_game_get_req::cfg_id_s_size() const {
  return cfg_id_s_.size();
}
inline void plot_little_game_get_req::clear_cfg_id_s() {
  cfg_id_s_.Clear();
}
inline ::google::protobuf::int32 plot_little_game_get_req::cfg_id_s(int index) const {
  return cfg_id_s_.Get(index);
}
inline void plot_little_game_get_req::set_cfg_id_s(int index, ::google::protobuf::int32 value) {
  cfg_id_s_.Set(index, value);
}
inline void plot_little_game_get_req::add_cfg_id_s(::google::protobuf::int32 value) {
  cfg_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
plot_little_game_get_req::cfg_id_s() const {
  return cfg_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
plot_little_game_get_req::mutable_cfg_id_s() {
  return &cfg_id_s_;
}

// -------------------------------------------------------------------

// plot_little_game_get_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = plot_little_game_get_ack_id];
inline bool plot_little_game_get_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void plot_little_game_get_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void plot_little_game_get_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void plot_little_game_get_ack::clear_protoid() {
  protoid_ = 7853;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID plot_little_game_get_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void plot_little_game_get_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.pack_plot_little_game pack = 2;
inline bool plot_little_game_get_ack::has_pack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void plot_little_game_get_ack::set_has_pack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void plot_little_game_get_ack::clear_has_pack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void plot_little_game_get_ack::clear_pack() {
  if (pack_ != NULL) pack_->::SProtoSpace::pack_plot_little_game::Clear();
  clear_has_pack();
}
inline const ::SProtoSpace::pack_plot_little_game& plot_little_game_get_ack::pack() const {
  return pack_ != NULL ? *pack_ : *default_instance_->pack_;
}
inline ::SProtoSpace::pack_plot_little_game* plot_little_game_get_ack::mutable_pack() {
  set_has_pack();
  if (pack_ == NULL) pack_ = new ::SProtoSpace::pack_plot_little_game;
  return pack_;
}
inline ::SProtoSpace::pack_plot_little_game* plot_little_game_get_ack::release_pack() {
  clear_has_pack();
  ::SProtoSpace::pack_plot_little_game* temp = pack_;
  pack_ = NULL;
  return temp;
}
inline void plot_little_game_get_ack::set_allocated_pack(::SProtoSpace::pack_plot_little_game* pack) {
  delete pack_;
  pack_ = pack;
  if (pack) {
    set_has_pack();
  } else {
    clear_has_pack();
  }
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool plot_little_game_get_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void plot_little_game_get_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void plot_little_game_get_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void plot_little_game_get_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType plot_little_game_get_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void plot_little_game_get_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// pet_get_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_req_id];
inline bool pet_get_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_get_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_get_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_get_req::clear_protoid() {
  protoid_ = 7860;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_get_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_get_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// repeated int32 ask_pet_id_s = 2;
inline int pet_get_req::ask_pet_id_s_size() const {
  return ask_pet_id_s_.size();
}
inline void pet_get_req::clear_ask_pet_id_s() {
  ask_pet_id_s_.Clear();
}
inline ::google::protobuf::int32 pet_get_req::ask_pet_id_s(int index) const {
  return ask_pet_id_s_.Get(index);
}
inline void pet_get_req::set_ask_pet_id_s(int index, ::google::protobuf::int32 value) {
  ask_pet_id_s_.Set(index, value);
}
inline void pet_get_req::add_ask_pet_id_s(::google::protobuf::int32 value) {
  ask_pet_id_s_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
pet_get_req::ask_pet_id_s() const {
  return ask_pet_id_s_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
pet_get_req::mutable_ask_pet_id_s() {
  return &ask_pet_id_s_;
}

// -------------------------------------------------------------------

// pet_get_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_ack_id];
inline bool pet_get_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_get_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_get_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_get_ack::clear_protoid() {
  protoid_ = 7861;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_get_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_get_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional .SProtoSpace.pet_pack_data pet_pack = 2;
inline bool pet_get_ack::has_pet_pack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_get_ack::set_has_pet_pack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_get_ack::clear_has_pet_pack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_get_ack::clear_pet_pack() {
  if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
  clear_has_pet_pack();
}
inline const ::SProtoSpace::pet_pack_data& pet_get_ack::pet_pack() const {
  return pet_pack_ != NULL ? *pet_pack_ : *default_instance_->pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_get_ack::mutable_pet_pack() {
  set_has_pet_pack();
  if (pet_pack_ == NULL) pet_pack_ = new ::SProtoSpace::pet_pack_data;
  return pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_get_ack::release_pet_pack() {
  clear_has_pet_pack();
  ::SProtoSpace::pet_pack_data* temp = pet_pack_;
  pet_pack_ = NULL;
  return temp;
}
inline void pet_get_ack::set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack) {
  delete pet_pack_;
  pet_pack_ = pet_pack;
  if (pet_pack) {
    set_has_pet_pack();
  } else {
    clear_has_pet_pack();
  }
}

// optional int32 cur_show_pet_id = 3;
inline bool pet_get_ack::has_cur_show_pet_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_get_ack::set_has_cur_show_pet_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_get_ack::clear_has_cur_show_pet_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_get_ack::clear_cur_show_pet_id() {
  cur_show_pet_id_ = 0;
  clear_has_cur_show_pet_id();
}
inline ::google::protobuf::int32 pet_get_ack::cur_show_pet_id() const {
  return cur_show_pet_id_;
}
inline void pet_get_ack::set_cur_show_pet_id(::google::protobuf::int32 value) {
  set_has_cur_show_pet_id();
  cur_show_pet_id_ = value;
}

// optional .SProtoSpace.MsgErrorType error = 4;
inline bool pet_get_ack::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_get_ack::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_get_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_get_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_get_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_get_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// pet_change_name_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_req_id];
inline bool pet_change_name_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_change_name_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_change_name_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_change_name_req::clear_protoid() {
  protoid_ = 7862;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_change_name_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_change_name_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_change_name_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_change_name_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_change_name_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_change_name_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_change_name_req::pet_id() const {
  return pet_id_;
}
inline void pet_change_name_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional string new_name = 3;
inline bool pet_change_name_req::has_new_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_change_name_req::set_has_new_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_change_name_req::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_change_name_req::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& pet_change_name_req::new_name() const {
  return *new_name_;
}
inline void pet_change_name_req::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void pet_change_name_req::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void pet_change_name_req::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_change_name_req::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* pet_change_name_req::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_change_name_req::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// pet_change_name_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_change_name_ack_id];
inline bool pet_change_name_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_change_name_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_change_name_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_change_name_ack::clear_protoid() {
  protoid_ = 7863;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_change_name_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_change_name_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_change_name_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_change_name_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_change_name_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_change_name_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_change_name_ack::pet_id() const {
  return pet_id_;
}
inline void pet_change_name_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional string new_name = 3;
inline bool pet_change_name_ack::has_new_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_change_name_ack::set_has_new_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_change_name_ack::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_change_name_ack::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& pet_change_name_ack::new_name() const {
  return *new_name_;
}
inline void pet_change_name_ack::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void pet_change_name_ack::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void pet_change_name_ack::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* pet_change_name_ack::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* pet_change_name_ack::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void pet_change_name_ack::set_allocated_new_name(::std::string* new_name) {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (new_name) {
    set_has_new_name();
    new_name_ = new_name;
  } else {
    clear_has_new_name();
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .SProtoSpace.MsgErrorType error = 4;
inline bool pet_change_name_ack::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_change_name_ack::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_change_name_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_change_name_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_change_name_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_change_name_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// pet_do_action_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_req_id];
inline bool pet_do_action_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_do_action_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_do_action_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_do_action_req::clear_protoid() {
  protoid_ = 7864;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_do_action_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_do_action_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 action_id = 2;
inline bool pet_do_action_req::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_do_action_req::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_do_action_req::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_do_action_req::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 pet_do_action_req::action_id() const {
  return action_id_;
}
inline void pet_do_action_req::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// optional int32 pet_id = 3;
inline bool pet_do_action_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_do_action_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_do_action_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_do_action_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_do_action_req::pet_id() const {
  return pet_id_;
}
inline void pet_do_action_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// pet_do_action_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_do_action_ack_id];
inline bool pet_do_action_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_do_action_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_do_action_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_do_action_ack::clear_protoid() {
  protoid_ = 7865;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_do_action_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_do_action_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 action_id = 2;
inline bool pet_do_action_ack::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_do_action_ack::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_do_action_ack::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_do_action_ack::clear_action_id() {
  action_id_ = 0;
  clear_has_action_id();
}
inline ::google::protobuf::int32 pet_do_action_ack::action_id() const {
  return action_id_;
}
inline void pet_do_action_ack::set_action_id(::google::protobuf::int32 value) {
  set_has_action_id();
  action_id_ = value;
}

// optional int32 pet_id = 3;
inline bool pet_do_action_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_do_action_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_do_action_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_do_action_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_do_action_ack::pet_id() const {
  return pet_id_;
}
inline void pet_do_action_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .SProtoSpace.pet_pack_data pet_pack = 4;
inline bool pet_do_action_ack::has_pet_pack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_do_action_ack::set_has_pet_pack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_do_action_ack::clear_has_pet_pack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_do_action_ack::clear_pet_pack() {
  if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
  clear_has_pet_pack();
}
inline const ::SProtoSpace::pet_pack_data& pet_do_action_ack::pet_pack() const {
  return pet_pack_ != NULL ? *pet_pack_ : *default_instance_->pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_do_action_ack::mutable_pet_pack() {
  set_has_pet_pack();
  if (pet_pack_ == NULL) pet_pack_ = new ::SProtoSpace::pet_pack_data;
  return pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_do_action_ack::release_pet_pack() {
  clear_has_pet_pack();
  ::SProtoSpace::pet_pack_data* temp = pet_pack_;
  pet_pack_ = NULL;
  return temp;
}
inline void pet_do_action_ack::set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack) {
  delete pet_pack_;
  pet_pack_ = pet_pack;
  if (pet_pack) {
    set_has_pet_pack();
  } else {
    clear_has_pet_pack();
  }
}

// optional .SProtoSpace.MsgErrorType error = 5;
inline bool pet_do_action_ack::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_do_action_ack::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_do_action_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_do_action_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_do_action_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_do_action_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// pet_send_out_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_req_id];
inline bool pet_send_out_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_send_out_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_send_out_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_send_out_req::clear_protoid() {
  protoid_ = 7866;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_send_out_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_send_out_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 out_id = 2;
inline bool pet_send_out_req::has_out_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_send_out_req::set_has_out_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_send_out_req::clear_has_out_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_send_out_req::clear_out_id() {
  out_id_ = 0;
  clear_has_out_id();
}
inline ::google::protobuf::int32 pet_send_out_req::out_id() const {
  return out_id_;
}
inline void pet_send_out_req::set_out_id(::google::protobuf::int32 value) {
  set_has_out_id();
  out_id_ = value;
}

// optional int32 pet_id = 3;
inline bool pet_send_out_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_send_out_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_send_out_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_send_out_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_send_out_req::pet_id() const {
  return pet_id_;
}
inline void pet_send_out_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// pet_send_out_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_send_out_ack_id];
inline bool pet_send_out_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_send_out_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_send_out_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_send_out_ack::clear_protoid() {
  protoid_ = 7867;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_send_out_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_send_out_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 out_id = 2;
inline bool pet_send_out_ack::has_out_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_send_out_ack::set_has_out_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_send_out_ack::clear_has_out_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_send_out_ack::clear_out_id() {
  out_id_ = 0;
  clear_has_out_id();
}
inline ::google::protobuf::int32 pet_send_out_ack::out_id() const {
  return out_id_;
}
inline void pet_send_out_ack::set_out_id(::google::protobuf::int32 value) {
  set_has_out_id();
  out_id_ = value;
}

// optional int32 pet_id = 3;
inline bool pet_send_out_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_send_out_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_send_out_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_send_out_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_send_out_ack::pet_id() const {
  return pet_id_;
}
inline void pet_send_out_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .SProtoSpace.pet_pack_data pet_pack = 4;
inline bool pet_send_out_ack::has_pet_pack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_send_out_ack::set_has_pet_pack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_send_out_ack::clear_has_pet_pack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_send_out_ack::clear_pet_pack() {
  if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
  clear_has_pet_pack();
}
inline const ::SProtoSpace::pet_pack_data& pet_send_out_ack::pet_pack() const {
  return pet_pack_ != NULL ? *pet_pack_ : *default_instance_->pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_send_out_ack::mutable_pet_pack() {
  set_has_pet_pack();
  if (pet_pack_ == NULL) pet_pack_ = new ::SProtoSpace::pet_pack_data;
  return pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_send_out_ack::release_pet_pack() {
  clear_has_pet_pack();
  ::SProtoSpace::pet_pack_data* temp = pet_pack_;
  pet_pack_ = NULL;
  return temp;
}
inline void pet_send_out_ack::set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack) {
  delete pet_pack_;
  pet_pack_ = pet_pack;
  if (pet_pack) {
    set_has_pet_pack();
  } else {
    clear_has_pet_pack();
  }
}

// optional .SProtoSpace.MsgErrorType error = 5;
inline bool pet_send_out_ack::has_error() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_send_out_ack::set_has_error() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_send_out_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_send_out_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_send_out_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_send_out_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// pet_get_out_award_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_req_id];
inline bool pet_get_out_award_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_get_out_award_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_get_out_award_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_get_out_award_req::clear_protoid() {
  protoid_ = 7868;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_get_out_award_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_get_out_award_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_get_out_award_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_get_out_award_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_get_out_award_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_get_out_award_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_get_out_award_req::pet_id() const {
  return pet_id_;
}
inline void pet_get_out_award_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// pet_get_out_award_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_get_out_award_ack_id];
inline bool pet_get_out_award_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_get_out_award_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_get_out_award_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_get_out_award_ack::clear_protoid() {
  protoid_ = 7869;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_get_out_award_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_get_out_award_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_get_out_award_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_get_out_award_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_get_out_award_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_get_out_award_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_get_out_award_ack::pet_id() const {
  return pet_id_;
}
inline void pet_get_out_award_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .SProtoSpace.pet_pack_data pet_pack = 3;
inline bool pet_get_out_award_ack::has_pet_pack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_get_out_award_ack::set_has_pet_pack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_get_out_award_ack::clear_has_pet_pack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_get_out_award_ack::clear_pet_pack() {
  if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
  clear_has_pet_pack();
}
inline const ::SProtoSpace::pet_pack_data& pet_get_out_award_ack::pet_pack() const {
  return pet_pack_ != NULL ? *pet_pack_ : *default_instance_->pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_get_out_award_ack::mutable_pet_pack() {
  set_has_pet_pack();
  if (pet_pack_ == NULL) pet_pack_ = new ::SProtoSpace::pet_pack_data;
  return pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_get_out_award_ack::release_pet_pack() {
  clear_has_pet_pack();
  ::SProtoSpace::pet_pack_data* temp = pet_pack_;
  pet_pack_ = NULL;
  return temp;
}
inline void pet_get_out_award_ack::set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack) {
  delete pet_pack_;
  pet_pack_ = pet_pack;
  if (pet_pack) {
    set_has_pet_pack();
  } else {
    clear_has_pet_pack();
  }
}

// optional .SProtoSpace.MsgErrorType error = 4;
inline bool pet_get_out_award_ack::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_get_out_award_ack::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_get_out_award_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_get_out_award_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_get_out_award_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_get_out_award_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// repeated .SProtoSpace.pet_out_event_item rand_item_s = 5;
inline int pet_get_out_award_ack::rand_item_s_size() const {
  return rand_item_s_.size();
}
inline void pet_get_out_award_ack::clear_rand_item_s() {
  rand_item_s_.Clear();
}
inline const ::SProtoSpace::pet_out_event_item& pet_get_out_award_ack::rand_item_s(int index) const {
  return rand_item_s_.Get(index);
}
inline ::SProtoSpace::pet_out_event_item* pet_get_out_award_ack::mutable_rand_item_s(int index) {
  return rand_item_s_.Mutable(index);
}
inline ::SProtoSpace::pet_out_event_item* pet_get_out_award_ack::add_rand_item_s() {
  return rand_item_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >&
pet_get_out_award_ack::rand_item_s() const {
  return rand_item_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >*
pet_get_out_award_ack::mutable_rand_item_s() {
  return &rand_item_s_;
}

// repeated .SProtoSpace.pet_out_event_item get_item_s = 6;
inline int pet_get_out_award_ack::get_item_s_size() const {
  return get_item_s_.size();
}
inline void pet_get_out_award_ack::clear_get_item_s() {
  get_item_s_.Clear();
}
inline const ::SProtoSpace::pet_out_event_item& pet_get_out_award_ack::get_item_s(int index) const {
  return get_item_s_.Get(index);
}
inline ::SProtoSpace::pet_out_event_item* pet_get_out_award_ack::mutable_get_item_s(int index) {
  return get_item_s_.Mutable(index);
}
inline ::SProtoSpace::pet_out_event_item* pet_get_out_award_ack::add_get_item_s() {
  return get_item_s_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >&
pet_get_out_award_ack::get_item_s() const {
  return get_item_s_;
}
inline ::google::protobuf::RepeatedPtrField< ::SProtoSpace::pet_out_event_item >*
pet_get_out_award_ack::mutable_get_item_s() {
  return &get_item_s_;
}

// -------------------------------------------------------------------

// pet_feed_food_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_req_id];
inline bool pet_feed_food_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_feed_food_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_feed_food_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_feed_food_req::clear_protoid() {
  protoid_ = 7870;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_feed_food_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_feed_food_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_feed_food_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_feed_food_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_feed_food_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_feed_food_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_feed_food_req::pet_id() const {
  return pet_id_;
}
inline void pet_feed_food_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional int32 item_id = 3;
inline bool pet_feed_food_req::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_feed_food_req::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_feed_food_req::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_feed_food_req::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 pet_feed_food_req::item_id() const {
  return item_id_;
}
inline void pet_feed_food_req::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// -------------------------------------------------------------------

// pet_feed_food_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_feed_food_ack_id];
inline bool pet_feed_food_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_feed_food_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_feed_food_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_feed_food_ack::clear_protoid() {
  protoid_ = 7871;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_feed_food_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_feed_food_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_feed_food_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_feed_food_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_feed_food_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_feed_food_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_feed_food_ack::pet_id() const {
  return pet_id_;
}
inline void pet_feed_food_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional int32 item_id = 3;
inline bool pet_feed_food_ack::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_feed_food_ack::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_feed_food_ack::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_feed_food_ack::clear_item_id() {
  item_id_ = 0;
  clear_has_item_id();
}
inline ::google::protobuf::int32 pet_feed_food_ack::item_id() const {
  return item_id_;
}
inline void pet_feed_food_ack::set_item_id(::google::protobuf::int32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional .SProtoSpace.MsgErrorType error = 4;
inline bool pet_feed_food_ack::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void pet_feed_food_ack::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void pet_feed_food_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void pet_feed_food_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_feed_food_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_feed_food_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// optional .SProtoSpace.pet_pack_data pet_pack = 5;
inline bool pet_feed_food_ack::has_pet_pack() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void pet_feed_food_ack::set_has_pet_pack() {
  _has_bits_[0] |= 0x00000010u;
}
inline void pet_feed_food_ack::clear_has_pet_pack() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void pet_feed_food_ack::clear_pet_pack() {
  if (pet_pack_ != NULL) pet_pack_->::SProtoSpace::pet_pack_data::Clear();
  clear_has_pet_pack();
}
inline const ::SProtoSpace::pet_pack_data& pet_feed_food_ack::pet_pack() const {
  return pet_pack_ != NULL ? *pet_pack_ : *default_instance_->pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_feed_food_ack::mutable_pet_pack() {
  set_has_pet_pack();
  if (pet_pack_ == NULL) pet_pack_ = new ::SProtoSpace::pet_pack_data;
  return pet_pack_;
}
inline ::SProtoSpace::pet_pack_data* pet_feed_food_ack::release_pet_pack() {
  clear_has_pet_pack();
  ::SProtoSpace::pet_pack_data* temp = pet_pack_;
  pet_pack_ = NULL;
  return temp;
}
inline void pet_feed_food_ack::set_allocated_pet_pack(::SProtoSpace::pet_pack_data* pet_pack) {
  delete pet_pack_;
  pet_pack_ = pet_pack;
  if (pet_pack) {
    set_has_pet_pack();
  } else {
    clear_has_pet_pack();
  }
}

// -------------------------------------------------------------------

// pet_set_show_pet_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_req_id];
inline bool pet_set_show_pet_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_set_show_pet_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_set_show_pet_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_set_show_pet_req::clear_protoid() {
  protoid_ = 7872;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_set_show_pet_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_set_show_pet_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_set_show_pet_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_set_show_pet_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_set_show_pet_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_set_show_pet_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_set_show_pet_req::pet_id() const {
  return pet_id_;
}
inline void pet_set_show_pet_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// pet_set_show_pet_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_set_show_pet_ack_id];
inline bool pet_set_show_pet_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_set_show_pet_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_set_show_pet_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_set_show_pet_ack::clear_protoid() {
  protoid_ = 7873;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_set_show_pet_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_set_show_pet_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_set_show_pet_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_set_show_pet_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_set_show_pet_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_set_show_pet_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_set_show_pet_ack::pet_id() const {
  return pet_id_;
}
inline void pet_set_show_pet_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool pet_set_show_pet_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_set_show_pet_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_set_show_pet_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_set_show_pet_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_set_show_pet_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_set_show_pet_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}

// -------------------------------------------------------------------

// pet_out_back_req

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_req_id];
inline bool pet_out_back_req::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_out_back_req::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_out_back_req::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_out_back_req::clear_protoid() {
  protoid_ = 7874;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_out_back_req::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_out_back_req::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_out_back_req::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_out_back_req::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_out_back_req::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_out_back_req::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_out_back_req::pet_id() const {
  return pet_id_;
}
inline void pet_out_back_req::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// -------------------------------------------------------------------

// pet_out_back_ack

// optional .SProtoSpace.ECSProtoID protoid = 1 [default = pet_out_back_ack_id];
inline bool pet_out_back_ack::has_protoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pet_out_back_ack::set_has_protoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pet_out_back_ack::clear_has_protoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pet_out_back_ack::clear_protoid() {
  protoid_ = 7875;
  clear_has_protoid();
}
inline ::SProtoSpace::ECSProtoID pet_out_back_ack::protoid() const {
  return static_cast< ::SProtoSpace::ECSProtoID >(protoid_);
}
inline void pet_out_back_ack::set_protoid(::SProtoSpace::ECSProtoID value) {
  assert(::SProtoSpace::ECSProtoID_IsValid(value));
  set_has_protoid();
  protoid_ = value;
}

// optional int32 pet_id = 2;
inline bool pet_out_back_ack::has_pet_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pet_out_back_ack::set_has_pet_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pet_out_back_ack::clear_has_pet_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pet_out_back_ack::clear_pet_id() {
  pet_id_ = 0;
  clear_has_pet_id();
}
inline ::google::protobuf::int32 pet_out_back_ack::pet_id() const {
  return pet_id_;
}
inline void pet_out_back_ack::set_pet_id(::google::protobuf::int32 value) {
  set_has_pet_id();
  pet_id_ = value;
}

// optional .SProtoSpace.MsgErrorType error = 3;
inline bool pet_out_back_ack::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pet_out_back_ack::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pet_out_back_ack::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pet_out_back_ack::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::SProtoSpace::MsgErrorType pet_out_back_ack::error() const {
  return static_cast< ::SProtoSpace::MsgErrorType >(error_);
}
inline void pet_out_back_ack::set_error(::SProtoSpace::MsgErrorType value) {
  assert(::SProtoSpace::MsgErrorType_IsValid(value));
  set_has_error();
  error_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SProtoSpace

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eAchievementState>() {
  return ::SProtoSpace::eAchievementState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::eDrawCardCoinType>() {
  return ::SProtoSpace::eDrawCardCoinType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EUserEventTrackType>() {
  return ::SProtoSpace::EUserEventTrackType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SProtoSpace::EGUIDE_OPENCONDI_TYPE>() {
  return ::SProtoSpace::EGUIDE_OPENCONDI_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cs_5frole_2eproto__INCLUDED
